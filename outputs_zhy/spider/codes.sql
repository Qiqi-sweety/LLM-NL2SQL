SELECT  COUNT(*) FROM singer;
SELECT  COUNT(*) FROM singer;
SELECT  Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT  Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT  AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
SELECT  AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
SELECT  Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT  Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT  DISTINCT Country FROM singer WHERE Age > 20;
SELECT  DISTINCT Country FROM singer WHERE Age > 20;
SELECT  Country, COUNT(Country) FROM singer GROUP BY Country;
SELECT  Country, COUNT(Country) FROM singer GROUP BY Country;
SELECT  Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT  Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT  Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT  Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT  MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT  AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT  "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");
SELECT  "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");
SELECT  COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT  COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT  stadium.Name, COUNT(concert.concert_ID) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT  stadium.Name, COUNT(concert.concert_ID) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT  stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.Year) DESC LIMIT 1;
SELECT  "Name", "Capacity" FROM "stadium" WHERE "Stadium_ID" = (SELECT "Stadium_ID" FROM "concert" WHERE "Year" > 2013 GROUP BY "Stadium_ID" ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  "Year" FROM "concert" GROUP BY "Year" ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT  Country FROM singer WHERE Age > 40 AND Age < 30;
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);
SELECT  concert_Name, Theme, COUNT(Singer_ID) FROM concert, singer_in_concert WHERE concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_Name, Theme;
SELECT  concert_Name, Theme, COUNT(Singer_ID) FROM concert, singer_in_concert WHERE concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_Name, Theme;
SELECT  singer.Name, COUNT(concert.concert_ID) FROM singer, concert, singer_in_concert WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name;
SELECT  singer.Name, COUNT(concert.concert_ID) FROM singer, concert, singer_in_concert WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name;
SELECT  singer.Name FROM singer, concert WHERE singer.Singer_ID = concert.Singer_ID AND concert.Year = 2014;
SELECT  singer.Name FROM singer, singer_in_concert, concert WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID AND concert.Year = 2014;
SELECT  Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT  singer.Name, singer.Country FROM singer, singer_in_concert, concert, song WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID AND concert.concert_ID = song.concert_ID AND song.Song_Name LIKE '%Hey%';
SELECT  s.Name, s.Location FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 AND c.Year = 2015;
SELECT  s.Name, s.Location FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID AND c.Year IN (2014, 2015);
SELECT  COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
SELECT  COUNT(concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
SELECT  COUNT(*) FROM Pets WHERE weight > 10;
SELECT  COUNT(*) FROM Pets WHERE weight > 10;
SELECT  weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT  weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT  PetType, MAX(weight) FROM Pets GROUP BY PetType;
SELECT  PetType, MAX(weight) FROM Pets GROUP BY PetType;
SELECT  COUNT(*) FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID AND Student.Age > 20;
SELECT  COUNT(*) FROM Pets, Has_Pet, Student WHERE Pets.PetID = Has_Pet.PetID AND Student.StuID = Has_Pet.StuID AND Student.Age > 20;
SELECT  COUNT(*) FROM Pets WHERE PetType = 'dog' AND StuID IN (SELECT StuID FROM Student WHERE Sex = 'F');
SELECT  COUNT(*) FROM Pets, Student WHERE Pets.PetType = 'dog' AND Student.Sex = 'F';
SELECT  COUNT(DISTINCT PetType) FROM Pets;
SELECT  COUNT(DISTINCT PetType) FROM Pets;
SELECT  Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType='cat' OR PetType='dog'));
SELECT  Fname FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND PetType = 'cat' OR PetType = 'dog';
SELECT  Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
SELECT  Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
SELECT  Major, Age FROM Student WHERE Major NOT IN (SELECT Major FROM Has_Pet WHERE PetType = 'cat');
SELECT  Major, Age FROM Student WHERE Major NOT IN (SELECT Major FROM Student WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT  StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT  StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT  Fname, Age FROM Student WHERE PetType = 'dog' AND PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat');
SELECT  Fname FROM Student WHERE PetType = 'dog' AND PetType!= 'cat';
SELECT  PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT  PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT  PetID, weight FROM Pets WHERE pet_age > 1;
SELECT  PetID, weight FROM Pets WHERE pet_age > 1;
SELECT  PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;
SELECT  PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;
SELECT  PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT  PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT  Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT  DISTINCT Fname, Age FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID;
SELECT  PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT  PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT  StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
SELECT  StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
SELECT  Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(StuID) > 1);
SELECT  Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(StuID) > 1);
SELECT  LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3));
SELECT  LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3));
SELECT  AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT  AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT  COUNT(DISTINCT Continent) FROM continents;
SELECT  COUNT(DISTINCT Continent) FROM continents;
SELECT  ContId, Continent, COUNT(CountryId) AS Count FROM countries GROUP BY Continent;
SELECT  ContId, Continent, COUNT(Continent) FROM continents GROUP BY Continent;
SELECT  COUNT(DISTINCT Country) FROM countries;
SELECT  COUNT(DISTINCT Country) FROM countries;
SELECT  car_makers.FullName, car_makers.Id, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT  car_makers.Id, car_makers.Maker, car_makers.FullName, COUNT(model_list.Model) AS Models FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT  Model FROM car_names WHERE Horsepower = (SELECT MIN(Horsepower) FROM car_names);
SELECT  Model FROM car_names WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT  Model FROM model_list WHERE Weight < (SELECT AVG(Weight) FROM model_list);
SELECT  Model FROM model_list WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT  DISTINCT car_makers.Maker FROM car_makers INNER JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Year = 1970;
SELECT  DISTINCT car_makers.Maker FROM car_makers INNER JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Year = 1970;
SELECT  Make, Year FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data));
SELECT  car_makers.Maker, cars_data.Year FROM car_makers INNER JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = (SELECT MIN(cars_data.Year) FROM cars_data);
SELECT  DISTINCT Model FROM car_names WHERE Year > 1980;
SELECT  DISTINCT Model FROM car_names WHERE Year > 1980;
SELECT  c.Continent, COUNT(c.Continent) FROM car_makers c GROUP BY c.Continent;
SELECT  Continent, COUNT(Maker) FROM car_makers GROUP BY Continent;
SELECT  CountryName FROM countries WHERE CountryId = (SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  CountryName FROM countries WHERE CountryId = (SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Count(Make),FullName FROM car_makers,car_names WHERE car_makers.Id=car_names.MakeId GROUP BY FullName;
SELECT  car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS 'Number of Models' FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT  Accelerate FROM cars_data WHERE Make = 'amc hornet sportabout (sw)';
SELECT  Accelerate FROM cars_data WHERE Make = 'amc hornet sportabout (sw)';
SELECT  COUNT(DISTINCT(Maker)) FROM car_makers WHERE Country = 'France';
SELECT  COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France';
SELECT  COUNT(DISTINCT Model) FROM car_names WHERE Country = 'USA';
SELECT  COUNT(DISTINCT Model) FROM car_names WHERE Make = 'United States';
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT  MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT  MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT  car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT  car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT  CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers);
SELECT  countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT  COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT  COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT  AVG(Weight) FROM cars_data;
SELECT  AVG(Weight), Year FROM cars_data GROUP BY Year;
SELECT  countries.CountryName, countries.Continent FROM countries WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Country) >= 3;
SELECT  countries.CountryName, car_makers.Maker FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName, car_makers.Maker HAVING COUNT(car_makers.Country) >= 3;
SELECT  MAX(Horsepower), Make FROM cars_data WHERE Cylinders = 3;
SELECT  MAX(Horsepower) AS Horsepower, Make FROM cars_data WHERE Cylinders = 3 GROUP BY Make;
SELECT  Model, MPG FROM cars_data ORDER BY MPG DESC LIMIT 1;
SELECT  Model FROM car_names WHERE MakeId = (SELECT MAX(MakeId) FROM cars_data);
SELECT  AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT  AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT  AVG(Edispl) FROM cars_data WHERE Model = 'volvo';
SELECT  AVG(Edispl) FROM cars_data WHERE Model = 'Volvo';
SELECT  MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT  MAX(Accelerate) FROM cars_data;
SELECT  Model, COUNT(Model) FROM car_names GROUP BY Model ORDER BY COUNT(Model) DESC LIMIT 1;
SELECT  Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT  COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT  COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT  COUNT(Model) FROM car_names WHERE Make = 'American Motor Company';
SELECT  COUNT(DISTINCT Model) FROM car_names WHERE Make = 'American Motor Company';
SELECT  c.Maker, c.FullName, c.Id FROM car_makers c, model_list m WHERE c.Id = m.Maker GROUP BY c.Id HAVING COUNT(m.Model) > 3;
SELECT  "Make", "Id" FROM car_names GROUP BY "Make" HAVING COUNT("Make") > 3;
SELECT  DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors') AND Weight > 3500;
SELECT  Model FROM model_list WHERE Maker = 1 OR Weight > 3500;
SELECT  Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT  DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT  Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT  Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT  Cylinders FROM cars_data WHERE Model = 'volvo' ORDER BY Accelerate ASC LIMIT 1;
SELECT  Cylinders FROM cars_data WHERE Model = 'Volvo' AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Model = 'Volvo');
SELECT  COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT  COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT  COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Country) > 2;
SELECT  COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Country) > 2;
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT  Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Country = (SELECT Country FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'North America'))) AND Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT  Model FROM car_names WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT  MakeId, Make FROM car_names WHERE Horsepower > (SELECT MIN(Horsepower) FROM car_names) AND Cylinders <= 3;
SELECT  MakeId, Make FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM car_names WHERE Cylinders < 4)) AND Horsepower < 4;
SELECT  MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT  MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT  Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company') AND Weight < 3500;
SELECT  Model FROM model_list WHERE Maker!= 1 AND Weight < 3500;
SELECT  CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT  CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT  c.Id, c.Maker FROM car_makers c, model_list m WHERE c.Id = m.Maker GROUP BY c.Id, c.Maker HAVING COUNT(m.Model) >= 2 AND COUNT(c.Id) > 3;
SELECT  DISTINCT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.Model) >= 2 AND COUNT(car_names.Make) > 3;
SELECT  CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Country) > 3) OR CountryId IN (SELECT Country FROM car_names WHERE Model = 'fiat');
SELECT  CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Country) > 3) OR CountryId IN (SELECT Country FROM car_names WHERE Model = 'fiat');
SELECT  Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT  Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT  Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT  Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT  Airline,Abbreviation FROM airlines WHERE Country='USA';
SELECT  Airline,Abbreviation FROM airlines WHERE Country='USA';
SELECT  AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT  AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT  COUNT(*) FROM airlines;
SELECT  COUNT(*) FROM airlines;
SELECT  COUNT(*) FROM airports;
SELECT  COUNT(*) FROM airports;
SELECT  COUNT(*) FROM flights;
SELECT  COUNT(*) FROM flights;
SELECT  Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT  * FROM airlines WHERE Abbreviation = 'UAL';
SELECT  COUNT(Airline) FROM airlines WHERE Country = 'USA';
SELECT  COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT  City, Country FROM airports WHERE AirportCode = 'ALN';
SELECT  AirportName, Country FROM airports WHERE AirportCode = 'ALN';
SELECT  AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT  AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT  AirportName FROM airports WHERE City = 'Aberdeen';
SELECT  AirportName FROM airports WHERE City = 'Aberdeen';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT  COUNT(*) FROM flights WHERE DestAirport ='ATO';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE DestAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE DestAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ASY';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ASY';
SELECT  COUNT(*) FROM flights WHERE Airline = 1;
SELECT  COUNT(*) FROM flights WHERE Airline = 1;
SELECT  COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY';
SELECT  COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY';
SELECT  COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'AHD');
SELECT  COUNT(*) FROM flights WHERE Airline = 1 AND SourceAirport = 'AHD';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ASY';
SELECT  COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'APG';
SELECT  City FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights);
SELECT  DestAirport, COUNT(DestAirport) FROM flights GROUP BY DestAirport ORDER BY COUNT(DestAirport) DESC LIMIT 1;
SELECT  SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) ORDER BY COUNT(*) LIMIT 1;
SELECT  Airline, COUNT(*) FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Airline, COUNT(Airline) FROM flights GROUP BY Airline ORDER BY COUNT(Airline) DESC LIMIT 1;
SELECT  Abbreviation, Country FROM airlines WHERE uid = (SELECT MIN(uid) FROM flights);
SELECT  Abbreviation, Country FROM airlines WHERE uid = (SELECT MIN(uid) FROM flights);
SELECT  Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT  Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT  Airline FROM flights WHERE DestAirport = 'AHD';
SELECT  Airline FROM flights WHERE DestAirport = 'AHD';
SELECT  Airline FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'CVO';
SELECT  Airline FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'CVO';
SELECT  Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport!= 'APG';
SELECT  Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport!= 'APG';
SELECT  Airline FROM flights GROUP BY Airline HAVING COUNT(Airline) >= 10;
SELECT  Airline FROM flights GROUP BY Airline HAVING COUNT(Airline) >= 10;
SELECT  Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;
SELECT  Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;
SELECT  FlightNo FROM flights WHERE Airline = 1;
SELECT  FlightNo FROM flights WHERE Airline = 1;
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT  FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT  FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'ABI';
SELECT  DISTINCT SourceAirport FROM flights WHERE SourceAirport NOT IN (SELECT DISTINCT DestAirport FROM flights);
SELECT  * FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT  COUNT(*) FROM employee;
SELECT  COUNT(*) FROM employee;
SELECT  "Name" FROM "employee" ORDER BY "Age" ASC;
SELECT  Name FROM employee ORDER BY Age ASC;
SELECT  City, COUNT(City) FROM employee GROUP BY City;
SELECT  City, COUNT(City) FROM employee GROUP BY City;
SELECT  City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT  City FROM employee WHERE Age > 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT  Location, COUNT(Location) FROM shop GROUP BY Location;
SELECT  Location, COUNT(Location) FROM shop GROUP BY Location;
SELECT  Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT  Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT  MIN(Number_products), MAX(Number_products) FROM shop;
SELECT  MIN(Number_products), MAX(Number_products) FROM shop;
SELECT  "Name", "Location", "District" FROM "shop" ORDER BY "Number_products" DESC;
SELECT  "Name", "Location", "District" FROM "shop" ORDER BY "Number_products" DESC;
SELECT  Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT  Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT  Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  e.Name FROM evaluation e, employee e2 WHERE e.Employee_ID = e2.Employee_ID GROUP BY e.Employee_ID ORDER BY SUM(e.Bonus) DESC LIMIT 1;
SELECT  Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation));
SELECT  Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation));
SELECT  Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT  Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT  shop.Name FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  shop.Name FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT  Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT  shop.Name, COUNT(employee.Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name;
SELECT  shop.Name, COUNT(employee.Name) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID LEFT JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name;
SELECT  SUM(Bonus) FROM evaluation;
SELECT  SUM(Bonus) FROM evaluation;
SELECT  * FROM hiring;
SELECT  * FROM hiring;
SELECT  District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000;
SELECT  DISTINCT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products > 10000;
SELECT  COUNT(DISTINCT Location) FROM shop;
SELECT  COUNT(DISTINCT Location) FROM shop;
SELECT  COUNT(*) FROM Documents;
SELECT  COUNT(*) FROM Documents;
SELECT  Document_ID, Document_Name, Document_Description FROM Documents;
SELECT  Document_ID, Document_Name, Document_Description FROM Documents;
SELECT  Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT  Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT  Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT  Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT  COUNT(DISTINCT Template_ID) FROM Documents;
SELECT  COUNT(DISTINCT Template_ID) FROM Documents;
SELECT  COUNT(*) FROM Templates WHERE Template_Type_Code = 'PPT';
SELECT  COUNT(*) FROM Templates WHERE Template_Type_Code = 'PPT';
SELECT  Templates.Template_ID, COUNT(Documents.Template_ID) AS Number_of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT  Templates.Template_ID, COUNT(*) AS 'Number of times used' FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT  Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Template_ID, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Template_ID) > 1;
SELECT  Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Template_ID) > 1;
SELECT  Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT  Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT  COUNT(*) FROM Templates;
SELECT  COUNT(*) FROM Templates;
SELECT  Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT  Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT  DISTINCT Template_Type_Code FROM Templates;
SELECT  Template_Type_Code FROM Ref_Template_Types;
SELECT  Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT  Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT  COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT  COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT  Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT  Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT  Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT  Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;
SELECT  Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Number_of_Templates DESC LIMIT 1;
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3);
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3);
SELECT  MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT  Template_Type_Code, MIN(Version_Number) AS Min_Version_Number FROM Templates GROUP BY Template_Type_Code;
SELECT  Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base');
SELECT  Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base');
SELECT  Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
SELECT  Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
SELECT  Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS 'Number of Templates' FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT  Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS 'Number of Templates' FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT  Template_Type_Code, COUNT(*) AS 'Number of Documents' FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates);
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates);
SELECT  * FROM Ref_Template_Types;
SELECT  * FROM Ref_Template_Types;
SELECT  Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT  Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT  DISTINCT Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT  DISTINCT Templates.Template_Details FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT  Template_ID FROM Templates WHERE Template_Type_Code = 'PPT';
SELECT  Template_ID FROM Templates WHERE Template_Type_Code = 'PPT';
SELECT  COUNT(*) FROM Paragraphs;
SELECT  COUNT(*) FROM Paragraphs;
SELECT  COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT  COUNT(*) FROM Paragraphs WHERE Document_Name = 'Summer Show';
SELECT  Paragraph_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';
SELECT  Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';
SELECT  Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
SELECT  Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
SELECT  Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
SELECT  Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
SELECT  Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT  Document_ID, COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT  Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID;
SELECT  Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID;
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) > 1;
SELECT  Document_ID, Document_Name, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID, Document_Name ORDER BY Paragraph_Count DESC LIMIT 1;
SELECT  Document_ID, Document_Name FROM Documents WHERE Document_ID = (SELECT MAX(Document_ID) FROM Paragraphs);
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  Document_ID FROM Paragraphs WHERE Paragraph_ID BETWEEN 1 AND 2;
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT  Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland';
SELECT  Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%';
SELECT  COUNT(*) FROM teacher;
SELECT  COUNT(*) FROM teacher;
SELECT  Name FROM teacher ORDER BY Age ASC;
SELECT  Name FROM teacher ORDER BY Age ASC;
SELECT  "Age", "Hometown" FROM "teacher";
SELECT  "Name", "Age", "Hometown" FROM "teacher";
SELECT  Name FROM teacher WHERE Hometown!= "Little Lever Urban District";
SELECT  Name FROM teacher WHERE Hometown!= "Little Lever Urban District";
SELECT  Name FROM teacher WHERE Age = 32 OR Age = 33;
SELECT  Name FROM teacher WHERE Age = 32 OR Age = 33;
SELECT  Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT  Name FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT  Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown;
SELECT  Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown;
SELECT  Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC;
SELECT  Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) >= 2;
SELECT  Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) >= 2;
SELECT  teacher.Name,course.Course FROM teacher,course_arrange,course WHERE teacher.Teacher_ID=course_arrange.Teacher_ID AND course_arrange.Course_ID=course.Course_ID;
SELECT  teacher.Name, course.Course FROM teacher, course_arrange, course WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course_arrange.Course_ID = course.Course_ID;
SELECT  teacher.Name, course.Course FROM teacher, course_arrange, course WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT  teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT  teacher.Name FROM teacher,course_arrange WHERE course_arrange.Teacher_ID = teacher.Teacher_ID AND course_arrange.Course_ID = 2;
SELECT  teacher.Name FROM teacher,course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course_arrange.Course = "Math";
SELECT  teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT  teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT  teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(course_arrange.Course_ID) >= 2;
SELECT  teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(course_arrange.Course_ID) >= 2;
SELECT  Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT  teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL;
SELECT  COUNT(ID) FROM visitor WHERE Age < 30;
SELECT  Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT  AVG(Age) FROM visitor WHERE Level_of_membership < 4;
SELECT  Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT  Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT  AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT  Open_Year, Num_of_Staff FROM museum WHERE Name = "Plaza Museum";
SELECT  Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);
SELECT  visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(visit.Museum_ID) > 1;
SELECT  visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor, visit WHERE visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT  Museum_ID, Name FROM museum WHERE Museum_ID IN (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT  Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY COUNT(visitor_ID) DESC LIMIT 1);
SELECT  AVG(Num_of_Ticket) AS "Average Number of Tickets", MAX(Num_of_Ticket) AS "Maximum Number of Tickets" FROM visit;
SELECT  SUM(Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1);
SELECT  visitor.Name FROM visitor, visit WHERE visitor.ID = visit.visitor_ID AND visit.Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year < 2009) AND visit.Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2011);
SELECT  COUNT(visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010);
SELECT  COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT  COUNT(*) FROM players;
SELECT  COUNT(*) FROM players;
SELECT  COUNT(*) FROM matches;
SELECT  COUNT(*) FROM matches;
SELECT  first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT  first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT  AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
SELECT  AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
SELECT  AVG(winner_rank) FROM matches;
SELECT  AVG(winner_rank) FROM matches;
SELECT  MAX(loser_rank) FROM matches;
SELECT  winner_rank FROM matches ORDER BY winner_rank DESC LIMIT 1;
SELECT  COUNT(DISTINCT country_code) FROM players;
SELECT  COUNT(DISTINCT country_code) FROM players;
SELECT  COUNT(DISTINCT loser_name) FROM matches;
SELECT  COUNT(DISTINCT loser_name) FROM matches;
SELECT  tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10;
SELECT  tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10;
SELECT  winner_name FROM matches WHERE year=2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year=2016);
SELECT  winner_name FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE year=2013) AND winner_id IN (SELECT player_id FROM players WHERE year=2016);
SELECT  COUNT(*) FROM matches WHERE year IN (2013,2016);
SELECT  COUNT(*) FROM matches WHERE year IN (2013,2016);
SELECT  country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND winner_ioc = 'AUS');
SELECT  first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND winner_ioc = 'AUS' AND tourney_level = 'G');
SELECT  first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);
SELECT  first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT  first_name, last_name FROM players ORDER BY birth_date;
SELECT  first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date;
SELECT  first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT  first_name ||'' || last_name AS full_name, birth_date FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT  first_name, country_code FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_id = '2013-W-WT-TUR-01A-2013' GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings));
SELECT  year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  winner_name,winner_rank_points FROM matches WHERE winner_rank_points=(SELECT MAX(winner_rank_points) FROM matches);
SELECT  winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT  winner_name FROM matches WHERE winner_ioc = 'AUS' AND tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT  winner_name FROM matches WHERE winner_ioc = 'AUS' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE winner_ioc = 'AUS');
SELECT  winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT  winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT  AVG(ranking_points), first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY first_name;
SELECT  first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT  first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT  first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT  country_code, COUNT(player_id) FROM players GROUP BY country_code;
SELECT  country_code, COUNT(country_code) FROM players GROUP BY country_code;
SELECT  country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT  country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT  ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date;
SELECT  ranking_date, COUNT(tourney_id) FROM rankings GROUP BY ranking_date;
SELECT  year, COUNT(*) FROM matches GROUP BY year;
SELECT  year, COUNT(*) FROM matches GROUP BY year;
SELECT  winner_name,winner_rank FROM matches WHERE winner_age < 20 ORDER BY winner_age ASC LIMIT 3;
SELECT  winner_name, winner_rank FROM matches WHERE winner_age < 20 ORDER BY winner_age ASC LIMIT 3;
SELECT  COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT  COUNT(*) FROM players WHERE hand = 'L' AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships');
SELECT  winner_name,winner_ioc,winner_birth_date FROM (SELECT winner_name,winner_ioc,winner_birth_date,winner_rank_points FROM matches JOIN rankings ON winner_id=player_id WHERE winner_rank_points=(SELECT MAX(winner_rank_points) FROM matches JOIN rankings ON winner_id=player_id)) WHERE rowid=1;
SELECT  winner_name,winner_ioc,winner_birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1);
SELECT  hand, COUNT(*) FROM players GROUP BY hand;
SELECT  hand, COUNT(player_id) FROM players GROUP BY hand;
SELECT  COUNT(*) FROM ship WHERE disposition_of_ship = "Captured";
SELECT  name, tonnage FROM ship ORDER BY name DESC;
SELECT  name, date, result FROM battle;
SELECT  MAX(injured) AS max_injured, MIN(injured) AS min_injured FROM death;
SELECT  AVG(injured) FROM death;
SELECT  * FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't');
SELECT  name, result FROM battle WHERE bulgarian_commander!= 'Boril';
SELECT  id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = "Brig");
SELECT  id, name FROM battle WHERE id IN (SELECT battle_id FROM death WHERE killed > 10);
SELECT  death.id, ship.name FROM death, ship WHERE death.caused_by_ship_id = ship.id GROUP BY death.id ORDER BY SUM(injured) DESC LIMIT 1;
SELECT  DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT  COUNT(DISTINCT result) FROM battle;
SELECT  COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT  name, date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name = "Lettice" OR name = "HMS Atalanta");
SELECT  name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = "English Channel");
SELECT  note FROM death WHERE note LIKE '%East%';
SELECT  line_1, line_2 FROM Addresses;
SELECT  line_1, line_2 FROM Addresses;
SELECT  COUNT(*) FROM Courses;
SELECT  COUNT(*) FROM Courses;
SELECT  course_name, course_description FROM Courses WHERE course_name ='math';
SELECT  course_description FROM Courses WHERE course_name ='math';
SELECT  zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT  zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT  department_name, department_id FROM Departments GROUP BY department_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  department_name, department_id FROM Departments ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  COUNT(DISTINCT(degree_program.department_id)) FROM degree_program;
SELECT  COUNT(DISTINCT(department_id)) FROM Degree_Programs;
SELECT  COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT  COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT  COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = 13;
SELECT  COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = 13;
SELECT  section_name, section_description FROM Sections;
SELECT  section_name, section_description FROM Sections;
SELECT  course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2);
SELECT  course_name, course_id FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(course_id) < 2));
SELECT  section_name FROM Sections ORDER BY section_name DESC;
SELECT  section_name FROM Sections ORDER BY section_name DESC;
SELECT  semester_name, semester_id FROM Semesters ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT  semester_name, semester_id FROM Semesters ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT  * FROM Departments WHERE department_name LIKE '%computer%';
SELECT  department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT  s.first_name, s.middle_name, s.last_name, se.student_enrolment_id FROM Students s, Student_Enrolment se WHERE se.student_id = s.student_id AND se.degree_program_id = 2 AND se.semester_id = 2;
SELECT  s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id INNER JOIN Semesters s1 ON se.semester_id = s1.semester_id WHERE dp.degree_program_id = 2 AND s1.semester_id = 1;
SELECT  first_name, middle_name, last_name FROM Students, Student_Enrolment, Degree_Programs WHERE Students.student_id = Student_Enrolment.student_id AND Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id AND Degree_Programs.degree_summary_name = 'Bachelor';
SELECT  first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
SELECT  degree_summary_name, COUNT(degree_summary_name) FROM Degree_Programs GROUP BY degree_summary_name ORDER BY COUNT(degree_summary_name) DESC LIMIT 1;
SELECT  degree_summary_name, COUNT(student_id) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT  degree_program_id, degree_summary_name FROM Degree_Programs GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  degree_program_id, degree_summary_name FROM Degree_Programs GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT  first_name, middle_name, last_name, student_id, COUNT(*) FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT  semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT  DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
SELECT  course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
SELECT  course_name FROM Courses WHERE course_id = (SELECT MAX(course_id) FROM Student_Enrolment_Courses);
SELECT  course_name FROM Courses WHERE course_id = (SELECT MAX(course_id) FROM Student_Enrolment_Courses);
SELECT  last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT  last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT  transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(transcript_id) >= 2);
SELECT  transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(transcript_id) >= 2);
SELECT  cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT  cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT  first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT  first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT  first_name, middle_name, last_name FROM Students WHERE date_left IS NULL;
SELECT  first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT  first_name FROM Students WHERE permanent_address_id!= current_address_id;
SELECT  first_name FROM Students WHERE permanent_address_id!= current_address_id;
SELECT  address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT  address_id, line_1, line_2 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  AVG(transcript_date) FROM Transcripts;
SELECT  AVG(transcript_date) FROM Transcripts;
SELECT  transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT  MIN(transcript_date) FROM Transcripts;
SELECT  COUNT(*) FROM Transcripts;
SELECT  COUNT(*) FROM Transcripts;
SELECT  MAX(transcript_date) FROM Transcripts;
SELECT  MAX(transcript_date) FROM Transcripts;
SELECT  COUNT(DISTINCT(student_course_id)) AS 'Times a course can be enrolled in a transcript', student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id HAVING COUNT(DISTINCT(transcript_id)) <= 1;
SELECT  MAX(COUNT(transcript_id)) AS max_count, student_course_id FROM Transcript_Contents GROUP BY student_course_id;
SELECT  transcript_date, transcript_id FROM Transcripts ORDER BY COUNT(*) LIMIT 1;
SELECT  transcript_date, transcript_id FROM Transcripts ORDER BY COUNT(*) LIMIT 1;
SELECT  Semesters.semester_name FROM Semesters WHERE Semesters.semester_id IN (SELECT Semester_id FROM Student_Enrolment WHERE Degree_Program_id IN (SELECT Degree_Program_id FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = 'Master') INTERSECT SELECT Semester_id FROM Student_Enrolment WHERE Degree_Program_id IN (SELECT Degree_Program_id FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = 'Bachelor'));
SELECT  semester_id FROM Semesters WHERE semester_name ='spring 2010' AND semester_description = 'x';
SELECT  COUNT(DISTINCT current_address_id) FROM Students;
SELECT  * FROM Addresses;
SELECT  * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT  * FROM Students ORDER BY last_name DESC;
SELECT  section_name FROM Sections WHERE section_id = 5;
SELECT  section_description FROM Sections WHERE section_name = 'h';
SELECT  first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT  first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT  Title FROM Cartoon ORDER BY Title;
SELECT  Title FROM Cartoon ORDER BY Title;
SELECT  * FROM Cartoon WHERE Directed_by = "Ben Jones";
SELECT  Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT  COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT  COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT  Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT  Title,Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT  Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT  Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT  Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC LIMIT 1;
SELECT  Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC LIMIT 1;
SELECT  COUNT(DISTINCT series_name) AS "Number of different series names", COUNT(DISTINCT content) AS "Number of different contents" FROM TV_Channel;
SELECT  COUNT(DISTINCT(series_name)) FROM TV_Channel;
SELECT  Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT  Content FROM TV_Channel WHERE id = 700;
SELECT  Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT  "Package_Option" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio';
SELECT  COUNT(Language) FROM TV_Channel WHERE Language = 'English';
SELECT  COUNT(Language) FROM TV_Channel WHERE Language = 'English';
SELECT  Language, COUNT(Language) FROM TV_Channel GROUP BY Language ORDER BY COUNT(Language) ASC;
SELECT  Language, COUNT(Language) FROM TV_Channel GROUP BY Language ORDER BY COUNT(Language) ASC;
SELECT  Language, COUNT(Language) FROM TV_Channel GROUP BY Language;
SELECT  Language, COUNT(Language) FROM TV_Channel GROUP BY Language;
SELECT  "TV_Channel".series_name FROM "TV_Channel" INNER JOIN "Cartoon" ON "TV_Channel".id = "Cartoon".Channel WHERE "Cartoon".Title = 'The Rise of the Blue Beetle!';
SELECT  "series_name" FROM "TV_Channel" WHERE "id" = (SELECT "Channel" FROM "Cartoon" WHERE "Title" = 'The Rise of the Blue Beetle!');
SELECT  Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT  Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT  "Episode" FROM "TV_series" ORDER BY "Rating" ASC;
SELECT  * FROM TV_series ORDER BY Rating;
SELECT  "Episode","Rating" FROM "TV_series" ORDER BY "Rating" DESC LIMIT 3;
SELECT  * FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT  MIN(Share),MAX(Share) FROM TV_series;
SELECT  MAX(Share), MIN(Share) FROM TV_series;
SELECT  "Air_Date" FROM "TV_series" WHERE "Episode" = 'A Love of a Lifetime';
SELECT  Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT  Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT  Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT  "TV_Channel"."series_name" FROM "TV_Channel" INNER JOIN "TV_series" ON "TV_Channel"."id" = "TV_series"."Channel" WHERE "TV_series"."Episode" = 'A Love of a Lifetime';
SELECT  "Series_Name" FROM "TV_series" WHERE "Episode" = 'A Love of a Lifetime';
SELECT  "Episode" FROM "TV_series" WHERE "Channel" = 700;
SELECT  "Episode" FROM "TV_series" WHERE "Series_name" = 'Sky Radio';
SELECT  Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT  Directed_by, COUNT(Directed_by) FROM Cartoon GROUP BY Directed_by;
SELECT  Production_code, Channel FROM Cartoon ORDER BY Production_code DESC LIMIT 1;
SELECT  Production_code, Channel FROM Cartoon ORDER BY Production_code DESC LIMIT 1;
SELECT  "Package_Option","series_name" FROM "TV_Channel" WHERE "Hight_definition_TV" = 'yes';
SELECT  Package_Option,series_name FROM TV_Channel WHERE Hight_definition_TV='yes';
SELECT  Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT  Country FROM Cartoon WHERE Written_by = 'Todd Casey';
SELECT  Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT  Country FROM Cartoon WHERE Written_by!= 'Todd Casey';
SELECT  "Cartoon"."Title", "TV_Channel"."Country" FROM "Cartoon" INNER JOIN "TV_Channel" ON "Cartoon"."Channel" = "TV_Channel"."id" WHERE "Cartoon"."Directed_by" = 'Ben Jones' AND "Cartoon"."Written_by" = 'Michael Chang';
SELECT  "Cartoon"."Title", "TV_Channel"."Country" FROM "Cartoon" INNER JOIN "TV_Channel" ON "Cartoon"."Channel" = "TV_Channel"."id" WHERE "Cartoon"."Directed_by" = 'Ben Jones' AND "Cartoon"."Directed_by" = 'Michael Chang';
SELECT  Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language!= 'English';
SELECT  Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language!= 'English';
SELECT  id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2;
SELECT  id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2;
SELECT  id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT  id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT  "Package_Option" FROM "TV_Channel" WHERE "Package_Option" NOT IN (SELECT "Package_Option" FROM "Cartoon" WHERE "Directed_by" = 'Ben Jones');
SELECT  "Package_Option" FROM "TV_Channel" WHERE "id" NOT IN (SELECT "Channel" FROM "Cartoon" WHERE "Directed_by" = 'Ben Jones');
SELECT  COUNT(*) FROM "poker_player";
SELECT  COUNT(*) FROM poker_player;
SELECT  "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;
SELECT  "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;
SELECT  Final_Table_Made, Best_Finish FROM poker_player;
SELECT  "Poker_Player_ID", "Final_Table_Made", "Best_Finish" FROM "poker_player";
SELECT  AVG(Earnings) FROM poker_player;
SELECT  AVG(Earnings) FROM poker_player;
SELECT  "Money_Rank" FROM "poker_player" WHERE "Earnings" = (SELECT MAX("Earnings") FROM "poker_player");
SELECT  "Money_Rank" FROM "poker_player" WHERE "Earnings" = (SELECT MAX("Earnings") FROM "poker_player");
SELECT  MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT  MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT  Name FROM people;
SELECT  Name FROM poker_player;
SELECT  Name FROM poker_player WHERE Earnings > 300000;
SELECT  Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000);
SELECT  Name FROM poker_player ORDER BY Final_Table_Made ASC;
SELECT  Name FROM poker_player, people WHERE poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC;
SELECT  Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player));
SELECT  Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player));
SELECT  "Money_Rank" FROM "poker_player" WHERE "Height" = (SELECT MAX("Height") FROM "poker_player");
SELECT  "Money_Rank" FROM "poker_player" WHERE "Height" = (SELECT MAX("Height") FROM "poker_player");
SELECT  AVG(Earnings) FROM poker_player WHERE Height > 200;
SELECT  AVG(Earnings) FROM poker_player WHERE Height > 200;
SELECT  Name FROM poker_player ORDER BY Earnings DESC;
SELECT  Name FROM poker_player ORDER BY Earnings DESC;
SELECT  Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT  Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT  Nationality, COUNT(*) AS "Count" FROM people GROUP BY Nationality ORDER BY "Count" DESC LIMIT 1;
SELECT  Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2;
SELECT  Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) > 1;
SELECT  Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT  Name, Birth_Date FROM people ORDER BY Name;
SELECT  Name FROM people WHERE Nationality!= "Russia";
SELECT  Name FROM people WHERE Nationality!= 'Russia';
SELECT  Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT  Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT  COUNT(DISTINCT Nationality) FROM people;
SELECT  COUNT(DISTINCT Nationality) FROM people;
SELECT  COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT  contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT  vote_id, phone_number, state FROM VOTES;
SELECT  MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT  MAX(created) FROM VOTES WHERE state = 'CA';
SELECT  contestant_name FROM CONTESTANTS WHERE contestant_name!= 'Jessie Alloway';
SELECT  DISTINCT state, created FROM VOTES;
SELECT  contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(contestant_number) >= 2);
SELECT  contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1);
SELECT  COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT  COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT  state FROM AREA_CODE_STATE WHERE area_code = (SELECT MAX(area_code) FROM (SELECT state, COUNT(*) AS cnt FROM VOTES GROUP BY state) AS t);
SELECT  created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling');
SELECT  DISTINCT state FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss');
SELECT  contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT  Name FROM country WHERE IndepYear > 1950;
SELECT  Name FROM country WHERE IndepYear > 1950;
SELECT  COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT  COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT  SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT  SUM(SurfaceArea) FROM country WHERE Continent = 'Carribean';
SELECT  Continent FROM country WHERE Code = 'AIA';
SELECT  Continent FROM country WHERE Code = 'AIA';
SELECT  District FROM city WHERE Name = 'Kabul';
SELECT  District FROM city WHERE Name = 'Kabul';
SELECT  Language,Percentage FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
SELECT  Language FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT  Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT  Region, Population FROM country WHERE Code = 'AGO';
SELECT  Continent, SUM(Population) FROM country WHERE Code = 'AGO' GROUP BY Continent;
SELECT  AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT  AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa';
SELECT  Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia');
SELECT  Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT  SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia';
SELECT  COUNT(Population) FROM country WHERE Continent = 'Asia';
SELECT  AVG(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa';
SELECT  AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT  SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT  SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT  COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT  SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT  AVG(GNP) AS avgGNP, SUM(Population) AS totalPopulation FROM country WHERE GovernmentForm = 'US Territory';
SELECT  AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE Continent = 'Asia' AND GovernmentForm = 'US Territory';
SELECT  COUNT(DISTINCT Language) FROM countrylanguage;
SELECT  COUNT(DISTINCT Language) FROM countrylanguage;
SELECT  COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT  COUNT(DISTINCT GovernmentForm) FROM country;
SELECT  SUM(Percentage) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT  COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT  COUNT(IsOfficial) FROM countrylanguage WHERE CountryCode = 'AFG';
SELECT  COUNT(IsOfficial) FROM countrylanguage WHERE CountryCode = 'AFG';
SELECT  Name FROM country WHERE Code = (SELECT Code FROM countrylanguage GROUP BY Code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Name FROM country WHERE Code = (SELECT Code FROM countrylanguage GROUP BY Code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Continent, COUNT(Language) AS Languages FROM countrylanguage GROUP BY Continent ORDER BY Languages DESC;
SELECT  Continent, COUNT(CountryCode) AS Languages FROM country GROUP BY Continent ORDER BY Languages DESC;
SELECT  COUNT(*) FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' AND Percentage > 90 AND Language = 'Dutch' AND IsOfficial = 'T' AND Percentage > 90;
SELECT  COUNT(*) FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' AND Language = 'Dutch' AND IsOfficial = 'T';
SELECT  country.Name FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T';
SELECT  name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language='French');
SELECT  Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language='French' AND IsOfficial='T'));
SELECT  Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French'));
SELECT  COUNT(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese';
SELECT  COUNT(DISTINCT(Continent)) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');
SELECT  DISTINCT Region FROM countrylanguage WHERE Language='English' OR Language='Dutch';
SELECT  DISTINCT country.Region, countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND (countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English');
SELECT  country.Name FROM country,countrylanguage WHERE country.Code=countrylanguage.CountryCode AND (countrylanguage.Language='English' OR countrylanguage.Language='Dutch');
SELECT  Code, Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'));
SELECT  Language,Percentage FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') ORDER BY Percentage DESC LIMIT 1;
SELECT  Language,Percentage FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  country.Code, country.Name, countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.GovernmentForm = 'Republic' AND (SELECT COUNT(CountryCode) FROM countrylanguage WHERE CountryCode = country.Code AND IsOfficial = 'T') = 1;
SELECT  country.Code, country.Name, countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.GovernmentForm = 'Republic' GROUP BY country.Code, country.Name, countrylanguage.Language HAVING COUNT(country.Code) = 1;
SELECT  city.Name, city.Population FROM city, countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT  city.Name, country.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT  Name,Population,LifeExpectancy FROM country WHERE Continent='Asia' AND SurfaceArea=(SELECT MAX(SurfaceArea) FROM country WHERE Continent='Asia');
SELECT  Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT  AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT  AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT  SUM(Population) FROM country WHERE Code NOT IN (SELECT Code FROM countrylanguage WHERE Language = 'English');
SELECT  COUNT(*) FROM countrylanguage WHERE Language!= 'English' AND IsOfficial = 'T';
SELECT  Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT  countrylanguage.Language FROM countrylanguage,country WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT  COUNT(DISTINCT(countrylanguage.Language)) FROM countrylanguage,country WHERE country.Code=countrylanguage.CountryCode AND country.IndepYear<1930 AND country.IsOfficial='T';
SELECT  COUNT(DISTINCT(Language)) FROM countrylanguage WHERE IndepYear < 1930;
SELECT  Name FROM country WHERE SurfaceArea > ALL(SELECT SurfaceArea FROM country WHERE Continent = 'Europe');
SELECT  Name FROM country WHERE SurfaceArea > ALL(SELECT SurfaceArea FROM country WHERE Continent = 'Europe');
SELECT  Code, Name FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'German') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Italian') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Portuguese') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language =
SELECT  name FROM country WHERE continent = 'Africa' AND population < ALL(SELECT population FROM country WHERE continent = 'Asia');
SELECT  Name FROM country WHERE Continent = 'Asia' AND Population > ALL(SELECT Population FROM country WHERE Continent = 'Africa');
SELECT  Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Continent = 'Africa');
SELECT  Code FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F';
SELECT  Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT  countrycode FROM countrylanguage WHERE language!= 'English';
SELECT  countrycode FROM countrylanguage WHERE language!= 'English' GROUP BY countrycode;
SELECT  Code FROM country WHERE GovernmentForm!= 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT  Code FROM country WHERE GovernmentForm!= 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT  city.Name FROM city,countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' AND country.Continent = 'Europe';
SELECT  Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND NOT EXISTS (SELECT * FROM countrylanguage WHERE CountryCode = Code AND Language = 'English');
SELECT  DISTINCT city.Name FROM city,countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia';
SELECT  city.Name FROM city,countrylanguage WHERE city.CountryCode=countrylanguage.CountryCode AND countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T' AND city.CountryCode IN (SELECT country.Code FROM country WHERE country.Continent='Asia');
SELECT  Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT  Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT  Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT  Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT  country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3;
SELECT  country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT  District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT  District, COUNT(*) FROM city GROUP BY District HAVING SUM(Population) > (SELECT AVG(Population) FROM city);
SELECT  GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT  GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT  Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT  Continent, SUM(Population) AS Population, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AverageLifeExpectancy < 72;
SELECT  Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT  Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT  Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT  Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT  Name FROM country ORDER BY Population LIMIT 3;
SELECT  Name FROM country ORDER BY Population LIMIT 3;
SELECT  COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT  COUNT(Code) FROM country WHERE Continent = 'Asia';
SELECT  Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT  Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT  SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT  SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT  Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT  Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT  Language, COUNT(CountryCode) AS Count FROM countrylanguage GROUP BY Language ORDER BY Count DESC LIMIT 1;
SELECT  Language, COUNT(CountryCode) AS Count FROM countrylanguage GROUP BY Language ORDER BY Count DESC LIMIT 1;
SELECT  country.Code, country.Name, countrylanguage.Language, countrylanguage.Percentage FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode ORDER BY countrylanguage.Percentage DESC LIMIT 1;
SELECT  country.Code, country.Name, countrylanguage.Language, countrylanguage.Percentage FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode ORDER BY countrylanguage.Percentage DESC;
SELECT  SUM(Percentage) FROM countrylanguage WHERE Language = 'Spanish';
SELECT  COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Spanish';
SELECT  country.Code FROM countrylanguage,country WHERE country.Code=countrylanguage.CountryCode AND countrylanguage.Language='Spanish' GROUP BY country.Code ORDER BY COUNT(country.Code) DESC LIMIT 1;
SELECT  Code FROM countrylanguage WHERE Language = 'Spanish' GROUP BY Code HAVING COUNT(Language) = (SELECT MAX(COUNT(Language)) FROM countrylanguage GROUP BY Code);
SELECT  COUNT(*) FROM conductor;
SELECT  COUNT(*) FROM conductor;
SELECT  Name FROM conductor ORDER BY Age ASC;
SELECT  Name FROM conductor ORDER BY Age;
SELECT  Name FROM conductor WHERE Nationality!= "USA";
SELECT  Name FROM conductor WHERE Nationality!= "USA";
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT  AVG(Attendance) FROM show;
SELECT  AVG(Attendance) FROM show;
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final";
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final";
SELECT  COUNT(DISTINCT Nationality) FROM conductor;
SELECT  Nationality, COUNT(*) FROM conductor GROUP BY Nationality;
SELECT  Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT  Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT  Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT  Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT  conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT  conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT  Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1);
SELECT  Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1);
SELECT  Name FROM conductor WHERE Conductor_ID = (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Name FROM conductor WHERE Conductor_ID = (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  Name FROM conductor WHERE Year_of_Work > 2008;
SELECT  Name FROM conductor WHERE Year_of_Work > 2008;
SELECT  Record_Company, COUNT(Record_Company) FROM orchestra GROUP BY Record_Company;
SELECT  Record_Company, COUNT(Record_Company) FROM orchestra GROUP BY Record_Company;
SELECT  Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;
SELECT  Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT  Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT  Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT  Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT  Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT  COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT  COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT  Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1);
SELECT  Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1);
SELECT  COUNT(*) FROM Highschooler;
SELECT  COUNT(*) FROM Highschooler;
SELECT  name, grade FROM Highschooler;
SELECT  name, grade FROM Highschooler;
SELECT  grade FROM Highschooler;
SELECT  Highschooler.grade FROM Highschooler;
SELECT  grade FROM Highschooler WHERE ID = 1934;
SELECT  grade FROM Highschooler WHERE name = 'Kyle';
SELECT  name FROM Highschooler WHERE grade = 10;
SELECT  name FROM Highschooler WHERE grade = 10;
SELECT  ID FROM Highschooler WHERE name = 'Kyle';
SELECT  ID FROM Highschooler WHERE name = 'Kyle';
SELECT  COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT  COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT  grade, COUNT(grade) FROM Highschooler GROUP BY grade;
SELECT  grade, COUNT(grade) FROM Highschooler GROUP BY grade;
SELECT  grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  grade FROM Highschooler GROUP BY grade HAVING COUNT(grade) >= 4;
SELECT  grade FROM Highschooler GROUP BY grade HAVING COUNT(grade) >= 4;
SELECT  Highschooler.ID, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT  Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT  Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT  Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT  name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 3);
SELECT  name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 3);
SELECT  name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.friend_id AND Highschooler.name = 'Kyle';
SELECT  name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.friend_id AND Highschooler.name = 'Kyle';
SELECT  COUNT(*) FROM Friend WHERE student_id = 1934;
SELECT  COUNT(*) FROM Friend WHERE friend_id = 1934;
SELECT  ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT  ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT  name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT  name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT  Highschooler.ID FROM Highschooler, Friend, Likes WHERE Highschooler.ID = Friend.student_id AND Highschooler.ID = Likes.student_id;
SELECT  Highschooler.ID FROM Highschooler, Friend, Likes WHERE Highschooler.ID = Friend.student_id AND Highschooler.ID = Likes.student_id;
SELECT  name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT liked_id FROM Likes));
SELECT  Highschooler.name FROM Highschooler, Friend, Likes WHERE Highschooler.ID = Friend.student_id AND Highschooler.ID = Likes.student_id;
SELECT  student_id, count(liked_id) FROM Likes GROUP BY student_id;
SELECT  student_id, COUNT(liked_id) FROM Likes GROUP BY student_id;
SELECT  Highschooler.name, count(Likes.liked_id) FROM Highschooler, Likes WHERE Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT  Highschooler.name, count(Likes.liked_id) FROM Highschooler, Likes WHERE Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT  name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(student_id) >= 2);
SELECT  name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(student_id) >= 2);
SELECT  name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT  name FROM Highschooler WHERE grade > 5 AND (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) >= 2;
SELECT  COUNT(*) FROM Likes WHERE liked_id = 1934;
SELECT  COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT  AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT  AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT  min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT  grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) ORDER BY grade ASC LIMIT 1;
SELECT  DISTINCT state FROM Owners UNION SELECT DISTINCT state FROM Professionals;
SELECT  DISTINCT state FROM Owners UNION SELECT DISTINCT state FROM Professionals;
SELECT  AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT  AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT  professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = Professionals.professional_id) > 2;
SELECT  professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = Professionals.professional_id) > 2;
SELECT  name FROM Dogs WHERE cost_of_treatment < 1000;
SELECT  name FROM Dogs WHERE owner_id NOT IN (SELECT owner_id FROM Treatments WHERE cost_of_treatment > 1000);
SELECT  DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT first_name FROM Dogs) UNION SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT first_name FROM Dogs);
SELECT  DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT first_name FROM Dogs) UNION SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT first_name FROM Dogs);
SELECT  professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT  professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT  owner_id, first_name, last_name FROM Owners ORDER BY owner_id DESC LIMIT 1;
SELECT  owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT DISTINCT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 2);
SELECT  professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2);
SELECT  breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT  owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments));
SELECT  owner_id, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE dog_id = (SELECT dog_id FROM Treatments WHERE cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM Treatments)));
SELECT  Treatment_Types.treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY Treatments.cost_of_treatment ASC LIMIT 1;
SELECT  Treatment_Types.treatment_type_description, Treatment_Types.treatment_type_code, Treatments.cost_of_treatment FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code ORDER BY Treatments.cost_of_treatment ASC LIMIT 1;
SELECT  owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1);
SELECT  owner_id, zip_code FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1);
SELECT  professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT DISTINCT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2);
SELECT  professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT DISTINCT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) > 1);
SELECT  first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
SELECT  first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
SELECT  Treatments.date_of_treatment, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT  date_of_treatment, first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT  Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT  Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT  Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT  Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT  Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT  Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT  Dogs.name, Treatments.date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT Breeds.breed_code FROM Breeds ORDER BY Breeds.breed_code ASC LIMIT 1) ORDER BY Treatments.date_of_treatment ASC;
SELECT  Dogs.name, Treatments.date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT Breeds.breed_code FROM Breeds ORDER BY Breeds.breed_code ASC LIMIT 1);
SELECT  o.first_name, d.name FROM Owners o, Dogs d WHERE o.state = 'Virginia' AND o.owner_id = d.owner_id;
SELECT  first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia';
SELECT  date_arrived, date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT  date_arrived, date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT  last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs));
SELECT  last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs));
SELECT  email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT  email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT  date_arrived, date_departed FROM Dogs;
SELECT  date_arrived, date_departed FROM Dogs;
SELECT  COUNT(*) FROM Treatments;
SELECT  COUNT(treatment_id) FROM Treatments;
SELECT  COUNT(*) FROM Professionals NATURAL JOIN Treatments;
SELECT  COUNT(DISTINCT(professional_id)) FROM Treatments;
SELECT  role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT  role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT  first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT  first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT  COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT  COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT  MAX(cost_of_treatment) FROM Treatments;
SELECT  cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);
SELECT  COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT  COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT  COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT  COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT  COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT  COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT  name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT  name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT  AVG(age) FROM Dogs;
SELECT  AVG(age) FROM Dogs;
SELECT  MAX(age) FROM Dogs;
SELECT  MAX(age) FROM Dogs;
SELECT  charge_type, charge_amount FROM Charges;
SELECT  charge_type, charge_amount FROM Charges;
SELECT  charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT  charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT  email_address, cell_number, home_phone FROM Professionals;
SELECT  email_address, cell_number, home_phone FROM Professionals;
SELECT  breed_name, size_description FROM Breeds, Sizes;
SELECT  DISTINCT breed_code, size_code FROM Dogs;
SELECT  first_name, treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT  first_name, treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT  COUNT(*) FROM singer;
SELECT  COUNT(*) FROM singer;
SELECT  Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT  Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT  "Birth_Year", "Citizenship" FROM "singer";
SELECT  "Birth_Year", "Citizenship" FROM "singer";
SELECT  Name FROM singer WHERE Citizenship!= "France";
SELECT  Name FROM singer WHERE Citizenship!= "France";
SELECT  Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT  Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT  Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT  Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT  Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT  Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT  Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT  Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT  song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT  Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;
SELECT  DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT  Name FROM singer WHERE Sales > 300000;
SELECT  Name FROM singer WHERE Singer_ID IN (SELECT DISTINCT Singer_ID FROM song);
SELECT  Name FROM singer WHERE Singer_ID IN (SELECT DISTINCT Singer_ID FROM song);
SELECT  singer.Name, SUM(song.Sales) FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT  singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT  Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT  sname FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT  DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT  DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
SELECT  COUNT(*) FROM Other_Available_Features;
SELECT  feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'Amenity';
SELECT  property_type_description FROM Ref_Property_Types WHERE property_type_code = 'House';
SELECT  property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' AND room_count > 1;
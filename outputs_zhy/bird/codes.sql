SELECT  CDSCode, `Free Meal Count (K-12)`, `Enrollment (K-12)`, `Free Meal Count (K-12)` / `Enrollment (K-12)` as EligibleFreeRate FROM frpm WHERE `Enrollment (K-12)` > 0 ORDER BY EligibleFreeRate DESC LIMIT 1;
SELECT  CDSCode, `Free Meal Count (Ages 5-17)`, `Enrollment (Ages 5-17)`, `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `Enrollment (Ages 5-17)` > 0 AND `Free Meal Count (Ages 5-17)` > 0 ORDER BY `Percent (%) Eligible Free (Ages 5-17)` LIMIT 3;
SELECT  Zip FROM schools WHERE County = 'Fresno' AND Charter = 1;
SELECT  * FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE rtype = 'K' ORDER BY FRPMCount DESC LIMIT 1);
SELECT  Phone FROM schools WHERE Charter = 1 AND OpenDate > '2000-01-01';
SELECT  COUNT(*) FROM satscores WHERE AvgScrMath < 400 AND Virtual = 'F';
SELECT  * FROM schools WHERE NumTstTakr > 500 AND Magnet = 1;
SELECT  s.Phone FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.AvgScrRead > 1500 ORDER BY NumTstTakr DESC LIMIT 1;
SELECT  s.CDSCode, s.School, s.NCESSchool, s.NCESDist, s.Status, s.County, s.District, s.Street, s.City, s.Zip, s.State, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.OpenDate, s.ClosedDate, s.Enrollment, s.FreeMealCount, s.PercentEligibleFree, s.FRPMCount, s.PercentEligibleFRPM, s.SATMath, s.SATReading, s.SATWriting, s.NumGE1500, s.PctGE1500, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite FROM schools s, frpm f WHERE s.CDSCode = f.CDSCode ORDER BY f.FRPMCount DESC LIMIT 10;
SELECT  COUNT(*) FROM schools WHERE Charter = 1 AND AvgScrMath > 560;
SELECT  * FROM frpm WHERE CDSCode = '01100170123968' AND `Enrollment (Ages 5-17)` = (SELECT MAX(`Enrollment (Ages 5-17)`) FROM frpm WHERE CDSCode = '01100170123968');
SELECT  CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500;
SELECT  CDSCode, `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `Percent (%) Eligible Free (Ages 5-17)` > 0.3;
SELECT  s.Phone, s.CDSCode, s.NCESSchool, s.NCESDist, s.Status, s.County, s.District, s.School, s.Street, s.StreetAbr, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.NumGE1500, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.PctGE1500 FROM schools s, satscores ss WHERE s.CDSCode = ss.cds ORDER BY s.NumGE1500 DESC LIMIT 3;
SELECT  CDSCode, Enrollment FROM frpm WHERE Enrollment IS NOT NULL ORDER BY Enrollment DESC LIMIT 5;
SELECT  District, AVG(AvgScrRead) FROM satscores WHERE StatusType = 'Active' GROUP BY District ORDER BY AVG(AvgScrRead) DESC LIMIT 1;
SELECT  COUNT(*) FROM satscores WHERE NumTstTakr < 100;
SELECT  CDSCode, CharterNum FROM schools WHERE CDSCode IN (SELECT CDSCode FROM satscores WHERE AvgScrWrite = 499);
SELECT  COUNT(*) FROM satscores WHERE NumTstTakr <= 250 AND FundingType = 'Directly funded' AND County = 'Contra Costa';
SELECT  s.Phone FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.rtype = 'D' AND ss.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores);
SELECT  COUNT(*) FROM schools WHERE LowGrade = '9' AND HighGrade = '12';
SELECT  COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700;
SELECT  s.CDSCode, s.School, s.NCESSchool, s.NCESDist, s.Status, s.County, s.District, s.Street, s.City, s.Zip, s.State, s.MailStreet, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500 FROM schools s, satscores st WHERE s.CDSCode = st.cds ORDER BY st.NumTstTakr DESC LIMIT 1;
SELECT  * FROM frpm WHERE `Enrollment (K-12)` - `Enrollment (Ages 5-17)` > 30;
SELECT  s.CDSCode, s.School, s.Street, s.City, s.State, s.Zip, s.Latitude, s.Longitude, s.DOC, s.DOCType, s.Soc, s.SocType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.LastUpdate, s.Charter, s.CharterNum, s.FundingType, s.Status, s.Enrollment, s.FreeMealCount, s.PercentEligibleFree, s.FRPMCount, s.PercentEligibleFRPM, s.SATMath, s.SATReading, s.SATWriting, s.NumGE1500, s.PctGE1500, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite FROM schools s, satscores t WHERE s.CDSCode = t.cds AND t.rtype = 'S' AND t.AvgScrRead >= 1500 AND s.PercentEligibleFree > 0.1;
SELECT  s.CDSCode, s.NCESSchool, s.FundingType FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.rtype = 'D' AND ss.AvgScrMath > 400;
SELECT  School, Street, City, State, Zip FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `2013-14 CALPADS Fall 1 Certification Status` = 1 AND `Enrollment (Ages 5-17)` > 800 AND `High Grade` = '15-17' AND `Free Meal Count (Ages 5-17)` > 0);
SELECT  s.School, s.NCESSchool, s.Phone, s.AvgScrWrite FROM schools s WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01' AND s.AvgScrWrite IS NOT NULL;
SELECT  * FROM schools WHERE FundingType = 'Locally funded' AND (Enrollment (K-12) - Enrollment (Ages 5-17)) > (SELECT AVG(Enrollment (K-12) - Enrollment (Ages 5-17)) FROM schools WHERE FundingType = 'Locally funded');
SELECT  * FROM schools WHERE CDSCode = '01100170109835';
SELECT  City, Enrollment FROM schools WHERE Enrollment < (SELECT MIN(Enrollment) FROM schools WHERE Enrollment > 0 AND CDSCode LIKE '01100170109835') AND CDSCode LIKE '01100170109835' GROUP BY City ORDER BY Enrollment ASC LIMIT 5;
SELECT  CDSCode, `Enrollment (K-12)`, `Free Meal Count (K-12)` FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL AND `Free Meal Count (K-12)` IS NOT NULL AND `Enrollment (K-12)` > 0 AND `Free Meal Count (K-12)` > 0 ORDER BY `Enrollment (K-12)` DESC LIMIT 10;
SELECT  * FROM frpm WHERE `FRPM Count (K-12)` / `Enrollment (K-12)` > 0 ORDER BY `FRPM Count (K-12)` / `Enrollment (K-12)` DESC LIMIT 5;
SELECT  School, Website FROM schools WHERE FreeMealCount BETWEEN 1900 AND 2000 AND Enrollment BETWEEN 5 AND 17;
SELECT  `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE CDSCode = '01100170123968';
SELECT  AdmEmail1 FROM frpm WHERE Charter = 1 AND Enrollment (K-12) = (SELECT MIN(Enrollment (K-12)) FROM frpm WHERE Charter = 1);
SELECT  s.CDSCode, s.NCESSchool, s.NCESDist, s.Status, s.County, s.District, s.School, s.Street, s.StreetAbr, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.NumTakr, s.NumGE1500, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.NumGE1500 >= 1500 ORDER BY s.NumTakr DESC LIMIT 1;
SELECT  s.Street, s.City, s.State, s.Zip FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.rtype = 'D' AND ss.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'D');
SELECT  Website FROM schools WHERE CDSCode = '06100170000000' AND NumTstTakr BETWEEN 2000 AND 3000;
SELECT  AVG(NumTstTakr) FROM satscores WHERE rtype = 'D' AND sname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <= 365 AND dname = 'Fresno' AND cname = 'Fresno' AND enroll12 >= 1 AND enroll12 <=;
SELECT  s.Phone FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND s.District = 'Fresno Unified' AND ss.rtype = 'D' AND ss.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'D' AND cds = s.CDSCode);
SELECT  * FROM satscores WHERE Virtual = 'F' ORDER BY AvgScrRead DESC LIMIT 5;
SELECT  s.CDSCode, s.NCESSchool, s.Status, s.County, s.District, s.School, s.Street, s.City, s.Zip, s.State, s.MailStreet, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.School, s.Street, s.StreetAbr, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate, s.CDSCode;
SELECT  AVG(AvgScrMath + AvgScrRead + AvgScrWrite) AS AverageMathScore, County FROM satscores GROUP BY County ORDER BY AverageMathScore ASC LIMIT 1;
SELECT  s.City FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.AvgScrWrite >= 1500 GROUP BY s.City ORDER BY COUNT(ss.AvgScrWrite) DESC LIMIT 1;
SELECT  s.CDSCode, s.School, AVG(satscores.AvgScrWrite) FROM satscores INNER JOIN schools s ON s.CDSCode = satscores.cds WHERE satscores.rtype = 'S' GROUP BY s.CDSCode, s.School;
SELECT  * FROM schools WHERE DOC = '31' AND Grades = 'K-12' ORDER BY Enrollment DESC;
SELECT  count(schools.CDSCode) / 12 FROM schools WHERE schools.DOC = '52' AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT  SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) AS Elem_Count, SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS Unified_Count FROM schools;
SELECT  County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County, School, ClosedDate ORDER BY COUNT(*) DESC;
SELECT  s.CDSCode, s.Street, s.MailStreet FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.rtype = 'D' AND ss.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE rtype = 'D') ORDER BY ss.AvgScrMath DESC LIMIT 1 OFFSET 5;
SELECT  s.MailStreet, s.School FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND ss.rtype = 'D' AND ss.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'D');
SELECT  COUNT(*) FROM satscores WHERE AvgScrRead + AvgScrMath + AvgScrWrite >= 1500 AND MailCity = 'Lakeport';
SELECT  COUNT(*) FROM satscores WHERE cname = 'Fresno';
SELECT  * FROM schools WHERE Zip LIKE '94544%' OR Zip LIKE '94560%' OR Zip LIKE '94612%' OR Zip LIKE '94703%' OR Zip LIKE '94606%' OR Zip LIKE '94607%' OR Zip LIKE '94608%' OR Zip LIKE '94609%' OR Zip LIKE '94610%' OR Zip LIKE '94611%' OR Zip LIKE '94612%' OR Zip LIKE '94613%' OR Zip LIKE '94614%' OR Zip LIKE '94615%' OR Zip LIKE '94616%' OR Zip LIKE '94617%' OR Zip LIKE '94618%' OR Zip LIKE '94619%' OR Zip LIKE '94620%' OR Zip LIKE '94621%' OR Zip LIKE '94622%' OR Zip LIKE '94623%' OR Zip LIKE '94624%' OR Zip LIKE '94625%' OR Zip LIKE '94626%' OR Zip LIKE '94627%' OR Zip LIKE '94628%' OR Zip LIKE '94629%' OR Zip LIKE '94630%' OR Zip LIKE '94631%' OR Zip LIKE '94632%' OR Zip LIKE '94633%' OR Zip LIKE '94634%' OR Zip LIKE '94635%' OR Zip LIKE '94636%' OR Zip LIKE '94637%' OR Zip LIKE '94638%' OR Zip LIKE '94639%' OR Zip LIKE '94640%' OR Zip LIKE '94641%' OR Zip LIKE '94642%' OR Zip LIKE '94643%' OR Zip LIKE '94644%' OR Zip LIKE '94645%' OR Zip LIKE '94646%' OR Zip LIKE '94647%' OR Zip LIKE '94648%' OR Zip LIKE '94649%' OR Zip LIKE '94650%' OR Zip LIKE '94651%' OR Zip LIKE '9465';
SELECT  COUNT(schools.CDSCode) AS count_of_schools_in_colusa, COUNT(schools.CDSCode) AS count_of_schools_in_humboldt FROM schools WHERE schools.MailState = 'CA' AND schools.County = 'Colusa' AND schools.County = 'Humboldt';
SELECT  COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin';
SELECT  Phone, Ext FROM schools WHERE CDSCode = (SELECT CDSCode FROM satscores WHERE AvgScrWrite = (SELECT MAX(AvgScrWrite) FROM satscores WHERE rtype = 'D'));
SELECT  Phone, Ext FROM schools WHERE Zip = '95203-3704';
SELECT  Website FROM schools WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson' OR AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez';
SELECT  Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';
SELECT  COUNT(*) FROM schools WHERE County = 'Hickman' AND DOC = 52 AND Charter = 1;
SELECT  SUM(NumGE1500) FROM satscores WHERE rtype = 'D' AND cname = 'Los Angeles' AND Charter = 0;
SELECT  DISTINCT s.CDSCode, s.NCESSchool, s.NCESDist, s.CharterNum, s.Charter, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.City FROM schools s WHERE s.Charter = 1 AND s.CharterNum = '00D2';
SELECT  COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman';
SELECT  COUNT(DISTINCT(s.CDSCode)) AS locally_funded_schools, COUNT(DISTINCT(s.CDSCode)) AS all_schools, (COUNT(DISTINCT(s.CDSCode)) / COUNT(DISTINCT(s.CDSCode)) * 100) AS percentage FROM schools s WHERE s.Charter = 1 AND s.County = 'Santa Clara'  Question: Write Sql for the following question: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?  Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100% Answer : SELECT COUNT(DISTINCT(s.CDSCode)) AS locally_funded_schools, COUNT(DISTINCT(s.CDSCode)) AS all_schools, (COUNT(DISTINCT(s.CDSCode)) / COUNT(DISTINCT(s.CDSCode)) * 100) AS percentage FROM schools s WHERE s.Charter = 1 AND s.County = 'Santa Clara'  Question: Write Sql for the following question: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?  Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100% Answer : SELECT COUNT(DISTINCT(s.CDSCode)) AS locally_funded_schools, COUNT(DISTINCT(s.CDSCode)) AS all_schools, (COUNT(DISTINCT(s.CDSCode)) / COUNT(DISTINCT(s.CDSCode)) * 100) AS percentage FROM schools s WHERE s.Charter = 1 AND s.County = 'Santa Clara'  Question: Write Sql for the following question: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?  Ratio in percentage = (count(locally funded;
SELECT  COUNT(*) FROM schools WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND FundingType = 'Directly Funded';
SELECT  SUM(ClosedAmount) FROM CommunityCollegeDistrict WHERE ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND City = 'San Francisco';
SELECT  county, count(*) FROM schools WHERE SOC = '11' AND Year BETWEEN 1980 AND 1989 GROUP BY county ORDER BY count(*) DESC;
SELECT  DISTINCT NCESDist FROM schools WHERE SOC = '31';
SELECT  COUNT(*) FROM schools WHERE StatusType = 'Active' AND County = 'Alpine' AND EdOpsCode = '00';
SELECT  DistrictCode FROM schools WHERE CDSCode = '01100170118489' AND Magnet = 0;
SELECT  SUM(Enrollment (Ages 5-17)) FROM frpm WHERE CDSCode = '01100170123968' AND `Academic Year` = '2014-2015';
SELECT  frpm.CDSCode, frpm.AcademicYear, frpm.CountyCode, frpm.DistrictCode, frpm.SchoolCode, frpm.CountyName, frpm.DistrictName, frpm.SchoolName, frpm.DistrictType, frpm.SchoolType, frpm.EducationalOptionType, frpm.NSLPProvisionStatus, frpm.CharterSchoolYN, frpm.CharterSchoolNumber, frpm.CharterFundingType, frpm.IRC, frpm.LowGrade, frpm.HighGrade, frpm.EnrollmentK12, frpm.FreeMealCountK12, frpm.PercentEligibleFreeK12, frpm.FRPMCountK12, frpm.PercentEligibleFRPMK12, frpm.EnrollmentAges5to17, frpm.FreeMealCountAges5to17, frpm.PercentEligibleFreeAges5to17, frpm.FRPMCountAges5to17, frpm.PercentEligibleFRPMAges5to17, frpm.CALPADSFall1CertificationStatus FROM frpm WHERE frpm.CDSCode = '01100170123968' AND frpm.EnrollmentAges5to17 IS NOT NULL AND frpm.FreeMealCountAges5to17 IS NOT NULL;
SELECT  DISTINCT(LowGrade) FROM frpm WHERE CDSCode = '01100170112607' AND EdOpsCode = 'SPECON' AND NCESDist = '613360' ORDER BY LowGrade ASC LIMIT 1;
SELECT  DISTINCT s.CDSCode, s.School, s.EdOpsName FROM schools s, frpm f WHERE s.CDSCode = f.CDSCode AND f.Charter = 1 AND f.CharterFundingType = 'Breakfast Provision 2' AND s.County = 'Alameda' AND s.EdOpsCode = 'ELEM';
SELECT  City FROM schools WHERE EILCode = 'HS' AND LunchProvision = '2' AND LowGrade = '9' AND HighGrade = '12' AND County = 'Merced';
SELECT  s.CDSCode, s.School, s.Enrollment, s.FreeMealCount, s.PercentEligibleFree, s.FRPM, s.PercentEligibleFRPM FROM schools s WHERE s.County = 'Los Angeles' AND s.EdOpsCode = 'K-8' AND s.EdOpsName = 'Elementary' AND s.EILCode = 'K-7' AND s.EILName = 'Elementary' AND s.GSoffered = 'N' AND s.GSserved = 'N' AND s.Virtual = 'N' AND s.Magnet = 0;
SELECT  DISTINCT(gradespan) FROM satscores WHERE city = 'Adelanto' ORDER BY gradespan DESC LIMIT 1;
SELECT  COUNT(*) FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara');
SELECT  School, Latitude FROM schools ORDER BY Latitude DESC LIMIT 1;
SELECT  City, MIN(Latitude) FROM schools WHERE State = 'CA' GROUP BY City ORDER BY MIN(Latitude) ASC;
SELECT  MAX(Longitude) FROM schools;
SELECT  COUNT(DISTINCT(CITY)) AS CITY_COUNT, COUNT(DISTINCT(CDSCode)) AS SCHOOL_COUNT FROM schools WHERE EdOpsCode = 'HS' AND EdOpsName = 'High School' AND Magnet = 1 AND EILCode = 'K-8' AND EILName = 'Kindergarten to 8th grade' GROUP BY CITY;
SELECT  AdmFName1, AdmLName1, District FROM schools WHERE AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL GROUP BY AdmFName1, AdmLName1, District ORDER BY COUNT(*) DESC LIMIT 2;
SELECT  `Percent (%) Eligible Free (K-12)` FROM frpm WHERE AdmFName1 = 'Alusine' AND AdmLName1 = 'Alusine' AND AdmEmail1 = 'alusine@alameda.edu';
SELECT  AdmLName1, County, School FROM schools WHERE CharterNum = '40';
SELECT  AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND SOC = '62' AND DOC = '54';
SELECT  AdmEmail1 FROM schools WHERE CDSCode = (SELECT CDSCode FROM satscores WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE AvgScrRead >= 1500));
SELECT  COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3='East Bohemia') AND frequency='POPLATEK PO OBRATU';
SELECT  COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague');
SELECT  A12, A13, (A13-A12)/A12*100 AS "Unemployment Ratio" FROM district WHERE A2='Hl.m. Praha' AND A3='Prague' AND A4='1204953' AND A5='0' AND A6='0' AND A7='0' AND A8=1 AND A9=1 AND A10=100.0 AND A11=12541 AND A14=167 AND A15=85677 AND A16=99107;
SELECT  A11 FROM district WHERE A11 > 6000 AND A11 < 10000 AND gender = 'F';
SELECT  COUNT(*) FROM client WHERE gender = 'M' AND A3 = 'North Bohemia' AND A11 > 8000;
SELECT  account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A11, Gap FROM (SELECT account_id, A;
SELECT  account_id, AVG(A11) FROM client WHERE A11 = (SELECT MAX(A11) FROM client) GROUP BY account_id HAVING A13 < (SELECT MAX(A13) FROM client) ORDER BY A13;
SELECT  COUNT(*) FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE'));
SELECT  client_id, disp_id, type, issued FROM client, disp WHERE client.client_id = disp.client_id AND type = 'POPLATEK PO OBRATU';
SELECT  account_id, district_id, frequency, date, amount FROM account WHERE frequency = 'POPLATEK TYDNE' AND date LIKE '1997%' AND status = 'A' ORDER BY amount ASC;
SELECT  account_id, amount FROM account WHERE duration > 12 AND date LIKE '1993%' ORDER BY amount DESC;
SELECT  COUNT(*) FROM client WHERE gender = 'F' AND birth_date < '1950-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Slokolov');
SELECT  * FROM account WHERE date = (SELECT MIN(date) FROM account WHERE date LIKE '1995%');
SELECT  * FROM account WHERE date < '1997-01-01' AND amount > 3000;
SELECT  client_id FROM client WHERE client_id IN (SELECT client_id FROM card WHERE issued = '1994-03-03');
SELECT  * FROM account WHERE date = '1998-10-14' AND amount = 840;
SELECT  district_id FROM account WHERE account_id = 4959;
SELECT  MAX(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE issued = '1996-10-21'));
SELECT  gender, birth_date, A11 FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE' ORDER BY date DESC LIMIT 1));
SELECT  client_id, disp_id, account_id, date, amount FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE loan.amount = (SELECT MAX(loan.amount) FROM loan));
SELECT  COUNT(*) FROM client WHERE district_id = 18 AND gender = 'F';
SELECT  disp_id FROM disp WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_id = (SELECT client_id FROM client WHERE client_;
SELECT  COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND date = '1996-01-01';
SELECT  A2 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = (SELECT client_id FROM disp WHERE disp_id = (SELECT disp_id FROM account WHERE account_id = (SELECT account_id FROM client WHERE client_id = 1 AND gender = 'F' AND birth_date = '1976-01-29'))));
SELECT  birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM loan WHERE loan_id = (SELECT loan_id FROM loan WHERE amount = 98832 AND date = '1996-01-03')));
SELECT  client_id FROM client WHERE district_id = 1;
SELECT  A3, A4, COUNT(gender) AS count_gender, COUNT(gender) / (SELECT COUNT(gender) FROM client WHERE A3 = client.A3) * 100 AS percentage_gender FROM client WHERE gender = 'M' GROUP BY A3, A4 ORDER BY A3, A4;
SELECT  (balance_a - balance_b) / balance_b * 100 FROM (SELECT balance FROM trans WHERE account_id = 1 AND date BETWEEN '1993-03-22' AND '1998-12-27') AS balance_a, (SELECT balance FROM trans WHERE account_id = 1 AND date BETWEEN '1993-03-22' AND '1998-12-27') AS balance_b;
SELECT  (SUM(amount) FILTER (WHERE status = 'A')) / (SUM(amount)) * 100 FROM loan;
SELECT  (SUM(amount) FILTER (WHERE status = 'C') / SUM(amount)) * 100 FROM loan WHERE amount < 100000;
SELECT  account.account_id, district.A2, district.A3 FROM account, district WHERE account.district_id = district.district_id AND account.date > (SELECT date FROM trans WHERE trans.account_id = account.account_id);
SELECT  account_id, frequency FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 IN ('Hl.m. Praha','Benesov','Beroun','Kladno','Kolin'));
SELECT  account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice');
SELECT  A2, A3 FROM district WHERE district_id = (SELECT district_id FROM loan WHERE loan_id = 4990);
SELECT  account_id, A2, A3 FROM account, district WHERE account.district_id = district.district_id AND amount > 300000;
SELECT  loan_id, A3, A11 FROM loan, district WHERE loan.duration = 60 AND loan.district_id = district.district_id;
SELECT  A2, A12, A13, (A13 - A12) / A12 * 100 AS "Unemployment increment rate in percentage" FROM district WHERE A15 = 'D' AND A16 = '1996';
SELECT  A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, COUNT(account_id) FROM account, district WHERE account.district_id = district.district_id AND account.date LIKE '1993%' GROUP BY A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16;
SELECT  account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT  A2, COUNT(DISTINCT client_id) AS female_count FROM client WHERE gender = 'F' GROUP BY A2 ORDER BY female_count DESC LIMIT 10;
SELECT  A2, SUM(amount) FROM trans WHERE type = 'VYDAJ' AND date LIKE '1996-01%' GROUP BY A2 ORDER BY SUM(amount) DESC LIMIT 10;
SELECT  COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND card_id IS NULL;
SELECT  A3, COUNT(A3) FROM district, loan WHERE district.district_id = loan.district_id AND loan.status = 'C' GROUP BY A3 ORDER BY COUNT(A3) DESC LIMIT 1;
SELECT  AVG(amount) FROM loan WHERE client.gender = 'M';
SELECT  A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 FROM district WHERE A13 = (SELECT MAX(A13) FROM district WHERE A13 IS NOT NULL);
SELECT  A16, COUNT(*) FROM district WHERE A16 = (SELECT MAX(A16) FROM district);
SELECT  COUNT(*) FROM account WHERE balance < 0 AND frequency = 'POPLATEK MESICNE' AND operation = 'VYBER KARTOU';
SELECT  COUNT(*) FROM loan WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND amount >= 250000 AND frequency = 'POPLATEK MESICNE' AND status = 'A';
SELECT  COUNT(*) FROM account WHERE district_id = 1 AND status = 'C';
SELECT  COUNT(DISTINCT client_id) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A15 = (SELECT MAX(A15) FROM district WHERE A16 = 2));
SELECT  COUNT(*) FROM card WHERE type = 'gold' AND type = 'disponent';
SELECT  COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');
SELECT  A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 FROM district WHERE A11 > 10000 AND A16 = 1997;
SELECT  * FROM "order" WHERE k_symbol = 'SIPO';
SELECT  account_id FROM card WHERE type = 'gold' AND type = 'junior';
SELECT  AVG(amount) FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE date BETWEEN '2021-01-01' AND '2021-01-31') AND type = 'VYBER KARTOU';
SELECT  disp.disp_id FROM disp, account, card WHERE disp.account_id = account.account_id AND disp.disp_id = card.disp_id AND account.date BETWEEN '1998-01-01' AND '1998-12-31' AND card.issued BETWEEN '1998-01-01' AND '1998-12-31' AND card.type = 'classic' AND account.frequency = 'POPLATEK MESICNE' AND account.date BETWEEN '1998-01-01' AND '1998-12-31' AND account.district_id = 18 AND account.account_id NOT IN (SELECT account_id FROM trans WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND trans.type = 'VYBER KARTOU') AND account.account_id NOT IN (SELECT account_id FROM loan WHERE loan.date BETWEEN '1998-01-01' AND '1998-12-31' AND loan.status = 'A') AND account.account_id NOT IN (SELECT account_id FROM "order" WHERE "order".date BETWEEN '1998-01-01' AND '1998-12-31' AND "order".k_symbol = 'SIPO') AND account.account_id NOT IN (SELECT account_id FROM trans WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND trans.type = 'VYBER KARTOU') AND account.account_id NOT IN (SELECT account_id FROM loan WHERE loan.date BETWEEN '1998-01-01' AND '1998-12-31' AND loan.status = 'A') AND account.account_id NOT IN (SELECT account_id FROM "order" WHERE "order".date BETWEEN '1998-01-01' AND '1998-12-31' AND "order".k_symbol = 'SIPO') AND account.account_id NOT IN (SELECT account;
SELECT  client.client_id, client.gender, client.birth_date, client.district_id, loan.loan_id, loan.account_id, loan.date, loan.amount, loan.duration, loan.payments, loan.status FROM client, loan WHERE client.gender = 'F' AND client.client_id = loan.client_id;
SELECT  COUNT(*) FROM client WHERE gender = 'F' AND A3 ='south Bohemia';
SELECT  * FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Tabor') AND type = 'OWNER';
SELECT  A11 FROM district WHERE A11 > 8000 AND A11 < 9000 AND A15 = 1 AND A16 = 1 AND A1 = 1 AND A2 = 'Hl.m. Praha' AND A3 = 'Prague' AND A4 = '1204953' AND A5 = '0' AND A6 = '0' AND A7 = '0' AND A8 = 1 AND A9 = 1 AND A10 = 100.0;
SELECT  COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'North Bohemia') AND account_id IN (SELECT account_id FROM trans WHERE bank = 'AB');
SELECT  A2 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE type = 'VYDAJ'));
SELECT  A3, A15 FROM district WHERE A15 > 4000 AND A16 > 1997;
SELECT  COUNT(*) FROM card WHERE type = 'classic' AND disp_id IN (SELECT disp_id FROM disp WHERE account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'));
SELECT  COUNT(*) FROM client WHERE district_id = 1 AND gender = 'M';
SELECT  count(type = 'gold' and issued date < 1998) / count(all cards) * 100% FROM card;
SELECT  client.client_id, client.gender, client.birth_date, client.district_id, account.account_id, account.district_id, account.frequency, account.date, loan.loan_id, loan.account_id, loan.date, loan.amount, loan.duration, loan.payments, loan.status FROM client, account, loan WHERE client.client_id = account.client_id AND account.account_id = loan.account_id AND loan.amount = (SELECT MAX(loan.amount) FROM loan);
SELECT  A15 FROM district WHERE district_id = 532;
SELECT  account.district_id FROM account, "order" WHERE account.account_id = "order".account_id AND "order".order_id = 33333;
SELECT  * FROM trans WHERE account_id = 3356 AND operation = 'VYBER';
SELECT  COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND amount < 200000;
SELECT  type FROM card WHERE disp_id = (SELECT disp_id FROM disp WHERE client_id = 13539);
SELECT  A3 FROM client WHERE client_id = 3541;
SELECT  district_id, COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM loan WHERE status = 'A') GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  client.client_id, client.gender, client.birth_date, client.district_id FROM client, "order" WHERE client.client_id = "order".client_id AND "order".order_id = 32423;
SELECT  * FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5);
SELECT  COUNT(*) FROM account WHERE district_id = 18;
SELECT  client_id FROM client WHERE client_id IN (SELECT disp_id FROM card WHERE issued > '1996-01-01' AND type = 'junior');
SELECT  (SELECT COUNT(*) FROM client WHERE gender = 'F' AND district_id = (SELECT district_id FROM district WHERE A11 > 10000)) / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A11 > 10000)) * 100 FROM client WHERE district_id = (SELECT district_id FROM district WHERE A11 > 10000);
SELECT  SUM(amount) - SUM(amount_1996) / SUM(amount_1996) * 100 AS growth_rate FROM loan WHERE client_id IN (SELECT client_id FROM client WHERE gender = 'M') AND date BETWEEN '1996-01-01' AND '1997-12-31';
SELECT  COUNT(*) FROM trans WHERE date > '1995-01-01' AND operation = 'VYBER KARTOU';
SELECT  A16 - A15 FROM district WHERE A3 = 'East Bohemia' OR A3 = 'North Bohemia' AND A2 = '1996';
SELECT  COUNT(DISTINCT(disp_id)) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER','DISPONENT');
SELECT  COUNT(DISTINCT(account_id)) FROM trans WHERE account_id = 3 AND type = 'PRIJEM' AND operation = 'VKLAD';
SELECT  birth_date FROM client WHERE client_id = 130;
SELECT  COUNT(*) FROM account WHERE frequency = 'POPLATEK PO OBRATU';
SELECT  client_id, SUM(amount) FROM loan WHERE client_id = 992 GROUP BY client_id;
SELECT  SUM(amount) FROM trans WHERE account_id = 851;
SELECT  type FROM card WHERE disp_id = (SELECT disp_id FROM disp WHERE client_id = 9);
SELECT  SUM(amount) FROM trans WHERE client_id = 617 AND date LIKE '1998%';
SELECT  client_id, birth_date FROM client WHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Benesov' OR A2 = 'Beroun' OR A2 = 'Kladno' OR A2 = 'Kolin');
SELECT  client_id FROM client WHERE gender = 'F' ORDER BY loan_id DESC LIMIT 3;
SELECT  COUNT(*) FROM client WHERE gender = 'M' AND birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND client_id IN (SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE card_id IN (SELECT card_id FROM loan WHERE loan_id IN (SELECT loan_id FROM trans WHERE amount > 4000 AND type = 'PRIJEM' AND k_symbol = 'SIPO'))));
SELECT  COUNT(*) FROM account WHERE district_id = 3 AND date > '1996-01-01';
SELECT  COUNT(*) FROM client WHERE gender = 'F' AND card_id IN (SELECT card_id FROM card WHERE type = 'junior');
SELECT  A3, count(gender) AS count_gender, count(gender) / (SELECT count(gender) FROM client WHERE district_id = 18) * 100 AS percentage_female FROM client WHERE district_id = 18 GROUP BY A3;
SELECT  (SELECT count(client.gender) FROM client WHERE client.gender = 'M') * 100 / (SELECT count(client.gender) FROM client WHERE client.gender = 'M' AND client.frequency = 'POPLATEK TYDNE') FROM client WHERE client.frequency = 'POPLATEK TYDNE';
SELECT  COUNT(*) FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE'));
SELECT  account_id, amount FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 24 AND status = 'A' AND date < '1997-01-01') ORDER BY amount ASC LIMIT 1;
SELECT  account_id FROM client WHERE gender = 'F' AND A11 = (SELECT MIN(A11) FROM client WHERE gender = 'F');
SELECT  COUNT(*) FROM client WHERE birth_date BETWEEN '1920-01-01' AND '1929-12-31' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'east Bohemia');
SELECT  COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND duration = 24;
SELECT  AVG(amount) FROM loan WHERE status = 'C' AND date > (SELECT date FROM trans WHERE operation = 'PRIJEM' AND type = 'PRIJEM');
SELECT  client_id, A2 FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'));
SELECT  client_id, (strftime('%Y', 'now') - strftime('%Y', birth_date)) AS age FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE type = 'gold'));
SELECT  bond_type, COUNT(bond_type) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT  COUNT(*) FROM molecule WHERE label = '-' AND element = 'cl';
SELECT  AVG(element = 'o') FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-');
SELECT  AVG(bond_type = '-') FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT  COUNT(*) FROM molecule WHERE label = '-' AND element = 'na';
SELECT  molecule_id FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#' AND label = '+');
SELECT  SUM(element = 'c') / COUNT(atom_id) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '=');
SELECT  COUNT(*) FROM bond WHERE bond_type = '#';
SELECT  COUNT(*) FROM atom WHERE element!= 'br';
SELECT  COUNT(*) FROM molecule WHERE label = '+';
SELECT  molecule_id FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element ='si');
SELECT  element FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR004_8_9');
SELECT  element FROM atom, bond WHERE bond.molecule_id = 'TR000' AND bond.bond_type ='='AND atom.molecule_id = bond.molecule_id AND atom.element = 'cl' OR atom.element = 'c' OR atom.element = 'h' OR atom.element = 'o' OR atom.element ='s' OR atom.element = 'n' OR atom.element = 'p' OR atom.element = 'na' OR atom.element = 'br' OR atom.element = 'f' OR atom.element = 'i' OR atom.element ='sn' OR atom.element = 'pb' OR atom.element = 'te' OR atom.element = 'ca';
SELECT  label, COUNT(label) FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1;
SELECT  bond_type FROM bond WHERE molecule_id = 'TR000' AND element = 'te';
SELECT  atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-');
SELECT  a1.atom_id, a2.atom_id FROM atom a1, atom a2, connected c WHERE a1.molecule_id = a2.molecule_id AND a1.molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-') AND c.atom_id = a1.atom_id AND c.atom_id2 = a2.atom_id;
SELECT  element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  bond_type FROM bond WHERE molecule_id = 'TR004' AND (atom_id = 'TR004_8' OR atom_id = 'TR004_20');
SELECT  label FROM molecule WHERE label!= '+' AND NOT EXISTS (SELECT * FROM atom WHERE element ='sn');
SELECT  COUNT(*) FROM atom WHERE element = 'i' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-');
SELECT  * FROM connected WHERE bond_id LIKE '%#%';
SELECT  atom_id FROM connected WHERE molecule_id = 'TR181';
SELECT  SUM(element = 'f') as sum, COUNT(molecule_id) as count FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')  Question: Write Sql for the following question: What percentage of carcinogenic-type molecules does not contain fluorine?  label = '+' mean molecules are carcinogenic;
SELECT  SUM(bond_type = '#') as triple_bond, COUNT(bond_id) as total_bond, SUM(bond_type = '#')/COUNT(bond_id) as percent FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')  Question: Write Sql for the following question: What is the percentage of carcinogenic molecules in triple type bonds?  label = '-' mean molecules are not carcinogenic;
SELECT  element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT  atom_id FROM connected WHERE bond_id = 'TR001_2_6';
SELECT  SUM(label = '+') - SUM(label = '-') FROM molecule;
SELECT  atom_id FROM connected WHERE bond_id = 'TR_000_2_5';
SELECT  bond_id FROM connected WHERE atom_id = 'TR000_2' AND atom_id2 = 'TR000_2';
SELECT  * FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type ='= ') ORDER BY label LIMIT 5;
SELECT  SUM(bond_type ='= ') as double_bond, COUNT(bond_id) as bond_count FROM bond WHERE molecule_id = 'TR008';
SELECT  SUM(label = '+') as carcinogenic, COUNT(molecule_id) as total FROM molecule;
SELECT  SUM(element = 'h') as hydrogen, COUNT(atom_id) as total_atoms FROM atom WHERE molecule_id = 'TR206';
SELECT  bond_type FROM bond WHERE molecule_id = 'TR000';
SELECT  element FROM atom WHERE molecule_id = 'TR060';
SELECT  molecule_id, MAX(COUNT(bond_type)) FROM bond GROUP BY molecule_id HAVING molecule_id = 'TR018'  Question: Write Sql for the following question: Which molecule has the most atoms? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id  Question: Write Sql for the following question: Which molecule has the most bonds? Answer : SELECT molecule_id, MAX(COUNT(bond_id)) FROM bond GROUP BY molecule_id  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id HAVING molecule_id = (SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id)  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id HAVING molecule_id = (SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id)  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id HAVING molecule_id = (SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id)  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id HAVING molecule_id = (SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id)  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id HAVING molecule_id = (SELECT molecule_id, MAX(COUNT(atom_id)) FROM atom GROUP BY molecule_id)  Question: Write Sql for the following question: Which molecule has the most atoms and bonds? Answer : SELECT molecule_id, MAX(COUNT;
SELECT  label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-' AND molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'c') AND atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'c') GROUP BY molecule_id HAVING COUNT(*) = 1 ORDER BY molecule_id LIMIT 3));
SELECT  bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;
SELECT  COUNT(*) FROM bond WHERE molecule_id LIKE 'TR009_%' AND bond_id LIKE '%_12';
SELECT  COUNT(*) FROM molecule WHERE label = '+' AND element = 'br';
SELECT  bond_type, atom_id, atom_id2 FROM bond, connected WHERE bond_id = 'TR001_6_9' AND bond.bond_id = connected.bond_id;
SELECT  label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_10');
SELECT  COUNT(*) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#');
SELECT  COUNT(*) FROM connected WHERE atom_id = 'TR000_19';
SELECT  element FROM atom WHERE molecule_id = 'TR004';
SELECT  COUNT(*) FROM molecule WHERE label = '-';
SELECT  molecule_id FROM molecule WHERE label = '+';
SELECT  bond_id, bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'p' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'n'));
SELECT  molecule_id, count(bond_id) as double_bond_count FROM bond WHERE bond_type ='='AND label = '+' GROUP BY molecule_id ORDER BY double_bond_count DESC LIMIT 1;
SELECT  AVG(COUNT(bond_id)) FROM bond WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'i');
SELECT  bond_type, bond_id FROM bond WHERE SUBSTR(atom_id, 7, 2) + 0 = 45;
SELECT  DISTINCT a.element FROM atom a WHERE a.atom_id NOT IN (SELECT atom_id2 FROM connected);
SELECT  atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = 'TR447' AND bond_type = '#');
SELECT  element FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR144_8_19');
SELECT  label, count(bond_type) FROM molecule, bond, connected WHERE molecule.molecule_id = bond.molecule_id AND bond.bond_id = connected.bond_id AND bond.bond_type = '=' AND molecule.label = '+' GROUP BY label ORDER BY count(bond_type) DESC LIMIT 1;
SELECT  element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  atom_id FROM atom WHERE element = 'pb';
SELECT  element FROM atom, bond, connected WHERE bond.bond_type = '#' AND bond.bond_id = connected.bond_id AND connected.atom_id = atom.atom_id AND atom.element = 'cl';
SELECT  COUNT(bond_id) / COUNT(atom_id) FROM bond, connected WHERE bond.bond_id = connected.bond_id GROUP BY connected.atom_id ORDER BY COUNT(atom_id) DESC LIMIT 1;
SELECT  SUM(label = '+')/COUNT(bond_id) FROM molecule, bond WHERE molecule.molecule_id = bond.molecule_id AND bond.bond_type = '-';
SELECT  SUM(count) FROM (SELECT COUNT(*) AS count FROM atom WHERE element IN ('c', 'h') GROUP BY molecule_id) AS t;
SELECT  atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element ='s');
SELECT  bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element ='sn');
SELECT  COUNT(DISTINCT element) FROM atom, bond WHERE bond.bond_type = '-' AND atom.molecule_id = bond.molecule_id;
SELECT  COUNT(*) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'p' OR element = 'br'));
SELECT  bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT  molecule_id FROM molecule WHERE label = '-' AND molecule_id NOT IN (SELECT molecule_id FROM bond WHERE bond_type = '-');
SELECT  SUM(element = 'cl') as sum, COUNT(atom_id) as count FROM atom WHERE bond_type = '-';
SELECT  label FROM molecule WHERE molecule_id = 'TR000' OR molecule_id = 'TR001' OR molecule_id = 'TR002';
SELECT  molecule_id FROM molecule WHERE label = '-';
SELECT  SUM(label = '+') FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT  molecule_id, bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT  element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11');
SELECT  COUNT(bond_id) FROM bond WHERE bond_type = '-' AND element = 'i';
SELECT  label FROM molecule WHERE element = 'ca' GROUP BY label ORDER BY MAX(label) DESC;
SELECT  * FROM bond WHERE bond_id = 'TR001_1_8' AND element = 'cl' AND element = 'c';
SELECT  molecule_id FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'c'));
SELECT  SUM(element = 'cl') as chlorine, COUNT(molecule_id) as total_molecule, SUM(element = 'cl')/COUNT(molecule_id) as percentage FROM atom, molecule WHERE atom.molecule_id = molecule.molecule_id AND molecule.label = '+';
SELECT  element FROM atom WHERE molecule_id = 'TR001';
SELECT  molecule_id FROM bond WHERE bond_type ='= ';
SELECT  atom_id, atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#');
SELECT  element FROM atom, bond, connected WHERE atom.atom_id = connected.atom_id AND connected.atom_id2 = bond.atom_id AND bond.bond_id = 'TR005_16_26';
SELECT  COUNT(*) FROM molecule WHERE label = '-' AND bond_type = '-';
SELECT  label FROM molecule WHERE molecule_id = 'TR001';
SELECT  bond_id, label FROM bond, molecule WHERE bond.molecule_id = molecule.molecule_id AND bond_type = '#' AND label = '+';
SELECT  substr(atom_id, 7, 1) AS atom_id, element, count(*) AS count FROM atom, bond, connected, molecule WHERE substr(atom_id, 7, 1) = 4 AND bond_type = '-' AND molecule_id = molecule_id AND atom_id = atom_id2 AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule_id = molecule_id AND atom_id = atom_id AND molecule;
SELECT  SUM(element = 'h') AS hydrogen_count, count(element) AS total_count FROM atom WHERE molecule_id = 'TR006';
SELECT  * FROM molecule WHERE label = '+' AND EXISTS (SELECT * FROM atom WHERE element = 'ca');
SELECT  bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'te');
SELECT  element FROM atom WHERE molecule_id = SUBSTR('TR001_10_11', 1, 5) AND atom_id = SUBSTR('TR001_10_11', 7, 2) OR atom_id = SUBSTR('TR001_10_11', 10, 2);
SELECT  COUNT(*) FROM bond WHERE bond_type = '#' ;
SELECT  SUM(bond_type ='= ') / COUNT(all bond_id) as percent FROM bond WHERE molecule_id = 'TR047';
SELECT  label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 'TR001_1');
SELECT  label FROM molecule WHERE molecule_id = 'TR151';
SELECT  element FROM atom WHERE molecule_id = 'TR151';
SELECT  COUNT(*) FROM molecule WHERE label = '+';
SELECT  * FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c';
SELECT  COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT  bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND bond_type ='= ';
SELECT  COUNT(*) FROM molecule WHERE label = '+' AND element = 'h';
SELECT  molecule_id FROM bond WHERE bond_id = 'TR00_1_2' AND atom_id = 'TR00_1';
SELECT  * FROM atom WHERE element = 'c' AND label!= '-';
SELECT  SUM(label = '+' and element = 'h') AS hydrogen_count, COUNT(molecule_id) AS molecule_count, (SUM(label = '+' and element = 'h') / COUNT(molecule_id)) * 100.0 AS percentage FROM molecule;
SELECT  label FROM molecule WHERE molecule_id = 'TR124';
SELECT  atom_id FROM atom WHERE molecule_id = 'TR186';
SELECT  bond_type FROM bond WHERE molecule_id = 'TR007' AND bond_id = 'TR007_4_19';
SELECT  element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4');
SELECT  COUNT(*) FROM bond WHERE molecule_id = 'TR006' AND bond_type ='= ';
SELECT  label, element FROM molecule, atom, connected WHERE molecule.molecule_id = atom.molecule_id AND atom.atom_id = connected.atom_id AND connected.atom_id2 = 'TR000_1' AND label = '+' AND element = 'cl' OR element = 'c' OR element = 'h' OR element = 'o' OR element ='s' OR element = 'n' OR element = 'p' OR element = 'na' OR element = 'br' OR element = 'f' OR element = 'i' OR element ='sn' OR element = 'pb' OR element = 'te' OR element = 'ca';
SELECT  bond_id, atom_id, atom_id2 FROM connected WHERE bond_type = '-';
SELECT  molecule_id, element FROM atom, bond, connected WHERE bond_type = '#' AND element = 'cl' AND atom.atom_id = connected.atom_id AND connected.atom_id2 = atom.atom_id2 AND atom.molecule_id = bond.molecule_id AND bond.bond_id = connected.bond_id;
SELECT  element FROM atom WHERE atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id = 'TR000_2_3');
SELECT  COUNT(*) FROM bond WHERE bond_type = '-' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl');
SELECT  atom_id, count(bond_type) FROM connected WHERE molecule_id = 'TR346' GROUP BY atom_id;
SELECT  COUNT(*) FROM molecule WHERE label = '+' AND bond_type ='= ';
SELECT  COUNT(*) FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element ='s') AND molecule_id NOT IN (SELECT molecule_id FROM bond WHERE bond_type ='= ');
SELECT  label FROM molecule WHERE molecule_id = 'TR001';
SELECT  COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT  COUNT(*) FROM bond WHERE bond_type = '-';
SELECT  label FROM molecule WHERE label = '+';
SELECT  label FROM molecule WHERE label = '-';
SELECT  SUM(label = '+' and element = 'cl') as carcinogenic_cl, COUNT(molecule_id) as total_molecule, DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage FROM molecule;
SELECT  molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT  COUNT(DISTINCT element) FROM atom, bond, connected WHERE bond_id = 'TR001_3_4' AND atom.atom_id = connected.atom_id AND bond.bond_id = connected.bond_id;
SELECT  bond_type FROM bond WHERE molecule_id = 'TR000' AND bond_id = 'TR000_1_2';
SELECT  molecule_id FROM connected WHERE atom_id = 'TR000_2' AND atom_id2 = 'TR000_4';
SELECT  element FROM atom WHERE atom_id = 'TR000_1';
SELECT  label FROM molecule WHERE molecule_id = 'TR000';
SELECT  SUM(bond_type = '-'), COUNT(bond_id) FROM bond;
SELECT  COUNT(*) FROM molecule WHERE element = 'n' AND label = '+';
SELECT  molecule_id FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element ='s') AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '=');
SELECT  molecule_id, label FROM molecule WHERE label = '-' AND COUNT(molecule_id) > 5;
SELECT  element FROM atom WHERE molecule_id = 'TR024' AND bond_type = '=';
SELECT  label, COUNT(atom.molecule_id) FROM atom, molecule WHERE atom.molecule_id = molecule.molecule_id GROUP BY label HAVING label = '+' ORDER BY COUNT(atom.molecule_id) DESC LIMIT 1;
SELECT  SUM(label = '+') AS carcinogenic_molecules, COUNT(molecule_id) AS total_molecules, (SUM(label = '+') / COUNT(molecule_id)) * 100.0 AS percentage FROM molecule WHERE element = 'h' AND bond_type = '#';
SELECT  COUNT(*) FROM molecule WHERE label = '+';
SELECT  COUNT(*) FROM bond WHERE molecule_id BETWEEN 'TR004' and 'TR010' AND bond_type = '-';
SELECT  COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';
SELECT  element FROM atom WHERE atom_id = 'TR004_7' AND molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-');
SELECT  COUNT(*) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'o') AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '=');
SELECT  COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#');
SELECT  element, bond_type FROM atom, bond, connected WHERE atom.atom_id = connected.atom_id AND bond.bond_id = connected.bond_id AND molecule_id = 'TR016';
SELECT  atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND bond_type ='= ';
SELECT  atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND element = 'o';
SELECT  * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT  * FROM cards WHERE borderColor IS NULL AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT  name, MAX(faceConvertedManaCost) FROM cards GROUP BY name HAVING MAX(faceConvertedManaCost) > 1;
SELECT  name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100;
SELECT  cards.name, cards.rarity, cards.status, cards.format FROM cards WHERE cards.rarity ='mythic' AND cards.status = 'Banned' AND cards.format = 'gladiator';
SELECT  * FROM cards WHERE type = 'Artifact' AND side IS NULL AND format = 'vintage';
SELECT  id, artist FROM cards WHERE power = '*' OR power IS NULL AND format = 'commander' AND status = 'Legal';
SELECT  cards.name, cards.text, cards.hasContentWarning FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = '<NAME>';
SELECT  * FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s');
SELECT  cards.name, cards.artist, count(rulings.uuid) as ruling_count, cards.isPromo FROM cards LEFT JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY ruling_count DESC LIMIT 1;
SELECT  * FROM cards WHERE name = 'annul' AND number = '29';
SELECT  name FROM cards WHERE language = 'Japanese';
SELECT  SUM(id) AS Chinese_Simplified_Count, COUNT(id) AS Total_Count FROM cards WHERE language = 'Chinese Simplified';
SELECT  setCode, totalSetSize FROM sets WHERE language = 'Italian';
SELECT  COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';
SELECT  keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT  COUNT(*) FROM cards WHERE power = '*';
SELECT  promoTypes FROM cards WHERE name = 'Duress';
SELECT  cards.borderColor FROM cards WHERE cards.name = 'Ancestor''s Chosen';
SELECT  originalType FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT  set_translations.translation FROM set_translations WHERE set_translations.setCode = (SELECT sets.code FROM sets WHERE sets.id = (SELECT cards.setId FROM cards WHERE cards.name = 'Angel of Mercy'));
SELECT  COUNT(*) FROM cards WHERE status ='restricted' AND isTextless = 0;
SELECT  text FROM rulings WHERE uuid = '5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c';
SELECT  COUNT(*) FROM cards WHERE status ='restricted' AND isStarter = 1;
SELECT  status FROM legalities WHERE uuid = '8ac972b5-9f6e-5cc8-91c3-b9a40a98232e';
SELECT  type FROM cards WHERE name = 'Benalish Knight';
SELECT  * FROM cards WHERE name = 'Benalish Knight';
SELECT  artist FROM cards WHERE language = 'Phyrexian';
SELECT  Count(id) where borderColor = 'borderless' / Count(id) *100;
SELECT  COUNT(*) FROM cards WHERE language = 'German' AND isReprint = 1;
SELECT  COUNT(*) FROM cards WHERE borderColor = 'borderless' AND language = 'Russian';
SELECT  Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1;
SELECT  COUNT(*) FROM cards WHERE toughness = '99';
SELECT  name FROM cards WHERE artist = 'Aaron Boyd';
SELECT  COUNT(*) FROM cards WHERE borderColor = 'black' AND availability ='mtgo';
SELECT  id FROM cards WHERE convertedManaCost = 0;
SELECT  layout FROM cards WHERE keywords LIKE '%flying%';
SELECT  COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';
SELECT  id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT  id FROM cards WHERE duelDeck = 'a';
SELECT  edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT  artist FROM cards WHERE language = 'Chinese Simplified';
SELECT  * FROM cards WHERE availability = 'paper' AND language = 'Japanese';
SELECT  COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white';
SELECT  uuid, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.format = 'legacy';
SELECT  * FROM rulings WHERE uuid = '56f4935b-f6c5-59b9-88bf-9bcce20247ce';
SELECT  COUNT(*) FROM cards WHERE frameVersion = 'future' AND status = 'legal';
SELECT  * FROM cards WHERE setCode = 'OGW';
SELECT  * FROM cards WHERE setCode = '10E' AND convertedManaCost = 5;
SELECT  name, date FROM cards, rulings WHERE cards.uuid = rulings.uuid AND originalType = 'Creature - Elf';
SELECT  id, colors, format FROM cards WHERE id BETWEEN 1 AND 20;
SELECT  * FROM cards WHERE originalType = 'Artifact' AND colors = 'B' AND language in (SELECT language FROM foreign_data);
SELECT  name FROM cards WHERE rarity = 'uncommon' ORDER BY rulings.date ASC;
SELECT  COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL AND power = 'non-powerful';
SELECT  COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT  COUNT(*) FROM cards WHERE artist = 'UDON' AND availability ='mtgo' AND hand = -1;
SELECT  COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT  cards.manaCost FROM cards WHERE cards.layout = 'normal' AND cards.frameVersion = '2003' AND cards.borderColor = 'black' AND cards.availability = 'paper' OR cards.availability ='mtgo';
SELECT  SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander';
SELECT  type FROM cards WHERE availability = 'arena';
SELECT  setCode FROM set_translations WHERE language = 'Spanish';
SELECT  COUNT(hand = '+3')/COUNT(id) FROM cards WHERE frameEffects = 'legendary';
SELECT  id, name, isStorylight, isTextless FROM cards WHERE isStorylight = 1 AND isTextless = 0 GROUP BY id ORDER BY id;
SELECT  name, SUM(id) AS Spanish, COUNT(id) AS Total FROM cards WHERE language = 'Spanish' GROUP BY name ORDER BY name;
SELECT  set_translations.translation FROM set_translations, sets WHERE set_translations.setCode = sets.code AND sets.baseSetSize = 309;
SELECT  COUNT(*) FROM sets WHERE block = 'Commander' AND language = 'Portuguese (Brasil)';
SELECT  * FROM cards WHERE type = 'Creature' AND status = 'legal';
SELECT  type FROM cards WHERE type IN (SELECT subtype FROM cards WHERE subtype IS NOT NULL) AND type IN (SELECT supertype FROM cards WHERE supertype IS NOT NULL) AND language = 'German';
SELECT  COUNT(*) FROM cards WHERE power IS NULL AND (ability_text IS NOT NULL OR ability_type IS NOT NULL);
SELECT  COUNT(*) FROM cards WHERE format!='modern' AND rulings LIKE '%This is a triggered mana ability%' AND side IS NULL;
SELECT  id FROM cards WHERE artist = 'Erica Yang' AND format = 'pauper' AND availability = 'paper';
SELECT  artist FROM cards WHERE text LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%';
SELECT  name FROM cards WHERE type = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' AND language = 'French';
SELECT  COUNT(*) FROM cards WHERE rarity = 'rare' AND date = '2009-01-10';
SELECT  set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE sets.block = 'Ravnica' AND sets.baseSetSize = 180;
SELECT  COUNT(hasContentWarning = 0)/COUNT(ID)*100 FROM cards WHERE format = 'commander' AND Status = 'legal';
SELECT  (SELECT COUNT(power is NULL or power = '*') FROM cards WHERE language = 'French') / (SELECT COUNT(power is NULL or power = '*') FROM cards) * 100;
SELECT  COUNT(language = 'Japanese') FROM sets WHERE type = 'expansion';
SELECT  * FROM cards WHERE artist = 'Daren Bader';
SELECT  COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;
SELECT  COUNT(*) FROM cards WHERE isOversized = 1 OR isReprint = 1 OR isPromo = 1;
SELECT  * FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3;
SELECT  language FROM foreign_data WHERE multiverseid = 149934;
SELECT  cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;
SELECT  COUNT(Textless = 1 and layout = 'normal')/COUNT(Textless)*100 FROM cards;
SELECT  id FROM cards WHERE (id NOT IN (SELECT card_id FROM faces)) AND (subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%') AND side IS NULL;
SELECT  name, code FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;
SELECT  language FROM set_translations WHERE setCode = 'ARC';
SELECT  name, translation FROM set_translations WHERE setCode = '4BB';
SELECT  language, type FROM set_translations WHERE setCode = '206';
SELECT  cards.id, cards.name, cards.setCode, set_translations.translation FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Italian' AND cards.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;
SELECT  * FROM sets WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND language = 'Japanese';
SELECT  code, MAX(baseSetSize) FROM sets WHERE language = 'Russian' GROUP BY code;
SELECT  COUNT(isOnlineOnly = 1) FROM sets WHERE code = '10E' AND language = 'Chinese Simplified';
SELECT  COUNT(*) FROM sets WHERE language = 'Japanese' AND mtgoCode IS NULL OR mtgoCode = '';
SELECT  id FROM cards WHERE borderColor = 'black';
SELECT  id FROM cards WHERE frameEffects = 'extendedart';
SELECT  * FROM cards WHERE borderColor = 'white' AND isFullArt = 1;
SELECT  language FROM set_translations WHERE setCode = '174';
SELECT  name FROM sets WHERE code = 'ALL';
SELECT  language FROM foreign_data WHERE uuid = (SELECT uuid FROM cards WHERE name = 'A Pedra Fellwar');
SELECT  code FROM sets WHERE releaseDate = '2007-07-13';
SELECT  baseSetSize, code FROM sets WHERE block LIKE '%Masques%' OR block LIKE '%Mirage%';
SELECT  code FROM sets WHERE type = 'expansion';
SELECT  name, type FROM cards WHERE watermark = 'boros';
SELECT  language, flavorText FROM foreign_data WHERE uuid = '5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c';
SELECT  COUNT(convertedManaCost = 10) FROM cards WHERE setCode = 'Abyssal Horror';
SELECT  code FROM sets WHERE type = 'commander';
SELECT  name, type FROM cards WHERE watermark = 'abzan';
SELECT  language, type FROM foreign_data WHERE uuid = '5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c';
SELECT  COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null;
SELECT  COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT  name FROM cards WHERE isTextless = 0;
SELECT  convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';
SELECT  COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;
SELECT  name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT  subtypes,supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT  purchaseUrls FROM cards WHERE promoTypes = 'bundle';
SELECT  COUNT(artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';
SELECT  * FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC;
SELECT  artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT  name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT  name FROM sets WHERE code = '10E' AND name = 'Ancestor's Chosen';
SELECT  COUNT(*) FROM set_translations WHERE setCode = '10E' AND translation LIKE '%Angel of Mercy%';
SELECT  name FROM cards WHERE setCode = '10E';
SELECT  * FROM cards WHERE name = 'Ancestor's Chosen' AND language = 'Korean';
SELECT  COUNT(*) FROM cards WHERE setCode = '10E' AND artist = 'Adam Rex';
SELECT  COUNT(*) FROM sets WHERE code = '10E' AND baseSetSize = 383;
SELECT  translation FROM set_translations WHERE setCode = 'Eighth Edition' AND language = 'Chinese Simplified';
SELECT  * FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL;
SELECT  releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';
SELECT  type FROM sets WHERE code = '10E';
SELECT  COUNT(*) FROM sets WHERE block = 'Ice Age' AND language = 'Italian';
SELECT  * FROM sets WHERE name = 'Adarkar Valkyrie' AND isForeignOnly = 1;
SELECT  COUNT(*) FROM sets WHERE language = 'Italian' AND translation IS NOT NULL AND baseSetSize < 10;
SELECT  COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND borderColor = 'black';
SELECT  name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;
SELECT  artist FROM cards WHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');
SELECT  * FROM cards WHERE setCode = 'Coldsnap' AND number = 4;
SELECT  COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost > 5 AND (power = '*' OR power is null);
SELECT  flavorText FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen';
SELECT  language FROM foreign_data WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL);
SELECT  type FROM cards WHERE name = 'Ancestor''s Chosen' AND language = 'German';
SELECT  rulings.text FROM cards, rulings WHERE cards.uuid = rulings.uuid AND cards.setCode = 'Coldsnap' AND cards.language = 'Italian';
SELECT  name FROM cards WHERE setCode = 'Coldsnap' AND language = 'Italian' ORDER BY convertedManaCost DESC;
SELECT  date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');
SELECT  SUM(convertedManaCost = 7)/SUM(convertedManaCost)*100 FROM cards WHERE name = 'Coldsnap';
SELECT  SUM(incredibly powerful) FROM cards WHERE name = 'Coldsnap' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT  code FROM sets WHERE releaseDate = '2017-07-14';
SELECT  keyruneCode FROM sets WHERE code = 'PKHC';
SELECT  mcmId FROM sets WHERE code = 'SS2';
SELECT  mcmName FROM sets WHERE releaseDate = '2017-06-09';
SELECT  type FROM sets WHERE code = 'FVL';
SELECT  parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT  * FROM cards WHERE artist = 'Jim Pavelec' AND hasContentWarning = 1;
SELECT  releaseDate FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Evacuation');
SELECT  baseSetSize FROM sets WHERE code = 'RIN';
SELECT  set_translations.translation, sets.type FROM set_translations, sets WHERE set_translations.setCode = sets.code AND set_translations.translation = 'Huitième édition';
SELECT  name FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Tendo Ice Bridge' AND language = 'French');
SELECT  COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL;
SELECT  name FROM sets WHERE code = '4BB' AND language = 'Japanese';
SELECT  name, convertedManaCost FROM cards WHERE setCode = 'JOU' ORDER BY convertedManaCost DESC LIMIT 1;
SELECT  releaseDate FROM sets WHERE code = 'Ola de frío';
SELECT  type FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Samite Pilgrim');
SELECT  COUNT(*) FROM cards WHERE setCode = 'WC2004' AND convertedManaCost = 3;
SELECT  translation FROM set_translations WHERE setCode = 'Mirrodin' AND language = 'Chinese Simplified';
SELECT  SUM(isNonFoilOnly = 1), SUM(language = 'Japanese') FROM cards WHERE language = 'Japanese';
SELECT  SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)') FROM cards WHERE language = 'Portuguese (Brazil)';
SELECT  DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT  id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT  artist, MAX(convertedManaCost) FROM cards WHERE side IS NULL GROUP BY artist;
SELECT  frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1;
SELECT  COUNT(*) FROM cards WHERE power IS NULL AND hasFoil = 0 AND duelDeck = 'a';
SELECT  code, MAX(totalSetSize) FROM sets WHERE type = 'commander' GROUP BY code;
SELECT  cards.name, cards.manaCost, cards.convertedManaCost FROM cards WHERE cards.format = 'duel' AND cards.convertedManaCost = (SELECT MAX(cards.convertedManaCost) FROM cards WHERE cards.format = 'duel');
SELECT  MIN(originalReleaseDate), rarity, status, format FROM cards WHERE rarity ='mythic' AND status = 'legal' AND format IS NOT NULL GROUP BY format;
SELECT  COUNT(*) FROM cards WHERE artist = 'Volkan Baga' AND language = 'French';
SELECT  COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal';
SELECT  format, name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE status = 'banned' GROUP BY format ORDER BY MAX(status = 'banned') DESC;
SELECT  language FROM set_translations WHERE setCode = 'Battlebond';
SELECT  artist, format FROM cards GROUP BY artist, format ORDER BY MIN(artist)  Question: Write Sql for the following question: List the names of the cards that are in the core set. Answer : SELECT name FROM cards WHERE setcode = 'core'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green or white. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green, white, or blue. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W,U'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green, white, blue, or black. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W,U,B'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green, white, blue, black, or red. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W,U,B,R'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green, white, blue, black, red, or multicolor. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W,U,B,R,M'  Question: Write Sql for the following question: List the names of the cards that are in the core set and have a color identity of green, white, blue, black, red, multicolor, or colorless. Answer : SELECT name FROM cards WHERE setcode = 'core' AND coloridentity = 'G,W,U,B,R,M,C';
SELECT  * FROM cards WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';
SELECT  name, status, format FROM cards WHERE edhrecRank = 1 AND status = 'banned';
SELECT  AVG(id), MAX(COUNT(language)) FROM sets WHERE releaseDate BETWEEN 1/1/2012 AND 12/31/2015;
SELECT  artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';
SELECT  uuid FROM cards WHERE format = 'oldschool' AND status = 'banned' OR status ='restricted';
SELECT  COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT  * FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE artist = 'Kev Walker') ORDER BY MAX(date) DESC;
SELECT  cards.name FROM cards WHERE cards.setCode = 'HOU' AND cards.status = 'legal';
SELECT  name FROM sets WHERE language!= '%Japanese%' AND language = 'Korean';
SELECT  frameVersion, artist, status FROM cards WHERE artist = 'Allen Williams' AND status = 'banned';
SELECT  DisplayName, Reputation FROM Users ORDER BY Reputation DESC LIMIT 1;
SELECT  DisplayName FROM Users WHERE year(CreationDate) = 2014;
SELECT  COUNT(*) FROM Users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT  DisplayName FROM Users WHERE Id = (SELECT MAX(Views) FROM Users);
SELECT  COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT  COUNT(*) FROM Users WHERE Views > 10 AND Year(CreationDate) > 2013;
SELECT  COUNT(*) FROM users WHERE DisplayName = "csgillespie";
SELECT  Title FROM posts WHERE OwnerDisplayName = 'csgillespie';
SELECT  DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1);
SELECT  TOP 1 Title FROM posts WHERE OwnerDisplayName = 'csgillespie' ORDER BY ViewCount DESC  Question: Write Sql for the following question: What is the title of the post that is owned by csgillespie and has the highest score?  "csgillespie" is the DisplayName of user;
SELECT  DisplayName FROM Users WHERE Id = (SELECT OwnerUserId FROM Posts WHERE Id = (SELECT MAX(FavoriteCount) FROM Posts));
SELECT  SUM(CommentCount) FROM posts WHERE OwnerDisplayName = 'csgillespie';
SELECT  DisplayName, MAX(AnswerCount) FROM Users WHERE DisplayName = "csgillespie";
SELECT  users.DisplayName FROM posts, users WHERE posts.Id = 135 AND posts.LastEditorUserId = users.Id;
SELECT  COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;
SELECT  DISTINCT u.DisplayName FROM users u, posts p WHERE p.OwnerUserId = u.Id AND p.ClosedDate IS NOT NULL;
SELECT  COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;
SELECT  OwnerUserId, Title FROM posts WHERE Title = 'Eliciting priors from experts';
SELECT  Body FROM posts WHERE Id = 20257;
SELECT  p.Id, p.Body FROM posts p, tags t WHERE p.Id = t.ExcerptPostId GROUP BY p.Id ORDER BY MAX(t.Count) DESC LIMIT 1;
SELECT  COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT  badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = "csgillespie";
SELECT  COUNT(*) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = "csgillespie") AND YEAR(Date) = 2011;
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);
SELECT  AVG(Score) FROM posts WHERE OwnerDisplayName = 'csgillespie';
SELECT  DisplayName, Count(Id) AS Badges FROM users, badges WHERE users.Id = badges.UserId AND users.Views > 200 GROUP BY DisplayName;
SELECT  (SELECT COUNT(Id) FROM posts WHERE Score > 20) AS Total, (SELECT COUNT(Id) FROM posts WHERE Score > 20 AND Age > 65) AS Elder FROM posts;
SELECT  COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT  CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT  COUNT(*) FROM badges WHERE Name = 'Revival';
SELECT  posts.Title FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(comments.Score) FROM comments);
SELECT  COUNT(*) FROM comments WHERE PostId = 2;
SELECT  COUNT(*) FROM posts WHERE FavoriteCount = 3025;
SELECT  Text FROM comments WHERE PostId = 107829 AND CommentCount = '1';
SELECT  * FROM posts WHERE OwnerUserId = 23853 AND ClosedDate IS NULL AND CreationDate = '2013-07-12 09:08:18.0';
SELECT  Reputation FROM Users WHERE Id = '65041';
SELECT  COUNT(*) FROM users WHERE DisplayName = "Tiago Pasqualini";
SELECT  DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 381800);
SELECT  COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%');
SELECT  Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = "DatEpicCoderGuyWhoPrograms");
SELECT  COUNT(post.Id) / COUNT(votes.Id) FROM posts post, votes WHERE post.OwnerUserId = '24';
SELECT  SUM(ViewCount) FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT  * FROM comments WHERE Score = 17;
SELECT  DisplayName FROM Users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT  badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text LIKE '%thank you user93%');
SELECT  * FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion');
SELECT  DisplayName, Reputation FROM Users WHERE DisplayName = 'Emmett';
SELECT  * FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?');
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer');
SELECT  users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.LastEditorUserId WHERE posts.Title = 'Open source tools for visualizing multi-dimensional data?';
SELECT  Title FROM posts WHERE LastEditorDisplayName = 'Vebjorn Ljosa';
SELECT  DisplayName, WebsiteUrl, SUM(Score) AS TotalScore FROM Users INNER JOIN Posts ON Users.Id = Posts.LastEditorUserId GROUP BY DisplayName, WebsiteUrl;
SELECT  comments.Id, comments.PostId, comments.Score, comments.Text, comments.CreationDate, comments.UserId, comments.UserDisplayName FROM comments WHERE comments.PostId = (SELECT posts.Id FROM posts WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?');
SELECT  SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%');
SELECT  DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE PostId = (SELECT Id FROM posts WHERE Title LIKE '%variance%' AND BountyAmount = 50));
SELECT  Posts.Id, Posts.Title, Posts.Text, AVG(Posts.ViewCount) AS AverageViewCount FROM Posts INNER JOIN Tags ON Posts.Id = Tags.ExcerptPostId WHERE Tags.TagName = 'humor' GROUP BY Posts.Id, Posts.Title, Posts.Text ORDER BY AverageViewCount DESC;
SELECT  COUNT(*) FROM comments WHERE UserId = 13;
SELECT  Id FROM Users WHERE Reputation = (SELECT MAX(Reputation) FROM Users);
SELECT  Id FROM Users WHERE Views = (SELECT MIN(Views) FROM Users);
SELECT  COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date LIKE '2011%';
SELECT  COUNT(Name) FROM badges WHERE Count > 5;
SELECT  COUNT(*) FROM users WHERE Location = 'New York' AND Id IN (SELECT UserId FROM badges WHERE Name = 'Teacher' OR Name = 'Supporter');
SELECT  users.DisplayName, users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 1;
SELECT  * FROM users WHERE Id IN (SELECT UserId FROM postHistory GROUP BY UserId HAVING COUNT(Id) = 1 AND SUM(ViewCount) >= 1000);
SELECT  users.Id, users.DisplayName, Count(comments.Id) as CommentCount FROM users LEFT JOIN comments ON users.Id = comments.UserId GROUP BY users.Id ORDER BY CommentCount DESC LIMIT 1;
SELECT  COUNT(*) FROM users WHERE Location = "India" AND Name = "Teacher";
SELECT  Name, (SELECT Count(Name) FROM badges WHERE Year(Date) = 2010) AS 2010, (SELECT Count(Name) FROM badges WHERE Year(Date) = 2011) AS 2011, (SELECT Count(Name) FROM badges WHERE Year(Date) = 2010) - (SELECT Count(Name) FROM badges WHERE Year(Date) = 2011) AS Diff FROM badges GROUP BY Name ORDER BY Diff DESC;
SELECT  PostHistoryTypeId, COUNT(DISTINCT UserId) FROM postHistory WHERE PostId = 3720 GROUP BY PostHistoryTypeId;
SELECT  p.Id, p.Title, p.ViewCount FROM posts p WHERE p.Id IN (SELECT RelatedPostId FROM postLinks WHERE PostId = 61217);
SELECT  Score, LinkTypeId FROM postLinks WHERE PostId = 395;
SELECT  PostId, UserId FROM posts WHERE Score > 60;
SELECT  SUM(FavoriteCount) FROM Users WHERE Id = 686 AND CreationDate = 2011;
SELECT  AVG(UpVotes) AS 'Average Up Votes', AVG(Age) AS 'Average Age' FROM Users WHERE Count(UserId) > 10;
SELECT  COUNT(*) FROM badges WHERE Name = 'Announcer';
SELECT  Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT  COUNT(*) FROM comments WHERE Score > 60;
SELECT  * FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';
SELECT  COUNT(*) FROM posts WHERE Score = 10;
SELECT  DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT  users.DisplayName, badges.Name, badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0';
SELECT  badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = "Pierre";
SELECT  badges.Date FROM badges WHERE badges.UserId IN (SELECT users.Id FROM users WHERE users.Location = "Rochester, NY");
SELECT  Name, COUNT(UserId) AS Count, COUNT(UserId) / (SELECT COUNT(UserId) FROM users) * 100 AS Percentage FROM badges JOIN users ON badges.UserId = users.Id WHERE Name = 'Teacher' GROUP BY Name;
SELECT  Name, COUNT(UserId) AS Count, (COUNT(UserId) * 100.0) / (SELECT COUNT(UserId) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer')) AS Percentage FROM badges WHERE Name = 'Organizer' AND UserId IN (SELECT UserId FROM users WHERE Age BETWEEN 13 AND 18) GROUP BY Name;
SELECT  Score FROM Comments WHERE PostId = (SELECT Id FROM Posts WHERE CreationDate = '2010-07-19 19:19:56.0')  Question: Write Sql for the following question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM  created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0' Answer : SELECT Score FROM Comments WHERE PostId = (SELECT Id FROM Posts WHERE CreationDate = '2010-07-19 19:19:56.0')  Question: Write Sql for the following question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM  created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0' Answer : SELECT Score FROM Comments WHERE PostId = (SELECT Id FROM Posts WHERE CreationDate = '2010-07-19 19:19:56.0')  Question: Write Sql for the following question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM  created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0' Answer : SELECT Score FROM Comments WHERE PostId = (SELECT Id FROM Posts WHERE CreationDate = '2010-07-19 19:19:56.0')  Question: Write Sql for the following question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM  created on 7/19/2010 7:19;
SELECT  Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';
SELECT  users.Age, badges.Name FROM users, badges WHERE users.Location = "Vienna, Austria" AND users.Id = badges.UserId;
SELECT  COUNT(*) FROM badges WHERE Name = 'Supporter' AND Age BETWEEN 19 AND 65;
SELECT  COUNT(*) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');
SELECT  Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users));
SELECT  badges.Name FROM badges WHERE badges.UserId = (SELECT users.Id FROM users WHERE users.DisplayName = "Sharpie");
SELECT  COUNT(*) FROM badges WHERE Name = 'Supporter' AND Age > 65;
SELECT  DisplayName FROM Users WHERE Id = 30;
SELECT  COUNT(*) FROM Users WHERE Location = 'New York, NY';
SELECT  COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT  COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT  DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT  COUNT(Id) / (SELECT COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2011) FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT  tags.TagName FROM tags INNER JOIN postTags ON tags.Id = postTags.TagId INNER JOIN posts ON postTags.PostId = posts.Id WHERE posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'John Stauffer');
SELECT  COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo';
SELECT  COUNT(*) FROM votes WHERE UserId = 18;
SELECT  Id, DisplayName, MAX(AnswerCount) FROM posts WHERE DisplayName ='slashnick' GROUP BY DisplayName;
SELECT  DisplayName, MAX(SUM(ViewCount)) FROM users, posts WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder' GROUP BY DisplayName;
SELECT  COUNT(*) FROM posts WHERE PostTypeId = 1 AND Score > 4 AND DisplayName = 'Matt Parker';
SELECT  COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan')) AND Score < 60;
SELECT  tags.TagName FROM tags INNER JOIN posts ON tags.Id = posts.Id WHERE posts.OwnerUserId = 18 AND posts.CommentCount = 0;
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer');
SELECT  COUNT(PostId) as R_posts, COUNT(PostId) as total_posts, (COUNT(PostId) / (SELECT COUNT(PostId) FROM Posts WHERE DisplayName = 'Community')) as percentage FROM Posts WHERE DisplayName = 'Community' AND TagName = 'r';
SELECT  SUM(ViewCount) - SUM(ViewCount) FROM posts WHERE DisplayName = 'Mornington' OR DisplayName = 'Amos';
SELECT  COUNT(*) FROM badges WHERE Name = 'Commentator' AND Year(Date) = 2014;
SELECT  COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';
SELECT  DisplayName, Age FROM Users WHERE Id IN (SELECT UserId FROM Posts WHERE PostTypeId = 1 GROUP BY UserId ORDER BY MAX(Views) DESC);
SELECT  Posts.Id, Posts.LastEditDate, Posts.LastEditorUserId FROM Posts WHERE Posts.Title = 'Detecting a given face in a database of facial images';
SELECT  COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13;
SELECT  DisplayName FROM users, comments WHERE comments.UserId = users.Id AND comments.PostId = 3 AND comments.Score > 60;
SELECT  Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Location LIKE '%North Pole%') AND Date LIKE '%2011%';
SELECT  DisplayName, WebsiteUrl FROM Users WHERE Id IN (SELECT UserId FROM Posts WHERE FavoriteCount > 150);
SELECT  postHistory.Id, postHistory.PostHistoryTypeId, postHistory.PostId, postHistory.RevisionGUID, postHistory.CreationDate, postHistory.UserId, postHistory.Text, postHistory.Comment, postHistory.UserDisplayName, posts.Title, posts.Tags, posts.AnswerCount, posts.CommentCount, posts.FavoriteCount, posts.LastEditorUserId, posts.LastEditDate, posts.CommunityOwnedDate, posts.ParentId, posts.ClosedDate, posts.OwnerDisplayName, posts.LastEditorDisplayName FROM postHistory INNER JOIN posts ON postHistory.PostId = posts.Id WHERE posts.Title = 'What is the best introductory Bayesian statistics textbook?';
SELECT  users.DisplayName, users.LastAccessDate, users.Location FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Outliers';
SELECT  p.Title FROM posts p, postLinks pl WHERE p.Id = pl.PostId AND pl.RelatedPostId = 173;
SELECT  PostId, Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel') AND YEAR(CreationDate) = 2013 AND YEAR(Date) = 2013;
SELECT  TOP 1 OwnerDisplayName FROM Posts ORDER BY ViewCount DESC;
SELECT  DisplayName, Location FROM Users WHERE Id = OwnerUserId WHERE TagName = 'hypothesis-testing';
SELECT  p.Title, pl.LinkTypeId FROM posts p, postLinks pl WHERE p.Id = pl.PostId AND pl.RelatedPostId = 173;
SELECT  ParentId, MAX(Score) AS MaxScore, OwnerDisplayName FROM Posts WHERE ParentId IS NOT NULL GROUP BY ParentId ORDER BY MaxScore DESC LIMIT 1;
SELECT  DisplayName, WebsiteUrl FROM users WHERE Id IN (SELECT UserId FROM votes WHERE VoteTypeId = 8) AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);
SELECT  Title FROM Posts ORDER BY ViewCount DESC LIMIT 5;
SELECT  COUNT(*) FROM tags WHERE Count BETWEEN 5000 and 7000;
SELECT  OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT  DisplayName, Age FROM Users WHERE Id = (SELECT MAX(Id) FROM Users);
SELECT  COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2011 AND BountyAmount = 50;
SELECT  Id FROM Users ORDER BY Age ASC LIMIT 1;
SELECT  tags.TagName, posts.Score FROM tags, posts WHERE tags.Id = posts.Id AND tags.Count = (SELECT MAX(Count) FROM tags);
SELECT  AVG(MONTH(CreationDate)) FROM Posts WHERE YEAR(CreationDate) = 2010 AND AnswerCount <= 2;
SELECT  Id FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE UserId = 1465);
SELECT  Title FROM posts WHERE Id = (SELECT MIN(RelatedPostId) FROM postLinks);
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1);
SELECT  MIN(CreationDate) FROM votes WHERE PostId = 3;
SELECT  MIN(Age), MIN(CreaionDate) FROM Users;
SELECT  DisplayName FROM users WHERE Id = (SELECT MIN(UserId) FROM badges WHERE Name = 'Autobiographer');
SELECT  COUNT(*) FROM users WHERE Location = 'United Kingdom' AND FavoriteCount >= 4;
SELECT  AVG(PostId) FROM votes WHERE UserId = (SELECT MAX(Age) FROM users);
SELECT  DisplayName FROM Users WHERE Reputation = (SELECT MAX(Reputation) FROM Users);
SELECT  COUNT(*) FROM Users WHERE Reputation > 2000 AND Views > 1000;
SELECT  DisplayName FROM Users WHERE Age BETWEEN 19 AND 65;
SELECT  COUNT(*) FROM posts WHERE OwnerDisplayName = 'Jay Stevens' AND YEAR(CreationDate) = 2010;
SELECT  Id, Title FROM Posts WHERE OwnerDisplayName = 'Harvey Motulsky' ORDER BY ViewCount DESC LIMIT 1;
SELECT  Id, Title FROM Posts WHERE Score = (SELECT MAX(Score) FROM Posts);
SELECT  AVG(Score) FROM posts WHERE OwnerDisplayName = 'Stephen Turner';
SELECT  DisplayName FROM users WHERE Id IN (SELECT UserId FROM posts WHERE Id IN (SELECT PostId FROM postHistory WHERE Id IN (SELECT PostHistoryTypeId FROM postHistory WHERE PostHistoryTypeId = 1 AND PostId IN (SELECT Id FROM posts WHERE YEAR(CreationDate) = 2011 AND ViewCount > 20000))));
SELECT  Id, OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE year(CreationDate) = 2010);
SELECT  COUNT(Id) as total_posts, COUNT(Id where Reputation > 1000) as total_users_with_reputation_over_1000 FROM users WHERE CreationDate = 2011;
SELECT  COUNT(Id) as teenagers FROM users WHERE Age BETWEEN 13 and 18;
SELECT  SUM(ViewCount) AS TotalViews, DisplayName AS LastPoster FROM posts, users WHERE posts.OwnerUserId = users.Id AND Title = 'Computer Game Datasets' GROUP BY DisplayName;
SELECT  COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT  COUNT(*) FROM comments WHERE PostId = (SELECT MAX(Score) FROM posts);
SELECT  COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT  DisplayName, Location FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Id = 183)  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views and are tagged with "bayesian"? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000 AND Tags LIKE '%bayesian%'  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views and are tagged with "bayesian" or "normality"? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000 AND Tags LIKE '%bayesian%' OR Tags LIKE '%normality%'  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views and are tagged with "bayesian" or "normality" or "open-source"? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000 AND Tags LIKE '%bayesian%' OR Tags LIKE '%normality%' OR Tags LIKE '%open-source%'  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views and are tagged with "bayesian" or "normality" or "open-source" or "statistical-significance"? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000 AND Tags LIKE '%bayesian%' OR Tags LIKE '%normality%' OR Tags LIKE '%open-source%' OR Tags LIKE '%statistical-significance%'  Question: Write Sql for the following question: What is the average score of posts that have at least 1000 views and are tagged with "bayesian" or "normality" or "open-source" or "statistical-significance" or "distributions"? Answer : SELECT AVG(Score) FROM posts WHERE ViewCount >= 1000 AND Tags LIKE '%bayesian%' OR Tags LIKE '%normality%' OR Tags LIKE '%open-source%' OR Tags;
SELECT  Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') AND Date = (SELECT MAX(Date) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett'));
SELECT  COUNT(*) FROM Users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT  Id, SUBTRACT(Date from stats_badges, CreationDate) as 'Time' FROM badges WHERE DisplayName = 'Zolomon';
SELECT  u.DisplayName, COUNT(p.Id) AS PostCount, COUNT(c.Id) AS CommentCount FROM users u LEFT JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN comments c ON u.Id = c.UserId GROUP BY u.Id ORDER BY MAX(u.CreationDate) DESC LIMIT 1;
SELECT  Text, UserDisplayName FROM Comments WHERE PostId = (SELECT Id FROM Posts WHERE Title = 'Analysing wind data with R' AND OwnerDisplayName = 'Emmett') ORDER BY CreationDate DESC LIMIT 1;
SELECT  COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';
SELECT  COUNT(*) FROM tags WHERE TagName = 'careers';
SELECT  Reputation, Views FROM Users WHERE DisplayName = 'Jarrod Dixon';
SELECT  COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data');
SELECT  CreationDate FROM Users WHERE DisplayName = 'IrishStat';
SELECT  COUNT(*) FROM votes WHERE BountyAmount >= 30;
SELECT  MAX(Reputation) as MaxReputation, COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation)) as Count FROM stats_posts GROUP BY MaxReputation;
SELECT  COUNT(*) FROM posts WHERE Score < 20;
SELECT  COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT  ExcerptPostId, WikiPostId FROM tags WHERE TagName ='sample';
SELECT  users.Reputation, users.UpVotes FROM users, comments WHERE comments.Text = 'fine, you win :)' AND comments.UserId = users.Id;
SELECT  * FROM posts WHERE tags LIKE '%anova%' AND tags LIKE '%binary%';
SELECT  * FROM posts WHERE ViewCount BETWEEN 100 AND 150 ORDER BY Score DESC LIMIT 1;
SELECT  CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List the creation date and age of the user that commented with webiste.  commented with webiste refers to the value contains 'http://' Answer : SELECT CreationDate, DATEDIFF(CURDATE(), CreationDate) AS Age FROM users WHERE DisplayName LIKE '%http://%'  Question: Write Sql for the following question: List;
SELECT  COUNT(*) FROM posts WHERE ViewCount < 5 AND Score = 0;
SELECT  COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);
SELECT  COUNT(DISTINCT UserId) FROM Comments WHERE Score = 0 AND UserId IN (SELECT Id FROM Users WHERE Age = 40);
SELECT  Id, Text FROM Comments WHERE PostId IN (SELECT Id FROM Posts WHERE Title = 'Group differences on a five point Likert item');
SELECT  COUNT(*) FROM votes WHERE PostId = (SELECT Id FROM comments WHERE Text = "R is also lazy evaluated.");
SELECT  * FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky');
SELECT  DisplayName FROM Users WHERE Id IN (SELECT UserId FROM Comments WHERE Score BETWEEN 1 and 5 AND DownVotes = 0);
SELECT  COUNT(UserId) as total, COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10) as zero_upvotes FROM votes WHERE Score BETWEEN 5 and 10;
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superhero.superhero_name = '3-D Man' AND superhero.id = hero_power.hero_id AND hero_power.power_id = superpower.id;
SELECT  COUNT(*) FROM hero_power WHERE power_id = 1;
SELECT  COUNT(*) FROM superhero WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') AND height_cm > 200;
SELECT  full_name FROM superhero WHERE COUNT(full_name) > 15;
SELECT  COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT  colour.colour FROM superhero, colour WHERE superhero.skin_colour_id = colour.id AND superhero.superhero_name = 'Apocalypse';
SELECT  COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND power_id = (SELECT id FROM superpower WHERE power_name = 'Agility');
SELECT  superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');
SELECT  COUNT(*) FROM superhero WHERE publisher_id = 3;
SELECT  full_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'));
SELECT  publisher_name FROM publisher WHERE publisher_name = 'DC Comics';
SELECT  COUNT(*) FROM superhero WHERE publisher_id = 3 AND eye_colour_id = 4;
SELECT  AVG(height_cm) FROM superhero WHERE publisher_id = 3;
SELECT  SUM(superpower.power_name = 'Super Strength') AS 'Super Strength', COUNT(superhero.id) AS 'Total Superheroes', (SUM(superpower.power_name = 'Super Strength') / COUNT(superhero.id)) * 100 AS 'Percentage of Superheroes with Super Strength' FROM superhero, superpower, hero_power WHERE superhero.id = hero_power.hero_id AND superpower.id = hero_power.power_id AND superhero.publisher_id = 3;
SELECT  COUNT(*) FROM superhero WHERE publisher_id = 4;
SELECT  publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero WHERE id = (SELECT MIN(id) FROM superhero WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed')));
SELECT  COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT  publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero WHERE superhero_name = 'Blue Beetle II');
SELECT  COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');
SELECT  superhero_name FROM superhero WHERE id = (SELECT MIN(id) FROM hero_attribute WHERE attribute_name = 'Intelligence');
SELECT  race_id FROM superhero WHERE superhero_name = 'Copycat';
SELECT  COUNT(*) FROM hero_attribute WHERE attribute_name = 'Durability' AND attribute_value < 50;
SELECT  superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Death Touch'));
SELECT  COUNT(*) FROM superhero WHERE gender_id = 2 AND attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength' AND attribute_value = 100);
SELECT  superhero_name FROM superhero WHERE id = (SELECT hero_id FROM hero_power GROUP BY hero_id ORDER BY COUNT(hero_id) DESC LIMIT 1);
SELECT  COUNT(*) FROM superhero WHERE race_id = 2;
SELECT  SUM(alignment = 'Bad) AS bad_heroes, COUNT(id) AS total_heroes, (SUM(alignment = 'Bad) / COUNT(id)) * 100 AS percentage FROM superhero WHERE publisher_id = 3;
SELECT  SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher;
SELECT  publisher_id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT  AVG(attribute_value) FROM hero_attribute;
SELECT  COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT  colour.colour FROM colour WHERE colour.id = (SELECT superhero.eye_colour_id FROM superhero WHERE superhero.id = 75);
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superpower.id = hero_power.power_id AND superhero.id = hero_power.hero_id AND superhero.superhero_name = 'Deathlok';
SELECT  AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superpower.id = hero_power.power_id AND superhero.id = hero_power.hero_id AND superhero.gender_id = 1;
SELECT  superhero_name FROM superhero WHERE race_id = 2;
SELECT  superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT  superpower.power_name FROM superpower, hero_power WHERE superpower.id = hero_power.power_id AND hero_power.hero_id = 56;
SELECT  superhero_name FROM superhero WHERE race_id = 2;
SELECT  COUNT(*) FROM superhero WHERE alignment_id = 2;
SELECT  race_id FROM superhero WHERE weight_kg = 169;
SELECT  colour.colour FROM colour WHERE colour.id = (SELECT hair_colour_id FROM superhero WHERE superhero.height_cm = 185 AND superhero.race = 'human');
SELECT  colour.colour FROM superhero, colour WHERE superhero.eye_colour_id = colour.id AND superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero);
SELECT  SUM(publisher.id = 13), COUNT(publisher.id), 100 FROM publisher WHERE publisher.id = 13;
SELECT  full_name FROM superhero WHERE gender_id = 1 AND weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79;
SELECT  superpower.power_name, COUNT(superpower.power_name) FROM superpower, hero_power WHERE superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY COUNT(superpower.power_name) DESC LIMIT 1;
SELECT  attribute_value FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination');
SELECT  superpower.power_name FROM superpower, hero_power WHERE superpower.id = hero_power.power_id AND hero_power.hero_id = 1;
SELECT  COUNT(*) FROM hero_power WHERE power_id = 18;
SELECT  full_name FROM superhero WHERE id = (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name ='strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name ='strength')));
SELECT  AVG(superhero.id) FROM superhero WHERE skin_colour_id = 1;
SELECT  COUNT(*) FROM superhero WHERE publisher_id = 3;
SELECT  superhero_name FROM superhero WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND durability = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'durability');
SELECT  colour.colour FROM colour WHERE colour.id = superhero.eye_colour_id;
SELECT  superhero_name FROM superhero WHERE power_name = 'Flight';
SELECT  eye_colour_id, hair_colour_id, skin_colour_id FROM superhero WHERE gender = 'Female' AND publisher_name = 'Dark Horse Comics';
SELECT  superhero_name, publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id;
SELECT  race.race FROM race, superhero WHERE race.id = superhero.race_id AND superhero.superhero_name = 'A-Bomb';
SELECT  SUM(colour = 'Blue' WHERE gender = 'Female') AS blue_female, COUNT(gender = 'Female') AS female_count, (SUM(colour = 'Blue' WHERE gender = 'Female') / COUNT(gender = 'Female')) * 100 AS percentage FROM superhero;
SELECT  superhero_name, race FROM superhero WHERE full_name = 'Charles Chandler';
SELECT  gender_id FROM superhero WHERE superhero_name = 'Agent 13';
SELECT  superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Adaptation'));
SELECT  COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo');
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superpower.id = hero_power.power_id AND superhero.id = hero_power.hero_id AND superhero.superhero_name = 'Hunter Zolomon';
SELECT  height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber');
SELECT  superhero_name FROM superhero WHERE eye_colour_id = hair_colour_id AND colour.colour = 'Black';
SELECT  eye_colour_id FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');
SELECT  full_name FROM superhero WHERE race_id = 2;
SELECT  superhero_name FROM superhero WHERE alignment_id = 3;
SELECT  COUNT(*) FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');
SELECT  race.race, alignment.alignment FROM superhero, race, alignment WHERE superhero.race_id = race.id AND superhero.alignment_id = alignment.id AND superhero.superhero_name = 'Cameron Hicks';
SELECT  SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics') AS female_heroes, COUNT(publisher_name = 'Marvel Comics') AS total_heroes, (SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics') / COUNT(publisher_name = 'Marvel Comics')) * 100 AS percent FROM superhero;
SELECT  AVG(weight_kg) FROM superhero WHERE race_id = 2;
SELECT  SUM(weight_kg WHERE full_name = 'Emil Blonsky') - SUM(weight_kg WHERE full_name = 'Charles Chandler') AS difference;
SELECT  AVG(height_cm) FROM superhero;
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superhero.id = hero_power.hero_id AND hero_power.power_id = superpower.id AND superhero.superhero_name = 'Abomination';
SELECT  COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT  superhero_name FROM superhero WHERE id = (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY attribute_value DESC LIMIT 1);
SELECT  COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT  superhero_name, attribute_name, attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = '3-D Man';
SELECT  superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT  publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'));
SELECT  COUNT(*) FROM superhero WHERE publisher_id = 1;
SELECT  SUM(superhero_name WHERE eye_colour_id = 7) AS blue_eyes, COUNT(superhero_name) AS total_superheroes, (SUM(superhero_name WHERE eye_colour_id = 7) / COUNT(superhero_name)) * 100 AS percentage FROM superhero;
SELECT  SUM(gender_id = 1) / SUM(gender_id = 2) AS ratio FROM superhero;
SELECT  superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT  power_id FROM superpower WHERE power_name = 'cryokinesis';
SELECT  superhero_name FROM superhero WHERE superhero.id = 294;
SELECT  full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT  colour.colour FROM colour, superhero WHERE superhero.eye_colour_id = colour.id AND superhero.full_name = 'Karen Beecher-Duncan';
SELECT  superpower.power_name FROM superpower, hero_power, superhero WHERE superpower.id = hero_power.power_id AND superhero.full_name = '<NAME>' AND superhero.id = hero_power.hero_id;
SELECT  race_id FROM superhero WHERE weight_kg = 108 AND height_cm = 188;
SELECT  publisher_name FROM publisher WHERE publisher.id = (SELECT publisher_id FROM superhero WHERE superhero.id = 38);
SELECT  race_id FROM hero_attribute GROUP BY race_id ORDER BY MAX(attribute_value) DESC LIMIT 1;
SELECT  alignment.alignment, superpower.power_name FROM superhero, alignment, hero_power, superpower WHERE superhero.id = hero_power.hero_id AND superhero.alignment_id = alignment.id AND hero_power.power_id = superpower.id AND superhero.superhero_name = 'Atom IV';
SELECT  full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT  AVG(attribute_value) FROM hero_attribute WHERE alignment_id = 3;
SELECT  colour.colour FROM colour, superhero, hero_attribute WHERE superhero.skin_colour_id = colour.id AND superhero.id = hero_attribute.hero_id AND hero_attribute.attribute_value = 100;
SELECT  COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT  superhero_name FROM superhero WHERE attribute_value BETWEEN 75 AND 80;
SELECT  race FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'blue') AND gender ='male';
SELECT  SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2), SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2), 100.0 FROM superhero, gender WHERE superhero.gender_id = gender.id AND alignment.id = 2;
SELECT  SUM(colour.id = 7) - SUM(colour.id = 1) FROM superhero T1 JOIN colour ON T1.eye_colour_id = colour.id WHERE T1.weight_kg = 0 OR T1.weight_kg = NULL;
SELECT  attribute_value FROM hero_attribute WHERE attribute_name = 'Strength' AND hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Hulk');
SELECT  superpowers.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';
SELECT  COUNT(*) FROM superhero WHERE skin_colour_id = 2;
SELECT  COUNT(*) FROM superhero WHERE gender_id = 2 AND publisher_id = 3;
SELECT  superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Wind Control'));
SELECT  gender_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Phoenix Force'));
SELECT  superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;
SELECT  AVG(height_cm) FROM superhero WHERE race <> 'Human' AND publisher_name = 'Dark Horse Comics';
SELECT  COUNT(*) FROM hero_attribute WHERE attribute_name = 'Speed' AND attribute_value = 100;
SELECT  SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') FROM publisher;
SELECT  attribute_name FROM attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Black Panther'));
SELECT  colour.colour FROM colour WHERE colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination';
SELECT  superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT  superhero_name FROM superhero WHERE superhero_name = 'Charles Chandler';
SELECT  SUM(gender = 'Female' WHERE publisher_name = 'George Lucas') AS female, COUNT(publisher_name = 'George Lucas') AS total, (SUM(gender = 'Female' WHERE publisher_name = 'George Lucas') / COUNT(publisher_name = 'George Lucas')) * 100.0 AS percentage FROM superhero WHERE publisher_name = 'George Lucas';
SELECT  SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') AS good_heroes, COUNT(publisher_name = 'Marvel Comics') AS total_heroes, (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') / COUNT(publisher_name = 'Marvel Comics')) * 100.0 AS percentage FROM superhero WHERE publisher_name = 'Marvel Comics';
SELECT  COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT  hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);
SELECT  full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT  full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = 3;
SELECT  attribute_value FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Aquababy');
SELECT  weight_kg, race FROM superhero WHERE id = 40;
SELECT  AVG(height_cm) FROM superhero WHERE alignment_id = 3;
SELECT  superhero.id FROM superhero, hero_power, superpower WHERE superhero.id = hero_power.hero_id AND hero_power.power_id = superpower.id AND superpower.power_name = 'Intelligence';
SELECT  colour.colour FROM colour, superhero WHERE superhero.eye_colour_id = colour.id AND superhero.superhero_name = 'Blackwulf';
SELECT  power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE height_cm > MULTIPLY(AVG(height_cm), 0.8)));
SELECT  driverRef FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 18 AND position = 1 AND positionOrder = 5 AND statusId = 1);
SELECT  surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 19 AND position = 2 AND fastestLapTime = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19));
SELECT  r.year FROM races r, circuits c WHERE r.circuitId = c.circuitId AND c.name = 'Shanghai International Circuit';
SELECT  url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';
SELECT  name FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Germany');
SELECT  circuitId, name, location, country, lat, lng, alt, url FROM circuits WHERE circuitId IN (SELECT circuitId FROM constructorResults WHERE constructorId IN (SELECT constructorId FROM constructors WHERE name = 'Renault'));
SELECT  COUNT(*) FROM races WHERE year = 2010 AND circuitId NOT IN (SELECT circuitId FROM circuits WHERE country IN ('Asia', 'Europe'));
SELECT  name FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Spain');
SELECT  circuits.lat, circuits.lng FROM circuits WHERE circuits.circuitRef = 'australian';
SELECT  * FROM races WHERE circuitId = 2;
SELECT  races.time FROM races WHERE races.circuitId = 2;
SELECT  lat, lng FROM circuits WHERE circuitRef = 'abu_dhabi_grand_prix';
SELECT  country FROM constructors, constructorResults WHERE constructors.constructorId = constructorResults.constructorId AND constructorResults.raceId = 24 AND constructorResults.points = 1;
SELECT  q1 FROM qualifying WHERE raceId = 354 AND driverId = 1;
SELECT  nationality FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40');
SELECT  driverId FROM results WHERE raceId = 903 AND position = 3 AND time = '0:01:54';
SELECT  COUNT(results.driverId) FROM results WHERE results.raceId = 4 AND results.statusId = 1;
SELECT  races.url FROM races WHERE raceId = 901;
SELECT  COUNT(results.driverId) FROM results WHERE results.raceId = (SELECT races.raceId FROM races WHERE races.date = '2015-11-29');
SELECT  drivers.forename, drivers.surname, drivers.dob FROM drivers, results WHERE results.raceId = 592 AND results.statusId = 1 AND results.driverId = drivers.driverId ORDER BY drivers.dob ASC LIMIT 1;
SELECT  driverId,forename,surname,url FROM drivers,lapTimes WHERE lapTimes.milliseconds=12700 AND lapTimes.raceId=161;
SELECT  drivers.forename, drivers.surname, drivers.nationality FROM drivers, results WHERE results.driverId = drivers.driverId AND results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);
SELECT  circuitRef, lat, lng FROM circuits WHERE circuitId = 2;
SELECT  constructors.url FROM constructors, constructorResults WHERE constructors.constructorId = constructorResults.constructorId AND constructorResults.raceId = 9 ORDER BY constructorResults.points DESC LIMIT 1;
SELECT  q1 FROM qualifying WHERE raceId = 345 AND driverId = 1;
SELECT  drivers.forename, drivers.surname, drivers.nationality, races.name, races.date, races.time, lapTimes.time, lapTimes.milliseconds FROM drivers, races, lapTimes WHERE drivers.driverId = lapTimes.driverId AND races.raceId = lapTimes.raceId AND lapTimes.raceId = 347 AND lapTimes.milliseconds = 6715 AND lapTimes.lap = 2;
SELECT  driverId FROM results WHERE raceId = 45 AND q3 = '0:01:33';
SELECT  time FROM lapTimes WHERE raceId = 743 AND driverId = 1;
SELECT  driverId,forename,surname,position,positionText,points,laps,time,milliseconds,fastestLap,rank,fastestLapTime,fastestLapSpeed,statusId FROM results WHERE raceId = 18 AND position = 2;
SELECT  races.url FROM races WHERE raceId = 901;
SELECT  COUNT(results.driverId) FROM results WHERE results.raceId = (SELECT races.raceId FROM races WHERE races.date = '2015-11-29');
SELECT  driverId, MAX(dob) FROM results WHERE raceId = 872 GROUP BY driverId;
SELECT  driverId, forename, surname, MIN(time) FROM lapTimes WHERE raceId = 348 GROUP BY driverId;
SELECT  nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 348 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 348));
SELECT  raceId, fastestLapSpeed(raceId = 853) as fastestLapSpeed, fastestLapSpeed(raceId = 854) as fastestLapSpeed2, fastestLapSpeed(raceId = 853) as fastestLapSpeed3, (fastestLapSpeed(raceId = 853) - fastestLapSpeed(raceId = 854)) as difference FROM results WHERE raceId = 853;
SELECT  driverid, COUNT(driverid) as total_races, COUNT(driverid where time has value and date = '1983-07-16') as total_completed_races, (COUNT(driverid where time has value and date = '1983-07-16'))/COUNT(driverid) as percentage FROM results WHERE date = '1983-07-16' GROUP BY driverid;
SELECT  min(year) FROM races;
SELECT  COUNT(raceId) FROM races WHERE year = 2005;
SELECT  name FROM races WHERE year = year(min(date)) AND month = month(min(date));
SELECT  name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;
SELECT  year, COUNT(raceId) FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1;
SELECT  name FROM races WHERE year!= 2000;
SELECT  circuits.name, circuits.country FROM circuits, races WHERE circuits.circuitId = races.circuitId AND races.year = (SELECT min(year) FROM races);
SELECT  MAX(year) FROM seasons;
SELECT  COUNT(DISTINCT year) FROM races WHERE circuitId = 1;
SELECT  drivers.forename, drivers.surname, driverStandings.position FROM drivers, driverStandings WHERE driverStandings.raceId = 18 AND driverStandings.driverId = drivers.driverId AND driverStandings.raceId = 18 AND driverStandings.year = 2010 ORDER BY driverStandings.position;
SELECT  drivers.forename, drivers.surname, max(results.points) FROM drivers JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY max(results.points) DESC LIMIT 1;
SELECT  drivers.forename, drivers.surname, constructorResults.points FROM drivers, constructorResults WHERE drivers.driverId = constructorResults.driverId AND constructorResults.raceId = 18 AND constructorResults.constructorId = 3 AND constructorResults.raceId = 18 AND constructorResults.year = 2017 ORDER BY points DESC LIMIT 3;
SELECT  driverId, raceId, min(milliseconds) FROM lapTimes GROUP BY driverId, raceId;
SELECT  AVG(time) FROM lapTimes WHERE raceId = 3 AND driverId = 1;
SELECT  COUNT(raceId) where surname = 'Hamilton', year >= 2010 and position>1) as percentage;
SELECT  drivers.forename, drivers.surname, drivers.nationality, AVG(results.points) FROM drivers JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY AVG(results.points) DESC LIMIT 1;
SELECT  name, year(max(dob)) FROM drivers WHERE nationality = 'Japanese' GROUP BY name ORDER BY year(max(dob)) ASC LIMIT 1;
SELECT  circuitRef, name, date, time, url FROM races WHERE year BETWEEN 1990 AND 2000 GROUP BY circuitRef, name, date, time, url HAVING COUNT(raceId) = 4;
SELECT  circuits.name, circuits.location, races.name FROM circuits, races WHERE circuits.circuitId = races.circuitId AND races.year = 2006 AND circuits.country = 'USA';
SELECT  r.name, c.name, c.location FROM races r, circuits c WHERE r.circuitId = c.circuitId AND r.date LIKE '%2005-09%';
SELECT  * FROM races WHERE year = 2009 AND round = 1 AND position < 10 AND driverId = 1;
SELECT  COUNT(*) FROM constructorResults WHERE raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE circuitRef ='sepang')) AND constructorId IN (SELECT constructorId FROM constructors WHERE constructorRef ='mclaren') AND points = (SELECT MAX(points) FROM constructorResults WHERE raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE circuitRef ='sepang')) AND constructorId IN (SELECT constructorId FROM constructors WHERE constructorRef ='mclaren'));
SELECT  r.name, r.year FROM races r, lapTimes lt WHERE lt.raceId = r.raceId AND lt.milliseconds = (SELECT min(milliseconds) FROM lapTimes WHERE raceId = r.raceId) AND lt.driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher')  Question: Write Sql for the following question: List the fastest lap times for each driver in the 2009 season.  fastest lap refers to min(milliseconds) Answer : SELECT d.forename, d.surname, lt.milliseconds FROM drivers d, lapTimes lt WHERE lt.raceId = (SELECT raceId FROM races WHERE year = 2009) AND lt.milliseconds = (SELECT min(milliseconds) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2009)) AND lt.driverId = d.driverId  Question: Write Sql for the following question: List the fastest lap times for each driver in the 2009 season.  fastest lap refers to min(milliseconds) Answer : SELECT d.forename, d.surname, lt.milliseconds FROM drivers d, lapTimes lt WHERE lt.raceId = (SELECT raceId FROM races WHERE year = 2009) AND lt.milliseconds = (SELECT min(milliseconds) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2009)) AND lt.driverId = d.driverId  Question: Write Sql for the following question: List the fastest lap times for each driver in the 2009 season.  fastest lap refers to min(milliseconds) Answer : SELECT d.forename, d.surname, lt.milliseconds FROM drivers d, lapTimes lt WHERE lt.raceId = (SELECT raceId FROM races WHERE year = 2009) AND lt.milliseconds = (SELECT min(milliseconds) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2009)) AND lt.driverId = d.driverId  Question: Write Sql for the following question: List the fastest lap times for each driver in the 2009 season.  fastest lap refers to min(milliseconds) Answer : SELECT d.forename, d.surname,;
SELECT  AVG(points) FROM results WHERE year = 2000;
SELECT  * FROM races WHERE year = (SELECT MIN(year) FROM races);
SELECT  races.name, races.date, circuits.country FROM races, circuits WHERE races.circuitId = circuits.circuitId AND races.year = 2017 ORDER BY races.date;
SELECT  r.name, r.year, c.location FROM races r, circuits c WHERE r.circuitId = c.circuitId GROUP BY r.name, r.year, c.location ORDER BY COUNT(r.name) DESC LIMIT 1;
SELECT  COUNT(races.name) FROM races WHERE races.country = 'Germany' AND races.name = 'European Grand Prix';
SELECT  lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT  circuitId, name, lat FROM circuits WHERE lat = (SELECT max(lat) FROM circuits);
SELECT  circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT  country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT  COUNT(*) FROM drivers WHERE code IS NULL;
SELECT  nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT  surname FROM drivers WHERE nationality = 'italian';
SELECT  url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT  driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT  circuits.name FROM circuits, races WHERE races.circuitId = circuits.circuitId AND races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT  DISTINCT races.year FROM races WHERE races.circuitId = (SELECT circuitId FROM circuits WHERE circuits.name = 'Silverstone Circuit');
SELECT  * FROM races WHERE circuitId = 1;
SELECT  date FROM races WHERE year = 2010 AND circuitId = 1;
SELECT  COUNT(raceId) FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy');
SELECT  date FROM races WHERE circuitId = 4;
SELECT  url FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009;
SELECT  min(fastestLapTime) FROM lapTimes WHERE driverId = 1;
SELECT  drivers.forename, drivers.surname, results.fastestLapSpeed FROM drivers, results WHERE results.driverId = drivers.driverId AND results.fastestLapSpeed IS NOT NULL ORDER BY results.fastestLapSpeed ASC LIMIT 1;
SELECT  driverRef FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) ORDER BY position ASC LIMIT 1);
SELECT  races.name, races.date, races.circuitId, races.url FROM races, results, drivers WHERE races.raceId = results.raceId AND results.driverId = drivers.driverId AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT  raceId, min(rank) FROM results WHERE driverId = 1 GROUP BY raceId;
SELECT  max(fastestLapSpeed) FROM results WHERE raceId = 18;
SELECT  year FROM races WHERE raceId IN (SELECT raceId FROM results WHERE driverId = 1);
SELECT  positionOrder FROM results WHERE raceId = 18 AND driverId = 1 AND statusId = 1 ORDER BY positionOrder DESC LIMIT 1;
SELECT  drivers.forename, drivers.surname FROM drivers, results WHERE drivers.driverId = results.driverId AND results.raceId = 18 AND results.grid = 4;
SELECT  COUNT(*) FROM results WHERE raceId = 18 AND time IS NOT NULL;
SELECT  * FROM lapTimes WHERE raceId = 18 AND driverId = 1 ORDER BY milliseconds DESC LIMIT 1;
SELECT  time FROM results WHERE raceId = 18 AND position = 2 AND year = 2008;
SELECT  r.name, r.date, r.time, r.url FROM races r, constructorResults cr, constructors c WHERE r.raceId = cr.raceId AND cr.constructorId = c.constructorId AND r.year = 2008 AND r.round = 1 AND cr.points IS NOT NULL AND cr.status = 'Finished' ORDER BY cr.points DESC LIMIT 1;
SELECT  COUNT(*) FROM drivers WHERE nationality = 'American';
SELECT  COUNT(raceID) FROM results WHERE raceID = 18 AND statusID = 1;
SELECT  SUM(points) FROM results WHERE driverId = 1;
SELECT  AVG(milliseconds) FROM lapTimes WHERE driverId = 1;
SELECT  COUNT(raceID) FROM races WHERE year = 2008 AND statusId = 1;
SELECT  (100 * (incremental_time - champion_time) / (incremental_time + champion_time)) * 100 FROM (SELECT (SELECT time FROM results WHERE raceId = 18 AND driverId = 1 AND statusId = 1) AS incremental_time, (SELECT time FROM results WHERE raceId = 18 AND driverId = 1 AND statusId = 1) AS champion_time) AS t;
SELECT  COUNT(*) FROM circuits WHERE location = 'Melbourne';
SELECT  lat, lng FROM circuits WHERE country = 'USA';
SELECT  COUNT(*) FROM drivers WHERE dob > 1980 AND nationality = 'British';
SELECT  AVG(points) FROM constructorResults WHERE constructorId IN (SELECT constructorId FROM constructors WHERE nationality = 'British');
SELECT  constructors.name, constructorResults.points FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId ORDER BY constructorResults.points DESC LIMIT 1;
SELECT  constructors.name FROM constructors, constructorResults WHERE constructors.constructorId = constructorResults.constructorId AND constructorResults.raceId = 18 AND constructorResults.points = 0;
SELECT  COUNT(constructorID) FROM constructors WHERE nationality = 'Japanese' AND points = 0 AND raceID = 2;
SELECT  constructorRef, name, points FROM constructorStandings WHERE position = 1;
SELECT  COUNT(*) FROM constructors WHERE nationality = 'French' AND number > 50;
SELECT  year, COUNT(driverId) as total_drivers, COUNT(driverId) - COUNT(driverId) FILTER (WHERE time IS NOT NULL) as completed_drivers, (COUNT(driverId) - COUNT(driverId) FILTER (WHERE time IS NOT NULL)) / COUNT(driverId) * 100 as percentage FROM results WHERE year BETWEEN 2007 AND 2009 GROUP BY year;
SELECT  year, AVG(milliseconds) FROM results WHERE statusId = 1 GROUP BY year;
SELECT  forename,surname FROM drivers WHERE year(dob) >1975 ORDER BY rank ASC;
SELECT  COUNT(*) FROM drivers WHERE nationality = 'Italian' AND time IS NULL;
SELECT  drivers.forename, drivers.surname, lapTimes.time FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId ORDER BY lapTimes.milliseconds ASC LIMIT 1;
SELECT  fastestLap FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009) AND position = 1;
SELECT  avg(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix');
SELECT  r.name, r.year FROM races r WHERE r.raceId = (SELECT MIN(r.raceId) FROM races r WHERE r.milliseconds IS NOT NULL);
SELECT  (SELECT COUNT(driverId) FROM drivers WHERE year(dob)<1985 AND laps>50) / (SELECT COUNT(driverId) FROM drivers WHERE year BETWEEN 2000 AND 2005) * 100 FROM drivers;
SELECT  COUNT(*) FROM drivers WHERE nationality = 'French' AND time < 120;
SELECT  code FROM drivers WHERE nationality = 'America';
SELECT  raceId FROM races WHERE year = 2009;
SELECT  COUNT(driverId) FROM results WHERE raceId = 18;
SELECT  driverId, nationality, year(dob) FROM drivers WHERE nationality = 'Dutch' OR nationality = 'Netherland' ORDER BY year(dob) DESC LIMIT 3;
SELECT  forename,surname,driverRef FROM drivers WHERE driverRef = 'KUB';
SELECT  COUNT(driverId) FROM drivers WHERE year(dob) = 1980 AND nationality = 'Australian';
SELECT  driverId, forename, surname, year(dob), Min(time) FROM drivers WHERE nationality = 'German' AND year(dob) BETWEEN 1980 AND 1990 GROUP BY driverId ORDER BY Min(time) LIMIT 3;
SELECT  driverRef FROM drivers WHERE nationality = 'German' ORDER BY year(dob) ASC LIMIT 1;
SELECT  driverId, code FROM drivers WHERE year(dob) = 1971 AND fastestLapTime IS NOT NULL;
SELECT  driverId, forename, surname, MAX(time) FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 GROUP BY driverId ORDER BY MAX(time) DESC LIMIT 10;
SELECT  year FROM seasons WHERE year = (SELECT MAX(fastestLapTime) FROM races);
SELECT  year, MAX(time) FROM lapTimes GROUP BY year ORDER BY MAX(time) ASC;
SELECT  driverId FROM results WHERE raceId = 18 AND position = 1 ORDER BY fastestLapTime DESC LIMIT 5;
SELECT  COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NULL;
SELECT  COUNT(circuitId), circuitRef, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY circuitRef;
SELECT  raceId, COUNT(raceId) FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(raceId) DESC LIMIT 1;
SELECT  driverRef, nationality, dob FROM drivers WHERE raceId = 23 AND q2 IS NOT NULL;
SELECT  year, date, time FROM races WHERE year = (SELECT MIN(year) FROM races WHERE year(dob) = (SELECT MAX(year(dob)) FROM drivers));
SELECT  COUNT(*) FROM results WHERE statusId = 2 AND nationality = 'American';
SELECT  name, url FROM constructors WHERE nationality = 'Italian';
SELECT  constructors.url FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.wins = (SELECT MAX(wins) FROM constructorStandings);
SELECT  driverId, MAX(time) FROM results WHERE raceId = 18 AND position = 3 GROUP BY driverId;
SELECT  raceId, MIN(milliseconds) FROM lapTimes WHERE lap = 1 GROUP BY raceId;
SELECT  AVG(fastestLapTime) FROM (SELECT * FROM results WHERE raceId = 18 ORDER BY fastestLapTime ASC LIMIT 10);
SELECT  driverId,surname,forename,avg(duration) FROM pitStops JOIN drivers ON pitStops.driverId=drivers.driverId WHERE nationality='German' AND year(dob) BETWEEN 1980 AND 1985 GROUP BY driverId ORDER BY avg(duration) ASC LIMIT 5;
SELECT  driverId, time FROM results WHERE raceId = 18 AND position = 1 AND statusId = 1;
SELECT  constructorRef, time FROM constructorResults WHERE raceId = 18 AND points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 18);
SELECT  forename,surname,dob FROM drivers WHERE nationality = 'Austrian' AND year(dob) BETWEEN '1981' AND '1991';
SELECT  forename ||'' || surname AS "Full name", url, dob FROM drivers WHERE nationality = 'German' AND year(dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;
SELECT  location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring';
SELECT  constructorId, points FROM constructorResults WHERE raceId = (SELECT raceId FROM races WHERE year = 2010 AND circuitId = (SELECT circuitId FROM circuits WHERE circuitRef ='monaco')) ORDER BY points DESC LIMIT 1;
SELECT  AVG(points) FROM results WHERE driverId = 1 AND raceId = 18;
SELECT  COUNT(raceId) FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';
SELECT  nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  COUNT(*) FROM results WHERE position = 91 AND statusId = 1;
SELECT  races.name FROM races WHERE races.raceId = (SELECT MIN(results.raceId) FROM results WHERE results.fastestLapSpeed = (SELECT MIN(results.fastestLapTime) FROM results));
SELECT  location, country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE date = (SELECT MAX(date) FROM races));
SELECT  forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008) AND position = 1 AND number = 3);
SELECT  drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers JOIN races ON drivers.dob = (SELECT MAX(dob) FROM drivers) JOIN constructorResults ON races.raceId = constructorResults.raceId WHERE constructorResults.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Mercedes');
SELECT  COUNT(statusId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND statusId = 3;
SELECT  forename, surname, COUNT(raceId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE raceId IN (SELECT raceId FROM races WHERE year = (SELECT MIN(year) FROM races)) GROUP BY driverId ORDER BY COUNT(raceId) DESC LIMIT 1;
SELECT  MAX(duration) FROM pitStops;
SELECT  r.name, r.time FROM races r, lapTimes lt WHERE r.raceId = lt.raceId AND lt.milliseconds = (SELECT MAX(milliseconds) FROM lapTimes);
SELECT  MAX(duration) FROM pitStops WHERE driverId = 1;
SELECT  pitStops.lap FROM pitStops, drivers, races WHERE pitStops.raceId = races.raceId AND pitStops.driverId = drivers.driverId AND drivers.driverRef = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT  driverId, time FROM pitStops WHERE raceId = 18;
SELECT  * FROM lapTimes WHERE raceId = 18 AND driverId = 1;
SELECT  drivers.forename, drivers.surname, MIN(lapTimes.milliseconds) FROM lapTimes, drivers WHERE lapTimes.driverId = drivers.driverId GROUP BY drivers.forename, drivers.surname ORDER BY MIN(lapTimes.milliseconds) LIMIT 1;
SELECT  r.name, r.circuitId, r.date, r.time, r.year, r.round, r.url, MIN(l.milliseconds) FROM races r, lapTimes l WHERE r.raceId = l.raceId AND l.driverId = 1 GROUP BY r.name, r.circuitId, r.date, r.time, r.year, r.round, r.url;
SELECT  * FROM lapTimes WHERE raceId = 18;
SELECT  * FROM lapTimes WHERE raceId IN (SELECT circuitId FROM circuits WHERE country = 'Italy');
SELECT  * FROM lapTimes WHERE raceId = 18 AND driverId = 1;
SELECT  driverId, lap, time, duration FROM lapTimes WHERE raceId = 18 AND driverId = 1;
SELECT  circuitId, lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009 AND round = 1 AND circuitId IN (SELECT circuitId FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009 AND round = 1 AND time = '1:29.488'))));
SELECT  AVG(milliseconds) FROM pitStops WHERE driverId = 1;
SELECT  AVG(milliseconds) FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy'));
SELECT  player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes); 
SELECT  player_name, height FROM Player_Attributes WHERE height = (SELECT MAX(height) FROM Player_Attributes);
SELECT  preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye') AND potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT  COUNT(*) FROM Player_Attributes WHERE overall_rating > = 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT  home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11 FROM Match WHERE crossing = (SELECT MAX(crossing) FROM Match);
SELECT  league_id, SUM(home_team_goal + away_team_goal) AS goals FROM Match WHERE season = '2015/2016' GROUP BY league_id ORDER BY goals DESC LIMIT 1;
SELECT  home_team_api_id, COUNT(home_team_api_id) FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY COUNT(home_team_api_id) ASC;
SELECT  player_name FROM Player_Attributes WHERE penalties = (SELECT MAX(penalties) FROM Player_Attributes);
SELECT  away_team_api_id, away_team_goal FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2009/2010' GROUP BY away_team_api_id HAVING MAX(SUBTRACT(away_team_goal, home_team_goal) > 0);
SELECT  team_short_name, MAX(buildUpPlaySpeed) FROM Team_Attributes GROUP BY team_short_name ORDER BY MAX(buildUpPlaySpeed) DESC LIMIT 4;
SELECT  league_id, COUNT(match_api_id) FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id ORDER BY COUNT(match_api_id) DESC LIMIT 1;
SELECT  player_name, age FROM Player_Attributes WHERE sprint_speed >= 97 AND age >= (SELECT SUBTRACT((DATETIME(), birthday)) FROM Player_Attributes WHERE date > = '2013-01-01 00:00:00' AND date < = '2015-12-31 00:00:00');
SELECT  League.name, COUNT(league_id) FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY COUNT(league_id) DESC LIMIT 1;
SELECT  AVG(height) FROM Player WHERE birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT  player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010');
SELECT  team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT  team_long_name FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL GROUP BY team_long_name HAVING SUM(buildUpPlayPassing) / COUNT(team_long_name) < buildUpPlayPassing AND strftime('%Y', date) = '2012';
SELECT  preferred_foot, COUNT(player_fifa_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND birthday BETWEEN '1987-01-01 00:00:00'AND '1992-12-31 00:00:00' GROUP BY preferred_foot;
SELECT  league_id, COUNT(league_id) FROM Match GROUP BY league_id ORDER BY COUNT(league_id) ASC LIMIT 5;
SELECT  AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id = 218353;
SELECT  player_name, AVG(heading_accuracy) FROM Player_Attributes WHERE height > 180 GROUP BY player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;
SELECT  team_long_name FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00' GROUP BY team_long_name HAVING SUM(chanceCreationPassing) / COUNT(id) < chanceCreationPassing ORDER BY chanceCreationPassing DESC;
SELECT  League.name FROM League, Match WHERE League.id = Match.league_id AND Match.season = '2009/2010' AND AVG(home_team_goal) > AVG(away_team_goal);
SELECT  team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT  player_api_id, player_name, player_fifa_api_id, birthday, height, weight FROM Player WHERE birthday LIKE '1970-10%';
SELECT  attacking_work_rate FROM Player_Attributes WHERE player_api_id = 505942;
SELECT  * FROM Team_Attributes WHERE team_long_name = 'ADO Den Haag' AND buildUpPlayPositioningClass = 'Organised';
SELECT  heading_accuracy FROM Player_Attributes WHERE player_fifa_api_id = 218353 AND date = '2014-09-18 00:00:00';
SELECT  overall_rating FROM Player_Attributes WHERE player_api_id = 505942 AND strftime('%Y', date) = '2011';
SELECT  COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2015/2016';
SELECT  preferred_foot FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE birthday = (SELECT MAX(birthday) FROM Player));
SELECT  player_name, potential FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT  COUNT(*) FROM Player_Attributes WHERE weight < 130 AND preferred_foot = 'left';
SELECT  team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE chanceCreationPassingClass = 'Risky');
SELECT  defensive_work_rate FROM Player_Attributes WHERE player_name = 'David Wilson';
SELECT  player_name, birthday FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT  League.name FROM League WHERE League.country_id = (SELECT Country.id FROM Country WHERE Country.name = 'Netherlands');
SELECT  AVG(home_team_goal) FROM "Match" WHERE country_id = (SELECT id FROM Country WHERE name = 'Poland') AND season = '2010/2011';
SELECT  player_name, AVG(finishing) FROM Player_Attributes WHERE height = (SELECT MAX(height) FROM Player_Attributes) AND finishing = (SELECT MAX(finishing) FROM Player_Attributes) GROUP BY player_name;
SELECT  player_name FROM Player WHERE height>180;
SELECT  COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';
SELECT  COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT  player_name FROM Player_Attributes WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010';
SELECT  potential FROM Player_Attributes WHERE player_api_id = 505942;
SELECT  player_name, player_api_id, player_fifa_api_id, preferred_foot FROM Player_Attributes WHERE preferred_foot = 'left';
SELECT  team_long_name FROM Team WHERE buildUpPlaySpeedClass = 'Fast';
SELECT  buildUpPlayPassingClass FROM Team_Attributes WHERE team_short_name = 'CLB';
SELECT  team_short_name FROM Team_Attributes WHERE buildUpPlayPassing > 70;
SELECT  AVG(overall_rating) FROM Player_Attributes WHERE height > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015';
SELECT  player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT  Country.name FROM Country, League WHERE Country.id = League.country_id AND League.name = 'Italy Serie A';
SELECT  team_short_name FROM Team_Attributes WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;
SELECT  AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = 505942;
SELECT  COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT  team_short_name FROM Team WHERE home_team_goal = 10;
SELECT  * FROM Player_Attributes WHERE balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61);
SELECT  difference FROM (SELECT AVG(ball_control) AS difference FROM Player_Attributes WHERE player_name = 'Abdou Diallo') AS Abdou, (SELECT AVG(ball_control) AS difference FROM Player_Attributes WHERE player_name = 'Aaron Appindangoye') AS Aaron;
SELECT  team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT  player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE birthday IN (SELECT birthday FROM Player_Attributes WHERE player_api_id = 505942 ORDER BY birthday DESC LIMIT 1));
SELECT  player_name, height FROM Player_Attributes, Player WHERE Player_Attributes.player_api_id = Player.player_api_id AND height = (SELECT MAX(height) FROM Player_Attributes);
SELECT  COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT  * FROM Country WHERE id = (SELECT country_id FROM League WHERE name = 'Belgium Jupiler League');
SELECT  League.name FROM League WHERE League.country_id = (SELECT Country.id FROM Country WHERE Country.name = 'Germany');
SELECT  player_name, overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT  COUNT(*) FROM Player_Attributes WHERE strftime('%Y', birthday)<'1986' AND defensive_work_rate = 'high';
SELECT  player_name, MAX(crossing) FROM Player_Attributes WHERE player_name IN ('<NAME>', '<NAME>', '<NAME>') GROUP BY player_name;
SELECT  heading_accuracy FROM Player_Attributes WHERE player_api_id = 505942;
SELECT  COUNT(*) FROM Player_Attributes WHERE height > 180 AND volleys > 70;
SELECT  Player.player_name, Player_Attributes.volleys, Player_Attributes.dribbling FROM Player_Attributes, Player WHERE Player_Attributes.player_api_id = Player.player_api_id AND Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;
SELECT  COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';
SELECT  long_passing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player));
SELECT  COUNT(*) FROM Match WHERE country_id = 1 AND league_id = 1 AND season = '2008/2009' AND stage = 1 AND date BETWEEN '2009-04-01' AND '2009-04-30';
SELECT  MAX(league_id) FROM League WHERE season = '2008/2009';
SELECT  AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986';
SELECT  overall_rating WHERE player_name = 'Ariel Borysiuk' - overall_rating WHERE player_name = 'Paulin Puel' FROM Player_Attributes;
SELECT  AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_long_name = 'Heart of Midlothian';
SELECT  AVG(T1.overall_rating) FROM Player_Attributes T1 WHERE T1.player_name = 'Pietro Marino';
SELECT  SUM(crossing) FROM Player_Attributes WHERE player_api_id = 23780;
SELECT  MAX(chanceCreationPassing) AS 'Max Chance Creation Passing', chanceCreationPassingClass FROM Team_Attributes WHERE team_long_name = 'Ajax';
SELECT  preferred_foot FROM Player_Attributes WHERE player_name = 'Abdou Diallo';
SELECT  MAX(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id = 218353;
SELECT  AVG(away_team_goal) FROM Match WHERE away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Parma') AND country_id = (SELECT id FROM Country WHERE name = 'Italy');
SELECT  player_name FROM Player_Attributes WHERE overall_rating = 77 AND date = '2016-06-23' ORDER BY birthday ASC LIMIT 1;
SELECT  overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';
SELECT  potential FROM Player_Attributes WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';
SELECT  attacking_work_rate FROM Player_Attributes WHERE player_name = 'Francesco Migliore' AND date = '2015-05-01 00:00:00';
SELECT  defensive_work_rate FROM Player_Attributes WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00';
SELECT  MAX(crossing) FROM Player_Attributes WHERE player_name = 'Kevin Constant';
SELECT  buildUpPlaySpeedClass FROM Team_Attributes WHERE team_long_name = 'Willem II' AND date = '2012-02-22 00:00:00';
SELECT  buildUpPlayDribblingClass FROM Team_Attributes WHERE team_short_name = 'LEI' AND date = '2015-09-10 00:00:00';
SELECT  buildUpPlayPassingClass FROM Team_Attributes WHERE team_long_name = 'FC Lorient' AND date = '2010-02-22';
SELECT  chanceCreationPassingClass FROM Team_Attributes WHERE team_long_name = 'PEC Zwolle' AND date = '2013-09-20 00:00:00';
SELECT  chanceCreationCrossingClass FROM Team_Attributes WHERE team_long_name = 'Hull City' AND date = '2010-02-22 00:00:00';
SELECT  defenceAggressionClass FROM Team_Attributes WHERE team_long_name = 'Hannover 96' AND date = '2015-09-10 00:00:00';
SELECT  avg(overall_rating) FROM Player_Attributes WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00';
SELECT  (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') AS 'Landon Donovan Overall Rating', (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12') AS 'Jordan Bowery Overall Rating', (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') - (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12') AS 'Difference', (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') - (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12') / (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') * 100 AS 'Percentage'  Question: Write Sql for the following question: What is the average height of players in the Premier League? Answer : SELECT AVG(height) FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE league_id IN (SELECT id FROM League WHERE name = 'England Premier League')));
SELECT  player_name FROM Player_Attributes WHERE height = (SELECT MAX(height) FROM Player_Attributes);
SELECT  player_api_id FROM Player_Attributes GROUP BY player_api_id ORDER BY MAX(weight) DESC LIMIT 10;
SELECT  player_name FROM Player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;
SELECT  COUNT(home_team_goal) FROM "Match" WHERE home_player_1 = 505942;
SELECT  SUM(away_team_goal) FROM "Match" WHERE home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') AND away_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira');
SELECT  SUM(home_team_goal) FROM Match WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31);
SELECT  player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT  player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes));
SELECT  Player.player_name FROM Player_Attributes, Player WHERE Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id AND Player_Attributes.attacking_work_rate = 'high';
SELECT  player_name FROM Player_Attributes WHERE finishing = 1 ORDER BY eldest_player LIMIT 1;
SELECT  player_name FROM Player WHERE player_name IN (SELECT player_name FROM Player, Country WHERE Player.country_id = Country.id AND Country.name = 'Belgium');
SELECT  Player.player_name, Country.name FROM Player, Player_Attributes, Country WHERE Player.player_api_id = Player_Attributes.player_api_id AND Player_Attributes.vision > 89 AND Player.country_id = Country.id;
SELECT  country.name, MAX(AVG(weight)) FROM country, player WHERE country.id = player.country_id GROUP BY country.name;
SELECT  team_long_name FROM Team WHERE buildUpPlaySpeedClass = 'Slow';
SELECT  team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE chanceCreationPassingClass = 'Safe');
SELECT  AVG(height) FROM Player WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy');
SELECT  player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT  COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';
SELECT  jumping AND id = 6,jumping AND id = 23 FROM Player_Attributes;
SELECT  player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY player_api_id LIMIT 3;
SELECT  COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left');
SELECT  COUNT(*) FROM Player_Attributes WHERE strength > 80 AND stamina > 80;
SELECT  Country.name FROM Country, League WHERE Country.id = League.country_id AND League.name = 'Poland Ekstraklasa';
SELECT  home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = 1;
SELECT  player_api_id, sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_name = 'Alexis Blin';
SELECT  buildUpPlaySpeedClass FROM Team_Attributes WHERE team_fifa_api_id = 1750;
SELECT  COUNT(*) FROM Match WHERE league_id = 1729 AND season = '2015/2016';
SELECT  MAX(home_team_goal) FROM Match WHERE league_id = 1729 AND country_id = 1;
SELECT  finishing, curve FROM Player_Attributes WHERE weight = (SELECT MAX(weight) FROM Player_Attributes);
SELECT  team_long_name, COUNT(id) FROM Match WHERE season = '2015/2016' GROUP BY team_long_name ORDER BY COUNT(id) DESC LIMIT 1;
SELECT  team_long_name FROM Team WHERE team_api_id = (SELECT away_team_api_id FROM Match WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM Match));
SELECT  player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT  COUNT(height < 180 AND overall_rating > 70) / COUNT(id) * 100 FROM Player_Attributes;
SELECT  (COUNT(ID) where SEX = 'M' and Admission = '+') - (COUNT(ID) where SEX  = 'M' and Admission = '-') AS Deviation FROM Patient;
SELECT  COUNT(ID) as female_after_1930, COUNT(ID) as total_female FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) > '1930';
SELECT  COUNT(*) * 100 / (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+';
SELECT  COUNT(ID) where Diagnosis = 'SLE' and Admission = '+' / COUNT(ID) where Diagnosis = 'SLE' and Admission = '-';
SELECT  Diagnosis FROM Patient WHERE ID = 30609;
SELECT  SEX, Birthday FROM Patient WHERE ID = 163109;
SELECT  ID, SEX, Birthday FROM Patient WHERE LDH > '500';
SELECT  ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE RVVT = '+'  Question: Write Sql for the following question: List the ID and age of patients who have been admitted in the year 1997. Answer : SELECT ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE Admission LIKE '%1997%'  Question: Write Sql for the following question: List the ID and age of patients who have been admitted in the year 1997 and have a positive degree of coagulation. Answer : SELECT ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE Admission LIKE '%1997%' AND RVVT = '+'  Question: Write Sql for the following question: List the ID and age of patients who have been admitted in the year 1997 and have a positive degree of coagulation and have a diagnosis of MCTD. Answer : SELECT ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE Admission LIKE '%1997%' AND RVVT = '+' AND Diagnosis LIKE '%MCTD%'  Question: Write Sql for the following question: List the ID and age of patients who have been admitted in the year 1997 and have a positive degree of coagulation and have a diagnosis of MCTD or SLE. Answer : SELECT ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE Admission LIKE '%1997%' AND RVVT = '+' AND Diagnosis LIKE '%MCTD%' OR Diagnosis LIKE '%SLE%'  Question: Write Sql for the following question: List the ID and age of patients who have been admitted in the year 1997 and have a positive degree of coagulation and have a diagnosis of MCTD or SLE or RA. Answer : SELECT ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE Admission LIKE '%1997%' AND RVVT = '+' AND Diagnosis LIKE '%MCTD%' OR Diagnosis LIKE '%SLE%' OR Diagnosis LIKE '%RA%'  Question: Write Sql for the following question:;
SELECT  ID, SEX, Diagnosis FROM Patient WHERE Thrombosis = 2;
SELECT  * FROM Patient WHERE year(birthday) = '1937' AND `T-CHO` > = '250';
SELECT  ID, SEX, Diagnosis FROM Patient WHERE ALB < 3.5;
SELECT  (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND TP < '6.0' OR TP > '8.5') AS Total, (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') AS TotalFemale, (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND TP < '6.0' OR TP > '8.5') / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') * 100 AS Percentage FROM Patient;
SELECT  AVG(aCL IgG) FROM Examination WHERE Admission = '+' AND SUBTRACT(year(current_timestamp), year(Birthday)) >= '50';
SELECT  COUNT(*) FROM Patient WHERE SEX = 'F' AND year(Description) = '1997' AND Admission = '-';
SELECT  MIN(SUBTRACT(YEAR(Birthday), YEAR(`First Date`))) FROM Patient;
SELECT  COUNT(*) FROM Examination WHERE `Examination Date` = '1997-05-27' AND Thrombosis = '1' AND SEX = 'F';
SELECT  MAX(year(Birthday)) - MIN(year(Birthday)) FROM Patient WHERE tg >= 200;
SELECT  MIN(BIRTHDAY) FROM Patient;
SELECT  EXTRACT(YEAR FROM Date) AS Year, EXTRACT(MONTH FROM Date) AS Month, SEX, COUNT(ID) AS Number_of_Male_Patients FROM Laboratory WHERE Date BETWEEN '1998-01-01' AND '1998-12-31' AND SEX = 'M' GROUP BY EXTRACT(YEAR FROM Date), EXTRACT(MONTH FROM Date), SEX;
SELECT  MAX(Birthday) AS 'Oldest Patient', `First Date` AS 'Date of Initial Arrival', (SUBTRACT(year(`First Date`), year(Birthday))) AS 'Age of Initial Arrival' FROM Patient WHERE Diagnosis = 'SJS';
SELECT  SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5' and SEX = 'F') FROM Laboratory WHERE SEX = 'M' OR SEX = 'F';
SELECT  COUNT(*) FROM Patient WHERE SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1;
SELECT  COUNT(*) FROM Examination WHERE `Examination Date` BETWEEN '1990-01-01' AND '1993-12-31' AND year(Birthday) < 18;
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND `T-BIL` > '2.0';
SELECT  Diagnosis, COUNT(Diagnosis) FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;
SELECT  AVG(SUBTRACT('1999', year(Birthday))) FROM Patient WHERE Date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT  SUBTRACT(year(`Examination Date`), year(Birthday)) AS Age, MAX(HGB) AS HGB, Diagnosis FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID GROUP BY Diagnosis ORDER BY HGB DESC LIMIT 1;
SELECT  `aCL IgG` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';
SELECT  * FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04' AND TG < 250;
SELECT  SEX FROM Patient WHERE ID = (SELECT ID FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1);
SELECT  aCL IgM FROM Examination WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' AND Description = '1993/11/12';
SELECT  SEX, GPT, Date FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID AND GPT = '9' AND Date = '1992-06-12';
SELECT  SUBTRACT('1992', year(Birthday)) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE UA = '8.4' AND Date = '1991-10-21');
SELECT  COUNT(ID) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13') AND Diagnosis = 'SJS' AND Date = '1995-01-01';
SELECT  Diagnosis FROM Patient WHERE SEX = 'F' AND Birthday = '1934-02-13' AND Description = '1994-02-14' AND `First Date` = '1993-02-10' AND Admission = '+' AND Diagnosis = 'SLE';
SELECT  Symptoms FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-03-01') AND `Examination Date` = '1993-09-27';
SELECT  SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`) FROM Laboratory WHERE Birthday = '1959-02-18';
SELECT  ID, Diagnosis FROM Patient WHERE Diagnosis LIKE '%Behcet%' AND Description BETWEEN '1997-01-01' AND '1997-12-31';
SELECT  ID FROM Patient WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;
SELECT  ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+'  Question: Write Sql for the following question: List the ID, SEX, and Birthday of all female patients born in 1964.  female refers to SEX = 'F';
SELECT  AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S';
SELECT  ID, `U-PRO`, UA, (UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30) AS `Percentage` FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;
SELECT  SUM(CASE WHEN SEX = 'M' AND YEAR(`FIRST DATE`) = '1981' THEN 1 ELSE 0 END) AS Male_First_1981, SUM(CASE WHEN SEX = 'M' AND YEAR(`FIRST DATE`) = '1981' AND DIAGNOSIS = 'BEHCET' THEN 1 ELSE 0 END) AS Male_First_1981_BEHCET, COUNT(YEAR(`FIRST DATE`) = '1981') AS Total_Male_First_1981, (SUM(CASE WHEN SEX = 'M' AND YEAR(`FIRST DATE`) = '1981' AND DIAGNOSIS = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(YEAR(`FIRST DATE`) = '1981')) * 100 AS Percentage_Male_First_1981_BEHCET FROM Patient;
SELECT  * FROM Patient WHERE Admission = '-' AND Date LIKE '1991-10%' AND T-BIL < 2.0;
SELECT  COUNT(*) FROM Patient WHERE SEX = 'F' AND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND ANA Pattern!= 'p';
SELECT  SEX FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'PSS' AND ID IN (SELECT ID FROM Laboratory WHERE CRP > 2 AND CRE = 1 AND LDH = 123));
SELECT  AVG(ALB) FROM Laboratory WHERE SEX = 'F' AND PLT > 400 AND Diagnosis = 'SLE';
SELECT  MAX(symptoms) FROM Examination WHERE Diagnosis = 'SLE';
SELECT  Description, diagnosis FROM Examination WHERE ID = 48473;
SELECT  COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT  COUNT(*) FROM Laboratory WHERE YEAR(Date) = '1997' AND (tp > 6 AND tp < 8.5);
SELECT  SUM(DIAGNOSIS LIKE '%ITP%') AS 'thrombocytopenia', SUM(DIAGNOSIS LIKE '%SLE%') AS 'SLE' FROM Examination WHERE DIAGNOSIS LIKE '%SLE%';
SELECT  (SELECT COUNT(SEX) FROM Patient WHERE YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA') / (SELECT COUNT(SEX) FROM Patient WHERE YEAR(BIRTHDAY) = '1980') * 100 FROM Patient WHERE SEX = 'F';
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND `Examination Date` BETWEEN '1995' AND '1997' AND Diagnosis = 'BEHCET' AND Admission = '-';
SELECT  COUNT(*) FROM Laboratory WHERE SEX = 'F' AND WBC < 3.5;
SELECT  DATEDIFF(`Examination Date`, `First Date`) FROM Examination WHERE ID = 821298;
SELECT  ID, SEX, UA FROM Laboratory WHERE ID = 57266;
SELECT  `Examination Date` FROM Examination WHERE ID = 48473 AND GOT > 60;
SELECT  SEX, Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT < 60 AND EXTRACT(YEAR FROM Date) = 1994);
SELECT  ID FROM Patient WHERE SEX = 'M' AND GPT >= 60;
SELECT  Diagnosis FROM Patient WHERE GPT > 60 ORDER BY Birthday DESC;
SELECT  AVG(LDH) FROM Laboratory WHERE LDH < 500;
SELECT  ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient WHERE LDH BETWEEN 100 AND 300 AND LDH BETWEEN 600 AND 800;
SELECT  ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE ALP < 300 AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-'  Question: Write Sql for the following question: For patients with a diagnosis of SLE, were they treated as inpatient or outpatient? Answer : SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, ALP FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+' OR Admission = '-' ;
SELECT  ID FROM Patient WHERE Birthday = '1982-04-01' AND ALP < 300;
SELECT  ID, SEX, Birthday FROM Patient WHERE TP < 6.0;
SELECT  ID, SUBTRACT(TP, 8.5) AS Deviation FROM Laboratory WHERE SEX = 'F' AND TP > 8.5;
SELECT  * FROM Patient WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC;
SELECT  * FROM Patient WHERE Year(Birthday) = '1982' AND ALB BETWEEN 3.5 AND 5.5;
SELECT  (COUNT(ID) * 100.0) / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') FROM Laboratory WHERE UA > 8.0 AND SEX = 'M' OR UA > 6.5 AND SEX = 'F';
SELECT  AVG(UA) FROM Laboratory WHERE UA < 8.0 AND SEX = 'M' OR UA < 6.5 AND SEX = 'F';
SELECT  ID, SEX, Birthday FROM Patient WHERE UN = 29;
SELECT  ID, SEX, Birthday FROM Patient WHERE Diagnosis = 'RA' AND UN < 30;
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND CRE >= 1.5;
SELECT  SUM(SEX = 'M') > SUM(SEX = 'F') FROM Patient WHERE CRE >= 1.5;
SELECT  MAX(T-BIL) FROM Laboratory WHERE ID = 27654;
SELECT  SEX, SUM(T-BIL) FROM Laboratory GROUP BY SEX HAVING SUM(T-BIL) >= 2.0;
SELECT  ID, MAX(T-CHO) FROM Laboratory GROUP BY ID ORDER BY MAX(T-CHO) DESC LIMIT 1;
SELECT  AVG(SUBTRACT(YEAR(NOW()), YEAR(birthday))) FROM Patient WHERE SEX = 'M' AND `T-CHO` >= 250;
SELECT  ID, Diagnosis FROM Patient WHERE TG > 100;
SELECT  COUNT(*) FROM Patient WHERE TG > 200 AND SUBTRACT(year(current_timestamp), year(Birthday)) > 50;
SELECT  DISTINCT ID FROM Laboratory WHERE CPK < 250 AND Admission = '-';
SELECT  COUNT(*) FROM Patient WHERE born between 1936-1956 AND sex = 'M' AND CPK > = 250;
SELECT  ID, SEX, age FROM Patient WHERE age = SUBTRACT(year(current_timestamp), year(Birthday)) AND GLU >= 180 AND `T-CHO` < 250;
SELECT  ID, GLU FROM Laboratory WHERE GLU < 180 AND Year(Description) >= 1991;
SELECT  ID, SEX, Birthday FROM Patient WHERE WBC < = 3.5 OR WBC > = 9.0 GROUP BY SEX ORDER BY Birthday ASC;
SELECT  ID, age, Diagnosis FROM Patient WHERE RBC < 3.5;
SELECT  ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis FROM Patient WHERE SEX = 'F' AND SUBTRACT(year(current_timestamp), year(Birthday)) >= 50 AND (RBC <= 3.5 OR RBC >= 6.0) AND Admission = '+';
SELECT  ID, SEX FROM Patient WHERE Admission = '-' AND HBG < 10;
SELECT  ID, SEX FROM Patient WHERE Diagnosis = 'SLE' AND Birthday = (SELECT MIN(Birthday) FROM Patient WHERE Diagnosis = 'SLE' AND HGB BETWEEN 10 AND 17);
SELECT  ID, age FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) > 2);
SELECT  AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT  COUNT(PLT < 100) AS 'lower than normal range', COUNT(PLT > 400) AS 'higher than normal range' FROM Laboratory WHERE PLT < 100 OR PLT > 400;
SELECT  ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis FROM Patient WHERE SUBTRACT(year(current_timestamp), year(Birthday)) < 50 AND PLT BETWEEN 100 AND 400;
SELECT  ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (SELECT ID, SEX, Birthday, Description, `First Date`, Admission, Diagnosis, percentage FROM Patient, (;
SELECT  * FROM Patient WHERE year(`First Date`) > 1992 AND PT < 14;
SELECT  COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45;
SELECT  COUNT(DISTINCT ID) FROM Examination WHERE APTT > 45 AND Thrombosis = 3;
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND WBC BETWEEN 3.5 AND 9.0 AND (FG <= 150 OR FG >= 450);
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE Birthday > '1980-01-01' AND FG NOT BETWEEN 150 AND 450;
SELECT  Diagnosis FROM Examination WHERE `U-PRO` >= 30;
SELECT  ID FROM Patient WHERE `U-PRO` BETWEEN 0 AND 30 AND Diagnosis = 'SLE';
SELECT  COUNT(*) FROM Examination WHERE `aCL IgG` < 900 AND Symptoms = 'abortion';
SELECT  COUNT(*) FROM Examination WHERE IGG BETWEEN 900 AND 2000 AND Symptoms IS NOT NULL;
SELECT  Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE IGA BETWEEN 80 AND 500) ORDER BY IGA DESC LIMIT 1;
SELECT  COUNT(*) FROM Patient WHERE IGA BETWEEN 80 AND 500 AND YEAR(`First Date`) >= 1990;
SELECT  Diagnosis, COUNT(Diagnosis) FROM Examination WHERE IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;
SELECT  COUNT(*) FROM Patient WHERE normal C-reactive protein AND Description IS NULL;
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE CRP NOT IN('+-', '-') AND CRP >= 1.0 AND SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 18;
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'F' AND (KCT = '+' OR RA = '+-');
SELECT  Diagnosis FROM Patient WHERE Birthday >= '1995-01-01' AND RA IN('-', '+-');
SELECT  ID FROM Patient WHERE RF < 20 AND SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;
SELECT  COUNT(*) FROM Patient WHERE RF < 20 AND Thrombosis = '0';
SELECT  COUNT(DISTINCT(ID)) FROM Examination WHERE C3 > 35 AND ANA Pattern = 'P';
SELECT  ID FROM Patient WHERE NOT (29 < N < 52) AND MAX(`aCL IgA`) IS NOT NULL;
SELECT  COUNT(*) FROM Examination WHERE Thrombosis = 1 AND C4 > 10;
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE RNP = '-' AND Admission = '+';
SELECT  MAX(Birthday) FROM Patient WHERE RNP NOT IN('-', '+-');
SELECT  COUNT(*) FROM Examination WHERE Thrombosis = 1 AND SM IN ('-', '+-');
SELECT  ID FROM Patient WHERE SEX = 'F' AND Birthday = (SELECT MAX(Birthday) FROM Patient WHERE SEX = 'F' AND Description = '1994-02-14' AND Admission = '+');
SELECT  ID FROM Examination WHERE `Examination Date` >= '1997-01-01' AND SC170 IN('-', '+-');
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'M' AND Symptoms ='vertigo' AND SC170 IN('-', '+-');
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'F' AND `First Date` < '1990' AND RA IN('-','+-');
SELECT  ID FROM Patient WHERE `First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE SSA NOT IN('-', '+-'));
SELECT  COUNT(DISTINCT ID) FROM Examination WHERE ANA = 0 AND Diagnosis = 'SLE';
SELECT  COUNT(DISTINCT(ID)) FROM Examination WHERE SSB IN('-', '+-') AND Symptoms IS NOT NULL;
SELECT  COUNT(*) FROM Patient WHERE CENTROMEA IN('-', '+-') AND SSB IN('-', '+-') AND Sex = 'M';
SELECT  Diagnosis FROM Examination WHERE ANA >= 8;
SELECT  COUNT(DISTINCT ID) FROM Patient WHERE Description IS NULL AND GOT < 8;
SELECT  COUNT(*) FROM Patient WHERE Admission = '+' AND DNA-II < 8;
SELECT  COUNT(ID) FROM Patient WHERE GOT >= 60 AND Diagnosis = 'SLE';
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND GOT < 60;
SELECT  MIN(Birthday) FROM Patient WHERE GOT >= 60;
SELECT  Birthday, MAX(GPT < 60) FROM Patient GROUP BY Birthday ORDER BY MAX(GPT < 60) DESC LIMIT 3;
SELECT  COUNT(*) FROM Patient WHERE GOT < 60 AND SEX = 'M';
SELECT  MAX(LDH < 500), MIN(First Date) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE SEX = 'F' AND MAX(LDH < 500));
SELECT  MAX('First Date') FROM Patient WHERE LDH >= 500;
SELECT  COUNT(*) FROM Patient WHERE Admission = '+' AND ALP >= 300;
SELECT  COUNT(*) FROM Patient WHERE Admission = '-' AND ALP < 300;
SELECT  Diagnosis FROM Patient WHERE TP < 6.0;
SELECT  COUNT(*) FROM Patient WHERE Diagnosis = 'SJS' AND TP > 6.0 AND TP < 8.5;
SELECT  `Examination Date` FROM Examination WHERE `aCL IgG` = (SELECT MAX(`aCL IgG`) FROM Examination WHERE `aCL IgG` > 3.5 AND `aCL IgG` < 5.5);
SELECT  COUNT(*) FROM Patient WHERE SEX = 'M' AND ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5;
SELECT  MAX(UA) FROM Laboratory WHERE Sex = 'F' AND UA > 6.50;
SELECT  MAX(ANA) FROM Examination WHERE CRE < 1.5;
SELECT  ID FROM Laboratory WHERE CRE < 1.5 AND MAX(aCL IgA) IS NOT NULL;
SELECT  COUNT(*) FROM Examination WHERE `T-BIL` >= 2.0 AND ANA Pattern LIKE '%P%';
SELECT  MAX(`T-BIL` < 2.0) FROM Laboratory WHERE ID = 27654;
SELECT  COUNT(*) FROM Examination WHERE TCHO >= 250 AND KCT = '-';
SELECT  COUNT(*) FROM Examination WHERE `T-CHO` < 250 AND ANA Pattern = 'P';
SELECT  COUNT(*) FROM Patient WHERE TG < 200 AND Symptoms IS NOT NULL;
SELECT  Diagnosis FROM Patient, Examination WHERE Patient.ID = Examination.ID AND TG < 200 GROUP BY Diagnosis ORDER BY MAX(TG) DESC LIMIT 1;
SELECT  ID FROM Patient WHERE Thrombosis = 0 AND CPK < 250;
SELECT  COUNT(*) FROM Examination WHERE CPK < 250 AND (KCT = '+' OR RVVT = '+' OR LAC = '+');
SELECT  MIN(Birthday) FROM Patient WHERE GLU > 180;
SELECT  COUNT(*) FROM Examination WHERE GLU < 180 AND Thrombosis = 0;
SELECT  COUNT(*) FROM Patient WHERE Admission = '+' AND WBC BETWEEN 3.5 AND 9.0;
SELECT  COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND WBC BETWEEN 3.5 AND 9.0;
SELECT  ID FROM Patient WHERE RBC < = 3.5 or RBC > = 6.0 and Admission = '-';
SELECT  COUNT(*) FROM Patient WHERE PLT > 100 AND PLT < 400 AND Diagnosis IS NOT NULL;
SELECT  PLT FROM Laboratory WHERE PLT > 100 and PLT < 400 and Diagnosis = 'MCTD';
SELECT  AVG(PT) FROM Laboratory WHERE SEX = 'M' AND PT < 14;
SELECT  COUNT(*) FROM Examination WHERE Thrombosis = 2 AND PT < 14;
SELECT  major_name FROM major WHERE major_id ='recxK3MHQFbR9J5uO';
SELECT  COUNT(*) FROM Student_Club WHERE College = 'College of Engineering';
SELECT  first_name ||'' || last_name AS "Full Name" FROM student_club WHERE department = 'Art and Design';
SELECT  COUNT(*) FROM attendance WHERE link_to_event ='rec2N69DMcrqN9PJC';
SELECT  phone FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer'));
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc' AND t_shirt_size = 'Medium' AND member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event ='rec2N69DMcrqN9PJC');
SELECT  event_id, COUNT(link_to_event) FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1;
SELECT  college FROM major WHERE major_name = 'Student_Club';
SELECT  event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member ='recD078PnS3x2doBe');
SELECT  COUNT(*) FROM event WHERE YEAR(event_date) = 2019 AND link_to_member ='recSachaHarrison';
SELECT  COUNT(event_id) FROM event WHERE type = 'Meeting' GROUP BY event_id HAVING COUNT(event_id) > 10;
SELECT  event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Student_Club'));
SELECT  AVG(COUNT(event_id)) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT  expense_description, MAX(cost) FROM expense GROUP BY expense_description;
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  first_name ||'' || last_name AS "Full Name" FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event ='rec0Si5cQ4rJRVzd6');
SELECT  last_name FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  city, county FROM zip_code WHERE zip_code = 501;
SELECT  college FROM major WHERE major_name = 'Computer Science';
SELECT  SUM(amount) FROM income WHERE position = 'Vice President';
SELECT  SUM(amount) FROM budget WHERE category = 'Food' AND event_status = 'Closed' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Meeting');
SELECT  city, state FROM zip_code WHERE zip_code = 501;
SELECT  first_name, last_name FROM member WHERE state = 'IL';
SELECT  SUM(amount) FROM budget WHERE category = 'Advertisement' AND event_status = 'Closed' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Meeting');
SELECT  department FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE member_id ='rec280Sk7o31iG0Tx');
SELECT  SUM(amount) FROM budget WHERE event_status = 'Closed' AND event_name = 'October Speaker';
SELECT  expense_id, expense_description, expense_date, cost, approved FROM expense WHERE link_to_event ='rec2N69DMcrqN9PJC' AND expense_date = '2019-10-08';
SELECT  SUM(cost) / COUNT(cost) FROM expense WHERE MONTH(expense_date) = 9 AND MONTH(expense_date) = 10 AND link_to_member ='rec4BLdZHS2Blfp4v';
SELECT  SUM(spent) - SUM(spent) FROM budget WHERE YEAR(event_date) = 2019 AND YEAR(event_date) = 2020;
SELECT  location FROM event WHERE event_name = 'Spring Budget Review';
SELECT  expense_description, cost FROM expense WHERE expense_date = '2019-09-04' AND expense_description = 'Posters';
SELECT  MAX(budget.amount) - budget.remaining FROM budget WHERE category = 'Food';
SELECT  notes FROM expense WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT  COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT  phone FROM member WHERE member_id ='rec1x5zBFIqoOuPW8';
SELECT  city, county FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE member_id ='rec1x5zBFIqoOuPW8');
SELECT  COUNT(*) FROM budget WHERE event_status = 'Closed' AND remaining < 0 AND link_to_event ='rec0Si5cQ4rJRVzd6';
SELECT  SUM(amount) FROM budget WHERE event_status = 'Closed' AND category = 'Speaker Gifts' AND link_to_event ='recHaMmaKyfktt5fW';
SELECT  event_status FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-8-20');
SELECT  major_name FROM major WHERE major_id ='rec06DF6vZ1CyPKpc';
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc' AND t_shirt_size = 'Large';
SELECT  type FROM zip_code WHERE zip_code = 501;
SELECT  major_name FROM major WHERE major_name = 'Student Club';
SELECT  state FROM zip_code WHERE city = 'Sacha Harrison';
SELECT  department FROM major WHERE major_name = 'President';
SELECT  income_id, date_received, amount, source, notes, link_to_member FROM income WHERE link_to_member ='rec3pH4DxMcWHMRB7';
SELECT  first_name, last_name FROM member WHERE member_id = (SELECT member_id FROM income WHERE source = 'Dues' ORDER BY date_received ASC LIMIT 1);
SELECT  SUM(amount where category = 'Advertisement' and event_name = 'Yearly Kickoff') / SUM(amount event_name = 'October Meeting' and category = 'Advertisement') FROM budget;
SELECT  SUM(amount) AS 'Parking', SUM(amount) AS 'Total' FROM budget WHERE event_name = 'November Speaker' AND category = 'Parking';
SELECT  SUM(cost) FROM expense WHERE expense_description = 'Pizza';
SELECT  COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT  department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT  city, county, state FROM zip_code WHERE zip_code = 501;
SELECT  expense_description, cost FROM expense WHERE link_to_budget = (SELECT budget_id FROM budget WHERE remaining = (SELECT MIN(remaining) FROM budget));
SELECT  * FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event ='rec0akZnLLpGUloLH');
SELECT  major.college FROM major GROUP BY major.college ORDER BY COUNT(major.college) DESC LIMIT 1;
SELECT  major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE phone = '809-555-3360');
SELECT  event_name, MAX(amount) FROM budget GROUP BY event_name;
SELECT  expense_description FROM expense WHERE link_to_member ='rec280Sk7o31iG0Tx';
SELECT  COUNT(*) FROM attendance WHERE link_to_event ='rec2N69DMcrqN9PJC';
SELECT  date_received FROM income WHERE link_to_member ='rec0s9ZrO15zhzUeE';
SELECT  COUNT(*) FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'MD');
SELECT  COUNT(*) FROM attendance WHERE link_to_member ='rec28ORZgcm1dtqBZ';
SELECT  first_name, last_name FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  event_name, MAX(DIVIDE(spent, amount)) FROM budget, event WHERE budget.link_to_event = event.event_id AND event.status = 'Closed' GROUP BY event_name;
SELECT  COUNT(*) FROM member WHERE position = 'President';
SELECT  MAX(spent) FROM budget;
SELECT  COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT  SUM(spent) FROM budget WHERE category = 'Food';
SELECT  first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7);
SELECT  member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc' AND member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event ='rec0Si5cQ4rJRVzd6');
SELECT  first_name, last_name FROM member WHERE zip = 29440;
SELECT  COUNT(income.amount) FROM income WHERE income.link_to_member ='rec280Sk7o31iG0Tx';
SELECT  first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE income.amount > 40);
SELECT  SUM(cost) FROM expense WHERE expense_description = 'Baseball game';
SELECT  member_id, first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event ='recI43CzsZ0Q625ma');
SELECT  member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member GROUP BY member.member_id ORDER BY income.amount DESC LIMIT 1;
SELECT  event_name FROM event WHERE cost = (SELECT MIN(cost) FROM budget);
SELECT  SUM(cost) FROM budget WHERE event_status = 'Closed';
SELECT  SUM(major_name = 'Finance') AS finance, SUM(major_name = 'Physics') AS physics FROM major;
SELECT  source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1;
SELECT  first_name ||'' || last_name AS full_name, email FROM member WHERE position = 'Secretary';
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  COUNT(*) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Community Theater' AND YEAR(event_date) = 2019);
SELECT  COUNT(event_id) FROM attendance WHERE link_to_member ='rec28ORZgcm1dtqBZ';
SELECT  SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed';
SELECT  event_name FROM event WHERE event_id = (SELECT event_id FROM budget WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 1);
SELECT  * FROM attendance WHERE link_to_event ='rec2N69DMcrqN9PJC';
SELECT  SUM(type = 'Community Service') AS "Community Service", COUNT(event_id) AS "Total Events" FROM event WHERE event_date BETWEEN '2019-01-01' and '2019-12-31' AND event_name LIKE '%Student_Club%';
SELECT  SUM(cost) FROM expense WHERE expense_description = 'Posters' AND link_to_event ='recI43CzsZ0Q625ma';
SELECT  t_shirt_size, COUNT(t_shirt_size) FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT  event_name FROM event WHERE status = 'Closed' AND MIN(remaining) < 0;
SELECT  expense_description, SUM(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting')) GROUP BY expense_description;
SELECT  SUM(amount) FROM budget WHERE link_to_event ='recI43CzsZ0Q625ma';
SELECT  MAX(amount) FROM budget WHERE category = 'Food';
SELECT  * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT  SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT  SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT  first_name ||'' || last_name AS full_name, SUM(cost) AS total_cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE link_to_member ='rec4BLdZHS2Blfp4v' GROUP BY full_name;
SELECT  expense_description FROM expense WHERE link_to_member ='rec1x5zBFIqoOuPW8';
SELECT  expense_description FROM expense WHERE link_to_member IN (SELECT member_id FROM member WHERE t_shirt_size = 'X-Large');
SELECT  zip_code FROM zip_code WHERE zip_code IN (SELECT zip FROM member WHERE cost < 50);
SELECT  major_name FROM major WHERE major_id ='rec06DF6vZ1CyPKpc';
SELECT  position FROM member WHERE link_to_major ='rec0xRZtkzxrg8kj2';
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec0xRZtkzxrg8kj2' AND t_shirt_size = 'Medium';
SELECT  * FROM budget WHERE remaining > 30;
SELECT  event_name, type FROM event WHERE location = 'MU 215';
SELECT  category FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_date = '2020-03-24T12:00:00');
SELECT  major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE member_id ='rec1x5zBFIqoOuPW8');
SELECT  SUM(position = 'Member' and major_name = 'Mathematics') / COUNT(member_id) * 100 FROM member;
SELECT  event_name, type, location FROM event WHERE location = 'MU 215';
SELECT  COUNT(income_id) FROM income WHERE amount = 50;
SELECT  COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT  COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education';
SELECT  last_name, department, college FROM member, major WHERE member.link_to_major = major.major_id AND major.major_name = 'Environmental Engineering';
SELECT  category FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE location = 'MU 215') AND type = 'Guest Speaker' AND spent = 0;
SELECT  city, state FROM zip_code, member WHERE member.zip = zip_code.zip_code AND member.position = 'Member' AND member.link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  event_name FROM event WHERE type = 'Social' AND position = 'Vice President' AND location = '900 E. Washington St.';
SELECT  last_name, position FROM member WHERE member_id = (SELECT link_to_member FROM expense WHERE expense_description = 'Pizza' AND expense_date = '2019-09-10');
SELECT  last_name FROM member WHERE position = 'Member' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer');
SELECT  COUNT(amount = 50) / COUNT(member_id) * 100 FROM income WHERE t_shirt_size = 'Medium' AND position = 'Member';
SELECT  zip_code.zip_code, zip_code.type, zip_code.city, zip_code.county, zip_code.state, zip_code.short_state FROM zip_code WHERE zip_code.type = 'PO Box';
SELECT  zip_code FROM zip_code WHERE type = 'PO Box' AND state = 'Puerto Rico' AND county = 'San Juan Municipio';
SELECT  event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' and '2020-03-20';
SELECT  event_id, event_name, event_date, type, notes, location, status FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_id IN (SELECT expense_id FROM expense WHERE cost > 50)))))));
SELECT  member.member_id, member.first_name, member.last_name, event.event_id, event.event_name, expense.expense_id, expense.expense_description, expense.expense_date, expense.cost, expense.approved, expense.link_to_member, expense.link_to_budget FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';
SELECT  member.first_name, member.last_name, major.college FROM member, major WHERE member.link_to_major = major.major_id AND member.first_name = 'Katy';
SELECT  phone FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  email FROM member, expense WHERE member.member_id = expense.link_to_member AND expense.cost > 20 AND expense.expense_date BETWEEN '2019-09-10' and '2019-11-19';
SELECT  COUNT(*) FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  SUM(remaining < 0) AS "Total Over Budget", COUNT(event_id) AS "Total Events", (SUM(remaining < 0) / COUNT(event_id)) * 100 AS "Percentage Over Budget" FROM budget;
SELECT  event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31';
SELECT  expense_description, cost FROM expense WHERE cost > 50;
SELECT  first_name ||'' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT  SUM(type = 'PO Box') / COUNT(zip_code) * 100 FROM zip_code;
SELECT  event_name, location FROM event WHERE remaining > 0;
SELECT  event_name, event_date FROM event WHERE event_id IN (SELECT link_to_event FROM expense WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100);
SELECT  first_name, last_name, major_name FROM member, major WHERE member.link_to_major = major.major_id AND cost > 100;
SELECT  event_name, event_date, location, zip_code.city, zip_code.state FROM event, zip_code WHERE event.location = zip_code.zip_code AND event.event_id IN (SELECT link_to_event FROM income WHERE amount > 40);
SELECT  member_id, MAX(cost) FROM expense GROUP BY member_id HAVING COUNT(event_id) > 1;
SELECT  AVG(cost) FROM expense WHERE link_to_member IS NOT NULL AND position!= 'Member';
SELECT  event_name FROM event WHERE cost < (SELECT DIVIDE(SUM(cost), COUNT(event_id)) FROM expense WHERE category = 'Parking');
SELECT  SUM(cost) AS total_cost, COUNT(event_id) AS total_events, SUM(cost) / COUNT(event_id) * 100 AS percentage FROM expense WHERE type = 'Game';
SELECT  budget_id, category, spent, remaining, amount, event_status, link_to_event FROM budget WHERE expense_description = 'Water, chips, cookies' ORDER BY spent DESC LIMIT 1;
SELECT  member.first_name, member.last_name, MAX(expense.cost) AS "Spending" FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY "Spending" DESC LIMIT 5;
SELECT  first_name, last_name, phone FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense));
SELECT  (SUM(state = 'Maine') / COUNT(position = 'Member')) - (SUM(state = 'Vermont') / COUNT(position = 'Member')) FROM member;
SELECT  major_name, department FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE member_id ='rec1x5zBFIqoOuPW8');
SELECT  first_name ||'' || last_name AS full_name, cost FROM member, expense WHERE member.member_id = expense.link_to_member AND expense.expense_description = 'Water, Veggie tray, supplies';
SELECT  last_name, phone FROM member WHERE link_to_major ='rec06DF6vZ1CyPKpc';
SELECT  category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker');
SELECT  event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');
SELECT  first_name ||'' || last_name AS full_name, amount FROM member, income WHERE member.member_id = income.link_to_member AND date_received = '2019-09-09';
SELECT  category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');
SELECT  first_name ||'' || last_name AS full_name, college FROM member WHERE position = 'Secretary';
SELECT  SUM(spent) AS total_amount, event_name FROM budget WHERE category = 'Speaker Gifts' GROUP BY event_name;
SELECT  city FROM zip_code WHERE zip_code = 501;
SELECT  first_name, last_name, position FROM member WHERE zip = 28092 AND city = 'Lincolnton' AND state = 'North Carolina';
SELECT  COUNT(*) FROM gasstations WHERE gasstations.Country = 'CZE' AND gasstations.Segment = 'Premium';
SELECT  count(Currency = 'EUR') / count(Currency = 'CZK') FROM customers;
SELECT  CustomerID, Date, Consumption FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Segment = 'LAM' ORDER BY Consumption ASC LIMIT 1;
SELECT  AVG(Consumption) / 12 FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') AND Date BETWEEN '201301' AND '201312';
SELECT  customers.CustomerID, customers.Segment, yearmonth.Date, yearmonth.Consumption FROM customers, yearmonth WHERE yearmonth.CustomerID = customers.CustomerID AND yearmonth.Date BETWEEN '201101' AND '201112' AND customers.Currency = 'CZK' ORDER BY yearmonth.Consumption DESC LIMIT 1;
SELECT  COUNT(*) FROM yearmonth WHERE CustomerID = 5 AND Date BETWEEN '201201' AND '201212' AND Consumption < 30000;
SELECT  SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK');
SELECT  Date, SUM(Amount) FROM transactions_1k WHERE Currency = 'EUR' GROUP BY Date ORDER BY SUM(Amount) DESC LIMIT 1;
SELECT  Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
SELECT  Date, SUM(Consumption) FROM yearmonth WHERE Date LIKE '201%' GROUP BY Date ORDER BY SUM(Consumption) DESC LIMIT 1;
SELECT  yearmonth.date, yearmonth.consumption FROM yearmonth WHERE yearmonth.customerid IN (SELECT customers.customerid FROM customers WHERE customers.segment = 'SME') AND yearmonth.date LIKE '2013%';
SELECT  Segment, AVG(Consumption) AS Annual_Average_Consumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' GROUP BY Segment;
SELECT  Segment, MAX(Percentage_Increase) AS Max_Percentage_Increase, MIN(Percentage_Increase) AS Min_Percentage_Increase FROM (SELECT Segment, (Consumption_2013 - Consumption_2012) AS Increase_or_Decrease, (Increase_or_Decrease / Consumption_2013) * 100 AS Percentage_Increase FROM (SELECT Segment, Date, SUM(Consumption) AS Consumption_2013 FROM yearmonth WHERE Date BETWEEN '201201' AND '201312' GROUP BY Segment, Date) AS Consumption_2013_By_Segment_By_Date, (SELECT Segment, Date, SUM(Consumption) AS Consumption_2012 FROM yearmonth WHERE Date BETWEEN '201201' AND '201312' GROUP BY Segment, Date) AS Consumption_2012_By_Segment_By_Date WHERE Consumption_2013_By_Segment_By_Date.Segment = Consumption_2012_By_Segment_By_Date.Segment AND Consumption_2013_By_Segment_By_Date.Date BETWEEN '201201' AND '201312' AND Consumption_2012_By_Segment_By_Date.Date BETWEEN '201201' AND '201312') AS Percentage_Increase_By_Segment GROUP BY Segment;
SELECT  SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';
SELECT  SUM(CASE WHEN Segment = 'Discount' THEN 1 ELSE 0 END) - SUM(CASE WHEN Segment = 'Discount' THEN 1 ELSE 0 END) FROM gasstations WHERE Country = 'CZE';
SELECT  SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = '201304';
SELECT  SUM(CASE WHEN Segment = 'SME' AND Currency = 'CZK' THEN Amount ELSE 0 END) - SUM(CASE WHEN Segment = 'SME' AND Currency = 'EUR' THEN Amount ELSE 0 END) FROM transactions_1k;
SELECT  customers.CustomerID, customers.Segment, yearmonth.Consumption FROM customers, yearmonth WHERE yearmonth.Date = '201310' AND customers.Currency = 'EUR' AND customers.CustomerID = yearmonth.CustomerID;
SELECT  customers.CustomerID, customers.Segment, customers.Currency, SUM(yearmonth.Consumption) AS Consumption FROM customers, yearmonth WHERE yearmonth.CustomerID = customers.CustomerID AND customers.Segment = 'KAM' GROUP BY customers.CustomerID ORDER BY SUM(yearmonth.Consumption) DESC LIMIT 1;
SELECT  SUM(yearmonth.Consumption) FROM yearmonth WHERE yearmonth.Date = 201305 AND yearmonth.CustomerID = 5;
SELECT  COUNT(*) FROM customers WHERE Segment = 'LAM' AND (SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = customers.CustomerID AND Amount > 46.73) > 0;
SELECT  Country, COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC;
SELECT  Segment, SUM(CASE WHEN Currency = 'EUR' THEN Amount ELSE 0 END) AS Total_Euro, SUM(Amount) AS Total_Amount, (SUM(CASE WHEN Currency = 'EUR' THEN Amount ELSE 0 END) / SUM(Amount)) * 100 AS Percentage_of_KAM_uses_Euro FROM customers WHERE Segment = 'KAM' GROUP BY Segment;
SELECT  COUNT(*) FROM yearmonth WHERE yearmonth.date = '201202' AND yearmonth.Consumption > 528.3;
SELECT  SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS 'Premium', SUM(1) AS 'Total' FROM gasstations WHERE Country = 'CZE';
SELECT  CustomerID, SUM(Consumption) FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1;
SELECT  Segment FROM customers, yearmonth WHERE yearmonth.CustomerID = customers.CustomerID AND yearmonth.Date = '201309' GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1;
SELECT  customers.CustomerID, customers.Segment, yearmonth.Consumption FROM customers, yearmonth WHERE yearmonth.Date = '201206' AND customers.CustomerID = yearmonth.CustomerID AND customers.Segment = 'SME' ORDER BY yearmonth.Consumption ASC LIMIT 1;
SELECT  MAX(Consumption) FROM yearmonth WHERE yearmonth.date LIKE '2012%';
SELECT  Date, SUM(Consumption) / 12 AS MonthlyConsumption FROM yearmonth WHERE Currency = 'EUR' GROUP BY Date ORDER BY MonthlyConsumption DESC LIMIT 1;
SELECT  Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Date LIKE '201309%');
SELECT  Country FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM yearmonth WHERE Date = '201306');
SELECT  gasstations.ChainID, gasstations.Country, gasstations.Segment FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.Price = 'EUR';
SELECT  Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Currency = 'EUR');
SELECT  AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%';
SELECT  COUNT(*) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') AND Consumption > 1000;
SELECT  Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE'));
SELECT  DISTINCT Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11);
SELECT  COUNT(*) FROM transactions_1k WHERE GasStationID = 44 AND Price > 1000;
SELECT  COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Date > '2012-01-01';
SELECT  AVG(Price) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');
SELECT  AVG(Price) FROM transactions_1k WHERE Currency = 'EUR';
SELECT  CustomerID, SUM(Amount) FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Amount) DESC LIMIT 1;
SELECT  Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY CustomerID LIMIT 1);
SELECT  Currency FROM customers WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Time = '16:25:00');
SELECT  Segment FROM customers C1, transactions_1k T1 WHERE C1.CustomerID = T1.CustomerID AND T1.Date = '2012-08-23' AND T1.Time = '21:20:00';
SELECT  COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'EUR';
SELECT  Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
SELECT  T2.Country FROM transactions_1k T1, gasstations T2 WHERE T1.GasStationID = T2.GasStationID AND T1.Date = '2012-08-24' AND T1.Time = '12:42:00';
SELECT  T1.productid FROM transactions_1k T1 WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00';
SELECT  Date, Amount FROM yearmonth WHERE CustomerID = 31543 AND Date = '2012-01-01';
SELECT  COUNT(*) FROM transactions_1k WHERE Time BETWEEN '08:00' AND '09:00' AND Date = '2012-08-26' AND GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');
SELECT  customers.currency FROM customers, yearmonth WHERE yearmonth.date LIKE '201306' AND yearmonth.customerid = customers.customerid AND yearmonth.consumption = 214582.17;
SELECT  Country FROM customers WHERE CustomerID = 667467;
SELECT  customers.Currency FROM customers, yearmonth WHERE yearmonth.Date = '2012-08-24' AND yearmonth.CustomerID = customers.CustomerID AND yearmonth.Consumption = 548.4;
SELECT  (SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-25' AND Currency = 'EUR') / (SELECT COUNT(*) FROM transactions_1k) * 100;
SELECT  (SELECT Consumption FROM yearmonth WHERE Date = '2012-08-24' AND CustomerID = 6348) - (SELECT Consumption FROM yearmonth WHERE Date = '2013-08-24' AND CustomerID = 6348) / (SELECT Consumption FROM yearmonth WHERE Date = '2012-08-24' AND CustomerID = 6348);
SELECT  gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment, SUM(transactions_1k.Amount) AS Revenue FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID ORDER BY Revenue DESC LIMIT 1;
SELECT  Segment, SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS Premium, SUM(1) AS Total FROM customers WHERE Country = 'SVK' GROUP BY Segment;
SELECT  SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%';
SELECT  Description FROM products ORDER BY Amount DESC LIMIT 5;
SELECT  customers.CustomerID, customers.Segment, customers.Currency, AVG(Price) FROM customers, transactions_1k WHERE customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID ORDER BY AVG(Price) DESC LIMIT 1;
SELECT  gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.ProductID = 2 ORDER BY transactions_1k.Price DESC LIMIT 1;
SELECT  yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM yearmonth WHERE yearmonth.date LIKE '%201208%' AND yearmonth.customerid IN (SELECT transactions_1k.customerid FROM transactions_1k WHERE transactions_1k.price/transactions_1k.amount > 29.00 AND transactions_1k.productid = 5);
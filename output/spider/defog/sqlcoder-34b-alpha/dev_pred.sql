  SELECT COUNT(DISTINCT "Singer_ID") AS "Number of Singers" FROM "singer";
  SELECT COUNT(DISTINCT "Singer_ID") AS total_singers FROM "singer";
  SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
  SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
  SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
  SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
;
  SELECT singer.name, singer.song_name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
  SELECT DISTINCT "singer"."Country" FROM "singer" WHERE "singer"."Age" > 20;
  SELECT DISTINCT s.country FROM singer s WHERE s.age > 20;
  SELECT singer.country, COUNT(singer.singer_id) AS number_of_singers FROM singer GROUP BY singer.country;
  SELECT singer.country, COUNT(singer.singer_id) AS total_singers FROM singer GROUP BY singer.country;
  SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG(singer.age) FROM singer);
  SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG(singer.age) FROM singer);
;
  SELECT "stadium"."Location", "stadium"."Name" FROM "stadium" WHERE "stadium"."Capacity" BETWEEN 5000 AND 10000;
  SELECT MAX(Capacity) AS maximum_capacity, AVG(Capacity) AS average_capacity FROM stadium;
  SELECT AVG(stadium.capacity) AS average_capacity, MAX(stadium.capacity) AS maximum_capacity FROM stadium;
;
  SELECT "stadium"."Name", "stadium"."Capacity" FROM "stadium" ORDER BY "stadium"."Average" DESC LIMIT 1;
  SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
  SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
  SELECT stadium.name, COUNT(concert.concert_id) AS number_of_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name ORDER BY number_of_concerts DESC;
  SELECT stadium.name, COUNT(concert.concert_id) AS number_of_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name ORDER BY number_of_concerts DESC;
;
;
;
  SELECT concert.year, COUNT(concert.concert_id) AS total_concerts FROM concert GROUP BY concert.year ORDER BY total_concerts DESC LIMIT 1;
;
  SELECT "stadium"."Name" FROM "stadium" WHERE "stadium"."Stadium_ID" NOT IN (SELECT "concert"."Stadium_ID" FROM "concert") ORDER BY "stadium"."Name" NULLS LAST;
  SELECT DISTINCT s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age > 40 AND s.Age < 30;
;
  SELECT "stadium"."Name" FROM "stadium" WHERE "stadium"."Stadium_ID" NOT IN (SELECT "concert"."Stadium_ID" FROM "concert" WHERE "concert"."Year" ILIKE '%2014%') ORDER BY "stadium"."Name" NULLS LAST;
  SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ORDER BY number_of_singers DESC;
  SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme ORDER BY number_of_singers DESC;
  SELECT s.name, COUNT(sic.singer_id) AS concert_count FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name ORDER BY concert_count DESC;
  SELECT s.name, COUNT(sic.singer_id) AS concert_count FROM singer_in_concert AS sic JOIN singer AS s ON s.singer_id = sic.singer_id GROUP BY s.name ORDER BY concert_count DESC;
;
  SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';
  SELECT singer.name, singer.country FROM singer WHERE singer.song_name ilike '%Hey%'
  SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name ilike '%Hey%' ORDER BY singer.name;
;
  SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year ILIKE '%2014%' AND concert.year ILIKE '%2015%' GROUP BY stadium.name, stadium.location;
;
  SELECT COUNT(concert.concert_ID) AS number_of_concerts FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium);
  SELECT COUNT(PetID) FROM Pets WHERE weight > 10;
  SELECT COUNT(PetID) FROM Pets WHERE weight > 10;
  SELECT pets.weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' ORDER BY pets.pet_age ASC LIMIT 1;
  SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
  SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
  SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
  [SOL] SELECT COUNT(DISTINCT PetID) AS num_pets FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20; [/SOL]
  SELECT COUNT(DISTINCT PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
  SELECT COUNT(DISTINCT p.petid) AS num_dogs FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'F';
  SELECT COUNT(DISTINCT p.petid) AS num_dogs FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'F';
  SELECT COUNT(DISTINCT PetType) AS num_of_pet_types FROM Pets;
  SELECT COUNT(DISTINCT PetType) AS number_of_pet_types FROM Pets;
  SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
  SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
  SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.PetType = 'dog' GROUP BY Student.Fname;
  SELECT DISTINCT s.fname FROM Student s JOIN Has_Pet hp ON s.stuid = hp.stuid JOIN Pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog') GROUP BY s.fname HAVING COUNT(DISTINCT p.pettype) = 2;
  SELECT Student.Major, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat';
  SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
  SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
  SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
  SELECT Fname, Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet hp2 JOIN Pets p2 ON hp2.PetID = p2.PetID WHERE hp2.StuID = s.StuID AND p2.PetType = 'cat');
  SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat') ORDER BY Student.Fname;
  SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;
  SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
  SELECT PetID, weight FROM Pets WHERE pet_age > 1;
  SELECT PetID, weight FROM Pets WHERE pet_age > 1;
  SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
  SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
  SELECT DISTINCT s.fname, s.age FROM Student s JOIN Has_Pet hp ON s.stuid = hp.stuid;
  SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
  SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
  SELECT s.stuid, COUNT(p.petid) AS pet_count FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid GROUP BY s.stuid;
  [SOL] SELECT s.stuid, COUNT(p.petid) AS pet_count FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid GROUP BY s.stuid; [/SOL]
  SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
  SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
  SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
  SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
  SELECT AVG(Age) AS Average_Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
  SELECT AVG(Student.Age) AS Average_Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IS NULL;
  SELECT COUNT(ContId) AS total_continents FROM continents;
  SELECT COUNT(ContId) AS number_of_continents FROM continents;
  SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent ORDER BY continents.contid;
  SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent ORDER BY continents.contid;
  SELECT COUNT(DISTINCT CountryId) AS total_countries FROM countries;
  SELECT COUNT(DISTINCT CountryId) AS COUNTRIES FROM countries;
  SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id ORDER BY number_of_models DESC;
  SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname ORDER BY number_of_models DESC;
;
;
;
;
;
;
;
  SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.year ASC LIMIT 1;
;
;
  SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS maker_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent ORDER BY maker_count DESC;
  SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS num_car_makers FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;
;
;
  SELECT car_makers.fullname, COUNT(model_list.model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY model_count DESC;
  SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname ORDER BY number_of_models DESC;
;
  SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc' AND car_names.model = 'hornet sportabout (sw)'
;
  SELECT COUNT(DISTINCT car_makers.id) AS maker_count FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';
  SELECT COUNT(DISTINCT model_list.model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa';
;
;
  SELECT AVG(cars_data.mpg) FROM cars_data WHERE cars_data.cylinders = 4;
  SELECT MIN(cars_data.weight) FROM cars_data WHERE cars_data.cylinders = 8 AND cars_data.year = 1974;
;
;
  SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
;
;
;
;
  SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
  SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
  SELECT COUNT(DISTINCT car_makers.maker) AS num_car_makers, countries.countryid, countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = 2 GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;
;
;
  SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHorsepower DESC LIMIT 1;
;
;
;
;
;
  SELECT AVG(cars_data.edispl) AS average_edispl FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.make = car_makers.fullname WHERE car_makers.maker = 'volvo';
  SELECT c.Cylinders, MAX(d.Accelerate) AS MaxAccelerate FROM cars_data d JOIN car_names c ON d.Id = c.MakeId GROUP BY c.Cylinders ORDER BY c.Cylinders;
;
;
;
  SELECT COUNT(cars_data.id) FROM cars_data WHERE cars_data.cylinders > 4;
;
  SELECT COUNT(cars_data.id) AS total_cars FROM cars_data WHERE cars_data.year = 1980;
  SELECT COUNT(cars_data.id) AS total_cars FROM cars_data WHERE cars_data.year = 1980;
;
;
;
;
  SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.model = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
  SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.model = cars_data.id WHERE car_makers.maker = 'General Motors' OR cars_data.weight > 3500;
  SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
  SELECT DISTINCT c.year FROM cars_data c WHERE c.weight < 4000 AND EXISTS (SELECT 1 FROM cars_data WHERE weight > 3000);
;
;
;
  SELECT MIN(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo';
;
;
;
;
  SELECT COUNT(cars_data.id) FROM cars_data WHERE cars_data.cylinders > 6;
;
;
  SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;
  SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(cars_data.Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
  SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower != (SELECT MIN(cars_data.Horsepower) FROM cars_data);
;
  SELECT MAX(cars_data.mpg) FROM cars_data WHERE (cars_data.cylinders = 8 OR cars_data.year < 1980);
  SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.edispl < 3500 AND car_makers.maker != 'Ford Motor Company';
  SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.model = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford Motor Company';
;
;
  SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.model) >= 2 AND COUNT(DISTINCT car_makers.maker) > 3;
  SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.model) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3;
  SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker WHERE (SELECT COUNT(DISTINCT car_makers.id) FROM car_makers WHERE car_makers.country = countries.countryid) > 3 OR model_list.model = 'fiat' GROUP BY countries.countryid, countries.countryname;
  SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker WHERE (SELECT COUNT(DISTINCT car_makers.id) FROM car_makers WHERE car_makers.country = countries.countryid) > 3 OR model_list.model = 'fiat' GROUP BY countries.countryid, countries.countryname;
  SELECT airlines.Country FROM airlines WHERE airlines.Airline ILIKE '%JetBlue%Airways%'
  SELECT airlines.Country FROM airlines WHERE airlines.Airline ILIKE '%jetblue%airways%';
  SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
  SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline ILIKE '%jetblue%airways%';
  SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA';
  SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA';
  SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
  SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
  SELECT COUNT(DISTINCT Airline) AS NumberOfAirlines FROM flights;
  SELECT COUNT(DISTINCT Airline) AS total_airlines FROM flights;
  SELECT COUNT(DISTINCT AirportCode) AS AirportCount FROM airports;
  SELECT COUNT(AirportCode) AS NumberOfAirports FROM airports;
  SELECT COUNT(DISTINCT(flightno)) AS total_flights FROM flights;
  SELECT COUNT(flightno) AS total_flights FROM flights;
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT COUNT(DISTINCT(airlines.uid)) AS num_of_airlines FROM airlines WHERE airlines.Country = 'USA';
  SELECT COUNT(DISTINCT(airlines.uid)) AS num_of_airlines FROM airlines WHERE airlines.Country = 'USA';
  SELECT airports.City, airports.Country FROM airports WHERE airports.AirportCode = 'ALT';
  SELECT airports.City, airports.Country FROM airports WHERE airports.AirportCode = 'ALT';
  SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO';
  SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO';
  SELECT airports.AirportName FROM airports WHERE airports.City ILIKE '%Aberdeen%'
  SELECT airports.AirportName FROM airports WHERE airports.City ILIKE '%aberdeen%';
  SELECT COUNT(flightno) AS num_flights FROM flights WHERE sourceairport = 'APG';
  SELECT COUNT(flights.flightno) AS total_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG';
  SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
  SELECT COUNT(flights.flightno) AS num_flights FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'ATO';
  SELECT COUNT(flights.FlightNo) AS total_flights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
  SELECT COUNT(flights.flightno) AS num_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname ilike '%Aberdeen%';
  SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
  SELECT COUNT(flights.flightno) AS num_flights FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname ilike '%Aberdeen%';
  SELECT COUNT(*) FROM flights JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE source_airport.City = 'Aberdeen' AND dest_airport.City = 'Ashley';
  SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.AirportName = 'Aberdeen' AND dest.AirportName = 'Ashley';
  SELECT COUNT(flightno) AS num_flights FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
  SELECT COUNT(*) FROM flights WHERE Airline = 1;
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD';
  SELECT COUNT(*) FROM flights WHERE Airline = 1 AND SourceAirport = 'AHD';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
  SELECT airports.City, COUNT(flights.DestAirport) AS NumberOfArrivingFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumberOfArrivingFlights DESC LIMIT 1;
  SELECT airports.City, COUNT(flights.DestAirport) AS DestinationCount FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY DestinationCount DESC LIMIT 1;
  SELECT airports.City, COUNT(flights.FlightNo) AS NumberOfFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumberOfFlights DESC LIMIT 1;
  SELECT airports.City, COUNT(flights.SourceAirport) AS frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
  SELECT airports.AirportCode, COUNT(flights.FlightNo) AS num_flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY num_flights DESC LIMIT 1;
  SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1;
  SELECT airports.AirportCode, COUNT(flights.FlightNo) AS num_flights FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY num_flights ASC LIMIT 1;
  SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;
  SELECT airlines.Airline, COUNT(flights.FlightNo) AS total_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY total_flights DESC LIMIT 1;
  SELECT airlines.Airline, COUNT(flights.FlightNo) AS total_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY total_flights DESC LIMIT 1;
  SELECT airlines.abbreviation, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation, airlines.country ORDER BY COUNT(flights.flightno) ASC LIMIT 1;
  SELECT airlines.abbreviation, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation, airlines.country ORDER BY COUNT(flights.airline) ASC LIMIT 1;
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' AND flights.DestAirport = 'CVO' GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.FlightNo) >= 2;
  SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport IN ('APG','CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2;
  SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport != 'APG';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' EXCEPT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG';
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200;
  SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200;
  SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
  SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
  SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'APG';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
  SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen';
  SELECT COUNT(flights.flightno) AS total_flights FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
  SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
  SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights)
  SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights)
  SELECT COUNT(Employee_ID) AS total_employees FROM employee;
  SELECT COUNT(DISTINCT "Employee_ID") AS "Number of employees" FROM "employee";
  SELECT employee.name FROM employee ORDER BY employee.age ASC;
  SELECT "Name" FROM "employee" ORDER BY "Age" ASC;
  SELECT city, COUNT(employee_id) AS number_of_employees FROM employee GROUP BY city;
  SELECT city, COUNT(employee_id) AS total_employees FROM employee GROUP BY city;
  SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(employee.city) > 1;
;
  SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location;
  SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location;
  SELECT shop.manager_name, shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1;
  SELECT shop.manager_name, shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1;
  SELECT MIN(shop.number_products) AS minimum_products, MAX(shop.number_products) AS maximum_products FROM shop;
  SELECT MIN(shop.number_products) AS minimum_products, MAX(shop.number_products) AS maximum_products FROM shop;
  SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
  SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
  SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(shop.number_products) FROM shop);
  SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(shop.number_products) FROM shop);
;
  SELECT e.name, COUNT(ev.year_awarded) AS total_awards FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY total_awards DESC LIMIT 1;
;
  SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;
  SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL;
  SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL;
  SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
  SELECT shop.name, COUNT(hiring.employee_id) AS total_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY total_employees DESC LIMIT 1;
  SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL;
  SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL;
  SELECT shop.name, COUNT(hiring.employee_id) AS number_of_employees FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name;
  SELECT shop.name, COUNT(hiring.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
  SELECT SUM(evaluation.bonus) AS total_bonus FROM evaluation;
;
;
  SELECT * FROM hiring;
  SELECT DISTRICT FROM shop WHERE number_products < 3000 AND number_products > 10000 GROUP BY district HAVING COUNT(DISTINCT number_products) = 2;
  SELECT DISTRICT FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTRICT FROM shop WHERE number_products > 10000;
  SELECT COUNT(DISTINCT "Location") FROM "shop";
  SELECT COUNT(DISTINCT "shop"."Location") AS "number_of_locations" FROM "shop";
  SELECT COUNT(DISTINCT Document_ID) AS Number_Of_Documents FROM Documents;
  SELECT COUNT(Document_ID) AS Number_Of_Documents FROM Documents;
  SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
  SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
  SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description like '%w%'
  SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Description like '%w%'
  SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';
  SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';
  SELECT COUNT(DISTINCT d.template_id) AS total_templates FROM documents d;
  SELECT COUNT(DISTINCT t.template_id) AS number_of_templates FROM templates t JOIN documents d ON t.template_id = d.template_id;
  SELECT COUNT(DISTINCT d.document_id) AS num_documents FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT';
  SELECT COUNT(DISTINCT d.document_id) AS num_documents FROM documents d JOIN templates t ON d.template_id = t.template_id JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'PPT';
  SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
  SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY Number_Of_Documents DESC;
  SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
  SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_ID, Ref_Template_Types.Template_Type_Code ORDER BY Number_Of_Documents DESC LIMIT 1;
  SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1;
  SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1;
  SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT COUNT(Template_ID) AS Number_Of_Templates FROM Templates;
  SELECT COUNT(Template_ID) AS Number_Of_Templates FROM Templates;
  SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
  SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
  SELECT DISTINCT Templates.Template_Type_Code FROM Templates;
  SELECT Template_Type_Code FROM Ref_Template_Types;
  SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT');
  SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT');
  SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT COUNT(Template_ID) AS Number_Of_CV_Templates FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
  SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_Of_Templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_Of_Templates FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Templates.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_Of_Templates FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Number_Of_Templates DESC LIMIT 1;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_Of_Templates FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY Number_Of_Templates DESC LIMIT 1;
  SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
  SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
  SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
  SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code;
  SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
  SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
  SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';
  SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code;
  SELECT Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_Of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY Number_Of_Documents DESC LIMIT 1;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Template_ID) AS Number_Of_Documents FROM Documents JOIN Ref_Template_Types ON Documents.Template_ID = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY Number_Of_Documents DESC LIMIT 1;
  SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code IS NULL;
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'AD';
  SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'AD';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
  SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
  SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
  SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
  SELECT COUNT(Paragraph_ID) AS Total_Paragraphs FROM Paragraphs;
  SELECT COUNT(Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs;
  SELECT COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
  SELECT COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
  SELECT Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text ILIKE '%Korea%';
  SELECT Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text like '%Korea%'
  SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
  SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
  SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
  SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
  SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
  SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
  SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
  SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS paragraph_count FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
  SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY Number_Of_Paragraphs DESC LIMIT 1;
  SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC LIMIT 1;
  SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Number_Of_Paragraphs ASC LIMIT 1;
  SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Paragraph_Count ASC LIMIT 1;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text ILIKE '%Brazil%' AND Paragraphs.Paragraph_Text ILIKE '%Ireland%'
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text ILIKE '%Brazil%' AND Paragraphs.Paragraph_Text ILIKE '%Ireland%' GROUP BY Documents.Document_ID;
  SELECT COUNT(DISTINCT "Teacher_ID") AS "Number of Teachers" FROM "course_arrange";
  SELECT COUNT(DISTINCT "Teacher_ID") AS total_teachers FROM "course_arrange";
  SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
  SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
  SELECT teacher.age, teacher.hometown FROM teacher;
  SELECT teacher.age, teacher.hometown FROM teacher;
  SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District';
  SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District';
  SELECT teacher.name FROM teacher WHERE teacher.age IN ('32','33');
  SELECT teacher.name FROM teacher WHERE teacher.age IN ('32','33');
  SELECT teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1;
  SELECT teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1;
  SELECT teacher.hometown, COUNT(teacher.hometown) AS number_of_teachers FROM teacher GROUP BY teacher.hometown;
  SELECT teacher.hometown, COUNT(teacher.teacher_id) AS total_teachers FROM teacher GROUP BY teacher.hometown;
  SELECT teacher.hometown, COUNT(teacher.hometown) AS COUNT FROM teacher GROUP BY teacher.hometown ORDER BY COUNT DESC LIMIT 1;
  SELECT teacher.hometown, COUNT(teacher.hometown) AS COUNT FROM teacher GROUP BY teacher.hometown ORDER BY COUNT DESC LIMIT 1;
  SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(teacher.teacher_id) >= 2;
  SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(teacher.hometown) >= 2;
  SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
  SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
  SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
  SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
  SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
  SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
  SELECT teacher.name, COUNT(course_arrange.course_id) AS number_of_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name ORDER BY number_of_courses DESC;
  SELECT teacher.name, COUNT(course_arrange.course_id) AS number_of_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name ORDER BY number_of_courses DESC;
  SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;
  SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;
  SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)
  SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)
  SELECT COUNT(visitor.ID) AS total_visitors_under_30 FROM visitor WHERE visitor.Age < 30;
  SELECT "visitor"."Name" FROM "visitor" WHERE "visitor"."Level_of_membership" > 4 ORDER BY "visitor"."Level_of_membership" DESC;
  SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership <= 4;
  SELECT v.Name, v.Level_of_membership FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC;
  SELECT museum.museum_id, museum.name FROM museum ORDER BY museum.num_of_staff DESC LIMIT 1;
  SELECT AVG(m.Num_of_Staff) AS average_staff FROM museum m WHERE CAST(m.Open_Year AS int) < 2009;
  SELECT museum.open_year, museum.num_of_staff FROM museum WHERE museum.name ILIKE '%plaza%museum%'
  SELECT museum.name FROM museum WHERE museum.num_of_staff > (SELECT MIN(museum.num_of_staff) FROM museum WHERE museum.open_year > '2010')
  SELECT v.id, v.name, v.age FROM visitor v JOIN visit vt ON v.id = vt.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(DISTINCT vt.museum_id) > 1;
  SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit vt ON v.id = vt.visitor_id ORDER BY vt.total_spent DESC LIMIT 1;
  SELECT museum.museum_id, museum.name, COUNT(visit.visitor_id) AS total_visitors FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id, museum.name ORDER BY total_visitors DESC LIMIT 1;
  SELECT museum.name FROM museum LEFT JOIN visit ON museum.museum_id = visit.museum_id WHERE visit.museum_id IS NULL;
  SELECT v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID ORDER BY vt.Num_of_Ticket DESC LIMIT 1;
  SELECT AVG(visit.num_of_ticket) AS average_tickets, MAX(visit.num_of_ticket) AS maximum_tickets FROM visit;
  SELECT SUM(visit.total_spent) AS total_spent FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
  SELECT v.Name FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID JOIN museum m ON vt.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND m.Open_Year > '2011' GROUP BY v.Name HAVING COUNT(DISTINCT m.Museum_ID) = 2;
  SELECT COUNT(DISTINCT v.id) AS total_visitors FROM visitor v LEFT JOIN visit vt ON v.id = vt.visitor_id LEFT JOIN museum m ON vt.museum_id = m.museum_id WHERE m.open_year < '2010' AND vt.museum_id IS NULL;
  SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
  SELECT COUNT(player_id) AS total_players FROM players;
  SELECT COUNT(player_id) AS total_players FROM players;
  SELECT COUNT(match_num) AS total_matches FROM matches;
  SELECT COUNT(match_num) AS total_matches FROM matches;
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
  SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
  SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
  SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
  SELECT MAX(loser_rank) FROM matches;
  SELECT MIN(loser_rank) AS best_loser_rank FROM matches;
  SELECT COUNT(DISTINCT country_code) AS num_countries FROM players;
  SELECT COUNT(DISTINCT country_code) FROM players;
  SELECT COUNT(DISTINCT loser_name) FROM matches;
  SELECT COUNT(DISTINCT loser_name) FROM matches;
  SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
  SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
  SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
  SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE EXTRACT(YEAR FROM matches.tourney_date) IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT EXTRACT(YEAR FROM matches.tourney_date)) = 2;
  SELECT COUNT(match_num) AS total_matches FROM matches WHERE year IN (2013, 2016);
  SELECT COUNT(match_num) AS total_matches FROM matches WHERE year = 2013 OR year = 2016;
  SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name ilike '%WTA Championships%' AND matches.tourney_name ilike '%Australian Open%' GROUP BY players.country_code, players.first_name;
  SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name ilike '%WTA%Championships%' AND matches.tourney_name ilike '%Australian%Open%' GROUP BY players.first_name, players.country_code;
  SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
  SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
  SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date ASC;
  SELECT players.first_name || ' ' || players.last_name AS full_name, players.birth_date FROM players ORDER BY players.birth_date ASC;
  SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC;
  SELECT players.first_name || ' ' || players.last_name AS full_name, players.birth_date FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC;
  SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
  SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
  SELECT year, COUNT(match_num) AS total_matches FROM matches GROUP BY year ORDER BY total_matches DESC LIMIT 1;
  SELECT year, COUNT(match_num) AS total_matches FROM matches GROUP BY year ORDER BY total_matches DESC LIMIT 1;
  SELECT players.first_name, players.last_name, rankings.ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id WHERE rankings.ranking = 1 ORDER BY rankings.ranking_points DESC LIMIT 1;
  SELECT m.winner_name, r.ranking_points FROM matches m JOIN rankings r ON m.winner_id = r.player_id ORDER BY m.winner_id DESC LIMIT 1;
  SELECT matches.winner_name FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
  SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings) AND matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
  SELECT m.loser_name, m.winner_name FROM matches m ORDER BY m.minutes DESC LIMIT 1;
  SELECT m.winner_name, m.loser_name, m.minutes FROM matches m ORDER BY m.minutes DESC LIMIT 1;
  SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name;
  SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name ORDER BY average_ranking DESC;
  SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name ORDER BY total_ranking_points DESC;
  SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name ORDER BY total_ranking_points DESC;
  SELECT players.country_code, COUNT(players.player_id) AS num_players FROM players GROUP BY players.country_code;
  SELECT players.country_code, COUNT(players.player_id) AS num_players FROM players GROUP BY players.country_code ORDER BY num_players DESC;
  SELECT players.country_code, COUNT(players.player_id) AS num_players FROM players GROUP BY players.country_code ORDER BY num_players DESC LIMIT 1;
  SELECT players.country_code, COUNT(players.player_id) AS total_players FROM players GROUP BY players.country_code ORDER BY total_players DESC LIMIT 1;
  SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
  SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
  SELECT rankings.ranking_date, COUNT(rankings.tours) AS total_tours FROM rankings GROUP BY rankings.ranking_date ORDER BY rankings.ranking_date;
  SELECT rankings.ranking_date, COUNT(rankings.tours) AS total_tours FROM rankings GROUP BY rankings.ranking_date ORDER BY rankings.ranking_date;
  SELECT year, COUNT(match_num) AS num_matches FROM matches GROUP BY year;
  SELECT year, COUNT(match_num) AS num_matches FROM matches GROUP BY year;
  SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.year = 2020 ORDER BY p.birth_date DESC LIMIT 3;
  SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE p.birth_date > (CURRENT_DATE - interval '30 years') ORDER BY p.birth_date ASC LIMIT 3;
  SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
  SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
  SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings)
  SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1;
  SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand;
  SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand;
  SELECT COUNT(*) FROM ship WHERE disposition_of_ship ILIKE '%captured%';
  SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
  SELECT name, date, result FROM battle;
  SELECT b.name, MAX(d.killed) AS max_death_toll, MIN(d.killed) AS min_death_toll FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.name;
  SELECT AVG(death.injured) AS average_injuries FROM death;
  SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
  SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
  SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
  SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
  SELECT death.caused_by_ship_id, ship.name, SUM(death.injured) AS total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY death.caused_by_ship_id, ship.name ORDER BY total_injuries DESC LIMIT 1;
  SELECT DISTINCT "battle"."name" FROM "battle" WHERE "battle"."bulgarian_commander" ILIKE '%Kaloyan%' AND "battle"."latin_commander" ILIKE '%Baldwin%I%'
  SELECT COUNT(DISTINCT result) FROM battle;
  SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.tonnage = '225' WHERE s.id IS NULL;
  SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');
  SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel');
  SELECT "death"."note" FROM "death" WHERE "death"."note" ilike '%East%';
;
  SELECT line_1, line_2 FROM Addresses;
  SELECT COUNT(DISTINCT course_id) AS total_courses FROM Courses;
  SELECT COUNT(course_id) AS total_courses FROM Courses;
  SELECT course_description FROM Courses WHERE course_name = 'Math';
  SELECT Courses.course_description FROM Courses WHERE Courses.course_name like '%math%';
;
;
;
  SELECT d.department_name, COUNT(dp.degree_program_id) AS number_of_degrees FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY number_of_degrees DESC LIMIT 1;
  SELECT COUNT(DISTINCT d.department_id) AS number_of_departments FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id;
  SELECT COUNT(DISTINCT d.department_id) AS number_of_departments FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id;
  SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM Degree_Programs;
  SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM Degree_Programs;
  SELECT COUNT(DISTINCT dp.degree_summary_name) AS number_of_degrees FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id WHERE d.department_name = 'Engineering';
  SELECT COUNT(DISTINCT dp.degree_summary_name) AS number_of_degrees FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id WHERE d.department_name = 'Engineering';
;
;
;
;
;
;
  SELECT Semesters.semester_name, Semesters.semester_id, COUNT(Student_Enrolment.student_id) AS total_students FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_name, Semesters.semester_id ORDER BY total_students DESC LIMIT 1;
  SELECT Semesters.semester_name, Semesters.semester_id, COUNT(Student_Enrolment.student_id) AS total_students FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY total_students DESC LIMIT 1;
; 
  SELECT department_description FROM Departments WHERE department_name ilike '%computer%'
  SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id WHERE Semesters.semester_name = 'Spring 2020' GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) >= 2;
;
  [SOL] SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name like '%Bachelor%'; [/SOL]
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors';
;
;
;
  SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_id) AS total_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY total_students DESC LIMIT 1;
  SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS Enrollment_Count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY Enrollment_Count DESC LIMIT 1;
  SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
  SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL;
;
;
;
;
;
;
  SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment)
;
;
  SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
  SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1;
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1;
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id WHERE Semesters.semester_name = 'Graduate' ORDER BY Students.date_first_registered ASC LIMIT 1;
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students WHERE Students.date_left IS NOT NULL ORDER BY Students.date_left ASC LIMIT 1;
  SELECT Students.first_name FROM Students WHERE Students.current_address_id != Students.permanent_address_id;
;
;
  SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
  SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
;
;
;
;
;
;
;
  SELECT COUNT(DISTINCT transcript_id) AS number_of_transcripts, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY number_of_transcripts DESC;
  SELECT COUNT(DISTINCT transcript_id) AS transcript_count, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY transcript_count DESC LIMIT 1;
  SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1;
;
;
  SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;
;
;
;
;
  SELECT * FROM Sections WHERE section_name = 'h';
  SELECT section_description FROM Sections WHERE section_name = 'h';
;
  SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
  SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;
  SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;
  SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by ILIKE '%Ben%Jones%'
  SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by ILIKE '%Ben%Jones%'
  SELECT COUNT(Cartoon.id) AS number_of_cartoons FROM Cartoon WHERE Cartoon.Written_by ILIKE '%Joseph%Kuhr%';
  SELECT COUNT(id) FROM Cartoon WHERE Written_by ILIKE '%Joseph%Kuhr%'
  SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
  SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date ASC;
;
  SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti');
  [SOL] SELECT Country, COUNT(id) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1; [/SOL]
  [SOL] SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS Number_of_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Number_of_Channels DESC LIMIT 1; [/SOL]
  SELECT COUNT(DISTINCT series_name) AS series_count, COUNT(DISTINCT content) AS content_count FROM TV_Channel;
  SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel;
  SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name ILIKE '%Sky%Radio%';
  SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.id = 700;
  SELECT "TV_Channel"."Package_Option" FROM "TV_Channel" WHERE "TV_Channel"."series_name" ILIKE '%Sky%Radio%'
  SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name ILIKE '%Sky%Radio%'
  SELECT COUNT(id) FROM TV_Channel WHERE "Language" ILIKE '%english%';
  SELECT COUNT(id) FROM TV_Channel WHERE "Language" ILIKE '%english%';
  [SOL] SELECT Language, COUNT(id) AS Number_of_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channel ASC LIMIT 1; [/SOL]
  SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1;
  SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language;
  SELECT Language, COUNT(id) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
;
  SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title ILIKE '%The%Rise%of%the%Blue%Beetle%'
;
  SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
;
  SELECT "TV_series"."Episode" FROM "TV_series" ORDER BY "TV_series"."Rating" DESC;

  SELECT "Episode", "Rating" FROM "TV_series" ORDER BY "Rating" DESC LIMIT 3;
  SELECT MIN(TV_series.Share) AS Minimum_Share, MAX(TV_series.Share) AS Maximum_Share FROM TV_series;
  SELECT MAX(TV_series.Share) AS maximum_share, MIN(TV_series.Share) AS minimum_share FROM TV_series;
  SELECT "TV_series"."Air_Date" FROM "TV_series" WHERE "TV_series"."Episode" ILIKE '%A%Love%of%a%Lifetime%'
  SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode ILIKE '%A%Love%of%a%Lifetime%'
  SELECT "TV_series"."Weekly_Rank" FROM "TV_series" WHERE "TV_series"."Episode" ILIKE '%A%Love%of%a%Lifetime%'
  SELECT "TV_series"."Weekly_Rank" FROM "TV_series" WHERE "TV_series"."Episode" ILIKE '%A%Love%of%a%Lifetime%'
;
  SELECT series_name FROM TV_series WHERE Episode ILIKE '%A%Love%of%a%Lifetime%'
;
  SELECT "Episode" FROM "TV_series" WHERE "Channel" ILIKE '%sky%radio%';
  SELECT Cartoon.Directed_by, COUNT(Cartoon.id) AS Number_of_cartoons FROM Cartoon GROUP BY Cartoon.Directed_by;
  SELECT Cartoon.Directed_by, COUNT(Cartoon.id) AS Number_of_cartoons FROM Cartoon GROUP BY Cartoon.Directed_by;
;
  SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Production_code DESC LIMIT 1;
;
  SELECT TV_Channel.Package_Option, TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 'yes';

  SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by ILIKE '%Todd%Casey%'

  SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey';
  SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
  SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
  SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
  SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
  SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(TV_Channel.id) > 2;
  SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(TV_Channel.id) > 2;
  SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones'
  SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones'
;
  SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' ORDER BY TV_Channel.Package_Option;
  SELECT COUNT(DISTINCT "Poker_Player_ID") AS "Number of Poker Players" FROM "poker_player";
  SELECT COUNT(Poker_Player_ID) AS Number_Of_Poker_Players FROM poker_player;
  SELECT "poker_player"."Earnings" FROM "poker_player" ORDER BY "poker_player"."Earnings" DESC;
  SELECT "poker_player"."Earnings" FROM "poker_player" ORDER BY "poker_player"."Earnings" DESC;
  SELECT "poker_player"."Final_Table_Made", "poker_player"."Best_Finish" FROM "poker_player";
  SELECT p.name, pp.final_table_made, pp.best_finish FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
  SELECT AVG(poker_player.earnings) AS average_earnings FROM poker_player;
  SELECT AVG(poker_player.earnings) AS average_earnings FROM poker_player;
  SELECT "poker_player"."Money_Rank" FROM "poker_player" ORDER BY "poker_player"."Earnings" DESC LIMIT 1;
  SELECT "poker_player"."Money_Rank" FROM "poker_player" ORDER BY "poker_player"."Earnings" DESC LIMIT 1;
  SELECT MAX(poker_player.final_table_made) AS max_final_tables FROM poker_player WHERE poker_player.earnings < 200000;
  SELECT MAX(poker_player.final_table_made) AS max_final_table_made FROM poker_player WHERE poker_player.earnings < 200000;
  SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
  SELECT "people"."Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "poker_player"."Earnings" > 300000;
  SELECT "people"."Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "poker_player"."Earnings" > 300000;
  SELECT "people"."Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "poker_player"."Final_Table_Made" ASC;
  SELECT "people"."Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "poker_player"."Final_Table_Made" ASC;
  SELECT "people"."Birth_Date" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "poker_player"."Earnings" ASC LIMIT 1;
  SELECT "people"."Birth_Date" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "poker_player"."Earnings" ASC LIMIT 1;
  SELECT "poker_player"."Money_Rank" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "people"."Height" = (SELECT MAX("people"."Height") FROM "people")
  SELECT "poker_player"."Money_Rank" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "people"."Height" DESC LIMIT 1;
  SELECT AVG(poker_player.earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;
  SELECT AVG(poker_player.earnings) AS average_earnings FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;
  SELECT "people"."Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "poker_player"."Earnings" DESC;
  SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
  SELECT "people"."Nationality", COUNT("people"."Nationality") AS "Number_of_people" FROM "people" GROUP BY "people"."Nationality";
  SELECT Nationality, COUNT(Nationality) AS COUNT FROM people GROUP BY Nationality;
  SELECT Nationality, COUNT(Nationality) AS COUNT FROM people GROUP BY Nationality ORDER BY COUNT DESC LIMIT 1;
  SELECT Nationality, COUNT(Nationality) AS NationalityCount FROM people GROUP BY Nationality ORDER BY NationalityCount DESC LIMIT 1;
  SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.People_ID) >= 2;
  SELECT "people"."Nationality" FROM "people" GROUP BY "people"."Nationality" HAVING COUNT("people"."People_ID") >= 2;
  SELECT "people"."Name", "people"."Birth_Date" FROM "people" ORDER BY "people"."Name" ASC;
  SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
  SELECT "people"."Name" FROM "people" WHERE "people"."Nationality" != 'Russia';
  SELECT people.name FROM people WHERE people.nationality != 'Russia';
  SELECT "people"."Name" FROM "people" LEFT JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID" WHERE "poker_player"."People_ID" IS NULL;
  SELECT "people"."Name" FROM "people" WHERE "people"."People_ID" NOT IN (SELECT "poker_player"."People_ID" FROM "poker_player")
  SELECT COUNT(DISTINCT "Nationality") FROM "people";
  SELECT COUNT(DISTINCT "Nationality") FROM "people";
  SELECT COUNT(DISTINCT state) AS number_of_states FROM votes;
  SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
  SELECT vote_id, phone_number, state FROM votes;
  SELECT MIN(area_code) AS minimum_area_code, MAX(area_code) AS maximum_area_code FROM AREA_CODE_STATE;
  SELECT MAX(created) FROM VOTES WHERE state = 'CA';
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
  SELECT DISTINCT state, created FROM votes;
  SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
  SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
  SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
  SELECT COUNT(DISTINCT c.contestant_number) AS unvoted_contestants FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
  SELECT AREA_CODE_STATE.area_code, COUNT(VOTES.vote_id) AS total_votes FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY total_votes DESC LIMIT 1;
  SELECT v.created, a.state, v.phone_number FROM votes v JOIN contestants c ON v.contestant_number = c.contestant_number JOIN area_code_state a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling';
  SELECT DISTINCT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state WHERE VOTES.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT VOTES.contestant_name) = 2;
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name ilike '%Al%';
  SELECT country.name FROM country WHERE country.indepyear > 1950;
  SELECT Name FROM country WHERE IndepYear > 1950;
  SELECT COUNT(DISTINCT(country.code)) AS total_countries FROM country WHERE country.governmentform ILIKE '%republic%';
  SELECT COUNT(DISTINCT(country.code)) AS total_countries FROM country WHERE country.governmentform ILIKE '%republic%';
  SELECT SUM(country.SurfaceArea) AS total_surface_area FROM country WHERE country.Region = 'Caribbean';
  SELECT SUM(SurfaceArea) AS total_surface_area FROM country WHERE Continent = 'North America';
  SELECT country.continent FROM country WHERE country.code = 'AIA';
  SELECT country.continent FROM country WHERE country.code = 'AIA';
  SELECT country.region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Kabul';
  SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' ORDER BY countrylanguage.percentage DESC LIMIT 1;
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' ORDER BY countrylanguage.percentage DESC LIMIT 1;
  SELECT SUM(Population) AS total_population, AVG(LifeExpectancy) AS average_life_expectancy FROM country WHERE Name = 'Brazil';
  SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil';
  SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
  SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
  SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
  SELECT country.name FROM country WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1;
  SELECT country.name FROM country WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1;
  SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia';
  SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia';
  SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
  SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
  SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');
  SELECT SUM(SurfaceArea) AS total_surface_area FROM country WHERE Continent IN ('Asia', 'Europe');
  SELECT SUM(city.Population) AS total_population FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Region = 'Gelderland';
  SELECT SUM(city.population) AS total_population FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'Gelderland';
  SELECT AVG(country.GNP) AS average_GNP, SUM(country.Population) AS total_population FROM country WHERE country.GovernmentForm = 'US territory';
  SELECT AVG(country.GNP) AS average_GNP, SUM(country.Population) AS total_population FROM country WHERE country.Continent = 'North America';
  SELECT COUNT(DISTINCT(language)) FROM countrylanguage;
  SELECT COUNT(DISTINCT language) FROM countrylanguage;
  SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
  SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
  SELECT COUNT(DISTINCT(language)) FROM countrylanguage WHERE countrycode = 'ABW';
  SELECT COUNT(DISTINCT(language)) FROM countrylanguage WHERE countrycode = 'ABW';
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
  SELECT COUNT(DISTINCT(countrylanguage.language)) AS total_official_languages FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 'T';
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
  SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY num_languages DESC LIMIT 1;
  SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1;
  SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;
  SELECT COUNT(DISTINCT(countrylanguage.countrycode)) AS total_countries FROM countrylanguage WHERE countrylanguage.language IN ('English', 'Dutch');
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') AND countrylanguage.isofficial = 'T' GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
  SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
  SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
  SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch');
  SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T';
  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T';
  SELECT countrylanguage.language, COUNT(countrylanguage.language) AS COUNT FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY COUNT DESC LIMIT 1;
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY COUNT(DISTINCT country.code) DESC LIMIT 1;
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform ilike '%Republic%' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT country.code) = 1;
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT countrylanguage.countrycode) = 1;
  SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
  SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
  SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
  SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
  SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English';
  SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'F';
  SELECT SUM(city.population) AS total_population FROM city JOIN country ON city.countrycode = country.code WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
  SELECT COUNT(DISTINCT city.Population) AS total_population FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE countrylanguage.CountryCode IS NULL;
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate ilike '%Beatrix%' AND countrylanguage.isofficial ilike '%T%';
  SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate ilike '%Beatrix%' AND countrylanguage.isofficial ilike '%T%';
  SELECT COUNT(DISTINCT countrylanguage.language) AS total_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T';
  SELECT COUNT(DISTINCT countrylanguage.language) AS total_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930;
  SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(country.surfacearea) FROM country WHERE country.continent = 'Europe') ORDER BY country.name;
  SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(country.surfacearea) FROM country WHERE country.continent = 'Europe') ORDER BY country.name;
  SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < (SELECT MIN(country.population) FROM country WHERE country.continent = 'Asia')
  SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < (SELECT MIN(country.population) FROM country WHERE country.continent = 'Asia');
  SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > (SELECT MAX(country.population) FROM country WHERE country.continent = 'Africa')
  SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > (SELECT MAX(country.population) FROM country WHERE country.continent = 'Africa');
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English' AND country.governmentform != 'Republic';
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English' AND country.governmentform != 'Republic';
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
  SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
  SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
  SELECT country.population, country.name, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(country.surfacearea) FROM country)
  SELECT country.name, country.population, country.headofstate FROM country ORDER BY country.surfacearea DESC LIMIT 1;
  SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3;
  SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) > 2;
  SELECT city.District, COUNT(city.ID) AS num_cities FROM city WHERE city.Population > (SELECT AVG(city.Population) FROM city) GROUP BY city.District ORDER BY num_cities DESC;
  SELECT city.District, COUNT(city.ID) AS num_cities FROM city WHERE city.Population > (SELECT AVG(city.Population) FROM city) GROUP BY city.District;
  SELECT country.governmentform, SUM(country.population) AS total_population FROM country WHERE country.lifeexpectancy > 72 GROUP BY country.governmentform;
  SELECT country.governmentform, SUM(country.population) AS total_population FROM country WHERE country.lifeexpectancy > 72 GROUP BY country.governmentform;
  SELECT country.continent, AVG(country.lifeexpectancy) AS average_life_expectancy, SUM(country.population) AS total_population FROM country WHERE country.lifeexpectancy < 72 GROUP BY country.continent;
  SELECT country.continent, SUM(country.population) AS total_population, AVG(country.lifeexpectancy) AS average_life_expectancy FROM country WHERE country.lifeexpectancy < 72 GROUP BY country.continent;
  SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;
  SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
  SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3;
  SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3;
  SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
  SELECT country.name FROM country ORDER BY country.population ASC LIMIT 3;
  SELECT COUNT(DISTINCT(country.code)) AS total_countries FROM country WHERE country.continent = 'Asia';
  SELECT COUNT(DISTINCT(country.code)) AS num_countries FROM country WHERE country.continent = 'Asia';
  SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population > 80000;
  SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000;
  SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
  SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000;
  SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
  SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
  SELECT countrylanguage.language, COUNT(DISTINCT countrylanguage.countrycode) AS country_count FROM countrylanguage GROUP BY countrylanguage.language ORDER BY country_count DESC LIMIT 1;
  SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT(DISTINCT countrylanguage.countrycode) DESC LIMIT 1;
  SELECT country.name, countrylanguage.language, countrylanguage.percentage FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ORDER BY countrylanguage.percentage DESC;
  SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) ORDER BY country.code;
  SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language ILIKE '%spanish%' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language ILIKE '%spanish%');
  SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50;
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1;
  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isOfficial = 'T' GROUP BY country.code HAVING SUM(countrylanguage.percentage) >= 100;
  SELECT COUNT(DISTINCT "Conductor_ID") AS "Number of Conductors" FROM "conductor";
  SELECT COUNT(DISTINCT "Conductor_ID") AS "Number of Conductors" FROM "conductor";
  SELECT "conductor"."Name" FROM "conductor" ORDER BY "conductor"."Age" ASC;
  SELECT "conductor"."Name" FROM "conductor" ORDER BY "conductor"."Age" ASC;
  SELECT conductor.name FROM conductor WHERE conductor.nationality != 'USA';
  SELECT Name FROM conductor WHERE Nationality != 'USA';
  SELECT o.record_company, o.year_of_founded FROM orchestra o ORDER BY o.year_of_founded DESC;
  SELECT o.record_company, o.year_of_founded FROM orchestra o ORDER BY o.year_of_founded DESC;
  SELECT AVG(show.attendance) AS average_attendance FROM show;
  SELECT AVG(show.attendance) AS average_attendance FROM show;
  SELECT MAX(share) AS maximum_share, MIN(share) AS minimum_share FROM performance WHERE type != 'Live final';
  SELECT MAX(performance.share) AS maximum_share, MIN(performance.share) AS minimum_share FROM performance WHERE performance.type != 'Live final';
  SELECT COUNT(DISTINCT nationality) FROM conductor;
  SELECT COUNT(DISTINCT nationality) FROM conductor;
  SELECT "conductor"."Name" FROM "conductor" ORDER BY "conductor"."Year_of_Work" DESC;
  SELECT conductor.name, conductor.year_of_work FROM conductor ORDER BY conductor.year_of_work DESC;
  SELECT "conductor"."Name" FROM "conductor" ORDER BY "conductor"."Year_of_Work" DESC LIMIT 1;
  SELECT "conductor"."Name" FROM "conductor" ORDER BY "conductor"."Year_of_Work" DESC LIMIT 1;
  SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
  SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
  SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
  SELECT DISTINCT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
  SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
  SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;
  SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
  SELECT orchestra.record_company, COUNT(orchestra.orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY orchestra.record_company;
  SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
;
  SELECT orchestra.major_record_format, COUNT(orchestra.major_record_format) AS frequency FROM orchestra GROUP BY orchestra.major_record_format ORDER BY frequency DESC;
  SELECT Record_Company, COUNT(Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_orchestras DESC LIMIT 1;
  SELECT orchestra.record_company, COUNT(orchestra.orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY orchestra.record_company ORDER BY number_of_orchestras DESC LIMIT 1;
  SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.performance_id WHERE p.performance_id IS NULL;
  SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.performance_id WHERE p.performance_id IS NULL;
  SELECT DISTINCT o1.Record_Company FROM orchestra o1 WHERE o1.Year_of_Founded < 2003 INTERSECT SELECT DISTINCT o2.Record_Company FROM orchestra o2 WHERE o2.Year_of_Founded > 2003;
  SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 INTERSECT SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded > 2003;
  SELECT COUNT(DISTINCT o.orchestra_id) AS num_orchestras FROM orchestra o WHERE o.major_record_format IN ('CD', 'DVD');
  SELECT COUNT(DISTINCT o.orchestra_id) AS num_orchestras FROM orchestra o WHERE o.major_record_format IN ('CD', 'DVD');
  SELECT DISTINCT o."Year_of_Founded" FROM "orchestra" o JOIN "performance" p ON o."Orchestra_ID" = p."Orchestra_ID" GROUP BY o."Year_of_Founded" HAVING COUNT(p."Performance_ID") > 1;
  SELECT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.orchestra_id HAVING COUNT(p.performance_id) > 1;
  SELECT COUNT(ID) AS total_students FROM Highschooler;
  SELECT COUNT(ID) AS total_students FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT Highschooler.grade FROM Highschooler;
  SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
  SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name ILIKE '%kyle%'
  SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle';
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT COUNT(ID) FROM Highschooler WHERE grade IN (9, 10);
  SELECT COUNT(ID) FROM Highschooler WHERE grade IN (9, 10);
  SELECT grade, COUNT(id) AS number_of_students FROM highschooler GROUP BY grade;
  SELECT grade, COUNT(id) AS number_of_students FROM highschooler GROUP BY grade;
  SELECT Highschooler.grade, COUNT(Highschooler.ID) AS total_students FROM Highschooler GROUP BY Highschooler.grade ORDER BY total_students DESC LIMIT 1;
  SELECT Highschooler.grade, COUNT(Highschooler.ID) AS total_students FROM Highschooler GROUP BY Highschooler.grade ORDER BY total_students DESC LIMIT 1;
  SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING COUNT(Highschooler.ID) >= 4;
  SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING COUNT(Highschooler.ID) >= 4;
  SELECT Highschooler.ID, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
  SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY friend_count DESC;
  SELECT Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY number_of_friends DESC;
  SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY friend_count DESC;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) >= 3;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) >= 3;
  SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id JOIN Highschooler H2 ON H2.ID = F.student_id WHERE H2.name = 'Kyle';
  SELECT H2.name AS friend_name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle';
  SELECT COUNT(DISTINCT(friend_id)) AS num_friends FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT COUNT(DISTINCT(friend_id)) AS num_friends FROM Friend WHERE student_id = 1934;
  SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;
  SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;
  SELECT Highschooler.ID, COUNT(Likes.liked_id) AS total_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
  SELECT Highschooler.ID, COUNT(Likes.liked_id) AS total_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
  SELECT Highschooler.name, COUNT(Likes.liked_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name ORDER BY number_of_likes DESC;
  SELECT Highschooler.name, COUNT(Likes.liked_id) AS like_count FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name ORDER BY like_count DESC;
  SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
  SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
  SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name HAVING COUNT(Likes.liked_id) >= 2;
  SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name HAVING COUNT(Likes.liked_id) >= 2;
  SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) >= 2;
  SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2);
  SELECT COUNT(liked_id) AS likes FROM Likes WHERE liked_id = 1934;
  SELECT COUNT(liked_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = 'Kyle';
  SELECT AVG(Highschooler.grade) AS average_grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id;
  SELECT AVG(Highschooler.grade) AS average_grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id;
  SELECT MIN(Highschooler.grade) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT MIN(Highschooler.grade) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
  SELECT DISTINCT Owners.state, Professionals.state FROM Owners, Professionals WHERE Owners.state = Professionals.state;
;
;
;
  SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR (SELECT COUNT(treatment_id) FROM Treatments WHERE professional_id = p.professional_id) > 2;
;
  SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
;
  SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs);
;
  SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
;
  SELECT Owners.owner_id, Owners.first_name, Owners.last_name, COUNT(Dogs.dog_id) AS dog_count FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY dog_count DESC LIMIT 1;
;
;
;
  SELECT Breeds.breed_name, COUNT(Dogs.breed_code) AS total_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY Breeds.breed_name ORDER BY total_dogs DESC LIMIT 1;
  SELECT Breeds.breed_name, COUNT(Dogs.breed_code) AS total_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY Breeds.breed_name ORDER BY total_dogs DESC LIMIT 1;
  SELECT o.owner_id, o.last_name, COUNT(t.treatment_id) AS treatment_count FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY treatment_count DESC LIMIT 1;
;
;
;
  SELECT o.owner_id, o.zip_code, SUM(t.cost_of_treatment) AS total_treatment_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY total_treatment_cost DESC LIMIT 1;
;
  SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
;
;
  SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) ORDER BY p.first_name, p.last_name;
  SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
;
  SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
  SELECT Treatments.treatment_id, Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
  SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
;
  SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
  SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
  SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN (SELECT Breeds.breed_name, COUNT(Dogs.breed_code) AS breed_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY Breeds.breed_name ORDER BY breed_count ASC LIMIT 1) AS RareBreed ON Dogs.breed_code = RareBreed.breed_name;
;
  SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';
;
;
;
  SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;
  SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;
;
;
;
  SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;
  SELECT COUNT(DISTINCT dog_id) AS total_dogs_treated FROM Treatments;
;
  SELECT COUNT(DISTINCT professional_id) FROM Treatments;
;
;
;
  SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state like '%North%';
;
  SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
;
;
;
  SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
;
  SELECT COUNT(DISTINCT Owners.owner_id) AS OwnersWithoutDogs FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL;
;
  SELECT COUNT(DISTINCT p.professional_id) AS num_professionals FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
;
  SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = '1';
;
  SELECT AVG(age) AS average_age FROM dogs;
;
  SELECT MAX(age) FROM Dogs;
  SELECT MAX(age) FROM Dogs;
  SELECT charge_type, charge_amount FROM Charges;
  SELECT charge_type, charge_amount FROM Charges;
;
;
  SELECT Owners.email_address, Owners.cell_number, Owners.home_phone FROM Owners;
  SELECT p.first_name, p.last_name, p.email_address, p.cell_number, p.home_phone FROM Professionals p;
  SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Breeds, Sizes;
;
  SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT COUNT(Singer_ID) AS total_singers FROM singer;
  SELECT COUNT(Singer_ID) AS total_singers FROM singer;
  SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" ASC;
  SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" ASC;
  SELECT "Birth_Year", "Citizenship" FROM "singer";
  SELECT "Birth_Year", "Citizenship" FROM "singer";
  SELECT "Name" FROM "singer" WHERE "Citizenship" != 'France';
  SELECT "Name" FROM "singer" WHERE "Citizenship" != 'France';
  SELECT "Name" FROM "singer" WHERE "Birth_Year" IN (1948, 1949);
  SELECT "Name" FROM "singer" WHERE "Birth_Year" IN (1948, 1949);
  SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" DESC LIMIT 1;
  SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" DESC LIMIT 1;
  SELECT singer.Citizenship, COUNT(singer.Singer_ID) AS number_of_singers FROM singer GROUP BY singer.Citizenship;
  SELECT singer.Citizenship, COUNT(singer.Singer_ID) AS total_singers FROM singer GROUP BY singer.Citizenship;
  SELECT "Citizenship", COUNT(*) AS "Count" FROM "singer" GROUP BY "Citizenship" ORDER BY "Count" DESC LIMIT 1;
  SELECT singer.Citizenship, COUNT(singer.Citizenship) AS COUNT FROM singer GROUP BY singer.Citizenship ORDER BY COUNT DESC LIMIT 1;
  SELECT "Citizenship", MAX("Net_Worth_Millions") AS "Max_Net_Worth" FROM "singer" GROUP BY "Citizenship";
  SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM singer s GROUP BY s.Citizenship;
  SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
  SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
  SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id WHERE so.sales > 300000;
  SELECT DISTINCT "Name" FROM "singer" JOIN "song" ON "singer"."Singer_ID" = "song"."Singer_ID" WHERE "song"."Sales" > 300000;
  SELECT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name HAVING COUNT(so.song_id) > 1;
  SELECT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name HAVING COUNT(so.song_id) > 1;
  SELECT s.name, SUM(s.sales) AS total_sales FROM singer AS s JOIN song AS so ON s.singer_id = so.singer_id GROUP BY s.name;
  SELECT s.name, SUM(s.sales) AS total_sales FROM song AS s GROUP BY s.name;
  SELECT "singer"."Name" FROM "singer" LEFT JOIN "song" ON "singer"."Singer_ID" = "song"."Singer_ID" WHERE "song"."Singer_ID" IS NULL;
  SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Singer_ID IS NULL;
  SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 AND singer.Birth_Year > 1955 GROUP BY singer.Citizenship;
  SELECT DISTINCT s.Citizenship FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955;
  SELECT COUNT(DISTINCT feature_id) AS total_features FROM Other_Available_Features;
  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon';
  SELECT p.property_type_code, r.property_type_description FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code;
  SELECT p.property_name FROM Properties p WHERE p.property_type_code IN ('House', 'Apartment') AND p.room_count > 1;

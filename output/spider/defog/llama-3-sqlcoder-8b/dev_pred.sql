SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;
SELECT s.Name, s.Country, s.Age FROM singer s ORDER BY s.Age DESC NULLS LAST;
SELECT AVG(s.Age) AS average_age, MIN(s.Age) AS minimum_age, MAX(s.Age) AS maximum_age FROM singer s WHERE s.Country = 'France';
SELECT AVG(s."Age") AS average_age, MIN(s."Age") AS min_age, MAX(s."Age") AS max_age FROM "singer" s WHERE s."Country" = 'France';
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
SELECT s.Name, s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20 ORDER BY s.Country NULLS LAST;
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20 ORDER BY s.Country NULLS LAST;
SELECT s.Country, COUNT(s.Singer_ID) AS number_of_singers FROM singer s GROUP BY s.Country ORDER BY number_of_singers DESC NULLS LAST;
SELECT s.Country, COUNT(s.Singer_ID) AS singer_count FROM singer s GROUP BY s.Country ORDER BY singer_count DESC NULLS LAST;
SELECT s.Name, si.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2);
SELECT s.Name, s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2);
SELECT s."Location", s."Name" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT s."Location", s."Name", s."Capacity" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT MAX(s."Capacity"), AVG(s."Capacity") FROM "stadium" s;
SELECT AVG(s.capacity) AS average_capacity, MAX(s.capacity) AS max_capacity FROM "stadium" s;
SELECT s.Name, s.Capacity FROM "stadium" s ORDER BY s.Average DESC LIMIT 1;
SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(s2.average) FROM stadium s2);
SELECT COUNT(*) AS total_concerts FROM concert c WHERE c."Year" = '2014' OR c."Year" = '2015';
SELECT COUNT(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015';
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM "concert" c JOIN "stadium" s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name ORDER BY Number_of_Concerts DESC NULLS LAST;
SELECT s."Stadium_ID", COUNT(c."concert_ID") AS number_of_concerts FROM "concert" c JOIN "stadium" s ON c."Stadium_ID" = s."Stadium_ID" GROUP BY s."Stadium_ID";
SELECT s.name, s.capacity, COUNT(c.concert_ID) AS concert_count FROM stadium s JOIN concert c ON s.stadium_ID = c.stadium_ID WHERE c.year >= '2014' GROUP BY s.name, s.capacity ORDER BY concert_count DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM Stadium s JOIN Concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(c.year, 'YYYY')) AS YEAR, COUNT(c.concert_ID) AS number_of_concerts FROM concert c GROUP BY YEAR ORDER BY number_of_concerts DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(c.Year, 'YYYY')) AS YEAR, COUNT(c.concert_ID) AS number_of_concerts FROM concert c GROUP BY YEAR ORDER BY number_of_concerts DESC LIMIT 1;
SELECT s.Name FROM "stadium" s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM "concert" c);
SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT c.stadium_id FROM concert c);
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 40 AND s.Age < 30;
SELECT s.Name FROM "stadium" s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = '2014');
SELECT s.Name FROM "stadium" s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = '2014');
SELECT c.concert_Name, c.theme, COUNT(s.Singer_ID) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.theme ORDER BY number_of_singers DESC NULLS LAST;
SELECT c.concert_Name, c.Theme, COUNT(DISTINCT si.Singer_ID) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name, COUNT(sic.concert_ID) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name ORDER BY num_concerts DESC NULLS LAST;
SELECT s.name, COUNT(sc.singer_id) AS number_of_concerts FROM singer s JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Theme ilike '%Hey%';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name ilike '%Hey%';
SELECT s.Name, s.Location FROM Stadium s JOIN Concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS int) WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM "stadium" s JOIN concert c ON s."Stadium_ID" = CAST(c.Stadium_ID AS INTEGER) WHERE c."Year" IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c."Year") = 2;
WITH capacity_rank AS (SELECT s."Stadium_ID", s."Capacity", RANK() OVER (ORDER BY s."Capacity" DESC) AS capacity_rank FROM "stadium" s) SELECT cr."Stadium_ID", COUNT(c."concert_ID") AS num_concerts FROM capacity_rank cr JOIN concert c ON cr."Stadium_ID" = c."Stadium_ID" WHERE cr.capacity_rank = 1 GROUP BY cr."Stadium_ID";
SELECT s.Name, COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID::int = s.Stadium_ID ORDER BY number_of_concerts DESC LIMIT 1;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT p.weight FROM Pets p WHERE p.pet_type = 'dog' ORDER BY p.pet_age ASC NULLS LAST LIMIT 1;
SELECT p.weight FROM Pets p JOIN Has_Pet hp ON p.petid = hp.petid JOIN Student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' ORDER BY p.pet_age ASC LIMIT 1;
SELECT p.pettype, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pettype ORDER BY p.pettype NULLS LAST;
SELECT p.pet_type, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pet_type;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) AS num_dogs FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.pet_age < 10;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.pet_type = 'dog';
SELECT COUNT(DISTINCT p.pettype) FROM Pets p;
SELECT COUNT(DISTINCT pet_type) FROM Pets;
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age > 2 AND (p.petType ilike '%cat%' OR p.petType ilike '%dog%');
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age > 5 AND (p.petType ilike '%cat%' OR p.petType ilike '%dog%');
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 2 AND (p.pet_age < 5 OR p.pet_age IS NULL) AND (p.pet_age > 5 OR p.pet_age IS NULL);
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_type IN ('cat', 'dog') GROUP BY s.Fname HAVING COUNT(DISTINCT p.pet_type) = 2;
SELECT s.major, s.age FROM Student s WHERE s.stuid NOT IN (SELECT h.stuid FROM Has_Pet h JOIN Pets p ON h.petid = p.petid WHERE p.pettype = 'cat') ORDER BY s.major NULLS LAST, s.age NULLS LAST;
SELECT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType not ilike '%cat%' ORDER BY s.Major NULLS LAST, s.Age NULLS LAST;
SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT h.StuID FROM Has_Pet h JOIN Pets p ON h.PetID = p.PetID WHERE LOWER(p.pet_type) = 'cat') ORDER BY s.StuID NULLS LAST;
SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT h.StuID FROM Has_Pet h JOIN Pets p ON h.PetID = p.PetID WHERE LOWER(p.pet_type) = 'cat') ORDER BY s.StuID NULLS LAST;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 2 AND p.pet_age < 10 AND p.pet_age % 2 = 1 AND p.pet_age BETWEEN 3 AND 7 AND p.pet_age!= 5 AND p.pet_age!= 8 AND p.pet_age!= 9 AND p.pet_age!= 6;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND p.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat');
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2);
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2);
SELECT p.pet_id, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.petid, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_type, AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS max_age FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT p.pettype, AVG(h.pet_age) AS average_age, MAX(h.pet_age) AS max_age FROM Has_Pet h JOIN Pets p ON h.petid = p.petid GROUP BY p.pettype;
SELECT p.pettype, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pettype ORDER BY p.pettype;
SELECT p.pet_type, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pet_type;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID ORDER BY s.Fname, s.Age;
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT h.petid FROM student s JOIN has_pet h ON s.stuid = h.stuid WHERE s.lname = 'Smith';
SELECT s.stuid, COUNT(h.petid) AS pet_count FROM student s JOIN has_pet h ON s.stuid = h.stuid GROUP BY s.stuid HAVING COUNT(h.petid) > 0 ORDER BY pet_count DESC NULLS LAST;
SELECT s.StuID, COUNT(hp.PetID) AS pet_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID ORDER BY pet_count DESC NULLS LAST;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.petType = 'cat';
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.PetType = 'cat' ORDER BY s.LName DESC NULLS LAST LIMIT 1;
SELECT AVG(s.Age) AS average_age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT AVG(s.Age) FROM Student s LEFT JOIN Has_Pet h ON s.StuID = h.StuID WHERE h.StuID IS NULL;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(c.CountryId) AS country_count FROM countries c GROUP BY c.ContId, c.Continent ORDER BY country_count DESC NULLS LAST;
SELECT c.ContId, c.Continent, COUNT(*) AS country_count FROM continents c JOIN countries cr ON c.ContId = cr.Continent GROUP BY c.ContId, c.Continent ORDER BY country_count DESC NULLS LAST;
SELECT COUNT(DISTINCT c.CountryName) FROM countries c;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c;
SELECT m.maker, m.id, COUNT(c.model) AS model_count FROM car_makers m JOIN model_list ml ON m.id = ml.maker JOIN car_names c ON ml.model = c.model GROUP BY m.id, m.maker ORDER BY model_count DESC NULLS LAST;
SELECT m.id, m.fullname, COUNT(ml.model) AS number_of_models FROM car_makers m JOIN model_list ml ON m.id = ml.maker GROUP BY m.id, m.fullname ORDER BY m.id NULLS LAST;
SELECT c.Model FROM car_names c WHERE c.MakeId IN (SELECT MIN(h.Horsepower) FROM cars_data h);
SELECT c.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT c.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.weight < (SELECT AVG(cd2.weight) FROM cars_data cd2);
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(cd2.Weight) FROM cars_data cd2);
SELECT DISTINCT m.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.Make = ml.Model JOIN car_makers m ON ml.Maker = m.Id WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Year = 1970;
SELECT c.Make, c.Year FROM cars_data c ORDER BY c.Year ASC NULLS LAST LIMIT 1;
SELECT cm.Maker, c.Year FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN car_makers cm ON cn.Make = cm.Maker WHERE c.Year = (SELECT MIN(c2.Year) FROM cars_data c2);
SELECT DISTINCT c.Model FROM car_names c JOIN cars_data cd ON c.MakeId = cd.Id WHERE cd.Year > 1980;
SELECT DISTINCT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year > 1980 ORDER BY c.Model NULLS LAST;
SELECT c.Continent, COUNT(*) AS maker_count FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.Continent ORDER BY maker_count DESC NULLS LAST;
SELECT c.Continent, COUNT(m.Id) AS number_of_makers FROM car_makers m JOIN countries c ON m.Country = c.CountryId GROUP BY c.Continent ORDER BY number_of_makers DESC NULLS LAST;
SELECT c.CountryName FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT c.CountryName, COUNT(m.Id) AS number_of_makers FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryName ORDER BY number_of_makers DESC LIMIT 1;
SELECT m.Maker, COUNT(*) AS model_count FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers m ON ml.Maker = m.Id GROUP BY m.Maker ORDER BY model_count DESC NULLS LAST;
SELECT m.model, COUNT(*) AS model_count, c.maker, c.full_name FROM model_list m JOIN car_makers c ON m.maker = c.id GROUP BY m.model, c.maker, c.full_name ORDER BY model_count DESC NULLS LAST;
SELECT cd.Accelerate FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Make = ml.Model WHERE ml.Model = 'AMC Hornet Sportabout';
SELECT c.accelerate FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE cn.make ilike '%amc%hornet%sportabout%';
SELECT COUNT(*) FROM car_makers cm WHERE LOWER(cm.country) = 'france';
SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm WHERE LOWER(cm.Country) = 'france';
SELECT COUNT(*) FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE LOWER(c.countryname) = 'usa';
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker WHERE cm.country = 'United States';
SELECT AVG(cast(c.MPG AS FLOAT)) AS average_mpg FROM cars_data c WHERE c.Cylinders = 4;
SELECT AVG(cast(cars_data.mpG AS FLOAT)) AS average_mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4;
SELECT MIN(c.weight) AS lightest_car FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT MIN(c.weight) FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT c.Maker, c.Model FROM car_names c;
SELECT m.maker, m.model FROM car_names cn JOIN model_list ml ON cn.model = ml.model JOIN car_makers m ON ml.maker = m.id;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NOT NULL GROUP BY c.CountryName, c.CountryId;
SELECT COUNT(*) FROM cars_data cd WHERE cd.horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT c.year, AVG(c.weight) AS average_weight FROM cars_data c GROUP BY c.year;
SELECT c.Year, AVG(c.Weight) AS average_weight FROM cars_data c GROUP BY c.Year ORDER BY c.Year NULLS LAST;
SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 1 GROUP BY c.countryname HAVING COUNT(DISTINCT cm.id) >= 3 ORDER BY c.countryname NULLS LAST;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3 ORDER BY c.CountryName NULLS LAST;
SELECT MAX(c.Horsepower), cn.Make FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE c.Cylinders = 3 GROUP BY cn.Make;
SELECT c.make, MAX(c.horsepower) AS max_horsepower FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.cylinders = 3 GROUP BY c.make;
SELECT c.Model, c.Make, MAX(c.MPG) AS max_mpg FROM cars_data c GROUP BY c.Model, c.Make ORDER BY max_mpg DESC LIMIT 1;
SELECT m.Model, c.MPG FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list ml ON n.Model = ml.Model AND n.Make = ml.Maker ORDER BY c.MPG DESC NULLS LAST LIMIT 1;
SELECT AVG(cast(cars_data.horsepower AS INTEGER)) AS average_horsepower FROM cars_data WHERE cars_data.year < 1980;
SELECT AVG(cast(c.Horsepower AS INTEGER)) AS average_horsepower FROM cars_data c WHERE c.Year < 1980;
SELECT AVG(c.Edispl) AS average_edispl FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE LOWER(cn.Make) = 'volvo';
SELECT AVG(c.Edispl) AS average_edispl FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE LOWER(ml.Make) = 'volvo';
SELECT c.Cylinders, MAX(c.Accelerate) AS max_accelerate FROM cars_data c GROUP BY c.Cylinders ORDER BY max_accelerate DESC NULLS LAST;
SELECT MAX(c.Accelerate) FROM cars_data c GROUP BY c.Cylinders;
WITH Model_Maker_Counter AS (SELECT m.Model, COUNT(DISTINCT c.MakeId) AS model_count FROM car_names c JOIN model_list m ON c.Model = m.Model GROUP BY m.Model) SELECT m.Model FROM Model_Maker_Counter m ORDER BY m.model_count DESC LIMIT 1;
WITH ModelCounts AS (SELECT m.Model, COUNT(*) AS ModelCount FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY m.Model) SELECT mc.Model, mc.ModelCount FROM ModelCounts mc ORDER BY mc.ModelCount DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) AS total_cars FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM car_names cn JOIN car_makers cm ON cn.make = CAST(cm.id AS TEXT) WHERE LOWER(cm.fullname) = 'american motor company';
SELECT COUNT(*) AS num_models FROM car_names cn JOIN model_list ml ON cn.make = CAST(ml.model AS TEXT) JOIN car_makers cm ON ml.maker = cm.id WHERE LOWER(cm.country) = 'united states' AND LOWER(cm.maker) = 'american motor company';
WITH ModelCount AS (SELECT ml.Maker, COUNT(ml.Model) AS num_models FROM model_list ml GROUP BY ml.Maker HAVING COUNT(ml.Model) > 3) SELECT c.Maker, c.Id FROM car_makers c JOIN ModelCount mc ON c.Id = mc.Maker;
WITH model_counts AS (SELECT ml.Maker, COUNT(ml.Model) AS num_models FROM model_list ml GROUP BY ml.Maker) SELECT cm.Maker, cm.num_models FROM model_counts cm WHERE cm.num_models > 3;
SELECT m.Model, c.Maker FROM car_names c JOIN cars_data d ON c.MakeId = d.Id JOIN model_list m ON c.Make = m.Model WHERE (c.Maker IN (SELECT id FROM car_makers WHERE LOWER(fullname) = 'general motors') AND d.weight > 3500) GROUP BY m.Model, c.Maker HAVING COUNT(DISTINCT m.Model) = 1;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Make = ml.Model WHERE ml.Maker IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors') OR cn.Weight > 3500 ORDER BY m.Model NULLS LAST;
SELECT c.Year FROM cars_data c WHERE c.Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT c.Year FROM cars_data c WHERE c.Weight < 4000 AND c.Weight > 3000 ORDER BY c.Year NULLS LAST;
SELECT c.Horsepower FROM cars_data c ORDER BY c.Accelerate DESC LIMIT 1;
SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(c2.Accelerate) FROM cars_data c2);
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'volvo' ORDER BY c.Accelerate ASC NULLS LAST LIMIT 1;
WITH volvo_cars AS (SELECT c.Id, c.Accelerate FROM car_names cn JOIN cars_data c ON cn.MakeId = c.Id JOIN model_list ml ON cn.Make = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.Country) ='sweden' AND LOWER(cn.Make) = 'volvo' ), min_accelerate AS (SELECT MIN(Accelerate) AS min_accel FROM volvo_cars) SELECT v.Accelerate FROM volvo_cars v JOIN min_accelerate ma ON v.Accelerate = ma.min_accel; SELECT c.Cylinders FROM cars_data c JOIN volvo_cars vc ON c.Id = vc.Id;
WITH max_horsepower AS (SELECT MAX(cars_data.horsepower) AS max_hp FROM cars_data) SELECT COUNT(cars_data.accelerate) AS num_cars FROM cars_data JOIN max_horsepower ON cars_data.horsepower > max_horsepower.max_hp WHERE cars_data.accelerate > max_horsepower.max_hp;
SELECT COUNT(*) FROM cars_data cd WHERE cd.accelerate > (SELECT MAX(cars_data.horsepower) FROM cars_data);
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryId HAVING COUNT(m.Id) > 2;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers m ON c.CountryId = m.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT c.Model, MAX(c.Horsepower) AS Max_Horsepower FROM cars_data c WHERE c.Cylinders = 4 GROUP BY c.Model ORDER BY Max_Horsepower DESC NULLS LAST LIMIT 1;
WITH horsepower_rank AS (SELECT m.model, c.horsepower, RANK() OVER (ORDER BY c.horsepower DESC) AS horsepower_rank FROM car_names c JOIN model_list m ON c.makeid = m.modelid WHERE c.cylinders = 4) SELECT model FROM horsepower_rank WHERE horsepower_rank = 1;
SELECT c.MakeId, c.Make FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders > 3;
SELECT c.MakeId, c.Make FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId WHERE cd.Horsepower < '100' AND cd.Cylinders < 4;
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT MAX(CAST(c.MPG AS FLOAT)) AS Max_MPG FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT c.model FROM car_names c JOIN model_list m ON c.make = m.model WHERE c.weight < 3500 AND m.maker!= 1;
SELECT DISTINCT m.model FROM model_list m JOIN car_names cn ON m.model = cn.model JOIN car_makers cm ON m.maker = cm.id WHERE cm.country not ilike '%Ford%' AND cn.weight < 3500 ORDER BY m.model NULLS LAST;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers m ON c.CountryId = m.Country WHERE m.Country IS NULL;
SELECT m.Id, m.Maker FROM car_makers m GROUP BY m.Id, m.Maker HAVING COUNT(m.Model) >= 2 AND COUNT(m.Model) <= 3;
WITH maker_models AS (SELECT m.Maker, COUNT(*) AS model_count FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY m.Maker HAVING COUNT(*) >= 2), maker_cars AS (SELECT m.Maker, COUNT(*) AS car_count FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN maker_models mm ON cn.Make = mm.Maker GROUP BY m.Maker HAVING COUNT(*) > 3) SELECT mc.Maker, mc.car_count FROM maker_cars mc ORDER BY mc.car_count DESC NULLS LAST;
WITH country_maker_count AS (SELECT c.CountryId, COUNT(m.Id) AS maker_count FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryId), fiat_models AS (SELECT m.ModelId FROM car_names n JOIN model_list ml ON n.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.Maker) = 'fiat') SELECT c.CountryName, cm.Maker_count FROM country_maker_count cm JOIN countries c ON cm.CountryId = c.CountryId WHERE cm.maker_count > 3 UNION SELECT c.CountryName, 1 AS maker_count FROM countries c JOIN fiat_models f ON c.CountryId = (SELECT Country FROM car_makers WHERE LOWER(Maker) = 'fiat') WHERE c.CountryName NOT IN (SELECT CountryName FROM country_maker_count WHERE maker_count > 3) ORDER BY CountryName NULLS LAST;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(m.Id) > 3 UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_names cn ON c.CountryId = cn.MakeId WHERE cn.Make = 'Fiat' GROUP BY c.CountryId, c.CountryName ORDER BY c.CountryId NULLS LAST;
SELECT a.country FROM airlines a WHERE a.airline = 'JetBlue Airways';
SELECT a.Country FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline ilike '%JetBlue Airways%';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA' ORDER BY a.Airline NULLS LAST;
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT COUNT(DISTINCT a.Uid) FROM airlines a;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(DISTINCT a.AirportCode) FROM airports a;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT COUNT(f.Airline) AS total_flights FROM flights f;
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines a WHERE LOWER(a.country) = 'usa';
SELECT COUNT(*) FROM airlines a WHERE LOWER(a.country) = 'usa';
SELECT a.City, a.Country FROM airports a WHERE a.AirportCode = 'ALN';
SELECT a.City, a.Country FROM airports a WHERE a.AirportCode = 'ALN';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'APG';
SELECT COUNT(*) FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.AirportCode = 'ATO';
SELECT COUNT(f.Airline) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(f. FlightNo) AS number_of_flights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(f.FlightNo) AS number_of_flights FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode JOIN airports b ON f.DestAirport = b.AirportCode WHERE a.City = 'Aberdeen' AND b.City = 'Ashley';
SELECT COUNT(*) FROM flights f JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.City = 'Aberdeen' AND d.City = 'Ashley';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(f. FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'B6';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UAL' AND f.DestAirport = 'ASY';
SELECT COUNT(f.FlightNo) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE LOWER(Abbreviation) = 'ua') AND LOWER(d.City) = 'asy';
SELECT COUNT(f. FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'AHD' AND a.Airline = 'United';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE Airline = 'United');
SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.UID WHERE a.Abbreviation = 'UA' AND f.DestAirport = 'ABZ';
SELECT a.City, COUNT(f.FlightNo) AS num_flights FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY num_flights DESC LIMIT 1;
WITH DestinationAirportFrequency AS (SELECT a.City, f.DestAirport, COUNT(f.DestAirport) AS Frequency FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City, f.DestAirport) SELECT daf.City, daf.DestAirport, daf.Frequency FROM DestinationAirportFrequency daf ORDER BY daf.Frequency DESC LIMIT 1;
SELECT a.City, COUNT(f.FlightNo) AS NumFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY NumFlights DESC LIMIT 1;
SELECT a.City, COUNT(f.SourceAirport) AS Frequency FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY Frequency DESC LIMIT 1;
SELECT a.AirportCode, COUNT(f.FlightNo) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY flight_count DESC LIMIT 1;
WITH FlightCounts AS (SELECT f.SourceAirport, COUNT(*) AS num_flights FROM flights f GROUP BY f.SourceAirport) SELECT fc.SourceAirport FROM FlightCounts fc ORDER BY fc.num_flights DESC NULLS LAST LIMIT 1;
SELECT a.AirportCode, COUNT(f.Airline) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.AirportCode ORDER BY flight_count ASC LIMIT 1;
SELECT f.SourceAirport FROM flights f GROUP BY f.SourceAirport ORDER BY COUNT(f.SourceAirport) ASC LIMIT 1;
SELECT a.Airline, COUNT(f.Airline) AS flight_count FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY flight_count DESC LIMIT 1;
WITH airline_flights AS (SELECT f.Airline, COUNT(f.FlightNo) AS num_flights FROM flights f GROUP BY f.Airline) SELECT a.Airline, af.num_flights FROM airline_flights af JOIN airlines a ON af.Airline = a.uid ORDER BY af.num_flights DESC NULLS LAST LIMIT 1;
SELECT a.Abbreviation, a.Country, COUNT(f.Airline) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY num_flights ASC LIMIT 1;
WITH FlightCounts AS (SELECT f.Airline, COUNT(f.FlightNo) AS NumFlights FROM flights f GROUP BY f.Airline) SELECT a.Abbreviation, a.Country FROM FlightCounts fc JOIN airlines a ON fc.Airline = a.UID ORDER BY fc.NumFlights ASC LIMIT 1;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.AirportCode = 'APG' AND d.AirportCode = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.AirportCode = 'APG' AND d.AirportCode = 'CVO' ORDER BY a.Airline;
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG' GROUP BY a.Airline;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.Airline) AS num_flights FROM flights f GROUP BY f.Airline) f ON a.uid = f.Airline WHERE f.num_flights >= 10;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.FlightNo) AS flight_count FROM flights f GROUP BY f.Airline HAVING COUNT(f.FlightNo) >= 10) AS t ON a.uid = t.Airline;
SELECT a.Airline, COUNT(f.FlightNo) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200 ORDER BY num_flights DESC NULLS LAST;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.Airline) AS num_flights FROM flights f GROUP BY f.Airline) f ON a.uid = f.Airline WHERE f.num_flights < 200;
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation ilike '%United%Airlines%';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UA';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f WHERE f.SourceAirport = 'APG';
SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT DISTINCT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION ALL SELECT f.DestAirport FROM flights f);
SELECT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e.city, COUNT(e.employee_id) AS number_of_employees FROM employee e GROUP BY e.city ORDER BY number_of_employees DESC NULLS LAST;
SELECT e."City", COUNT(e."Employee_ID") AS number_of_employees FROM "employee" e GROUP BY e."City" ORDER BY number_of_employees DESC NULLS LAST;
SELECT e.city FROM employee e JOIN hiring h ON e.employee_id = h.employee_id WHERE e.age < 30 GROUP BY e.city HAVING COUNT(DISTINCT h.employee_id) > 1;
SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(e.employee_id) > 1;
SELECT s.location, COUNT(s.location) AS number_of_shops FROM shop s GROUP BY s.location ORDER BY number_of_shops DESC NULLS LAST;
SELECT s.location, COUNT(s.location) AS number_of_shops FROM shop s GROUP BY s.location ORDER BY number_of_shops DESC NULLS LAST;
SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(s2.number_products) FROM shop s2);
WITH shop_product_count AS (SELECT s.shop_id, s.name, s.location, s.district, s.number_products, RANK() OVER (ORDER BY s.number_products DESC) AS product_rank FROM shop s) SELECT sp.name, sp.location, sp.district FROM shop_product_count sp WHERE sp.product_rank = 1;
SELECT MIN(s.Number_products), MAX(s.Number_products) FROM shop s;
SELECT MIN(s.number_products), MAX(s.number_products) FROM shop s;
SELECT s.name, s.location, s.district, s.number_products FROM shop s ORDER BY s.number_products DESC;
SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);
WITH EmployeeAwards AS (SELECT e.Name, COUNT(ea.Employee_ID) AS AwardCount FROM evaluation ea JOIN employee e ON ea.Employee_ID = e.Employee_ID GROUP BY e.Name) SELECT ea.Name FROM EmployeeAwards ea ORDER BY ea.AwardCount DESC LIMIT 1;
WITH Awarded_Employees AS (SELECT e.Name, COUNT(ee."Employee_ID") AS Total_Awards FROM "evaluation" ee JOIN "employee" e ON ee."Employee_ID" = e."Employee_ID" GROUP BY e.Name) SELECT ae.Name FROM Awarded_Employees ae ORDER BY ae.Total_Awards DESC NULLS LAST LIMIT 1;
SELECT e.name, MAX(e.bonus) AS highest_bonus FROM evaluation e GROUP BY e.name ORDER BY highest_bonus DESC NULLS LAST LIMIT 1;
WITH max_bonus AS (SELECT e.Name, MAX(e.Bonus) AS max_bonus FROM evaluation e GROUP BY e.Name) SELECT mb.Name FROM max_bonus mb ORDER BY mb.max_bonus DESC LIMIT 1;
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT e2.Employee_ID FROM evaluation e2);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT e2.Employee_ID FROM evaluation e2);
WITH EmployeeCount AS (SELECT h.Shop_ID, COUNT(h.Employee_ID) AS num_employees FROM hiring h GROUP BY h.Shop_ID) SELECT s.Name, ec.num_employees FROM EmployeeCount ec JOIN shop s ON ec.Shop_ID = s.Shop_ID ORDER BY ec.num_employees DESC LIMIT 1;
SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1;
SELECT s.name FROM shop s WHERE s.shop_id NOT IN (SELECT h.shop_id FROM hiring h);
SELECT s.name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE s.shop_id = h.shop_id);
SELECT s.Name, COUNT(h.Employee_ID) AS number_of_employees FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Name ORDER BY number_of_employees DESC NULLS LAST;
SELECT s.name AS shop_name, COUNT(h.employee_id) AS number_of_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;
SELECT SUM(e.Bonus) AS Total_Bonus FROM evaluation e;
SELECT SUM(e.Bonus) AS total_bonus FROM "evaluation" e;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s.district FROM shop s WHERE s.number_products < 3000 AND s.number_products > 10000;
SELECT DISTINCT d.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name ilike '%Robbin%CV%';
SELECT COUNT(DISTINCT t.Template_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
SELECT COUNT(DISTINCT t.Template_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'ppt';
SELECT COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT t.Template_ID, COUNT(d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID ORDER BY document_count DESC NULLS LAST;
SELECT t.Template_ID, COUNT(d.Document_ID) AS usage_count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_ID ORDER BY t.Template_ID NULLS LAST;
SELECT t.Template_ID, t.Template_Type_Code, COUNT(d.Document_ID) AS document_count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY document_count DESC LIMIT 1;
WITH Document_Templates AS (SELECT d.Document_ID, t.Template_ID, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY d.Document_ID, t.Template_ID), Max_Doc_Template AS (SELECT dt.Template_ID, dt.Document_Count FROM Document_Templates dt ORDER BY dt.Document_Count DESC LIMIT 1) SELECT t.Template_ID, rt.Template_Type_Code FROM Max_Doc_Template mdt JOIN Templates t ON mdt.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code;
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID FROM Templates t GROUP BY t.Template_ID HAVING COUNT(t.Template_ID) > 1;
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT COUNT(t.Template_ID) FROM Templates t;
SELECT COUNT(*) FROM Templates;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t ORDER BY t.Template_ID NULLS LAST;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t;
SELECT DISTINCT t.Template_Type_Code FROM Templates t ORDER BY t.Template_Type_Code NULLS LAST;
SELECT DISTINCT t.Template_Type_Code FROM Templates t;
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates t WHERE LOWER(t.Template_Type_Code) = 'cv';
SELECT COUNT(*) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'cv';
SELECT t.Version_Number, rt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Version_Number, tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS number_of_templates FROM Templates t GROUP BY t.Template_Type_Code ORDER BY number_of_templates DESC NULLS LAST;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code ORDER BY COUNT DESC NULLS LAST;
SELECT tt.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code GROUP BY tt.Template_Type_Code ORDER BY COUNT DESC LIMIT 1;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t GROUP BY t.Template_Type_Code ORDER BY COUNT DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT DISTINCT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3 ORDER BY t.Template_Type_Code NULLS LAST;
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code, MIN(t.Version_Number) AS Min_Version_Number FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY number_of_documents DESC NULLS LAST;
SELECT rt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code ORDER BY number_of_documents DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY document_count DESC LIMIT 1;
WITH TemplateUsage AS (SELECT t.Template_ID, COUNT(p.Paragraph_ID) AS usage_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY t.Template_ID) SELECT rt.Template_Type_Code FROM TemplateUsage tu JOIN Ref_Template_Types rt ON tu.Template_ID = (SELECT Template_ID FROM Templates ORDER BY Version_Number DESC LIMIT 1) ORDER BY tu.usage_count DESC LIMIT 1;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Code IS NULL;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt WHERE NOT EXISTS (SELECT 1 FROM Templates t WHERE t.Template_Type_Code = rt.Template_Type_Code) ORDER BY rt.Template_Type_Code NULLS LAST;
SELECT rt.Template_Type_Code, rt.Template_Type_Description FROM Ref_Template_Types rt ORDER BY rt.Template_Type_Code NULLS LAST;
SELECT tt.Template_Type_Code, tt.Template_Type_Description FROM Ref_Template_Types tt ORDER BY tt.Template_Type_Code NULLS LAST;
SELECT rt.Template_Type_Description FROM Ref_Template_Types rt WHERE rt.Template_Type_Code = 'AD';
SELECT rt.Template_Type_Description FROM Ref_Template_Types rt WHERE rt.Template_Type_Code = 'AD';
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt WHERE rt.Template_Type_Description = 'Book';
SELECT t.Template_Type_Code FROM Ref_Template_Types t WHERE t.Template_Type_Description = 'Book';
SELECT DISTINCT tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Template_ID IN (SELECT d.Template_ID FROM Documents d);
SELECT DISTINCT t.Template_Details FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'presentation';
SELECT COUNT(p.Paragraph_ID) AS total_paragraphs FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text = 'Korea';
SELECT p.Paragraph_ID, p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text ilike '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name ilike '%Customer%reviews%';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS number_of_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2) AS p ON d.Document_ID = p.Document_ID;
WITH Document_Paragraphs AS (SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count, ROW_NUMBER() OVER (ORDER BY COUNT(p.Paragraph_ID) DESC) AS rn FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID) SELECT dp.Document_ID, dp.Document_Name, dp.Paragraph_Count FROM Document_Paragraphs dp WHERE rn = 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Paragraphs p GROUP BY p.Document_ID ORDER BY paragraph_count DESC LIMIT 1) AS p2 ON d.Document_ID = p2.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Paragraphs p GROUP BY p.Document_ID ORDER BY Paragraph_Count ASC LIMIT 1) AS p ON d.Document_ID = p.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Paragraphs p GROUP BY p.Document_ID) AS subquery ON d.Document_ID = subquery.Document_ID ORDER BY subquery.num_paragraphs ASC NULLS LAST LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_ID BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
SELECT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text = 'Brazil' OR p.Paragraph_Text = 'Ireland';
SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text ilike '%Brazil%' AND p.Paragraph_Text ilike '%Ireland%';
SELECT COUNT(DISTINCT t."Teacher_ID") FROM "teacher" t;
SELECT COUNT(*) FROM teacher;
SELECT t.Name, t.Age FROM teacher t ORDER BY CAST(t.Age AS int) ASC;
SELECT t.name, t.age FROM teacher t ORDER BY CAST(t.age AS int) ASC;
SELECT t.age, t.hometown FROM teacher t;
SELECT t.age, t.hometown FROM teacher t;
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Age = '32' OR t.Age = '33';
SELECT t.Name FROM teacher t WHERE CAST(t.Age AS int) IN (32, 33);
SELECT t.hometown FROM teacher t ORDER BY t.age ASC LIMIT 1;
SELECT t.hometown FROM teacher t WHERE t.age = (SELECT MIN(t2.age) FROM teacher t2);
SELECT t.Hometown, COUNT(t.Hometown) FROM teacher t GROUP BY t.Hometown ORDER BY COUNT(t.Hometown) DESC NULLS LAST;
SELECT t.hometown, COUNT(t.teacher_id) AS number_of_teachers FROM teacher t GROUP BY t.hometown ORDER BY number_of_teachers DESC NULLS LAST;
SELECT t.hometown, COUNT(t.hometown) AS hometown_count FROM teacher t GROUP BY t.hometown ORDER BY hometown_count DESC LIMIT 1;
SELECT t.hometown, COUNT(*) AS COUNT FROM teacher t GROUP BY t.hometown ORDER BY COUNT DESC LIMIT 1;
SELECT t1.hometown FROM teacher t1 JOIN teacher t2 ON t1.hometown = t2.hometown WHERE t1.teacher_id!= t2.teacher_id GROUP BY t1.hometown HAVING COUNT(DISTINCT t1.teacher_id) >= 2;
SELECT t.hometown FROM teacher t GROUP BY t.hometown HAVING COUNT(t.hometown) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" ilike '%math%';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" ='math';
SELECT t.name, COUNT(c.course_id) AS num_courses FROM course_arrange ca JOIN teacher t ON ca.teacher_id = t.teacher_id GROUP BY t.name ORDER BY num_courses DESC NULLS LAST;
SELECT t.Name, COUNT(c.Course_ID) AS num_courses FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN (SELECT ca.Course_ID, COUNT(DISTINCT ca.Grade) AS num_grades FROM course_arrange ca GROUP BY ca.Course_ID HAVING COUNT(DISTINCT ca.Grade) >= 2) AS c ON t.Teacher_ID = c.Course_ID;
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT c.Teacher_ID FROM course_arrange c);
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ca.Teacher_ID FROM course_arrange ca);
SELECT COUNT(v."ID") FROM "visitor" v WHERE v."Age" < 30;
SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.level_of_membership DESC;
SELECT AVG(v.Age) AS average_age FROM visit v JOIN visitor vi ON v.visitor_ID = CAST(vi.ID AS text) WHERE vi.Level_of_membership <= 4;
SELECT v.Name, v.Level_of_membership, v.Age FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC;
SELECT m.Museum_ID, m.Name FROM museum m ORDER BY m.Num_of_Staff DESC NULLS LAST LIMIT 1;
SELECT AVG(m."Num_of_Staff") AS average_staff FROM "museum" m WHERE m."Open_Year" < '2009';
SELECT m.open_year, m.num_of_staff FROM museum m WHERE m.name = 'Plaza Museum';
WITH museum_staff AS (SELECT m.Name, m.Num_of_Staff, RANK() OVER (ORDER BY m.Num_of_Staff) AS rank FROM museum m WHERE m.Open_Year > '2010') SELECT ms.Name FROM museum_staff ms WHERE ms.rank = 1;
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1;
WITH total_spent AS (SELECT v.ID, v.Name, v.Level_of_membership, SUM(v.Visit.Museum_ID) AS total_spent FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership) SELECT ts.ID, ts.Name, ts.Level_of_membership FROM total_spent ts ORDER BY ts.total_spent DESC LIMIT 1;
WITH visit_counts AS (SELECT v.Museum_ID, COUNT(*) AS visit_count FROM visit v GROUP BY v.Museum_ID) SELECT m.Museum_ID, m.Name, vc.visit_count FROM visit_counts vc JOIN museum m ON vc.Museum_ID = m.Museum_ID ORDER BY vc.visit_count DESC LIMIT 1;
SELECT m.name FROM museum m WHERE m.name NOT IN (SELECT v.museum_id FROM visit v);
WITH MaxTickets AS (SELECT MAX(v.Num_of_Ticket) AS MaxTickets FROM visit v) SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN MaxTickets mt ON vi.Num_of_Ticket = mt.MaxTickets;
SELECT AVG(v.Num_of_Ticket) AS average_tickets, MAX(v.Num_of_Ticket) AS max_tickets FROM visit v;
SELECT SUM(v.total_spent) AS total_spent FROM visit v JOIN visitor vi ON v.visitor_id = vi.id WHERE vi.level_of_membership = 1;
SELECT v.Name FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND m.Open_Year > '2011' GROUP BY v.Name HAVING COUNT(DISTINCT v.Museum_ID) > 1;
SELECT COUNT(*) FROM visit v JOIN museum m ON v.museum_id = m.museum_id WHERE m.open_year > '2010';
SELECT COUNT(*) FROM museum m WHERE CAST(m.open_year AS INTEGER) > 2013 AND CAST(m.open_year AS INTEGER) < 2008;
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) FROM matches;
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(m.loser_age) AS avg_loser_age, AVG(m.winner_age) AS avg_winner_age FROM matches m;
SELECT AVG(ranking) AS average_rank FROM rankings r JOIN matches m ON r.player_id = m.winner_id;
SELECT AVG(r.ranking) AS average_rank FROM rankings r JOIN matches m ON r.player_id = m.winner_id;
SELECT MAX(r.ranking) AS highest_rank_of_losers FROM rankings r JOIN matches m ON r.player_id = m.loser_id;
SELECT MAX(r.ranking) AS best_rank_of_losers FROM rankings r JOIN matches m ON r.player_id = m.loser_id;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10 ORDER BY m.tourney_name NULLS LAST;
WITH winner_2013 AS (SELECT p."winner_name" FROM matches m JOIN players p ON m."winner_id" = p."player_id" WHERE m."year" = 2013), winner_2016 AS (SELECT p."winner_name" FROM matches m JOIN players p ON m."winner_id" = p."player_id" WHERE m."year" = 2016) SELECT w2013."winner_name" FROM winner_2013 w2013 LEFT JOIN winner_2016 w2016 ON w2013."winner_name" = w2016."winner_name" WHERE w2016."winner_name" IS NOT NULL;
SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (SELECT m.winner_id FROM matches m WHERE m.year = 2013) AND p.player_id IN (SELECT m.winner_id FROM matches m WHERE m.year = 2016);
SELECT COUNT(*) AS total_matches FROM matches m WHERE EXTRACT(YEAR FROM m.tourney_date) IN (2013, 2016);
SELECT COUNT(*) FROM matches m WHERE EXTRACT(YEAR FROM m.tourney_date) IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT p."first_name", p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND m.tourney_id IN (SELECT m.tourney_id FROM matches WHERE m.tourney_name = 'Australian Open') GROUP BY p."first_name", p.country_code;
SELECT p."first_name", p."country_code" FROM players p ORDER BY p."birth_date" ASC NULLS LAST LIMIT 1;
SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2);
SELECT p.first_name, p.last_name, p.birth_date FROM players p ORDER BY p.birth_date NULLS LAST;
SELECT p."first_name" ||'' || p."last_name" AS full_name, p.birth_date FROM players p ORDER BY p.birth_date NULLS LAST;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date NULLS LAST;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'left' ORDER BY p.birth_date;
SELECT p."first_name", p."country_code", MAX(r."tours") AS max_tours FROM rankings r JOIN players p ON r."player_id" = p."player_id" GROUP BY p."first_name", p."country_code" ORDER BY max_tours DESC LIMIT 1;
WITH ranked_players AS (SELECT p.player_id, p.first_name, p.country_code, r.tours FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1) SELECT rp.first_name, rp.country_code FROM ranked_players rp;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY number_of_matches DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY number_of_matches DESC LIMIT 1;
WITH WinnerRankPoints AS (SELECT p."winner_name", r."ranking_points", COUNT(m."match_num") AS win_count FROM matches m JOIN players p ON m."winner_id" = p."player_id" JOIN rankings r ON p."player_id" = r."player_id" GROUP BY p."winner_name", r."ranking_points") SELECT wrp."winner_name", wrp."ranking_points" FROM WinnerRankPoints wrp ORDER BY wrp.win_count DESC LIMIT 1;
WITH total_rank_points AS (SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name), ranked_players AS (SELECT *, RANK() OVER (ORDER BY total_points DESC) AS rank FROM total_rank_points) SELECT rp.first_name, rp.last_name, rp.total_points FROM ranked_players rp WHERE rp.rank = 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1;
WITH WinnerRankPoints AS (SELECT m.winner_id, SUM(m.winner_rank_points) AS total_rank_points FROM matches m WHERE m.tourney_name = 'Australian Open' GROUP BY m.winner_id) SELECT p.first_name, p.last_name, wr.total_rank_points FROM WinnerRankPoints wr JOIN players p ON wr.winner_id = p.player_id ORDER BY wr.total_rank_points DESC NULLS LAST LIMIT 1;
WITH max_minutes AS (SELECT MAX(minutes) AS max_minutes FROM matches) SELECT m.loser_name, m.winner_name FROM matches m JOIN max_minutes mm ON m.minutes = mm.max_minutes;
WITH match_duration AS (SELECT m.match_num, (m.minutes / 60) AS hours FROM matches m) SELECT p1."winner_name", p2."loser_name", md.hours FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id JOIN match_duration md ON m.match_num = md.match_num ORDER BY md.hours DESC NULLS LAST LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY average_ranking NULLS LAST;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY p.first_name NULLS LAST;
SELECT p."first_name", SUM(r."ranking_points") AS total_ranking_points FROM "rankings" r JOIN players p ON r."player_id" = p."player_id" GROUP BY p."first_name";
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY total_ranking_points DESC NULLS LAST;
SELECT p.country_code, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.country_code ORDER BY number_of_players DESC NULLS LAST;
SELECT p.country_code, COUNT(*) AS number_of_players FROM players p GROUP BY p.country_code ORDER BY number_of_players DESC NULLS LAST;
SELECT p.country_code, COUNT(*) AS num_players FROM players p GROUP BY p.country_code ORDER BY num_players DESC LIMIT 1;
SELECT p.country_code, COUNT(p.player_id) AS country_player_count FROM players p GROUP BY p.country_code ORDER BY country_player_count DESC LIMIT 1;
SELECT COUNT(DISTINCT p.country_code) AS country_code FROM players p GROUP BY p.country_code HAVING COUNT(p.country_code) > 50;
SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY number_of_players DESC NULLS LAST;
SELECT r."ranking_date", SUM(r."tours") AS total_tours FROM rankings r GROUP BY r."ranking_date" ORDER BY r."ranking_date";
SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date ORDER BY r.ranking_date;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY YEAR;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY YEAR;
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY p.birth_date ASC NULLS LAST LIMIT 3;
WITH YoungestWinners AS (SELECT p.first_name, p.last_name, m.winner_age FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3) SELECT yw.first_name, yw.last_name, yw.winner_age FROM YoungestWinners yw;
SELECT COUNT(DISTINCT p1."player_id") FROM players p1 JOIN players p2 ON p1."player_id" = p2."player_id" WHERE p1."hand" = 'L' AND p2."hand" = 'R' AND p1."player_id" IN (SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'WTA Championships');
SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'left' AND m.tourney_name = 'WTA Championships';
WITH WinnerRanking AS (SELECT p.first_name, p.country_code, p.birth_date, r.ranking_points, row_number() OVER (ORDER BY r.ranking_points DESC) AS rn FROM players p JOIN rankings r ON p.player_id = r.player_id) SELECT wr.first_name, wr.country_code, wr.birth_date FROM WinnerRanking wr WHERE wr.rn = 1;
WITH ranked_players AS (SELECT p.player_id, p.first_name, p.country_code, p.birth_date, r.ranking_points, row_number() OVER (ORDER BY r.ranking_points DESC) AS rank FROM players p JOIN rankings r ON p.player_id = r.player_id) SELECT rp.first_name, rp.country_code, rp.birth_date FROM ranked_players rp WHERE rp.rank = 1;
SELECT p.hand, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.hand ORDER BY number_of_players DESC NULLS LAST;
SELECT p.hand, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.hand ORDER BY number_of_players DESC NULLS LAST;
SELECT COUNT(*) AS captured_ships FROM ship WHERE disposition_of_ship = 'Captured';
SELECT s.name, s.tonnage FROM ship s ORDER BY s.name DESC;
SELECT b.name, b.date, b.result FROM battle b ORDER BY b.date NULLS LAST;
WITH MaxMinDeath AS (SELECT MAX(d.killed) AS max_killed, MIN(d.killed) AS min_killed FROM death d) SELECT mm.max_killed, mm.min_killed FROM MaxMinDeath mm;
SELECT AVG(d.injured) AS average_injuries FROM death d;
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT b.name, b.result FROM battle b WHERE b.bulgarian_commander!= 'Boril';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name, SUM(d.killed) AS total_killed FROM death d JOIN ship s ON d.caused_by_ship_id = s.id JOIN battle b ON s.lost_in_battle = b.id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10 ORDER BY total_killed DESC NULLS LAST;
SELECT s.id, s.name, SUM(d.injured) AS total_injuries FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY s.id, s.name ORDER BY total_injuries DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander ilike '%Kaloyan%' AND b.latin_commander ilike '%Baldwin I%';
SELECT COUNT(DISTINCT b."result") FROM "battle" b;
SELECT COUNT(DISTINCT b.id) FROM "battle" b JOIN "ship" s ON b.id = s.lost_in_battle WHERE s.tonnage!= '225';
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name ilike '%Lettice%' AND s.name ilike '%HMS Atalanta%';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location!= 'English Channel' ORDER BY b.name NULLS LAST;
SELECT d.note FROM death d WHERE d.note ilike '%East%';
SELECT a.line_1, a.line_2 FROM Addresses a;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT c.course_description FROM Courses c WHERE c.course_name ilike '%math%';
SELECT s.section_description FROM Sections s JOIN Courses c ON s.course_id = c.course_id WHERE c.course_name LIKE '%math%';
SELECT a.zip_postcode FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id WHERE LOWER(a.city) = 'port chelsea';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT d.department_name, COUNT(dp.degree_program_id) AS number_of_degrees FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name ORDER BY number_of_degrees DESC LIMIT 1;
WITH DepartmentDegrees AS (SELECT d.department_id, COUNT(dp.degree_program_id) AS num_degrees FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_id) SELECT d.department_name, d.department_id FROM DepartmentDegrees dd JOIN Departments d ON dd.department_id = d.department_id ORDER BY dd.num_degrees DESC LIMIT 1;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT dp.department_id) FROM Degree_Programs dp;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d JOIN Departments de ON d.department_id = de.department_id WHERE LOWER(de.department_name) = 'engineering';
SELECT COUNT(DISTINCT dp.degree_program_id) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE LOWER(d.department_name) = 'engineering';
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.section_description FROM Sections s ORDER BY s.section_name NULLS LAST;
SELECT s.section_name, s.course_id FROM Sections s GROUP BY s.course_id HAVING COUNT(s.section_id) <= 2;
SELECT c.course_name, c.course_id FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id WHERE s.course_id IS NULL;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.semester_id, s.semester_name, COUNT(se.student_enrolment_id) AS number_of_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY number_of_students DESC LIMIT 1;
SELECT s.semester_name, COUNT(se.student_id) AS total_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name ORDER BY total_students DESC LIMIT 1;
SELECT d.department_description FROM Departments d WHERE d.department_name ilike '%the computer%';
SELECT d.department_description FROM Departments d WHERE d.department_name ilike '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, se.degree_program_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id WHERE (SELECT COUNT(DISTINCT se.degree_program_id) FROM Student_Enrolment se WHERE se.student_id = s.student_id) >= 2 GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name like '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor''s';
WITH ProgramEnrollmentCounts AS (SELECT dp.degree_summary_name, COUNT(se.student_id) AS enrollment_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name) SELECT pec.degree_summary_name FROM ProgramEnrollmentCounts pec ORDER BY pec.enrollment_count DESC LIMIT 1;
WITH DegreeEnrollmentCounts AS (SELECT d.degree_summary_name, COUNT(se.student_id) AS num_students FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_summary_name) SELECT dec.degree_summary_name FROM DegreeEnrollmentCounts dec ORDER BY dec.num_students DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_id) AS total_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY total_students DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_id) AS total_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY total_students DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS total_enrolments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY total_enrolments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s WHERE NOT EXISTS (SELECT 1 FROM Student_Enrolment se WHERE se.semester_id = s.semester_id);
WITH NoEnrolled AS (SELECT s.Semester_ID FROM Semesters s LEFT JOIN Student_Enrolment se ON s.Semester_ID = se.Semester_ID WHERE se.Semester_ID IS NULL) SELECT s.Semester_Name FROM NoEnrolled ne JOIN Semesters s ON ne.Semester_ID = s.Semester_ID;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id;
SELECT DISTINCT s.course_id, c.course_name FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id;
SELECT c.course_name, COUNT(se.student_enrolment_id) AS total_enrollments FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id GROUP BY c.course_name ORDER BY total_enrollments DESC LIMIT 1;
WITH course_enrolment AS (SELECT se.course_id, COUNT(DISTINCT se.student_id) AS total_students FROM Student_Enrolment se GROUP BY se.course_id) SELECT c.course_name, ce.total_students FROM course_enrolment ce JOIN Courses c ON ce.course_id = c.course_id ORDER BY ce.total_students DESC NULLS LAST LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment se WHERE se.student_id = s.student_id);
SELECT s.last_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2 ORDER BY t.transcript_date DESC NULLS LAST;
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_first_registered = (SELECT MIN(s2.date_first_registered) FROM Students s2);
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_first_registered = (SELECT MIN(s2.date_first_registered) FROM Students s2);
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id ORDER BY s.first_name NULLS LAST LIMIT 1;
WITH AddressCounts AS (SELECT a.address_id, COUNT(s.student_id) AS student_count FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id) SELECT ac.address_id, ac.student_count FROM AddressCounts ac ORDER BY ac.student_count DESC NULLS LAST LIMIT 1; SELECT a.line_1, a.line_2, a.line_3 FROM Addresses a WHERE a.address_id = (SELECT ac.address_id FROM AddressCounts ac ORDER BY ac.student_count DESC NULLS LAST LIMIT 1);
WITH student_addresses AS (SELECT a.address_id, COUNT(s.student_id) AS num_students FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id) SELECT sa.address_id, a.line_1, a.line_2 FROM student_addresses sa JOIN Addresses a ON sa.address_id = a.address_id ORDER BY sa.num_students DESC LIMIT 1;
SELECT AVG(t.transcript_date) FROM Transcripts t;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(t.transcript_date) AS earliest_transcript_date FROM Transcripts t; SELECT t.other_details FROM Transcripts t WHERE t.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);
SELECT COUNT(t.transcript_id) FROM Transcripts t;
SELECT COUNT(t.transcript_id) AS total_transcripts FROM Transcripts t;
SELECT MAX(t.transcript_date) AS last_transcript_release_date FROM Transcripts t;
SELECT MAX(t.transcript_date) AS last_transcript_date FROM Transcripts t;
SELECT COUNT(DISTINCT t.student_course_id) AS course_enrollment_count, s.student_enrolment_id FROM Student_Enrolment se JOIN Student_Enrolment_Courses s ON se.student_id = s.student_enrolment_id JOIN Transcript_Contents t ON s.student_course_id = t.student_course_id GROUP BY s.student_enrolment_id ORDER BY course_enrollment_count DESC NULLS LAST;
SELECT se.course_id, COUNT(tc.student_course_id) AS max_transcripts, MAX(te.student_enrolment_id) AS max_enrolment_id FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY se.course_id ORDER BY max_transcripts DESC LIMIT 1;
SELECT t.transcript_date, COUNT(tc.student_course_id) AS course_count, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY course_count ASC LIMIT 1;
WITH t AS (SELECT tc.transcript_id, COUNT(tc.student_course_id) AS num_results FROM Transcript_Contents tc GROUP BY tc.transcript_id) SELECT t.transcript_id, t.num_results FROM t ORDER BY t.num_results ASC LIMIT 1;
SELECT s.semester_id FROM Student_Enrolment se JOIN Students s ON se.student_id = s.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
WITH ms AS (SELECT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Masters'), bs AS (SELECT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors') SELECT ms.semester_id FROM ms INTERSECT SELECT bs.semester_id FROM bs;
SELECT COUNT(DISTINCT s.current_address_id) FROM Students s;
SELECT DISTINCT a.address_id FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.last_name DESC, s.middle_name DESC, s.first_name DESC;
SELECT s.other_student_details FROM Students s ORDER BY s.last_name DESC;
SELECT s.section_name, s.section_description FROM Sections s ORDER BY s.section_name NULLS LAST;
SELECT s.section_description FROM Sections s WHERE s.section_name = 'h';
SELECT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582' OR (s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE LOWER(a.country) = 'haiti'));
SELECT DISTINCT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582' OR s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti');
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM cartoon c ORDER BY c.title ASC;
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%' ORDER BY c.title NULLS LAST;
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by ilike '%Joseph Kuhr%';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT c.title, c.directed_by, c.original_air_date FROM Cartoon c ORDER BY c.original_air_date NULLS LAST;
SELECT c.title, c.directed_by FROM cartoon c ORDER BY c.original_air_date NULLS LAST;
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Brandon Vietti%';
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Brandon Vietti%';
SELECT c."Country", COUNT(c."id") AS number_of_channels FROM "TV_Channel" c GROUP BY c."Country" ORDER BY number_of_channels DESC LIMIT 1;
SELECT c.country, COUNT(c.id) AS number_of_channels FROM "TV_Channel" c GROUP BY c.country ORDER BY number_of_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT s."series_name"), COUNT(DISTINCT s."Content") FROM "TV_Channel" s;
SELECT COUNT(DISTINCT s.id) AS series_count, COUNT(DISTINCT c.Content) AS content_count FROM TV_Channel c LEFT JOIN TV_Series s ON c.id = s.Channel;
SELECT t.content FROM "TV_Channel" t WHERE t.id = 'Sky Radio';
SELECT s.Content FROM TV_Channel c JOIN TV_series s ON c.id = s.Channel WHERE c.id = 'Sky Radio';
SELECT t."Package_Option" FROM "TV_Channel" t WHERE t."series_name" = 'Sky Radio';
SELECT t.Package_Option FROM TV_Channel t WHERE t.series_name = 'Sky Radio';
SELECT COUNT(DISTINCT t.id) FROM "TV_Channel" t WHERE LOWER(t.language) = 'english';
SELECT COUNT(DISTINCT t.id) FROM TV_Channel t WHERE LOWER(t.Language) = 'english';
WITH LanguageCounts AS (SELECT t."Language", COUNT(*) AS COUNT FROM "TV_Channel" t GROUP BY t."Language") SELECT lc."Language", lc.COUNT FROM LanguageCounts lc ORDER BY lc.COUNT ASC LIMIT 1;
WITH LanguageUsage AS (SELECT t."Language", COUNT(t."id") AS LanguageCount FROM "TV_Channel" t GROUP BY t."Language") SELECT lu."Language", lu.LanguageCount FROM LanguageUsage lu WHERE lu.LanguageCount = (SELECT MIN(LanguageCount) FROM LanguageUsage) ORDER BY lu."Language";
SELECT t."Language", COUNT(*) AS number_of_channels FROM "TV_Channel" t GROUP BY t."Language" ORDER BY number_of_channels DESC NULLS LAST;
SELECT tv_channel.language, COUNT(*) AS number_of_channels FROM tv_channel GROUP BY tv_channel.language ORDER BY number_of_channels DESC NULLS LAST;
SELECT t.series_name FROM TV_Channel t JOIN Cartoon c ON t.id = c.channel WHERE c.title = 'The Rise of the Blue Beetle!';
SELECT t.series_name FROM TV_Channel t JOIN Cartoon c ON t.id = c.Channel WHERE c.title = 'The Rise of the Blue Beetle';
SELECT c.title FROM "Cartoon" c JOIN "TV_Channel" t ON c.channel = t.id WHERE t.series_name ilike '%Sky Radio%';
SELECT c.title FROM "Cartoon" c JOIN "TV_Channel" t ON c.channel = t.id WHERE LOWER(t.series_name) ='sky radio';
SELECT ts."Episode", ts."Rating" FROM "TV_series" ts ORDER BY ts."Rating" DESC;
SELECT s.episode, s.rating FROM "TV_series" s ORDER BY s.rating DESC;
SELECT ts.episode, ts.rating FROM tv_series ts ORDER BY ts.rating DESC LIMIT 3;
SELECT s.id, s.episode, s.rating FROM TV_series s ORDER BY s.rating DESC NULLS LAST LIMIT 3;
SELECT MIN(s.Share), MAX(s.Share) FROM "TV_series" s;
SELECT MAX(s.Share), MIN(s.Share) FROM TV_series s;
SELECT s.air_date FROM "TV_series" s WHERE s.episode = 'A Love of a Lifetime';
SELECT ts."Air_Date" FROM "TV_series" ts WHERE ts."Episode" ilike '%A%Love%of%a%Lifetime%';
SELECT ts.Weekly_Rank FROM "TV_series" ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT ts.Weekly_Rank FROM TV_series ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT c."series_name" FROM "TV_Channel" c JOIN "TV_series" t ON c."id" = t."Channel" WHERE t."Episode" = 'A Love of a Lifetime';
SELECT s."series_name" FROM "TV_series" s WHERE s."Episode" = 'A Love of a Lifetime';
SELECT t.episode FROM tv_series t JOIN tv_channel c ON t.channel = c.id WHERE c.series_name ilike '%Sky Radio%';
SELECT ts."Episode" FROM "TV_series" ts WHERE LOWER(ts."Channel") ='sky radio';
SELECT c.Directed_by, COUNT(c.id) AS number_of_cartoons FROM Cartoon c GROUP BY c.Directed_by;
SELECT c."Directed_by", COUNT(c."id") AS number_of_cartoons FROM "Cartoon" c GROUP BY c."Directed_by";
SELECT c.production_code, c.channel FROM cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC NULLS LAST LIMIT 1;
SELECT tv_channel."Package_Option", tv_channel."series_name" FROM "TV_Channel" tv_channel WHERE tv_channel."Hight_definition_TV" = 'Yes';
SELECT t."Package_Option", s."series_name" FROM "TV_Channel" t JOIN "TV_series" s ON t."id" = s."Channel" WHERE t."Hight_definition_TV" = 'Yes';
SELECT DISTINCT t.country FROM TV_Channel t JOIN Cartoon c ON t.id = c.channel WHERE c.written_by ilike '%Todd Casey%';
SELECT DISTINCT c."Country" FROM "Cartoon" c JOIN "TV_Channel" t ON c."Channel" = t."id" WHERE c."Written_by" ilike '%Todd Casey%';
SELECT DISTINCT t."Country" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Written_by" not ilike '%Todd Casey%' ORDER BY t."Country";
SELECT DISTINCT c."Country" FROM "TV_Channel" c JOIN Cartoon ct ON c."id" = ct."Channel" WHERE ct."Written_by"!= 'Todd Casey';
SELECT t.series_name, t.country FROM TV_Channel t JOIN Cartoon c ON t.id = c.channel WHERE c.directed_by ilike '%Ben Jones%' AND c.directed_by ilike '%Michael Chang%';
SELECT c.series_name, c.country FROM TV_Channel c JOIN Cartoon t ON c.id = t.channel WHERE t.directed_by ilike '%Ben Jones%' OR t.directed_by ilike '%Michael Chang%';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.language!= 'English' ORDER BY tv_channel.country NULLS LAST;
SELECT t."Pixel_aspect_ratio_PAR", t."Country" FROM "TV_Channel" t WHERE t."Language"!= 'English';
WITH country_channel_count AS (SELECT t."Country", COUNT(t."id") AS num_channels FROM "TV_Channel" t GROUP BY t."Country" HAVING COUNT(t."id") > 2) SELECT cc."Country", c."id" FROM country_channel_count cc JOIN "TV_Channel" c ON cc."Country" = c."Country" ORDER BY cc."Country";
WITH ChannelCounts AS (SELECT t.Channel, COUNT(t.id) AS num_channels FROM TV_Channel t GROUP BY t.Channel) SELECT cc.Channel FROM ChannelCounts cc WHERE cc.num_channels > 2;
SELECT DISTINCT t.id FROM TV_Channel t WHERE t.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by = 'Ben Jones');
SELECT DISTINCT tc.id FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.Directed_by not ilike '%Ben Jones%' ORDER BY tc.id NULLS LAST;
SELECT DISTINCT t.Package_Option FROM TV_Channel t WHERE t.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by = 'Ben Jones');
SELECT DISTINCT t.package_option FROM TV_Channel t WHERE t.id NOT IN (SELECT c.channel FROM Cartoon c WHERE c.directed_by = 'Ben Jones');
SELECT COUNT(*) FROM "poker_player";
SELECT COUNT(*) FROM "poker_player";
SELECT pp."Poker_Player_ID", pp."Earnings" FROM "poker_player" pp ORDER BY pp."Earnings" DESC NULLS LAST;
SELECT pp."Earnings" FROM "poker_player" pp ORDER BY pp."Earnings" DESC;
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p ORDER BY p."Poker_Player_ID";
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p ORDER BY p."Poker_Player_ID";
SELECT AVG(p."Earnings") AS average_earnings FROM "poker_player" p;
SELECT AVG(p."Earnings") FROM "poker_player" p;
SELECT mp."Money_Rank" FROM "poker_player" mp WHERE mp."Earnings" = (SELECT MAX(mp2."Earnings") FROM "poker_player" mp2);
SELECT p."Money_Rank" FROM "poker_player" p WHERE p."Earnings" = (SELECT MAX(p2."Earnings") FROM "poker_player" p2);
SELECT MAX(p."Final_Table_Made") AS max_final_tables FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT MAX(p."Final_Table_Made") FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT p."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID";
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
SELECT p.name, p.people_id, pp.earnings FROM people p JOIN poker_player pp ON p.people_id = pp.people_id WHERE pp.earnings > 300000;
SELECT p."Name", SUM(pr."Earnings") AS total_earnings FROM "poker_player" pr JOIN "people" p ON pr."People_ID" = p."People_ID" GROUP BY p."Name" HAVING SUM(pr."Earnings") > 300000;
SELECT p."Name", pp."Final_Table_Made" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Final_Table_Made" ASC;
SELECT p."Name", p."Poker_Player_ID", SUM(p."Final_Table_Made") AS total_final_tables FROM "poker_player" p JOIN "people" ON p."People_ID" = p."People_ID" GROUP BY p."Name", p."Poker_Player_ID" ORDER BY total_final_tables ASC;
SELECT p."Name", p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" ASC NULLS LAST LIMIT 1;
SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player");
SELECT MAX(p."Money_Rank") FROM "poker_player" p JOIN "people" h ON p."People_ID" = h."People_ID" WHERE h."Height" = (SELECT MAX(h2."Height") FROM "people" h2);
SELECT mp."Poker_Player_ID", mp."Money_Rank" FROM "poker_player" mp JOIN "people" p ON mp."People_ID" = p."People_ID" ORDER BY p."Height" DESC, mp."Money_Rank" DESC LIMIT 1;
SELECT AVG(p.Earnings) FROM "poker_player" p JOIN "people" pe ON p."People_ID" = pe."People_ID" WHERE pe."Height" > 200;
SELECT AVG(p.Earnings) FROM "poker_player" p JOIN "people" p2 ON p."People_ID" = p2."People_ID" WHERE p2."Height" > 200;
SELECT p.name, p.people_id, pp.earnings FROM "poker_player" pp JOIN "people" p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT p.Name, p."Poker_Player_ID", SUM(pp.Earnings) AS total_earnings FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" GROUP BY p.Name, p."Poker_Player_ID" ORDER BY total_earnings DESC;
SELECT p.Nationality, COUNT(p.Nationality) AS Number_of_People FROM people p GROUP BY p.Nationality ORDER BY Number_of_People DESC NULLS LAST;
SELECT p."Nationality", COUNT(*) FROM "people" p GROUP BY p."Nationality" ORDER BY COUNT(*) DESC NULLS LAST;
SELECT p."Nationality", COUNT(*) AS Count FROM "people" p GROUP BY p."Nationality" ORDER BY Count DESC LIMIT 1;
SELECT p.Nationality, COUNT(*) AS Count FROM people p GROUP BY p.Nationality ORDER BY Count DESC LIMIT 1;
SELECT p."Nationality" FROM "people" p GROUP BY p."Nationality" HAVING COUNT(p."Nationality") >= 2;
SELECT p.Nationality, COUNT(*) AS number_of_players FROM people p GROUP BY p.Nationality HAVING COUNT(*) >= 2 ORDER BY number_of_players DESC NULLS LAST;
SELECT p.name, to_date(p.birth_date, 'YYYY-MM-DD') AS birth_date FROM people p ORDER BY p.name ASC;
SELECT p.Name, p."Birth_Date" FROM "people" p ORDER BY p.Name ASC;
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russia';
SELECT p."Name" FROM "people" p WHERE p."Nationality"!= 'Russian' ORDER BY p."Name";
SELECT p.Name FROM people p WHERE p."People_ID" NOT IN (SELECT pp."People_ID" FROM "poker_player" pp);
SELECT p.Name FROM people p WHERE p."People_ID" NOT IN (SELECT pp."People_ID" FROM "poker_player" pp);
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC;
SELECT v.vote_id, v.phone_number, v.state FROM VOTES v;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(v.created) AS last_vote_date FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state WHERE ac.state = 'CA';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name!= 'Jessie Alloway';
SELECT DISTINCT v.state, v.created FROM VOTES v ORDER BY v.state, v.created NULLS LAST;
SELECT v.contestant_number, c.contestant_name FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY v.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT v.contestant_number, c.contestant_name, COUNT(v.vote_id) AS vote_count FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY v.contestant_number, c.contestant_name ORDER BY vote_count ASC LIMIT 1;
SELECT COUNT(v.vote_id) FROM VOTES v WHERE v.state IN ('NY', 'CA');
SELECT COUNT(DISTINCT c.contestant_number) - COUNT(DISTINCT v.contestant_number) AS number_of_unvoted_contestants FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number;
WITH voter_counts AS (SELECT v.state, COUNT(v.phone_number) AS total_votes FROM VOTES v GROUP BY v.state) SELECT ac.state FROM AREA_CODE_STATE ac JOIN voter_counts vc ON ac.area_code = vc.state ORDER BY vc.total_votes DESC LIMIT 1;
SELECT v.created, a.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT a.area_code FROM VOTES v JOIN CONTESTANTS c1 ON v.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v.contestant_number = c2.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name ilike '%Al%';
SELECT c.Name FROM country c WHERE c.IndepYear > 1950 ORDER BY c.Name;
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm ilike '%republic%';
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm ilike '%republic%';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT c.Continent FROM country c WHERE c.Code = 'AI';
SELECT c.Continent FROM country c WHERE c.Code = 'AIA';
SELECT c.Region FROM city c WHERE LOWER(c.Name) = 'kabul';
SELECT c.Region FROM city c WHERE c.Name = 'Kabul';
SELECT l.Language FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE c.Code = 'ABW' ORDER BY l.Percentage DESC LIMIT 1;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code = 'ABW' AND cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC NULLS LAST LIMIT 1;
SELECT c.Population, c.LifeExpectancy FROM country c WHERE c.Name = 'Brazil';
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Code = 'BRA';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Region = 'Central Africa';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(c2.LifeExpectancy) FROM country c2 WHERE c2.Continent = 'Asia');
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;
SELECT SUM(c.population) AS total_population, MAX(c.gnp) AS max_gnp FROM country c WHERE c.continent = 'Asia';
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM country c WHERE c.Continent = 'Asia';
SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm ='republic';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Africa' AND c.GovernmentForm LIKE '%Republic%';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.Population) AS total_population FROM city c WHERE c.District = 'Gelderland';
SELECT SUM(c.Population) AS total_population FROM city c WHERE c.District = 'Gelderland';
SELECT AVG(c.GNP), SUM(c.Population) FROM country c WHERE c.GovernmentForm LIKE '%US territory%';
SELECT AVG(c.GNP), SUM(c.Population) FROM country c WHERE c.Code2 = 'US';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Africa';
SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Africa';
SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Afghanistan' AND cl.isofficial = 'T';
SELECT COUNT(*) FROM countrylanguage cl WHERE cl.countrycode = 'AFG' AND cl.isofficial = 'T';
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS language_count FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY language_count DESC LIMIT 1;
WITH LanguageDiversity AS (SELECT c.Continent, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent) SELECT ld.Continent FROM LanguageDiversity ld ORDER BY ld.NumLanguages DESC NULLS LAST LIMIT 1;
SELECT c.Continent, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT COUNT(DISTINCT cl.CountryCode) AS number_of_countries FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch');
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' AND (SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = c.Code AND Language = 'French' AND IsOfficial = 'T') > 0;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese';
SELECT COUNT(DISTINCT cl.CountryCode) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese';
SELECT DISTINCT r.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT cl.Language, SUM(cl.Percentage) AS total_percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY total_percentage DESC LIMIT 1;
SELECT cl.Language, COUNT(cl.CountryCode) AS CountryCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY CountryCount DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm ='republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm ='republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT SUM(c.Population) AS total_population FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT SUM(c.population) FROM city c JOIN country cl ON c.countrycode = cl.code JOIN countrylanguage cl2 ON cl.code = cl2.countrycode WHERE cl2.language!= 'English';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState ilike '%Beatrix%' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT SUM(CASE WHEN c.IndepYear < 1930 THEN 1 ELSE 0 END) AS total_official_languages FROM country c;
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT AVG(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND NOT EXISTS (SELECT 1 FROM country c2 WHERE c2.Continent = 'Africa' AND c2.Population < c.Population);
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MIN(population) FROM country WHERE continent = 'Africa');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND cl.Percentage > (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 JOIN country cl3 ON cl2.CountryCode = cl3.Code WHERE cl3.Continent = 'Africa');
SELECT c.Name, c.Population FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country c2 JOIN city ci2 ON c2.Code = ci2.CountryCode WHERE c2.Continent = 'Africa');
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English') AND c.Name NOT LIKE '%United States%' AND c.Name NOT LIKE '%United Kingdom%';
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.IsOfficial!= 'T' AND cl.Language!= 'English' ORDER BY c.Name;
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T' AND c.District = 'Europe';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T' AND co.Continent = 'Asia' ORDER BY c.Name;
SELECT DISTINCT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl2 ON cl.Code = cl2.CountryCode WHERE LOWER(cl.Continent) = 'asia' AND LOWER(cl2.Language) = 'chinese' AND cl2.IsOfficial = 'T';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(c2.Population) FROM country c2);
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.HeadOfState, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3 ORDER BY NumberOfLanguages DESC NULLS LAST;
WITH country_languages AS (SELECT cl.CountryCode, COUNT(cl.Language) AS NumLanguages FROM countrylanguage cl GROUP BY cl.CountryCode) SELECT c.Name, cl.NumLanguages FROM country c JOIN country_languages cl ON c.Code = cl.CountryCode WHERE cl.NumLanguages > 2;
WITH avg_population AS (SELECT AVG(c.Population) AS avg_city_population FROM city c) SELECT d.District, COUNT(c.ID) AS number_of_cities FROM city c JOIN avg_population ap ON c.Population > ap.avg_city_population JOIN city d ON c.District = d.District GROUP BY d.District ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.District, COUNT(*) AS city_count FROM city c GROUP BY c.District HAVING SUM(c.Population) > (SELECT AVG(c2.Population) FROM city c2);
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm ORDER BY total_population DESC NULLS LAST;
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT c.Continent, AVG(c.LifeExpectancy) AS average_life_expectancy, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;
SELECT c.Continent, SUM(c.Population) AS total_population, AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC NULLS LAST LIMIT 5;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population ASC NULLS LAST LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population ASC NULLS LAST LIMIT 3;
SELECT COUNT(*) AS number_of_countries FROM country c WHERE c.Continent = 'Asia';
SELECT COUNT(*) FROM country c WHERE c.Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;
SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_surface_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT cl.Language, COUNT(cl.CountryCode) AS country_count FROM countrylanguage cl GROUP BY cl.Language ORDER BY country_count DESC LIMIT 1;
SELECT l.Language, COUNT(*) AS NumberOfCountries FROM countrylanguage l GROUP BY l.Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT c.Name, cl.Language, MAX(cl.Percentage) AS Max_Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name, cl.Language ORDER BY c.Name, Max_Percentage DESC NULLS LAST;
WITH cl AS (SELECT cl.CountryCode, cl.Language, cl.Percentage, RANK() OVER (PARTITION BY cl.CountryCode ORDER BY cl.Percentage DESC) AS rank FROM countrylanguage cl) SELECT cl.CountryCode, cl.Language FROM cl WHERE cl.rank = 1;
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) ='spanish' AND cl.IsOfficial = 'T';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC NULLS LAST LIMIT 1;
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM "conductor";
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age ASC;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age DESC NULLS LAST;
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT o.record_company, o.year_of_founded FROM orchestra o ORDER BY o.year_of_founded DESC;
SELECT AVG(s.Attendance) AS average_attendance FROM show s;
SELECT AVG(s.Attendance) AS average_attendance FROM show s;
SELECT MAX(CAST(p.share AS FLOAT), MIN(CAST(p.share AS FLOAT)) FROM performance p WHERE p.type!= 'Live final';
SELECT MAX(cast(p.share AS real) AS max_share, MIN(cast(p.share AS real)) AS min_share FROM performance p WHERE p.type!= 'Live final';
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT COUNT(DISTINCT c."Nationality") FROM "conductor" c;
SELECT c.Name, c.Year_of_Work FROM conductor c ORDER BY c.Year_of_Work DESC;
SELECT c.name, COUNT(p.performance_id) AS num_performances, COUNT(s.show_id) AS num_shows FROM conductor c JOIN performance p ON c.conductor_id = p.conductor_id JOIN show s ON p.performance_id = s.performance_id GROUP BY c.name ORDER BY num_performances DESC NULLS LAST;
SELECT c.Name, MAX(c.Year_of_Work) AS max_year_of_work FROM conductor c GROUP BY c.Name ORDER BY max_year_of_work DESC LIMIT 1;
SELECT c.Name, MAX(c.Year_of_Work) AS Max_Work_Year FROM conductor c GROUP BY c.Name ORDER BY Max_Work_Year DESC NULLS LAST LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN (SELECT o.Conductor_ID, COUNT(DISTINCT o.Orchestra_ID) AS num_Orchestras FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1) AS o2 ON c.Conductor_ID = o2.Conductor_ID;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
WITH conductor_orchestras AS (SELECT c.Name, COUNT(o.Orchestra_ID) AS num_orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name) SELECT name, num_orchestras FROM conductor_orchestras ORDER BY num_orchestras DESC NULLS LAST LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT r.Record_Company, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID JOIN show s ON p.Performance_ID = s.Performance_ID JOIN record_company r ON r.Record_Company = p.Record_Company GROUP BY r.Record_Company ORDER BY number_of_orchestras DESC NULLS LAST;
SELECT o.Record_Company, COUNT(*) AS number_of_orchestras FROM orchestra o GROUP BY o.Record_Company;
SELECT o.major_record_format, COUNT(o.major_record_format) AS COUNT FROM orchestra o GROUP BY o.major_record_format ORDER BY COUNT(o.major_record_format) ASC;
SELECT o.Major_Record_Format, COUNT(*) AS COUNT FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY COUNT DESC NULLS LAST;
SELECT oc.Record_Company, COUNT(*) AS total_orchestras FROM orchestra oc GROUP BY oc.Record_Company ORDER BY total_orchestras DESC LIMIT 1;
SELECT oc.Record_Company, COUNT(oc.Orchestra_ID) AS COUNT FROM orchestra oc GROUP BY oc.Record_Company ORDER BY COUNT DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p);
SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.orchestra_id IS NULL;
SELECT o.record_company, o.year_of_founded FROM orchestra o WHERE o.year_of_founded < 2003 AND o.record_company IN (SELECT o2.record_company FROM orchestra o2 WHERE o2.year_of_founded > 2003);
SELECT o1."Record_Company" FROM "orchestra" o1 JOIN "orchestra" o2 ON o1."Record_Company" = o2."Record_Company" WHERE o1."Year_of_Founded" < 2003 AND o2."Year_of_Founded" >= 2003;
SELECT COUNT(*) FROM orchestra o WHERE o.major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra o WHERE LOWER(o.Major_Record_Format) IN ('cd', 'dvd');
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded NULLS LAST;
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded NULLS LAST;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT h.name, h.grade FROM Highschooler h;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name NULLS LAST;
SELECT h.grade FROM Highschooler h;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name NULLS LAST;
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.id FROM Highschooler h WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM Highschooler h WHERE h.grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT h.grade, COUNT(h.id) AS number_of_students FROM Highschooler h GROUP BY h.grade;
SELECT h.grade, COUNT(h.id) FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(h.id) AS num_students FROM Highschooler h GROUP BY h.grade ORDER BY num_students DESC LIMIT 1;
SELECT h.grade, COUNT(h.id) AS total_students FROM Highschooler h GROUP BY h.grade ORDER BY total_students DESC LIMIT 1;
SELECT h.grade, COUNT(h.id) AS number_of_students FROM Highschooler h JOIN Friend f ON h.id = f.student_id GROUP BY h.grade HAVING COUNT(h.id) >= 4 ORDER BY h.grade NULLS LAST;
SELECT DISTINCT g.grade, COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id JOIN Likes l ON h.ID = l.student_id OR h.ID = l.liked_id GROUP BY g.grade HAVING COUNT(*) >= 4 ORDER BY g.grade NULLS LAST;
WITH friendships AS (SELECT f.student_id, COUNT(f.friend_id) AS num_friends FROM Friend f GROUP BY f.student_id) SELECT h.id AS student_id, f.num_friends FROM Highschooler h JOIN friendships f ON h.id = f.student_id;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
WITH FriendCounts AS (SELECT h.ID, COUNT(f.student_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID) SELECT name FROM FriendCounts ORDER BY num_friends DESC NULLS LAST LIMIT 1;
SELECT h.name, COUNT(f.student_id) AS friend_count FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY friend_count DESC LIMIT 1;
WITH FriendsCount AS (SELECT f.student_id, COUNT(f.friend_id) AS num_friends FROM Friend f GROUP BY f.student_id) SELECT h.name FROM Highschooler h JOIN FriendsCount fc ON h.ID = fc.student_id WHERE fc.num_friends >= 3;
SELECT h.name FROM Highschooler h WHERE h.id IN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 3);
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';
SELECT COUNT(f.student_id) FROM Friend f WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend f WHERE f.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT h.id FROM Highschooler h WHERE h.id NOT IN (SELECT DISTINCT f.student_id FROM Friend f) AND h.id NOT IN (SELECT DISTINCT f.friend_id FROM Friend f);
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f) AND h.ID NOT IN (SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT DISTINCT h.ID FROM Highschooler h WHERE h.ID IN (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes);
SELECT DISTINCT h.name FROM Highschooler h WHERE h.id IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f); AND h.id IN (SELECT l.student_id FROM Likes l UNION ALL SELECT l.liked_id FROM Likes l);
SELECT DISTINCT h.name FROM Highschooler h WHERE EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID) AND EXISTS (SELECT 1 FROM Likes l WHERE l.student_id = h.ID);
SELECT l.student_id, COUNT(l.liked_id) AS num_likes FROM Likes l GROUP BY l.student_id;
SELECT l.student_id, COUNT(l.student_id) AS number_of_likes FROM Likes l GROUP BY l.student_id;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
WITH likes_count AS (SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name) SELECT name FROM likes_count ORDER BY num_likes DESC NULLS LAST LIMIT 1;
SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY num_likes DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS m ON h.ID = m.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS l2 ON h.ID = l2.student_id ORDER BY h.name NULLS LAST;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) f2 ON h.ID = f2.student_id WHERE h.grade > 5 ORDER BY h.name NULLS LAST;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) f2 ON h.ID = f2.student_id WHERE h.grade > 5;
SELECT COUNT(*) FROM Likes l WHERE l.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) AS likes_count FROM Likes l WHERE l.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.student_id) > 0) AS f2 ON h.ID = f2.student_id;
SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;
SELECT MIN(h.grade) FROM Highschooler h WHERE h.id NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT MIN(h.grade) FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state WHERE o.state IS NOT NULL AND p.state IS NOT NULL GROUP BY o.state HAVING COUNT(DISTINCT o.state) = 1;
SELECT o.state, p.state FROM Owners o CROSS JOIN Professionals p;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (SELECT COUNT(*) FROM Treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
WITH dog_treatment_costs AS (SELECT d.name, SUM(t.cost_of_treatment) AS total_cost FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name) SELECT dt.name FROM dog_treatment_costs dt WHERE dt.total_cost <= 1000;
SELECT o.first_name, p.first_name FROM Owners o CROSS JOIN Professionals p WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT DISTINCT p.first_name, o.first_name FROM Professionals p JOIN Owners o ON p.first_name = o.first_name WHERE p.first_name NOT IN (SELECT name FROM Dogs);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT o.owner_id, o.first_name, o.last_name, COUNT(DISTINCT d.dog_id) AS number_of_dogs FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY number_of_dogs DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name, COUNT(t.treatment_id) AS num_treatments FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2 ORDER BY num_treatments DESC NULLS LAST;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id ORDER BY p.professional_id NULLS LAST;
SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY num_dogs DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
WITH TreatmentCounts AS (SELECT o.owner_id, COUNT(t.treatment_id) AS num_treatments FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id) SELECT tc.owner_id, o.last_name FROM TreatmentCounts tc JOIN Owners o ON tc.owner_id = o.owner_id ORDER BY tc.num_treatments DESC NULLS LAST LIMIT 1;
SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY total_cost DESC LIMIT 1;
WITH TotalCosts AS (SELECT tt.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description) SELECT tc.treatment_type_description FROM TotalCosts tc ORDER BY tc.total_cost ASC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY t.cost_of_treatment ASC NULLS LAST LIMIT 1;
WITH total_charges AS (SELECT o.owner_id, o.zip_code, SUM(c.charge_amount) AS total_amount FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Charges c ON t.treatment_id = c.charge_id GROUP BY o.owner_id, o.zip_code) SELECT tc.owner_id, tc.zip_code FROM total_charges tc ORDER BY tc.total_amount DESC LIMIT 1;
WITH total_charges AS (SELECT d.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.owner_id) SELECT tc.owner_id, tc.total_cost, o.zip_code FROM total_charges tc JOIN Owners o ON tc.owner_id = o.owner_id ORDER BY tc.total_cost DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (SELECT t.professional_id, COUNT(DISTINCT t.treatment_type_code) AS treatment_count FROM Treatments t GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2) AS subquery ON p.professional_id = subquery.professional_id ORDER BY p.professional_id NULLS LAST;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 ORDER BY p.professional_id NULLS LAST;
SELECT p.first_name, p.last_name, AVG(t.cost_of_treatment) AS average_cost FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY p.first_name, p.last_name HAVING AVG(t.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
WITH BreedPopularity AS (SELECT b.breed_code, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_code), RarestBreed AS (SELECT bp.breed_code FROM BreedPopularity bp ORDER BY bp.num_dogs LIMIT 1) SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN RarestBreed rb ON d.breed_code = rb.breed_code ORDER BY t.date_of_treatment NULLS LAST;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM Breeds ORDER BY COUNT(DISTINCT treatment_id) DESC LIMIT 1);
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id ORDER BY d.date_arrived NULLS LAST;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.date_of_birth = (SELECT MIN(d2.date_of_birth) FROM Dogs d2);
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(d2.age) FROM Dogs d2);
SELECT p.email_address FROM Professionals p WHERE p.state IN ('HI', 'WI');
SELECT p.email_address FROM Professionals p WHERE p.state IN ('HI', 'WI');
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT COUNT(DISTINCT t.dog_id) FROM Treatments t;
SELECT COUNT(DISTINCT d.dog_id) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT COUNT(DISTINCT p.professional_id) FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%';
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ILIKE '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ilike '%North%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ILIKE '%North%';
SELECT COUNT(*) FROM Dogs d WHERE CAST(d.age AS INT) < (SELECT AVG(CAST(age AS INT)) FROM Dogs);
SELECT COUNT(*) AS number_of_dogs FROM Dogs d WHERE CAST(d.age AS INT) < (SELECT AVG(CAST(age AS INT)) FROM Dogs);
SELECT MAX(t.cost_of_treatment) AS most_recent_treatment_cost FROM Treatments t;
SELECT MAX(t.cost_of_treatment) AS max_cost FROM Treatments t;
SELECT COUNT(DISTINCT d.dog_id) FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t);
SELECT COUNT(*) AS number_of_dogs_without_treatment FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL;
SELECT COUNT(o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;
SELECT COUNT(*) FROM Owners o WHERE o.owner_id NOT IN (SELECT DISTINCT d.owner_id FROM Dogs d);
WITH treatment_counts AS (SELECT p.professional_id, COUNT(t.treatment_id) AS num_treatments FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id) SELECT COUNT(*) FROM treatment_counts WHERE num_treatments = 0;
SELECT COUNT(*) FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(CAST(d.age AS INT)) AS average_age FROM Dogs d;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT MAX(DATEDIFF(YEAR, d.date_of_birth, CURRENT_DATE())) AS age_of_oldest_dog FROM Dogs d;
SELECT MAX(d.age) AS oldest_age FROM Dogs d;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT MAX(c.charge_amount) FROM Charges c;
SELECT MAX(c.charge_amount) AS max_charge_amount FROM Charges c;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT d.breed_code, d.size_code FROM Dogs d ORDER BY d.breed_code, d.size_code;
SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d ORDER BY d.breed_code, d.size_code;
SELECT p.first_name, t.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT p.first_name, tt.treatment_type_description FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(DISTINCT s."Singer_ID") FROM "singer" s;
SELECT COUNT(*) FROM singer;
SELECT s.Name FROM "singer" s ORDER BY s.Net_Worth_Millions ASC;
SELECT s.name, s.net_worth_millions FROM singer s ORDER BY s.net_worth_millions ASC;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s.Name FROM "singer" s WHERE s.Citizenship!= 'France';
SELECT s.Name FROM "singer" s WHERE s.Citizenship!= 'French';
SELECT s.Name FROM "singer" s WHERE s."Birth_Year" = 1948 OR s."Birth_Year" = 1949;
SELECT s.Name FROM "singer" s WHERE s."Birth_Year" = 1948 OR s."Birth_Year" = 1949;
SELECT s.Name FROM singer s ORDER BY s.Net_Worth_Millions DESC NULLS LAST LIMIT 1;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions DESC LIMIT 1;
SELECT s.Citizenship, COUNT(*) AS number_of_singers FROM "singer" s GROUP BY s.Citizenship;
SELECT s.Citizenship, COUNT(*) AS singer_count FROM "singer" s GROUP BY s.Citizenship;
SELECT s.Citizenship, COUNT(*) AS Count FROM singer s GROUP BY s.Citizenship ORDER BY Count DESC LIMIT 1;
SELECT s.Citizenship, COUNT(*) AS Count FROM "singer" s GROUP BY s.Citizenship ORDER BY Count DESC LIMIT 1;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS max_net_worth FROM singer s GROUP BY s.Citizenship ORDER BY max_net_worth DESC NULLS LAST;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS max_net_worth FROM "singer" s GROUP BY s.Citizenship ORDER BY max_net_worth DESC NULLS LAST;
SELECT s."Title", s."Singer_ID", s."Sales", s."Highest_Position" FROM "song" AS s JOIN "singer" AS si ON s."Singer_ID" = si."Singer_ID";
SELECT s."Title", s."Singer_ID", s."Sales", s."Highest_Position", si."Name" FROM "song" s JOIN "singer" si ON s."Singer_ID" = si."Singer_ID";
SELECT DISTINCT s.Name FROM "singer" s JOIN "song" ss ON s."Singer_ID" = ss."Singer_ID" WHERE ss."Sales" > 300000;
SELECT s.Name FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID WHERE t.Sales > 300000;
SELECT s.Name FROM "singer" s JOIN (SELECT Singer_ID FROM "song" GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1) AS m ON s.Singer_ID = m.Singer_ID;
SELECT s.Name FROM singer s JOIN song USING(Singer_ID) GROUP BY s.Name HAVING COUNT(s.Song_ID) > 1;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM song s GROUP BY s.Name;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM "song" s GROUP BY s.Name;
SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT s.Singer_ID FROM song s);
SELECT s.name FROM singer s WHERE s.singer_id NOT IN (SELECT s.singer_id FROM song s);
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship HAVING COUNT(DISTINCT s.Singer_ID) >= 2;
SELECT DISTINCT s.Citizenship FROM "singer" s WHERE s."Birth_Year" < 1945 AND s."Birth_Year" > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT ot.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types ot ON oaf.feature_type_code = ot.feature_type_code WHERE oaf.feature_name = 'AirCon';
SELECT p.property_name, r.property_type_description FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code;
SELECT p.property_name FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code WHERE p.room_count > 1 AND (r.property_type_description ilike '%house%' OR r.property_type_description ilike '%apartment%');

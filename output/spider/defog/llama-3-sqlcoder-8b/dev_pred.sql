SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;
SELECT s.Name, s.Country, s.Age FROM singer s ORDER BY s.Age DESC NULLS LAST;
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France';
SELECT AVG(s.Age) AS average_age, MIN(s.Age) AS min_age, MAX(s.Age) AS max_age FROM singer s WHERE s.Country = 'France';
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM singer s ORDER BY s.Age ASC LIMIT 1;
SELECT DISTINCT s."Country" FROM "singer" s WHERE s."Age" > 20;
SELECT DISTINCT s."Country" FROM "singer" s WHERE s."Age" > 20;
SELECT s.Country, COUNT(s.Singer_ID) AS number_of_singers FROM singer s GROUP BY s.Country ORDER BY number_of_singers DESC NULLS LAST;
SELECT s."Country", COUNT(*) AS number_of_singers FROM "singer" s GROUP BY s."Country" ORDER BY number_of_singers DESC NULLS LAST;
SELECT s."Name", s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer");
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2);
SELECT s."Location", s."Name" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT s."Location", s."Name" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT MAX(s.capacity), AVG(s.capacity) FROM stadium s;
SELECT AVG(s.capacity) AS average_capacity, MAX(s.capacity) AS max_capacity FROM stadium s;
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(s2.Average) FROM stadium s2);
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(s2.Average) FROM stadium s2);
SELECT COUNT(*) FROM concert c WHERE c.year IN ('2014', '2015');
SELECT COUNT(*) FROM concert c WHERE c.year IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID::integer = s.Stadium_ID GROUP BY s.Name ORDER BY number_of_concerts DESC NULLS LAST;
SELECT s.Name, COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;
WITH concert_capacity AS (SELECT c.concert_ID, s.Name AS stadium_name, s.Capacity, COUNT(*) AS num_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year >= '2014' GROUP BY c.concert_ID, s.Name, s.Capacity) SELECT stadium_name, capacity, num_concerts FROM concert_capacity ORDER BY num_concerts DESC LIMIT 1;
WITH concert_stadium_capacity AS (SELECT c.concert_ID, s.Name AS stadium_name, s.Capacity FROM concert c JOIN stadium s ON c.Stadium_ID::integer = s.Stadium_ID WHERE c.year > '2013') SELECT sc.stadium_name, MAX(sc.capacity) AS max_capacity FROM concert_stadium_capacity sc GROUP BY sc.stadium_name ORDER BY max_capacity DESC LIMIT 1;
SELECT c.Year, COUNT(c.concert_ID) AS Number_of_Concerts FROM concert c GROUP BY c.Year ORDER BY Number_of_Concerts DESC NULLS LAST LIMIT 1;
SELECT MAX(CAST(c.Year AS INTEGER)) AS most_concert_year FROM concert c;
SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c);
SELECT s."Name" FROM "stadium" s LEFT JOIN "concert" c ON s."Stadium_ID" = c."Stadium_ID" WHERE c."Stadium_ID" IS NULL;
SELECT s.Country FROM singer s WHERE s.Age > 40 AND s.Age < 30;
SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = '2014');
SELECT s."Name" FROM "stadium" s WHERE s."Stadium_ID" NOT IN (SELECT c."Stadium_ID" FROM "concert" c WHERE c."Year" = '2014');
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.theme, COUNT(si.singer_ID) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.theme;
SELECT s.Name, COUNT(c.concert_ID) AS number_of_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name ORDER BY number_of_concerts DESC NULLS LAST;
SELECT s.Name, COUNT(si.concert_ID) AS number_of_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID::integer = sic.Singer_ID JOIN concert c ON sic.concert_ID::integer = c.concert_ID WHERE c.concert_Name ilike '%Hey%';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name ILIKE '%Hey%';
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID::int = s.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year = '2014' AND s.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = '2015');
SELECT COUNT(c.concert_ID) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(s2.Capacity) FROM stadium s2);
SELECT COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID ORDER BY s.Capacity DESC LIMIT 1;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) AS num_pets FROM Pets p WHERE p.weight > 10;
SELECT p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE pet_type = 'dog');
SELECT p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE pet_type = 'dog');
SELECT MAX(p.weight) AS max_weight, p.pet_type FROM Pets p GROUP BY p.pet_type;
SELECT p.pettype, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pettype;
SELECT COUNT(*) AS number_of_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.pet_age < 2;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.pet_type = 'dog';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 1 AND (p.petType ilike '%cat%' OR p.petType ilike '%dog%');
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 0 AND (p.petType = 'cat' OR p.petType = 'dog');
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 2 AND (p.petType = 'cat' OR p.petType = 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age BETWEEN 1 AND 3 AND (p.petType = 'cat' OR p.petType = 'dog');
SELECT s.major, s.age FROM Student s WHERE s.stuid NOT IN (SELECT h.stuid FROM Has_Pet h JOIN Pets p ON h.petid = p.petid WHERE LOWER(p.pettype) = 'cat');
SELECT s.Major, s.Age FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID LEFT JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age IS NULL;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age IS NULL AND p.pet_age IS NULL;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_type!= 'cat' AND p.pet_type IS NOT NULL;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 1 AND p.pet_age < 3 AND p.pet_age % 2 = 0;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 1 AND p.pet_age < 3 AND p.pet_age % 2 = 1;
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT p.petid, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_id, p.pet_age, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pettype, AVG(s.age) AS average_age, MAX(s.age) AS max_age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid GROUP BY p.pettype;
SELECT p.pet_type, AVG(s.age) AS average_age, MAX(s.age) AS max_age FROM student s JOIN has_pet h ON s.stuid = h.stuid JOIN pets p ON h.petid = p.petid GROUP BY p.pet_type;
SELECT p.pettype, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pettype;
SELECT p.pettype, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pettype;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID ORDER BY s.Fname;
SELECT h.petid FROM student s JOIN has_pet h ON s.stuid = h.stuid WHERE s.lname = 'Smith';
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(hp.PetID) AS pet_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 0;
SELECT s.StuID, COUNT(hp.PetID) AS pet_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID ORDER BY pet_count DESC NULLS LAST;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(h.PetID) > 1;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(h.PetID) > 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.petType = 'cat' ORDER BY s.LName DESC LIMIT 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.petType = 'cat';
SELECT AVG(s.Age) FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT AVG(s.Age) FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(c.CountryId) AS CountryCount FROM countries c GROUP BY c.ContId, c.Continent ORDER BY c.ContId NULLS LAST;
SELECT c.ContId, c.Continent, COUNT(c.CountryId) AS country_count FROM countries c GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.FullName, COUNT(*) AS number_of_models FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Make GROUP BY cm.FullName ORDER BY number_of_models DESC NULLS LAST;
SELECT cm.Id, cm.FullName, COUNT(m.Model) AS model_count FROM car_makers cm JOIN model_list m ON cm.Id = m.Maker GROUP BY cm.Id, cm.FullName ORDER BY cm.Id NULLS LAST;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId ORDER BY cd.Horsepower ASC LIMIT 1;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId ORDER BY cd.Horsepower ASC NULLS LAST LIMIT 1;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(c2.Weight) FROM cars_data c2);
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(cd2.Weight) FROM cars_data cd2);
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN cars_data cd ON ml.Model = cd.Model WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON cn.Make = CAST(cm.Maker AS TEXT) WHERE cd.Year = 1970;
SELECT cn.Make, cd.Year FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(cd2.Year) FROM cars_data cd2);
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.Make = CAST(cm.Maker AS TEXT) ORDER BY cd.Year ASC LIMIT 1;
SELECT DISTINCT c.Model FROM car_names c JOIN cars_data d ON c.MakeId = d.Id WHERE d.Year > 1980 ORDER BY c.Model NULLS LAST;
SELECT DISTINCT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year > 1980 ORDER BY c.Model NULLS LAST;
SELECT c.Continent, COUNT(*) AS maker_count FROM car_makers cm JOIN continents c ON cm.Country = c.ContId GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Country) AS NumberOfMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country ORDER BY COUNT(cm.Id) DESC NULLS LAST LIMIT 1;
SELECT c.CountryName, COUNT(m.Maker) AS maker_count FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryName ORDER BY maker_count DESC LIMIT 1;
SELECT cm.Maker, COUNT(*) AS model_count FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker GROUP BY cm.Maker ORDER BY model_count DESC NULLS LAST;
SELECT c.Maker, COUNT(*) AS model_count, cm.FullName FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker GROUP BY c.Maker, cm.FullName ORDER BY model_count DESC NULLS LAST;
SELECT c.accelerate FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE cn.make ilike '%AMC%Hornet%SportAbout%';
SELECT c.accelerate FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE cn.make ilike '%amc%hornet%sportabout%';
SELECT COUNT(*) FROM car_makers WHERE LOWER(country) = 'france';
SELECT COUNT(DISTINCT m.Maker) FROM car_makers m WHERE m.Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(*) FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE c.countryname ilike '%USA%';
SELECT COUNT(*) FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker WHERE LOWER(cm.Country) = 'united states';
SELECT AVG(cast(cars_data.mpg AS REAL)) AS average_mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4;
SELECT AVG(CAST(cars_data.MPG AS FLOAT)) AS average_mpg FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4;
SELECT MIN(c.Weight) FROM cars_data c WHERE c.Cylinders = 8 AND c.Year = 1974;
SELECT MIN(c.weight) FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT c.Maker, c.Model FROM car_names c;
SELECT c.Maker, c.Model FROM car_names c;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NOT NULL GROUP BY c.CountryName, c.CountryId;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT c.Year, AVG(c.Weight) AS average_weight FROM cars_data c GROUP BY c.Year;
SELECT c.Year, AVG(c.Weight) AS average_weight FROM cars_data c GROUP BY c.Year ORDER BY c.Year NULLS LAST;
SELECT c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country WHERE c.Continent = 2 GROUP BY c.CountryName HAVING COUNT(m.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country WHERE c.Continent = 2 GROUP BY c.CountryName HAVING COUNT(m.Country) >= 3;
SELECT MAX(c.Horsepower), n.Make FROM cars_data c JOIN car_names n ON c.Id = n.MakeId WHERE c.Cylinders = 3 GROUP BY n.Make;
SELECT MAX(c.Horsepower) AS max_horsepower, c.Make FROM cars_data c WHERE c.Cylinders = 3 GROUP BY c.Make;
SELECT c.Model, MAX(c.MPG) AS max_mpg FROM cars_data c GROUP BY c.Model ORDER BY max_mpg DESC LIMIT 1;
SELECT c.Model, MAX(c.MPG) AS max_mpg FROM cars_data c GROUP BY c.Model ORDER BY max_mpg DESC LIMIT 1;
SELECT AVG(CAST(c.Horsepower AS INTEGER)) AS average_horsepower FROM cars_data c WHERE c.Year < 1980;
SELECT AVG(CAST(cars_data.horsepower AS INTEGER)) AS average_horsepower FROM cars_data WHERE cars_data.year < 1980;
SELECT AVG(c.Edispl) AS average_edispl FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE LOWER(cn.Model) = 'volvo';
SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE LOWER(ml.Make) = 'volvo';
SELECT c.Cylinders, MAX(c.Accelerate) AS max_accelerate FROM cars_data c GROUP BY c.Cylinders;
SELECT MAX(c.Accelerate) AS max_accelerate FROM cars_data c GROUP BY c.Cylinders ORDER BY max_accelerate DESC NULLS LAST;
WITH ModelCounts AS (SELECT m.Model, COUNT(*) AS num_models FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY m.Model) SELECT mc.Model FROM ModelCounts mc ORDER BY mc.num_models DESC LIMIT 1;
WITH Model_Versions AS (SELECT m.Model, COUNT(m.Model) AS VersionCount FROM car_names m GROUP BY m.Model) SELECT mv.Model, mv.VersionCount FROM Model_Versions mv ORDER BY mv.VersionCount DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data cd WHERE cd.Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS total_cars FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) AS car_models FROM car_makers WHERE FullName = 'American Motor Company';
SELECT COUNT(*) FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker WHERE LOWER(cm.Country) = 'usa';
SELECT m."FullName", m."Id" FROM car_makers m JOIN model_list ml ON m."Id" = ml."Maker" GROUP BY m."FullName", m."Id" HAVING COUNT(ml."Model") > 3;
SELECT cm.Maker, COUNT(ml.Model) AS model_count FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Maker HAVING COUNT(ml.Model) > 3;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.FullName) = 'general motors' AND cn.Weight > 3500;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 1 OR cn.Weight > 3500;
SELECT c.Year FROM cars_data c WHERE c.Weight >= 3000 AND c.Weight <= 4000;
SELECT DISTINCT c.Year FROM cars_data c WHERE c.Weight < 4000 AND c.Weight > 3000 ORDER BY c.Year NULLS LAST;
SELECT c.Horsepower FROM cars_data c ORDER BY c.Accelerate DESC NULLS LAST LIMIT 1;
SELECT c.horsepower FROM cars_data c ORDER BY c.accelerate DESC NULLS LAST LIMIT 1;
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'volvo' ORDER BY c.Accelerate ASC LIMIT 1;
SELECT MIN(c.Accelerate) AS min_accelerate FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'Volvo';
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(DISTINCT c.CountryId) AS country_count FROM countries c JOIN car_makers m ON c.CountryId = m.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 2;
SELECT COUNT(DISTINCT c.CountryId) AS country_count FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT m.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.model WHERE cd.cylinders = 4 ORDER BY cd.horsepower DESC NULLS LAST LIMIT 1;
SELECT c.Model, MAX(c.Horsepower) AS max_horsepower FROM cars_data c WHERE c.Cylinders = 4 GROUP BY c.Model ORDER BY max_horsepower DESC LIMIT 1;
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders > 3;
SELECT c.MakeId, c.Make, m.Model FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId JOIN model_list m ON c.Model = m.Model WHERE cd.Horsepower < '100' AND cd.Cylinders < 4;
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT MAX(c.MPG) AS max_mpg FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Weight < 3500 AND cm.Maker not ilike '%Ford Motor Company%';
SELECT DISTINCT c.Model FROM car_names c JOIN cars_data d ON c.MakeId = d.Id JOIN model_list m ON c.Model = m.Model WHERE d.Weight < 3500 AND m.Maker!= 1;
SELECT c.CountryName FROM countries c WHERE NOT EXISTS (SELECT 1 FROM car_makers m WHERE m.Country = c.CountryId);
SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT cm.Country FROM car_makers cm);
SELECT m.Id, m.Maker FROM car_makers m GROUP BY m.Id, m.Maker HAVING COUNT(DISTINCT m.Model) >= 2;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN (SELECT ml.Maker FROM model_list ml GROUP BY ml.Maker HAVING COUNT(ml.Model) >= 2) AS m2 ON cm.Id = m2.Maker JOIN (SELECT c.Maker FROM cars_data c GROUP BY c.Id, c.Maker) AS m3 ON cm.Id = m3.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(m3.Id) > 3;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country WHERE (SELECT COUNT(m2.Id) FROM car_makers m2 WHERE m2.Country = c.CountryId) > 3 OR EXISTS (SELECT 1 FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model WHERE cn.Make = 'fiat' AND ml.Maker = m.Id) GROUP BY c.CountryId, c.CountryName;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE (SELECT COUNT(*) FROM car_makers cm2 WHERE cm2.Country = c.CountryId) > 3 OR EXISTS (SELECT 1 FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model WHERE cn.Make = 'Fiat' AND ml.Maker = cm.Id);
SELECT a.Country FROM airlines a WHERE a.Airline = 'JetBlue Airways';
SELECT a.Country FROM airlines a WHERE a.Abbreviation = 'JetBlue';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'JetBlue Airways';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(DISTINCT a.AirportCode) FROM airports a;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT a.city, a.country FROM airports a WHERE a.airportcode = 'ALO';
SELECT a.City, a.Country FROM airports a WHERE a.AirportCode = 'ALO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT COUNT(f.FlightNo) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(*) FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(f.FlightNo) FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE LOWER(a.City) = 'Aberdeen';
SELECT COUNT(f. FlightNo) AS total_flights FROM flights f WHERE f.SourceAirport = 'ABZ';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS num_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen' AND f.DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'Aberdeen' AND f.DestAirport = 'Ashley';
SELECT COUNT(f.Airline) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'JetBlue';
SELECT COUNT(*) AS number_of_flights FROM airlines a JOIN flights f ON a.uid = f.airline WHERE a.airline = 'JetBlue';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.UID WHERE a.Abbreviation = 'UAL' AND f.DestAirport = 'BWI';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports d ON f.DestAirport = d.AirportCode WHERE LOWER(a.Airline) = 'united airlines' AND LOWER(d.AirportCode) = 'asy';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(f. FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.UID WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UAL' AND d.City = 'Aberdeen';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports d ON f.DestAirport = d.AirportCode WHERE a.Abbreviation = 'UAL' AND d.City = 'Aberdeen';
SELECT a.AirportName, COUNT(f.FlightNo) AS total_arrivals FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.AirportName ORDER BY total_arrivals DESC LIMIT 1;
WITH DestinationCounts AS (SELECT f.DestAirport, COUNT(f.DestAirport) AS DestinationCount FROM flights f GROUP BY f.DestAirport) SELECT a.City, dc.DestinationCount FROM airports a JOIN DestinationCounts dc ON a.AirportCode = dc.DestAirport ORDER BY dc.DestinationCount DESC LIMIT 1;
SELECT a.City, COUNT(f.Airline) AS NumberOfFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT a.City, COUNT(f.SourceAirport) AS Frequency FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY Frequency DESC LIMIT 1;
WITH AirportFlightCounts AS (SELECT a.AirportCode, COUNT(f.Airline) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode) SELECT afc.AirportCode FROM AirportFlightCounts afc ORDER BY afc.flight_count DESC LIMIT 1;
WITH AirportFlights AS (SELECT a.AirportCode, COUNT(f.Airline) AS FlightCount FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode) SELECT af.AirportCode FROM AirportFlights af ORDER BY af.FlightCount DESC LIMIT 1;
SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f) AND a.AirportCode NOT IN (SELECT f.DestAirport FROM flights f) ORDER BY COUNT(f.SourceAirport) LIMIT 1;
SELECT a.AirportCode FROM airports a WHERE (SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = a.AirportCode) = (SELECT COUNT(*) FROM flights f ORDER BY COUNT(*) LIMIT 1);
SELECT a.Airline, COUNT(f.Airline) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY num_flights DESC NULLS LAST LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT a.Abbreviation, a.Country, COUNT(f.Airline) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY num_flights ASC LIMIT 1;
WITH FlightCounts AS (SELECT f.Airline, COUNT(*) AS num_flights FROM flights f GROUP BY f.Airline) SELECT a.Abbreviation, a.Country FROM FlightCounts fc JOIN airlines a ON fc.Airline = a.uid ORDER BY fc.num_flights ASC LIMIT 1;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.AirportCode = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT a.Airline, a.Abbreviation FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT a.Airline, a.Abbreviation FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.Airline) f2 ON a.uid = f2.Airline WHERE f2.flight_count >= 10;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(*) AS num_flights FROM flights f GROUP BY f.Airline) AS f2 ON a.uid = f2.Airline WHERE f2.num_flights >= 10;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.FlightNo) AS num_flights FROM flights f GROUP BY f.Airline) f2 ON a.uid = f2.Airline WHERE f2.num_flights < 200;
SELECT a.Airline, COUNT(f.Airline) AS flight_count FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline HAVING COUNT(f.Airline) < 200 ORDER BY flight_count DESC NULLS LAST;
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UAL';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE LOWER(a.AirportCode) = 'apg';
SELECT f.FlightNo FROM flights f WHERE f.SourceAirport = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION ALL SELECT f.DestAirport FROM flights f);
SELECT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION ALL SELECT f.DestAirport FROM flights f);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e.Name, e.Age FROM employee e ORDER BY e.Age ASC;
SELECT e.city, COUNT(*) AS number_of_employees FROM employee e GROUP BY e.city;
SELECT e.city, COUNT(e.employee_id) AS number_of_employees FROM employee e GROUP BY e.city ORDER BY number_of_employees DESC NULLS LAST;
SELECT e.city, COUNT(e.employee_id) AS count_employees FROM employee e JOIN hiring h ON e.employee_id = h.employee_id WHERE e.age < 30 GROUP BY e.city HAVING COUNT(e.employee_id) > 1 ORDER BY e.city NULLS LAST;
SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(e.Employee_ID) > 1;
SELECT s.location, COUNT(*) AS number_of_shops FROM shop s GROUP BY s.location ORDER BY number_of_shops DESC NULLS LAST;
SELECT s.Location, COUNT(*) AS number_of_shops FROM shop s GROUP BY s.Location;
SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop);
SELECT s.manager_name, s.district, s.number_products FROM shop s ORDER BY s.number_products DESC NULLS LAST LIMIT 1;
SELECT MIN(s.Number_products), MAX(s.Number_products) FROM shop s;
SELECT MIN(s.number_products), MAX(s.number_products) FROM shop s;
SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC NULLS LAST;
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2);
WITH EmployeeAwards AS (SELECT e.Name, COUNT(DISTINCT ea.Employee_ID) AS AwardCount FROM employee e JOIN evaluation ea ON e.Employee_ID = CAST(ea.Employee_ID AS INTEGER) GROUP BY e.Name) SELECT ea.Name FROM EmployeeAwards ea ORDER BY ea.AwardCount DESC LIMIT 1;
SELECT e.name FROM employee e JOIN (SELECT h.employee_id, COUNT(*) AS award_count FROM hiring h JOIN evaluation ev ON h.employee_id = ev.employee_id GROUP BY h.employee_id ORDER BY award_count DESC LIMIT 1) AS t ON e.employee_id = t.employee_id;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(ev2.Bonus) FROM evaluation ev2);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT DISTINCT e2.Employee_ID FROM evaluation e2);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT e2.Employee_ID FROM evaluation e2);
WITH Shop_Employee_Count AS (SELECT s.Name, COUNT(h.Employee_ID) AS EmployeeCount FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name) SELECT sec.Name FROM Shop_Employee_Count sec ORDER BY sec.EmployeeCount DESC NULLS LAST LIMIT 1;
SELECT s.name FROM shop s JOIN (SELECT h.shop_id FROM hiring h GROUP BY h.shop_id ORDER BY COUNT(h.employee_id) DESC LIMIT 1) AS m ON s.shop_id = m.shop_id;
SELECT s.Name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE h.Shop_ID = s.Shop_ID);
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL;
SELECT s.Name, COUNT(h.Employee_ID) AS number_of_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name, COUNT(h.Employee_ID) AS number_of_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY number_of_employees DESC NULLS LAST;
SELECT SUM(e.Bonus) AS total_bonus FROM evaluation e;
SELECT SUM(e.Bonus) AS total_bonus FROM evaluation e;
SELECT * FROM hiring;
SELECT e."Name", s."Name" AS shop_name, h."Start_from", h."Is_full_time" FROM "hiring" h JOIN "employee" e ON h."Employee_ID" = e."Employee_ID" JOIN "shop" s ON h."Shop_ID" = s."Shop_ID";
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 AND s.Number_products > 10000;
SELECT s.District FROM shop s WHERE s.Number_products < 3000 AND s.Number_products > 10000;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_ID, d.Document_Name FROM Documents d;
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT d.Template_ID) FROM Documents d;
SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'ppt';
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT t.Template_ID, COUNT(d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;
SELECT d.Document_ID, COUNT(d.Document_ID) AS frequency FROM Documents d GROUP BY d.Document_ID ORDER BY frequency DESC NULLS LAST;
SELECT t.Template_ID, COUNT(d.Document_ID) AS COUNT, rt.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_ID, rt.Template_Type_Description ORDER BY COUNT DESC NULLS LAST LIMIT 1;
WITH DocumentCounts AS (SELECT t.Template_ID, COUNT(d.Document_ID) AS NumDocuments FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID) SELECT d.Template_ID, t.Template_Type_Code FROM DocumentCounts d JOIN Templates t ON d.Template_ID = t.Template_ID ORDER BY d.NumDocuments DESC LIMIT 1;
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID IN (SELECT d.Template_ID FROM Documents d GROUP BY d.Template_ID HAVING COUNT(d.Template_ID) > 1);
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT t.Template_ID, t.Version_Number, tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t;
SELECT DISTINCT t.Template_Type_Code FROM Templates t;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates t WHERE t.Template_Type_Code = 'CV';
SELECT COUNT(t.Template_ID) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'cv';
SELECT t.Version_Number, tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS number_of_templates FROM Templates t GROUP BY t.Template_Type_Code ORDER BY number_of_templates DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t GROUP BY t.Template_Type_Code ORDER BY COUNT DESC NULLS LAST;
SELECT tt.Template_Type_Description, COUNT(t.Template_ID) AS NumberOfTemplates FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code GROUP BY tt.Template_Type_Description ORDER BY NumberOfTemplates DESC LIMIT 1;
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code ORDER BY COUNT(t.Template_ID) DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code, MIN(t.Version_Number) AS min_version FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT tt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS document_count FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY tt.Template_Type_Code ORDER BY document_count DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY document_count DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY number_of_documents DESC NULLS LAST LIMIT 1;
WITH TemplateTypeCounts AS (SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code) SELECT tt.Template_Type_Code FROM TemplateTypeCounts tt ORDER BY tt.Count DESC LIMIT 1;
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Code IS NULL;
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t);
SELECT rtt.Template_Type_Code, rtt.Template_Type_Description FROM Ref_Template_Types rtt ORDER BY rtt.Template_Type_Code NULLS LAST;
SELECT tt.Template_Type_Code, tt.Template_Type_Description FROM Ref_Template_Types tt;
SELECT rt.Template_Type_Description FROM Ref_Template_Types rt WHERE rt.Template_Type_Code = 'AD';
SELECT r.Template_Type_Description FROM Ref_Template_Types r WHERE r.Template_Type_Code = 'AD';
SELECT tt.Template_Type_Code FROM Ref_Template_Types tt WHERE tt.Template_Type_Description = 'Book';
SELECT t.Template_Type_Code FROM Ref_Template_Types t WHERE t.Template_Type_Description = 'Book';
SELECT DISTINCT tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code;
SELECT DISTINCT t.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'presentation';
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(p.Paragraph_ID) AS Total_Paragraphs FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.Paragraph_ID, p.Document_ID, p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text = 'Korea ';
SELECT p.Paragraph_Text FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY paragraph_count DESC NULLS LAST;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2) AS p2 ON d.Document_ID = p2.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2) AS p2 ON d.Document_ID = p2.Document_ID;
WITH Paragraph_Count AS (SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID) SELECT d.Document_ID, d.Document_Name, pc.Paragraph_Count FROM Paragraph_Count pc JOIN Documents d ON pc.Document_ID = d.Document_ID ORDER BY pc.Paragraph_Count DESC LIMIT 1;
WITH doc_paragraphs AS (SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID) SELECT d.Document_ID, d.Document_Name FROM doc_paragraphs dp JOIN Documents d ON dp.Document_ID = d.Document_ID ORDER BY dp.num_paragraphs DESC NULLS LAST LIMIT 1;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY num_paragraphs ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Paragraphs p GROUP BY p.Document_ID) AS p ON d.Document_ID = p.Document_ID ORDER BY p.Paragraph_Count ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_ID BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE (SELECT COUNT(p2.Paragraph_ID) FROM Paragraphs p2 WHERE p2.Document_ID = d.Document_ID) BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text = 'Brazil' AND p.Paragraph_Text = 'Ireland';
SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(DISTINCT t."Teacher_ID") FROM "teacher" t;
SELECT COUNT(*) FROM teacher;
SELECT t.name, t.age FROM teacher t ORDER BY CAST(t.age AS INTEGER) ASC;
SELECT t.Name, CAST(t.Age AS INTEGER) AS Age FROM teacher t ORDER BY Age ASC;
SELECT t."Age", t."Hometown" FROM "teacher" t;
SELECT t.age, t.hometown FROM teacher t;
SELECT t.Name FROM teacher t WHERE t.Hometown not like '%Little Lever Urban District%';
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.name FROM teacher t WHERE (t.age = '32' OR t.age = '33');
SELECT t.Name FROM teacher t WHERE CAST(t.Age AS int) IN (32, 33);
SELECT t.hometown FROM teacher t WHERE t.age = (SELECT MIN(t2.age) FROM teacher t2);
SELECT t.Hometown FROM teacher t ORDER BY t.Age ASC LIMIT 1;
SELECT t.Hometown, COUNT(t.Hometown) AS num_teachers FROM teacher t GROUP BY t.Hometown;
SELECT t.hometown, COUNT(t.teacher_id) AS number_of_teachers FROM teacher t GROUP BY t.hometown;
SELECT t.hometown, COUNT(t.hometown) AS count FROM teacher t GROUP BY t.hometown ORDER BY count DESC LIMIT 1;
SELECT t.Hometown, COUNT(t.Hometown) AS Count FROM teacher t GROUP BY t.Hometown ORDER BY Count DESC NULLS LAST LIMIT 1;
SELECT t1.hometown FROM teacher t1 JOIN course_arrange ca ON t1.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE t1.hometown IN (SELECT t2.hometown FROM teacher t2 JOIN course_arrange ca2 ON t2.teacher_id = ca2.teacher_id JOIN course c2 ON ca2.course_id = c2.course_id GROUP BY t2.hometown HAVING COUNT(DISTINCT c2.course_id) > 1) GROUP BY t1.hometown HAVING COUNT(DISTINCT c.course_id) > 1;
SELECT t.hometown FROM teacher t GROUP BY t.hometown HAVING COUNT(t.hometown) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IN (SELECT c.Course_ID FROM course c WHERE c."Course" = 'Math');
SELECT t.Name, COUNT(c.Course_ID) AS num_courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY num_courses DESC NULLS LAST;
SELECT t.Name, COUNT(c.Course_ID) AS course_count FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID GROUP BY t.Name ORDER BY course_count DESC NULLS LAST;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ta.Teacher_ID FROM course_arrange ta);
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT c.Teacher_ID FROM course_arrange c);
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC;
SELECT AVG(v.Age) AS average_age FROM visitor v WHERE v.Level_of_membership <= 4;
SELECT v.name, v.level_of_membership, v.age FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.age DESC;
SELECT m.Museum_ID, m.Name FROM museum m ORDER BY m.Num_of_Staff DESC LIMIT 1;
SELECT AVG(m."Num_of_Staff") AS average_staff FROM "museum" m WHERE m."Open_Year" < '2009';
SELECT m.Open_Year, m.Num_of_Staff FROM museum m WHERE m.Name = 'Plaza Museum';
SELECT m.name FROM museum m WHERE m.num_of_staff > (SELECT MIN(m2.num_of_staff) FROM museum m2 WHERE m2.open_year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1) AS m ON v.ID = m.visitor_ID;
SELECT v.ID, v.Name, v.Level_of_membership, SUM(v.Total_spent) AS total_spent FROM visit v GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY total_spent DESC LIMIT 1;
WITH visit_counts AS (SELECT v.Museum_ID, COUNT(*) AS visit_count FROM visit v GROUP BY v.Museum_ID) SELECT m.Museum_ID, m.Name, vc.visit_count FROM museum m JOIN visit_counts vc ON m.Museum_ID = vc.Museum_ID ORDER BY vc.visit_count DESC LIMIT 1;
SELECT m.Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT v.Museum_ID FROM visit v);
SELECT v.Name, v.Age, MAX(v.Visit_num) AS max_tickets FROM (SELECT t.visitor_ID, COUNT(t.Visitor_ID) AS Visit_num FROM visit t GROUP BY t.Visitor_ID) AS subquery JOIN visitor v ON subquery.visitor_ID = v.ID GROUP BY v.Name, v.Age ORDER BY max_tickets DESC LIMIT 1;
SELECT AVG(v.Num_of_Ticket) AS average_tickets, MAX(v.Num_of_Ticket) AS max_tickets FROM visit v;
SELECT SUM(v.Total_spent) AS total_ticket_expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;
SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = CAST(vi.visitor_ID AS int) JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND m.Open_Year > '2011';
SELECT COUNT(DISTINCT v."ID") FROM "visit" v JOIN "museum" m ON v."Museum_ID" = m."Museum_ID" WHERE m."Open_Year" > '2010';
SELECT COUNT(*) FROM museum m WHERE CAST(m.open_year AS integer) < 2008 OR CAST(m.open_year AS integer) > 2013;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT p."first_name", p."birth_date" FROM players p WHERE p."country_code" = 'USA';
SELECT p."first_name", p."birth_date" FROM players p WHERE p."country_code" = 'USA';
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(m.winner_rank) AS average_rank FROM matches m;
SELECT AVG(m.winner_rank) AS average_rank FROM matches m;
SELECT MAX(m.loser_rank) AS highest_rank_of_losers FROM matches m;
SELECT MAX(r.ranking) AS best_rank_of_losers FROM matches m JOIN players p ON m.loser_id = p.player_id JOIN rankings r ON p.player_id = r.player_id;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."year" IN (2013, 2016) GROUP BY p."first_name", p."last_name" HAVING COUNT(DISTINCT m."year") = 2;
SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."year" IN (2013, 2016) GROUP BY p."first_name", p."last_name" HAVING COUNT(DISTINCT m."year") = 2;
SELECT COUNT(*) AS total_matches FROM matches m WHERE m.year IN (2013, 2016);
SELECT COUNT(*) AS total_matches FROM matches m WHERE EXTRACT(YEAR FROM m.tourney_date) IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.first_name, p.country_code HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.last_name, p.birth_date FROM players p ORDER BY p.birth_date NULLS LAST;
SELECT p.first_name, p.last_name FROM players p ORDER BY p.birth_date;
SELECT p."first_name", p."last_name", p.birth_date FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date;
SELECT p."first_name" ||'' || p."last_name" AS full_name, p.birth_date FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date NULLS LAST;
WITH TourneyCount AS (SELECT p.player_id, COUNT(m.tourney_id) AS tourney_count FROM players p JOIN matches m ON p.player_id = m.loser_id OR p.player_id = m.winner_id GROUP BY p.player_id) SELECT t.player_id, p.first_name, p.country_code FROM TourneyCount t JOIN players p ON t.player_id = p.player_id ORDER BY t.tourney_count DESC NULLS LAST LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN (SELECT r.player_id, MAX(r.tours) AS max_tours FROM rankings r GROUP BY r.player_id) AS m ON p.player_id = m.player_id;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY number_of_matches DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY number_of_matches DESC NULLS LAST LIMIT 1;
WITH WinnerRankPoints AS (SELECT p."winner_name", SUM(m.winner_rank_points) AS total_rank_points, COUNT(*) AS num_wins FROM matches m JOIN players p ON m.winner_id = p."player_id" GROUP BY p."winner_name") SELECT wrp."winner_name", wrp.total_rank_points FROM WinnerRankPoints wrp ORDER BY wrp.total_rank_points DESC NULLS LAST LIMIT 1;
SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY p.first_name, p.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT p."first_name", p."last_name", r."ranking_points" FROM players p JOIN matches m ON p."player_id" = m."winner_id" JOIN rankings r ON p."player_id" = r."player_id" WHERE m."tourney_name" = 'Australian Open' AND r."ranking_points" = (SELECT MAX(r2."ranking_points") FROM rankings r2 WHERE r2."player_id" = p."player_id");
WITH WinnerRankPoints AS (SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE LOWER(m.tourney_name) = 'australian open' GROUP BY p.first_name, p.last_name) SELECT wr.first_name, wr.last_name FROM WinnerRankPoints wr ORDER BY wr.total_ranking_points DESC LIMIT 1;
SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
WITH winner_time AS (SELECT m.tourney_name, m.tourney_date, m.minutes, p.first_name AS winner_first_name, p.last_name AS winner_last_name, rank() OVER (ORDER BY m.minutes DESC) AS rank FROM matches m JOIN players p ON m.winner_id = p.player_id), loser_time AS (SELECT m.tourney_name, m.tourney_date, m.minutes, p.first_name AS loser_first_name, p.last_name AS loser_last_name, rank() OVER (ORDER BY m.minutes DESC) AS rank FROM matches m JOIN players p ON m.loser_id = p.player_id) SELECT wt.tourney_name, wt.tourney_date, wt.minutes, wt.winner_first_name, wt.winner_last_name, lt.loser_first_name, lt.loser_last_name FROM winner_time wt JOIN loser_time lt ON wt.rank = lt.rank WHERE wt.rank = 1;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY average_ranking NULLS LAST;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p."first_name", SUM(r."ranking_points") AS total_ranking_points FROM players p JOIN rankings r ON p."player_id" = r."player_id" GROUP BY p."first_name";
WITH ranked AS (SELECT p.player_id, p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name) SELECT r.first_name, r.total_ranking_points FROM ranked r ORDER BY r.total_ranking_points DESC;
SELECT p.country_code, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.country_code ORDER BY number_of_players DESC NULLS LAST;
SELECT p.country_code, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.country_code;
SELECT p.country_code, COUNT(p.player_id) AS player_count FROM players p GROUP BY p.country_code ORDER BY player_count DESC LIMIT 1;
SELECT p.country_code, COUNT(p.player_id) AS num_players FROM players p GROUP BY p.country_code ORDER BY num_players DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY player_count DESC NULLS LAST;
SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date ORDER BY r.ranking_date NULLS LAST;
SELECT r."ranking_date", SUM(r.tours) AS total_tours FROM rankings r GROUP BY r."ranking_date";
SELECT EXTRACT(YEAR FROM m.tourney_date) AS year, COUNT(*) AS number_of_matches FROM matches m GROUP BY year ORDER BY year NULLS LAST;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS year, COUNT(*) AS num_matches FROM matches m GROUP BY year ORDER BY year NULLS LAST;
SELECT p."first_name", p."last_name", m.winner_rank FROM players p JOIN matches m ON p."player_id" = m.winner_id ORDER BY p."birth_date" ASC NULLS LAST LIMIT 3;
SELECT p."winner_name", p."winner_rank" FROM matches m JOIN players p ON m."winner_id" = p."player_id" WHERE m."winner_age" <= 20 ORDER BY m."winner_age" ASC NULLS LAST LIMIT 3;
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p."player_id" WHERE p."hand" = 'L' AND m.tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1;
WITH player_ranking_points AS (SELECT p.player_id, SUM(m.winner_rank_points) AS total_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id) SELECT pr.player_id, pr.total_rank_points FROM player_ranking_points pr ORDER BY pr.total_rank_points DESC LIMIT 1; SELECT p."first_name", p.country_code, p.birth_date FROM players p WHERE p.player_id = (SELECT pr.player_id FROM player_ranking_points pr ORDER BY pr.total_rank_points DESC LIMIT 1);
SELECT p.hand, COUNT(*) AS number_of_players FROM players p GROUP BY p.hand ORDER BY number_of_players DESC NULLS LAST;
SELECT p.hand, COUNT(*) AS number_of_players FROM players p GROUP BY p.hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT s.name, s.tonnage FROM ship s ORDER BY s.name DESC;
SELECT b.name, b.date, b.result FROM battle b;
SELECT MAX(d.killed) AS max_killed, MIN(d.killed) AS min_killed FROM death d;
SELECT AVG(d.injured) AS average_injuries FROM death d;
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT b.name, b.result FROM battle b WHERE b.bulgarian_commander!= 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name, SUM(d.injured) AS total_injuries FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY s.id, s.name ORDER BY total_injuries DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage = '225' AND s.id IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location!= 'English Channel' AND b.bulgarian_commander IS NOT NULL;
SELECT d.note FROM death d WHERE d.note ilike '%East%';
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a ORDER BY a.address_id LIMIT 1, 2;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT c.course_description FROM Courses c WHERE c.course_name = 'Math';
SELECT c.course_description FROM Courses c JOIN Sections s ON c.course_id = s.course_id WHERE LOWER(s.section_name) LIKE '%math%';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
WITH DegreeCounts AS (SELECT d.department_id, COUNT(dp.degree_program_id) AS degree_count FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_id) SELECT dc.department_id, dc.department_name FROM DegreeCounts dc ORDER BY dc.degree_count DESC LIMIT 1;
SELECT d.department_name, COUNT(dp.degree_program_id) AS number_of_degrees FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name ORDER BY number_of_degrees DESC LIMIT 1;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT dp.degree_summary_name) FROM Degree_Programs dp;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.degree_program_id) FROM Degree_Programs d JOIN Departments dp ON d.department_id = dp.department_id WHERE LOWER(dp.department_name) = 'engineering';
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d JOIN Departments de ON d.department_id = de.department_id WHERE de.department_name = 'Engineering';
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.section_description FROM Sections s;
SELECT c.course_name, COUNT(s.section_id) AS section_count FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_name HAVING COUNT(s.section_id) <= 2 ORDER BY c.course_name NULLS LAST;
SELECT c.course_name, COUNT(s.section_id) AS section_count FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_name HAVING COUNT(s.section_id) < 2 ORDER BY c.course_name NULLS LAST;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.semester_name, COUNT(se.student_id) AS total_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name ORDER BY total_students DESC LIMIT 1;
SELECT s.semester_id, s.semester_name, COUNT(se.student_id) AS student_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY student_count DESC LIMIT 1;
SELECT d.department_description FROM Departments d WHERE d.department_name ilike '%the computer%';
SELECT d.department_description FROM Departments d WHERE d.department_name ilike '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id, se.semester_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, se.degree_program_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS number_of_degree_programs FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(se.degree_program_id) >= 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name ilike '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE LOWER(dp.degree_summary_name) = 'bachelors';
SELECT d.department_name, COUNT(se.student_id) AS number_of_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name ORDER BY number_of_students DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_id) AS number_of_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY number_of_students DESC NULLS LAST LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_enrolment_id) AS number_of_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY number_of_students DESC LIMIT 1;
SELECT d.degree_program_id, d.degree_summary_name, COUNT(se.student_enrolment_id) AS number_of_students FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_program_id, d.degree_summary_name ORDER BY number_of_students DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrolments, row_number() OVER (ORDER BY COUNT(se.student_enrolment_id) DESC) AS rank FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrolments DESC NULLS LAST LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS total_enrolments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY total_enrolments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL;
SELECT s.semester_name FROM Semesters s WHERE s.semester_name NOT IN (SELECT se.semester_id FROM Student_Enrolment se);
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name HAVING COUNT(DISTINCT sec.student_enrolment_id) > 0;
WITH TotalEnrollments AS (SELECT c.course_name, COUNT(se.student_enrolment_id) AS total_enrolments FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name) SELECT course_name FROM TotalEnrollments ORDER BY total_enrolments DESC NULLS LAST LIMIT 1;
WITH StudentEnrolmentCounts AS (SELECT se.course_id, COUNT(DISTINCT se.student_id) AS student_count FROM Student_Enrolment se GROUP BY se.course_id) SELECT c.course_name, sec.student_count FROM StudentEnrolmentCounts sec JOIN Courses c ON sec.course_id = c.course_id ORDER BY sec.student_count DESC LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT s.last_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2 ORDER BY t.transcript_id NULLS LAST;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT s.cell_mobile_number FROM Students s WHERE LOWER(s.first_name) = 'timmothy' AND LOWER(s.last_name) = 'ward';
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_left IS NULL ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_first_registered = (SELECT MIN(s2.date_first_registered) FROM Students s2);
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2, COUNT(s.student_id) AS number_of_students FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY number_of_students DESC LIMIT 1;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(t.transcript_date) AS earliest_transcript_date FROM Transcripts t;
SELECT COUNT(t.transcript_id) FROM Transcripts t;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(t.transcript_date) AS last_transcript_release_date FROM Transcripts t;
SELECT MAX(t.transcript_date) AS latest_transcript_date FROM Transcripts t;
WITH CourseEnrollmentCounts AS (SELECT se.student_enrolment_id, COUNT(DISTINCT tc.transcript_id) AS num_transcripts FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY se.student_enrolment_id) SELECT cec.student_enrolment_id, cec.num_transcripts FROM CourseEnrollmentCounts cec WHERE cec.num_transcripts = (SELECT MAX(num_transcripts) FROM CourseEnrollmentCounts);
WITH CourseTranscriptCounts AS (SELECT se.course_id, COUNT(tc.transcript_id) AS total_transcripts FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_id = sec.student_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY se.course_id) SELECT MAX(total_transcripts) AS max_transcripts, c.course_id FROM CourseTranscriptCounts c GROUP BY c.course_id ORDER BY max_transcripts DESC LIMIT 1;
SELECT t.transcript_id, MIN(t.transcript_date) AS min_transcript_date FROM Transcripts t GROUP BY t.transcript_id ORDER BY min_transcript_date ASC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN (SELECT tc.transcript_id, COUNT(*) AS count FROM Transcript_Contents tc GROUP BY tc.transcript_id) AS subquery ON t.transcript_id = subquery.transcript_id ORDER BY subquery.count ASC LIMIT 1;
SELECT s.semester_name FROM Student_Enrolment se JOIN Students s ON se.student_id = s.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_name HAVING COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Master' THEN se.student_id END) > 0 AND COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Bachelor' THEN se.student_id END) > 0;
WITH m AS (SELECT se.student_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Masters'), b AS (SELECT se.student_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Bachelors') SELECT s.semester_id FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id WHERE se.student_id IN (SELECT student_id FROM m INTERSECT SELECT student_id FROM b);
SELECT COUNT(DISTINCT s.current_address_id) FROM Students s;
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id UNION SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.last_name DESC, s.middle_name DESC, s.first_name DESC;
SELECT s.other_student_details FROM Students s ORDER BY s.other_student_details DESC;
SELECT s.section_name, s.section_description, s.other_details FROM Sections s;
SELECT s.section_description FROM Sections s WHERE s.section_name = 'h';
SELECT s.first_name FROM Students s WHERE s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti') OR s.cell_mobile_number = '09700166582';
SELECT DISTINCT s.first_name FROM Students s WHERE s.middle_name IS NOT NULL AND (s.cell_mobile_number = '09700166582' OR s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti'));
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones';
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%';
SELECT COUNT(*) FROM Cartoon c WHERE c.Directed_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon c WHERE c.Written_by ilike '%Joseph Kuhr%';
SELECT c.title, c.directed_by, c.original_air_date FROM Cartoon c ORDER BY c.original_air_date NULLS LAST;
SELECT c.title, c.directed_by FROM cartoon c ORDER BY c.original_air_date NULLS LAST;
SELECT c.title FROM Cartoon c WHERE c.Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT c.title FROM Cartoon c WHERE c.Directed_by ilike '%Ben Jones%' OR c.Directed_by ilike '%Brandon Vietti%';
SELECT c."Country", COUNT(*) AS number_of_channels FROM "TV_Channel" c GROUP BY c."Country" ORDER BY number_of_channels DESC NULLS LAST LIMIT 1;
SELECT t."Country", COUNT(t."id") AS number_of_channels FROM "TV_Channel" t GROUP BY t."Country" ORDER BY number_of_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT s.series_name) AS number_of_series, COUNT(DISTINCT s.content) AS number_of_content FROM TV_Channel s;
SELECT COUNT(DISTINCT series_name) AS unique_series, COUNT(DISTINCT Content) AS unique_contents FROM TV_Channel;
SELECT t.content FROM TV_Channel t WHERE t.series_name = 'Sky Radio';
SELECT c.Content FROM TV_Channel c WHERE c.id = '700';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT t.Package_Option FROM TV_Channel t WHERE t.series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT t.Language, COUNT(t.id) AS channel_count FROM TV_Channel t GROUP BY t.Language ORDER BY channel_count ASC LIMIT 1;
SELECT Language, COUNT(*) AS COUNT FROM TV_Channel GROUP BY Language ORDER BY COUNT ASC LIMIT 1;
SELECT t.Language, COUNT(t.id) AS number_of_channels FROM TV_Channel t GROUP BY t.Language;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;
SELECT c."series_name" FROM "TV_Channel" c JOIN "Cartoon" ca ON c."id" = ca."Channel" WHERE ca."Title" = 'The Rise of the Blue Beetle!';
SELECT c."series_name" FROM "TV_Channel" c JOIN "Cartoon" ca ON c."id" = ca."Channel" WHERE ca."Title" = 'The Rise of the Blue Beetle';
SELECT c.title FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.channel WHERE tc.series_name = 'Sky Radio';
SELECT c.title FROM Cartoon c JOIN TV_Channel t ON c.channel = t.id WHERE t.series_name = 'Sky Radio';
SELECT ts."Episode", ts."Rating" FROM "TV_series" ts ORDER BY ts."Rating" DESC NULLS LAST;
SELECT t.id AS episode_id, t.episode, s.rating FROM TV_series s JOIN TV_Channel t ON s.channel = t.id ORDER BY s.rating DESC NULLS LAST;
SELECT ts.Episode, ts.Rating FROM TV_series ts ORDER BY ts.Rating DESC NULLS LAST LIMIT 3;
SELECT s.Channel, s.Rating FROM TV_Series s ORDER BY s.Rating DESC LIMIT 3;
SELECT MIN(s.Share), MAX(s.Share) FROM TV_series s;
SELECT MAX(s.Share), MIN(s.Share) FROM TV_series s;
SELECT ts.Air_Date FROM TV_series ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT t.air_date FROM tv_series t WHERE t.episode = 'A Love of a Lifetime';
SELECT ts.Weekly_Rank FROM TV_series ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT ts.Weekly_Rank FROM TV_series ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT t.series_name FROM TV_series ts JOIN TV_Channel t ON ts.channel = t.id WHERE ts.episode = 'A Love of a Lifetime';
SELECT s."series_name" FROM "TV_Channel" t JOIN "TV_series" s ON t."id" = s."Channel" WHERE s."Episode" ilike '%A Love of a Lifetime%';
SELECT s."Episode" FROM "TV_series" s JOIN "TV_Channel" c ON s."Channel" = c."id" WHERE c."series_name" = 'Sky Radio';
SELECT s.episode FROM TV_series s JOIN TV_Channel c ON s.channel = c.id WHERE c.series_name = 'Sky Radio';
SELECT d."Directed_by", COUNT(*) AS number_of_cartoons FROM "Cartoon" c JOIN TV_Channel t ON c.Channel = t.id WHERE c."Directed_by" IN ('Matt Groening', 'Chris Savino', 'Genndy Tartakovsky') GROUP BY d."Directed_by" ORDER BY number_of_cartoons DESC NULLS LAST;
SELECT c.Directed_by, COUNT(*) AS number_of_cartoons FROM Cartoon c GROUP BY c.Directed_by;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT c."Production_code", c."Channel" FROM "Cartoon" c ORDER BY c."Original_air_date" DESC LIMIT 1;
SELECT t."Package_Option", t."series_name" FROM TV_Channel t WHERE t."Hight_definition_TV" = 'yes';
SELECT t.Package_Option, t.series_name FROM TV_Channel t WHERE t.Hight_definition_TV = 'yes';
SELECT DISTINCT c."Country" FROM "TV_Channel" c JOIN Cartoon t ON c."id" = t."Channel" WHERE t."Written_by" ilike '%Todd Casey%';
SELECT DISTINCT t."Country" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Written_by" = 'Todd Casey';
SELECT c.Country FROM TV_Channel c WHERE c.id NOT IN (SELECT c.id FROM Cartoon c WHERE c.Channel IN (SELECT c.id FROM Cartoon c WHERE c.Written_by ilike '%Todd%Casey%'));
SELECT DISTINCT c.Country FROM TV_Channel c JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Written_by not ilike '%Todd Casey%';
SELECT t."series_name", t."Country" FROM "TV_Channel" t JOIN "Cartoon" c ON t."id" = c."Channel" WHERE c."Directed_by" ilike '%Ben Jones%' AND c."Directed_by" ilike '%Michael Chang%';
SELECT t.series_name, t.country FROM TV_Channel t JOIN Cartoon c ON t.id = c.channel WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Michael Chang%';
SELECT t.Pixel_aspect_ratio_PAR, t.Country FROM TV_Channel t WHERE t.Language!= 'English';
SELECT t.pixel_aspect_ratio_par, t.country FROM TV_Channel t WHERE t.language!= 'English';
SELECT c.id FROM TV_Channel c GROUP BY c.id HAVING COUNT(c.id) > 2;
SELECT t.id FROM TV_Channel t GROUP BY t.id HAVING COUNT(t.id) > 2;
SELECT t.id FROM TV_Channel t WHERE t.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by = 'Ben Jones');
SELECT c.id FROM TV_Channel c WHERE c.id NOT IN (SELECT c2.Channel FROM Cartoon c2 WHERE c2.Directed_by = 'Ben Jones');
SELECT tv_channel.package_option FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by not ilike '%Ben Jones%';
SELECT tv_channel.package_option FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by not ilike '%Ben Jones%';
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT p."Poker_Player_ID", p."Earnings" FROM "poker_player" p ORDER BY p."Earnings" DESC;
SELECT pp.Earnings FROM poker_player pp ORDER BY pp.Earnings DESC;
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p;
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p;
SELECT AVG(p.Earnings) AS average_earnings FROM poker_player p;
SELECT AVG(p.Earnings) FROM poker_player p;
SELECT p."Money_Rank" FROM "poker_player" p ORDER BY p."Earnings" DESC LIMIT 1;
SELECT pp."Money_Rank" FROM "poker_player" pp WHERE pp."Earnings" = (SELECT MAX(pp2."Earnings") FROM "poker_player" pp2);
SELECT MAX(p."Final_Table_Made") AS max_final_tables FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT MAX(p."Final_Table_Made") FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT p."Name" FROM "people" p JOIN "poker_player" pp ON p."People_ID" = pp."People_ID";
SELECT p.Name FROM poker_player pp JOIN people p ON pp."People_ID" = p."People_ID";
SELECT p.Name FROM poker_player pp JOIN people p ON pp."People_ID" = p."People_ID" WHERE pp.Earnings > 300000;
SELECT pp."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" > 300000;
SELECT p.Name, p.Poker_Player_ID, p."Final_Table_Made" FROM poker_player p JOIN people p2 ON p."People_ID" = p2."People_ID" ORDER BY p."Final_Table_Made" ASC;
SELECT p."Name", COUNT(pp."Poker_Player_ID") AS num_final_tables FROM "people" p JOIN poker_player pp ON p."People_ID" = pp."People_ID" GROUP BY p."Name" ORDER BY num_final_tables ASC;
SELECT p.Name, p."Birth_Date" FROM poker_player pp JOIN people p ON pp."People_ID" = p."People_ID" WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.birth_date FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings = (SELECT MIN(earnings) FROM poker_player);
SELECT pp."Money_Rank" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE p."Height" = (SELECT MAX(p2."Height") FROM "people" p2);
SELECT pp."Money_Rank" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY p."Height" DESC LIMIT 1;
SELECT AVG(p.Earnings) FROM poker_player p JOIN people pp ON p.People_ID = pp.People_ID WHERE pp.Height > 200;
SELECT AVG(p.Earnings) AS average_earnings FROM poker_player p JOIN people h ON p.People_ID = h.People_ID WHERE h.Height > 200;
SELECT p."Name", p."Height", pp."Earnings" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" DESC;
SELECT p.name, p.height, pp.earnings FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.earnings DESC NULLS LAST;
SELECT p."Nationality", COUNT(p."People_ID") AS count FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" GROUP BY p."Nationality" ORDER BY p."Nationality";
SELECT p.Nationality, COUNT(*) AS Count FROM people p GROUP BY p.Nationality ORDER BY p.Nationality NULLS LAST;
SELECT p.Nationality, COUNT(*) AS count FROM people p GROUP BY p.Nationality ORDER BY count DESC LIMIT 1;
SELECT p.Nationality, COUNT(*) AS count FROM people p GROUP BY p.Nationality ORDER BY count DESC LIMIT 1;
SELECT p1."Nationality" FROM "people" p1 JOIN "people" p2 ON p1."Nationality" = p2."Nationality" GROUP BY p1."Nationality" HAVING COUNT(DISTINCT p1."People_ID") > 1;
SELECT p.Nationality, COUNT(DISTINCT p."People_ID") AS number_of_people FROM "people" p GROUP BY p.Nationality HAVING COUNT(DISTINCT p."People_ID") >= 2 ORDER BY number_of_people DESC NULLS LAST;
SELECT p.Name, p."Birth_Date" FROM people p ORDER BY p.Name ASC;
SELECT p.Name, p."Birth_Date" FROM people p ORDER BY p.Name ASC;
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russia';
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russian';
SELECT p.Name FROM people p WHERE p."People_ID" NOT IN (SELECT pp."People_ID" FROM poker_player pp);
SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT pp.People_ID FROM poker_player pp);
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT p."Nationality") FROM "people" p;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC;
SELECT v.vote_id, v.phone_number, v.state FROM VOTES v;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(v.created) AS last_vote_date FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state WHERE a.state = 'CA';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name not ilike '%Jessie Alloway%';
SELECT v.state, COUNT(DISTINCT v.vote_id) AS number_of_votes, COUNT(DISTINCT v.created) AS distinct_votes_created FROM VOTES v GROUP BY v.state;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN (SELECT v.contestant_number, COUNT(v.vote_id) AS vote_count FROM VOTES v GROUP BY v.contestant_number HAVING COUNT(v.vote_id) >= 2) AS v2 ON c.contestant_number = v2.contestant_number;
WITH vote_counts AS (SELECT v.contestant_number, COUNT(v.vote_id) AS vote_count FROM VOTES v GROUP BY v.contestant_number) SELECT c.contestant_number, c.contestant_name, vc.vote_count FROM CONTESTANTS c JOIN vote_counts vc ON c.contestant_number = vc.contestant_number ORDER BY vc.vote_count ASC NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state WHERE a.state IN ('NY', 'CA');
SELECT COUNT(DISTINCT c.contestant_number) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
SELECT v.state, COUNT(v.vote_id) AS vote_count FROM VOTES v GROUP BY v.state ORDER BY vote_count DESC LIMIT 1;
SELECT v.created, acs.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE acs ON v.state = acs.state WHERE c.contestant_name ilike '%Tabatha Gehling%';
SELECT v.state FROM VOTES v JOIN CONTESTANTS c1 ON v.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss' GROUP BY v.state;
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name ilike '%Al%';
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm LIKE '%republic%';
SELECT COUNT(*) FROM country c WHERE c.GovernmentForm ilike '%republic%';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT c.Continent FROM country c WHERE c.Code = 'ATG';
SELECT c.Continent FROM country c WHERE c.Code = 'ATG';
SELECT c.District FROM city c WHERE c.Name = 'Kabul';
SELECT c.Region FROM city c WHERE c.Name = 'Kabul';
SELECT l.Language FROM countrylanguage l WHERE l.CountryCode = (SELECT c.Code FROM country c WHERE c.Name = 'Aruba') ORDER BY l.Percentage DESC LIMIT 1;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'Aruba' AND cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC NULLS LAST LIMIT 1;
SELECT c.population, c.life_expectancy FROM country c WHERE c.name = 'Brazil';
SELECT c.population, c.life_expectancy FROM country c WHERE c.name = 'Brazil';
SELECT c.Region, SUM(c.Population) AS total_population FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Code = 'AGO' GROUP BY c.Region;
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Region = 'Central Africa';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC NULLS LAST LIMIT 1;
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC NULLS LAST LIMIT 1;
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia';
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM city c JOIN country co ON c.CountryCode = co.Code WHERE LOWER(co.Continent) = 'asia';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm LIKE '%Republic%';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.GovernmentForm ilike '%republic%' AND c.Continent = 'Africa';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.Population) FROM city c WHERE c.District = 'Gelderland';
SELECT SUM(c.Population) AS total_population FROM city c JOIN country co ON c.CountryCode = co.Code WHERE LOWER(co.Name) = 'netherlands' AND LOWER(c.District) = 'gelderland';
SELECT AVG(c.GNP), SUM(c.Population) FROM country c WHERE c.GovernmentForm LIKE '%US territory%';
SELECT AVG(c.GNP) AS average_gnp, SUM(c.Population) AS total_population FROM country c WHERE c.Code = 'USA';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT cl.Language) AS total_languages FROM countrylanguage cl;
SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Africa';
SELECT COUNT(DISTINCT g.GovernmentForm) AS number_of_government_forms FROM country c JOIN city ci ON c.Code = ci.CountryCode JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia';
SELECT SUM(cl.Percentage) AS total_percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code = 'ABW';
SELECT COUNT(cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code = 'ABW';
SELECT COUNT(*) AS num_of_languages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE LOWER(c.Name) = 'afghanistan' AND LOWER(cl.IsOfficial) = 't';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl GROUP BY cl.CountryCode ORDER BY COUNT(cl.Language) DESC LIMIT 1);
WITH LanguageDiversity AS (SELECT c.Continent, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent) SELECT ld.Continent FROM LanguageDiversity ld ORDER BY ld.NumLanguages DESC LIMIT 1;
SELECT c.Continent, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) IN ('english', 'dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' AND (SELECT COUNT(*) FROM countrylanguage cl2 WHERE cl2.CountryCode = c.Code AND cl2.Language = 'French' AND cl2.IsOfficial = 'T') > 0;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE LOWER(cl.Language) = 'chinese';
SELECT COUNT(DISTINCT c.Continent) AS NumberOfContinents FROM country c WHERE c.Name LIKE '%China%';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c WHERE c.Name IN ('Netherlands', 'United Kingdom');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT cl.Language, SUM(cl.Percentage) AS total_percentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY total_percentage DESC LIMIT 1;
WITH LanguagePopularity AS (SELECT c.Code, c.Name, SUM(cl.Percentage) AS TotalPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Code, c.Name) SELECT l.Language FROM LanguagePopularity l ORDER BY l.TotalPercentage DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm ='republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm ='republic' GROUP BY c.Name, cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code WHERE cl.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T') ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.SurfaceArea, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT SUM(c.population) AS total_population FROM city c JOIN country l ON c.countrycode = l.code WHERE l.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT SUM(c.Population) AS total_population FROM city c JOIN country cl ON c.CountryCode = cl.Code WHERE cl.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English');
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930;
SELECT SUM(CASE WHEN cl.IsOfficial = 'T' THEN 1 ELSE 0 END) AS total_official_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930;
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c JOIN city s ON c.Code = s.CountryCode WHERE c.Continent = 'Asia' AND s.Population > (SELECT MIN(s2.Population) FROM city s2 JOIN country c2 ON s2.CountryCode = c2.Code WHERE c2.Continent = 'Africa');
SELECT c.Name AS country_name, c.Population AS population FROM country c JOIN city s ON c.Code = s.CountryCode WHERE c.Continent = 'Asia' ORDER BY c.Population DESC, s.Population ASC;
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(p.Population) FROM country p WHERE p.Continent = 'Africa');
SELECT c.Name, c.Population FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(p.Population) FROM country p JOIN city pc ON p.Code = pc.CountryCode WHERE p.Continent = 'Africa');
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English';
SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language)!= 'english';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Code FROM country c WHERE c.GovernmentForm!= 'Republic' AND c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English');
SELECT c.Name, c.CountryCode FROM city c JOIN country l ON c.CountryCode = l.Code JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language!= 'English' AND l.Continent = 'Europe';
SELECT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl1 ON cl.Code = cl1.CountryCode WHERE cl.Continent = 'Europe' AND cl1.Language!= 'English';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code cl JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese' AND LOWER(co.Continent) = 'asia';
SELECT DISTINCT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl2 ON cl.Code = cl2.CountryCode WHERE LOWER(cl2.Language) = 'chinese' AND LOWER(cl.Continent) = 'asia';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3 ORDER BY c.Name;
WITH country_languages AS (SELECT c.Code, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code) SELECT c.Name, cl.num_languages FROM country c JOIN country_languages cl ON c.Code = cl.Code WHERE cl.num_languages > 2 ORDER BY c.Name NULLS LAST;
SELECT c.District, COUNT(c.ID) AS city_count FROM city c WHERE c.Population > (SELECT AVG(c2.Population) FROM city c2) GROUP BY c.District ORDER BY city_count DESC NULLS LAST;
SELECT c.District, COUNT(*) AS city_count FROM city c GROUP BY c.District HAVING SUM(c.Population) > (SELECT AVG(c2.Population) FROM city c2);
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT g.GovernmentForm, SUM(c.Population) AS total_population FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode JOIN (SELECT GovernmentForm, AVG(LifeExpectancy) AS avg_life_expectancy FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) g ON co.GovernmentForm = g.GovernmentForm GROUP BY g.GovernmentForm;
SELECT c.Continent, AVG(c.LifeExpectancy) AS average_life_expectancy, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.Continent, SUM(c.Population) AS total_population, AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT c.Name FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT COUNT(*) FROM country c WHERE c.Continent = 'Asia';
SELECT COUNT(*) AS number_of_countries FROM country c WHERE LOWER(c.Continent) = 'asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population >= 80000;
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT SUM(c.population) AS total_population, AVG(c.surface_area) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surface_area > 3000;
SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_surface_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT cl.Language, COUNT(cl.CountryCode) AS num_of_countries FROM countrylanguage cl GROUP BY cl.Language ORDER BY num_of_countries DESC LIMIT 1;
SELECT c.Language, COUNT(c.Language) AS NumberOfCountries FROM countrylanguage c GROUP BY c.Language ORDER BY NumberOfCountries DESC LIMIT 1;
WITH cl AS (SELECT c.Name, c.Code, cl.Language, cl.Percentage, RANK() OVER (PARTITION BY c.Code ORDER BY cl.Percentage DESC) AS percentage_rank FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode) SELECT cl.Name, cl.Language, cl.Percentage FROM cl WHERE cl.percentage_rank = 1;
SELECT c.Code, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode ORDER BY cl.Percentage DESC;
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT COUNT(DISTINCT c.Code) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC NULLS LAST LIMIT 1;
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT c.Name FROM conductor c ORDER BY c.Age ASC;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age DESC;
SELECT c."Name" FROM conductor c WHERE c."Nationality"!= 'USA';
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT AVG(s.Attendance) AS average_attendance FROM show s;
SELECT AVG(s.Attendance) AS average_attendance FROM show s;
SELECT MAX(CAST(p."Share" AS FLOAT) AS max_share, MIN(CAST(p."Share" AS FLOAT)) AS min_share FROM performance p WHERE p."Type"!= 'Live final';
SELECT MAX(CAST(s."Share" AS real) AS max_share, MIN(CAST(s."Share" AS real)) AS min_share FROM performance p JOIN show s ON p."Performance_ID" = s."Performance_ID" WHERE p."Type" not ilike '%Live final%';
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT c.Name, c.Year_of_Work FROM conductor c ORDER BY c.Year_of_Work DESC;
SELECT c.Name, COUNT(o. Orchestra_ID) AS Years_of_Work FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY Years_of_Work DESC NULLS LAST;
SELECT c.Name, MAX(c.Year_of_Work) AS max_year_of_work FROM conductor c GROUP BY c.Name ORDER BY max_year_of_work DESC LIMIT 1;
SELECT c.Name, MAX(c.Year_of_Work) AS years_of_work FROM conductor c GROUP BY c.Name ORDER BY years_of_work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name AS conductor_name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY number_of_orchestras DESC LIMIT 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY number_of_orchestras DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT o.Record_Company, COUNT(o.Orchestra_ID) AS num_orchestras FROM orchestra o GROUP BY o.Record_Company ORDER BY num_orchestras DESC NULLS LAST;
SELECT o.Record_Company, COUNT(*) AS number_of_orchestras FROM orchestra o GROUP BY o.Record_Company ORDER BY number_of_orchestras DESC NULLS LAST;
SELECT o.Major_Record_Format, COUNT(o.Major_Record_Format) AS COUNT FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY COUNT ASC;
SELECT mrf.Major_Record_Format, COUNT(*) AS Frequency FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID JOIN (SELECT DISTINCT Major_Record_Format FROM orchestra) mrf ON o.Major_Record_Format = mrf.Major_Record_Format GROUP BY mrf.Major_Record_Format ORDER BY Frequency DESC NULLS LAST;
SELECT r.record_company, COUNT(o.orchestra_id) AS number_of_orchestras FROM orchestra o JOIN conductor c ON o.conductor_id = c.conductor_id JOIN performance p ON o.orchestra_id = p.orchestra_id JOIN show s ON p.performance_id = s.performance_id JOIN record_company r ON p.record_company = r.record_company GROUP BY r.record_company ORDER BY number_of_orchestras DESC LIMIT 1;
SELECT oc.Record_Company, COUNT(*) AS number_of_orchestras FROM orchestra oc GROUP BY oc.Record_Company ORDER BY number_of_orchestras DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;
SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.orchestra_id IS NULL;
SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 AND o.Year_of_Founded >= 0 INTERSECT SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded > 2003;
SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 AND o.Record_Company IN (SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded > 2003);
SELECT COUNT(*) FROM orchestra o WHERE o.major_record_format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra o WHERE o.major_record_format ilike '%CD%' OR o.major_record_format ilike '%DVD%';
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded NULLS LAST;
SELECT o."Year_of_Founded" FROM "orchestra" o JOIN performance p ON o."Orchestra_ID" = p."Orchestra_ID" GROUP BY o."Year_of_Founded" HAVING COUNT(p."Performance_ID") > 1 ORDER BY o."Year_of_Founded";
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT h.name, h.grade FROM Highschooler h;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name;
SELECT h.grade FROM Highschooler h;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name;
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT h.grade, COUNT(h.id) AS total_students FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(*) FROM Highschooler h GROUP BY h.grade;
SELECT h.grade, COUNT(h.id) AS total_students FROM Highschooler h GROUP BY h.grade ORDER BY total_students DESC LIMIT 1;
SELECT h.grade, COUNT(*) AS student_count FROM Highschooler h GROUP BY h.grade ORDER BY student_count DESC LIMIT 1;
SELECT h.grade, COUNT(*) AS number_of_students FROM Highschooler h GROUP BY h.grade HAVING COUNT(*) >= 4 ORDER BY h.grade NULLS LAST;
SELECT DISTINCT h.grade FROM Highschooler h GROUP BY h.grade HAVING COUNT(h.ID) >= 4 ORDER BY h.grade NULLS LAST;
SELECT h.id, COUNT(f.student_id) AS number_of_friends FROM Highschooler h LEFT JOIN Friend f ON h.id = f.student_id GROUP BY h.id;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY num_friends DESC NULLS LAST;
SELECT h.name, (SELECT COUNT(f.student_id) FROM Friend f WHERE f.student_id = h.ID) AS num_friends FROM Highschooler h;
WITH friend_counts AS (SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name) SELECT name FROM friend_counts ORDER BY num_friends DESC LIMIT 1;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY num_friends DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.student_id) >= 3) AS f ON h.ID = f.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 3) AS f ON h.ID = f.student_id;
SELECT f.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';
SELECT COUNT(DISTINCT f.friend_id) AS number_of_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT COUNT(*) AS friend_count FROM Friend f WHERE f.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.ID FROM Highschooler h WHERE h.ID IN (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes);
SELECT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(DISTINCT f.friend_id) > 0 AND COUNT(DISTINCT l.liked_id) > 0;
SELECT h.name FROM Highschooler h WHERE h.ID IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f) AND h.ID IN (SELECT l.student_id FROM Likes l);
SELECT DISTINCT h.name FROM Highschooler h WHERE h.id IN (SELECT s.student_id FROM Friend s UNION SELECT l.student_id FROM Likes l);
SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY num_likes DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY num_likes DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
WITH LikeCounts AS (SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name) SELECT name, likes_count FROM LikeCounts ORDER BY likes_count DESC NULLS LAST;
WITH likes_count AS (SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name) SELECT name, num_likes FROM likes_count ORDER BY num_likes DESC LIMIT 1;
WITH LikeCount AS (SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name) SELECT name FROM LikeCount ORDER BY num_likes DESC NULLS LAST LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS l2 ON h.ID = l2.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS l2 ON h.ID = l2.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) f2 ON h.ID = f2.student_id WHERE h.grade > 5;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) AS f2 ON h.ID = f2.student_id WHERE h.grade > 5;
SELECT COUNT(*) AS number_of_likes FROM Likes l JOIN Highschooler h ON l.student_id = h.ID WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM Likes l WHERE l.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) > 0;
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;
SELECT MIN(h.grade) FROM Highschooler h WHERE h.id NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT MIN(h.grade) AS lowest_grade FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;
SELECT o.state FROM Owners o WHERE o.state IN (SELECT p.state FROM Professionals p);
SELECT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (SELECT COUNT(t2.treatment_id) FROM Treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (SELECT COUNT(t2.treatment_id) FROM Treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Charges c ON t.treatment_id = c.charge_id WHERE c.charge_amount <= 1000;
SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d); UNION SELECT DISTINCT o.first_name FROM Owners o WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT DISTINCT o.first_name FROM Owners o WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d) UNION SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN (SELECT d.owner_id, COUNT(d.dog_id) AS num_dogs FROM Dogs d GROUP BY d.owner_id ORDER BY num_dogs DESC LIMIT 1) AS m ON o.owner_id = m.owner_id;
SELECT p.professional_id, p.role_code, p.first_name, COUNT(t.treatment_id) AS number_of_treatments FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2 ORDER BY number_of_treatments DESC NULLS LAST;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id;
SELECT b.breed_name, COUNT(DISTINCT d.dog_id) AS number_of_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY number_of_dogs DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name, COUNT(t.treatment_id) AS treatment_count FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY treatment_count DESC LIMIT 1;
SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY total_cost DESC LIMIT 1;
SELECT tt.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY total_cost ASC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY t.cost_of_treatment ASC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(c.charge_amount) AS total_charges FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Charges c ON t.treatment_id = c.charge_id GROUP BY o.owner_id, o.zip_code ORDER BY total_charges DESC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY total_cost DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (SELECT t.professional_id FROM Treatments t GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2) AS t2 ON p.professional_id = t2.professional_id;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT d.date_of_treatment, p.first_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(d.dog_id) ASC LIMIT 1) ORDER BY t.date_of_treatment;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code WHERE tt.treatment_type_description = 'Surgery' ORDER BY d.breed_code ASC NULLS LAST;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.date_of_birth = (SELECT MIN(d2.date_of_birth) FROM Dogs d2);
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.date_of_birth = (SELECT MIN(d2.date_of_birth) FROM Dogs d2);
SELECT p.email_address FROM Professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');
SELECT p.email_address FROM Professionals p WHERE p.state IN ('HI', 'WI');
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT COUNT(DISTINCT d.dog_id) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT COUNT(DISTINCT t.dog_id) AS total_dogs_treated FROM Treatments t;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%';
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ilike '%North%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ILIKE '%North%';
SELECT COUNT(*) AS num_dogs FROM Dogs d WHERE CAST(d.age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT COUNT(*) AS number_of_dogs FROM Dogs d WHERE CAST(d.age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT MAX(t.cost_of_treatment) AS most_recent_treatment_cost FROM Treatments t;
SELECT MAX(t.cost_of_treatment) AS max_cost FROM Treatments t;
SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t);
SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL;
SELECT COUNT(o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;
SELECT COUNT(*) FROM Owners o WHERE o.owner_id NOT IN (SELECT d.owner_id FROM Dogs d);
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT MAX(DATEDIFF(YEAR, d.date_of_birth, CURRENT_DATE())) AS age FROM Dogs d;
SELECT MAX(d.date_of_birth) AS age_of_oldest_dog FROM Dogs d;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT MAX(c.charge_amount) FROM Charges c;
SELECT c.charge_type, MAX(c.charge_amount) AS max_charge FROM Charges c GROUP BY c.charge_type ORDER BY max_charge DESC NULLS LAST LIMIT 1;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT d.breed_code, s.size_code FROM Dogs d CROSS JOIN Sizes s;
SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d;
SELECT p.first_name, tt.treatment_type_description FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY p.first_name NULLS LAST;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT s.name FROM singer s ORDER BY s.net_worth_millions ASC;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions ASC;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s.birth_year, s.citizenship FROM singer s;
SELECT s.Name FROM singer s WHERE s.Citizenship!= 'France';
SELECT s.Name FROM singer s WHERE s.Citizenship!= 'France';
SELECT s.Name FROM singer s WHERE s."Birth_Year" IN (1948, 1949);
SELECT s.Name FROM singer s WHERE s."Birth_Year" = 1948 OR s."Birth_Year" = 1949;
SELECT s.name FROM singer s ORDER BY s.net_worth_millions DESC NULLS LAST LIMIT 1;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions DESC NULLS LAST LIMIT 1;
SELECT s.Citizenship, COUNT(*) AS singer_count FROM singer s GROUP BY s.Citizenship ORDER BY singer_count DESC NULLS LAST;
SELECT s.Citizenship, COUNT(s.Singer_ID) AS singer_count FROM singer s GROUP BY s.Citizenship ORDER BY singer_count DESC NULLS LAST;
SELECT s.Citizenship, COUNT(*) AS count FROM singer s GROUP BY s.Citizenship ORDER BY count DESC LIMIT 1;
SELECT s.Citizenship, COUNT(s.Citizenship) AS Count FROM singer s GROUP BY s.Citizenship ORDER BY Count DESC LIMIT 1;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM singer s GROUP BY s.Citizenship;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS max_net_worth FROM singer s GROUP BY s.Citizenship;
SELECT s."Title", s."Singer_ID", s."Singer_ID", s."Name" FROM "song" s JOIN "singer" si ON s."Singer_ID" = si."Singer_ID";
SELECT s."Title", s."Singer_ID", s."Singer_ID" AS Singer_Name FROM "song" s JOIN "singer" si ON s."Singer_ID" = si."Singer_ID";
SELECT DISTINCT s.Name FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID WHERE t.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song si ON s.Singer_ID = si.Singer_ID WHERE si.Sales > 300000;
SELECT s."Name" FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Singer_ID" GROUP BY s."Name" HAVING COUNT(so."Song_ID") > 1;
SELECT s.Name FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID GROUP BY s.Name HAVING COUNT(t.Song_ID) > 1;
SELECT s.Name, SUM(s.Sales) AS total_sales FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name ORDER BY Total_Sales DESC NULLS LAST;
SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT s.Singer_ID FROM song s);
SELECT s."Name" FROM "singer" s WHERE s."Singer_ID" NOT IN (SELECT s."Singer_ID" FROM "song" s);
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship;
SELECT DISTINCT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955;
SELECT COUNT(otf.feature_id) AS total_features FROM Other_Available_Features otf;
SELECT ft.feature_type_name FROM Other_Available_Features af JOIN Ref_Feature_Types ft ON af.feature_type_code = ft.feature_type_code WHERE af.feature_name = 'AirCon';
SELECT p.property_type_description FROM Properties p WHERE p.property_type_code = 'House';
SELECT p.property_name, p.property_address FROM Properties p WHERE p.property_type_code IN ('House', 'Apartment') AND p.room_count > 1;

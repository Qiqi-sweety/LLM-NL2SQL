SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;
SELECT s.Name, s.Country, s.Age FROM singer s ORDER BY s.Age DESC;
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France';
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France';
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
WITH SingerAge AS (SELECT s.Singer_ID, s.Name, s.Age FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2)) SELECT si.Singer_ID, si.Name, s.Song_Name, s.Song_release_year FROM SingerAge sa JOIN singer_in_concert sic ON sa.Singer_ID = sic.Singer_ID JOIN singer s ON sa.Singer_ID = s.Singer_ID;
SELECT s.Country FROM singer s WHERE s.Age > 20 GROUP BY s.Country ORDER BY s.Country NULLS LAST;
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20 ORDER BY s.Country NULLS LAST;
SELECT s.Country, COUNT(s.Singer_ID) AS number_of_singers FROM singer s GROUP BY s.Country ORDER BY number_of_singers DESC NULLS LAST;
SELECT s.Country, COUNT(*) AS number_of_singers FROM singer s GROUP BY s.Country ORDER BY number_of_singers DESC NULLS LAST;
SELECT s."Name", s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer");
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > (SELECT AVG(st.Average) FROM stadium st) ORDER BY s.Song_Name;
SELECT s."Location", s."Name" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT s.Location, s.Name FROM stadium s WHERE s.Capacity BETWEEN 5000 AND 10000;
SELECT s."Capacity", AVG(s."Capacity") AS average_capacity FROM "stadium" s;
SELECT AVG(s."Capacity"), MAX(s."Capacity") FROM "stadium" s;
SELECT s.Name, s.Capacity FROM stadium s ORDER BY s.Average DESC NULLS LAST LIMIT 1;
SELECT s.Name, s.Capacity FROM Stadium s ORDER BY s.Average DESC LIMIT 1;
SELECT COUNT(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015';
SELECT COUNT(*) AS number_of_concerts FROM concert c WHERE c."Year" IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS num_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name ORDER BY num_of_concerts DESC NULLS LAST;
SELECT s.Name, COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID::int = s.Stadium_ID GROUP BY s.Name ORDER BY number_of_concerts DESC NULLS LAST;
SELECT s.Name, s.Capacity FROM Stadium s JOIN Concert c ON s.Stadium_ID::text = c.Stadium_ID WHERE c.Year::int >= 2014 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM Stadium s JOIN Concert c ON s.Stadium_ID::text = c.Stadium_ID WHERE c.Year::int > 2013 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT c.Year, COUNT(c.concert_ID) AS number_of_concerts FROM concert c GROUP BY c.Year ORDER BY number_of_concerts DESC NULLS LAST LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(c.Year, 'YYYY')) AS Year, COUNT(DISTINCT ci.concert_ID) AS num_concerts FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;
SELECT s.Name FROM "stadium" s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM "concert" c);
SELECT s.Country FROM singer s WHERE s.Age > 40 AND s.Age < 30;
SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT c.stadium_id FROM concert c WHERE c.year = '2014');
SELECT s."Name" FROM "stadium" s WHERE s."Stadium_ID" NOT IN (SELECT c."Stadium_ID" FROM "concert" c WHERE c."Year" = '2014');
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS singer_count FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(DISTINCT si.Singer_ID) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer si ON sic.Singer_ID = si.Singer_ID GROUP BY c.concert_Name, c.Theme ORDER BY num_singers DESC NULLS LAST;
SELECT s.Name, COUNT(sc.concert_ID) AS number_of_concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name ORDER BY number_of_concerts DESC;
SELECT s.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer s JOIN singer_in_concert ON s.Singer_ID = singer_in_concert.Singer_ID GROUP BY s.Name ORDER BY num_concerts DESC NULLS LAST;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name ilike '%Hey%' ORDER BY s.Name NULLS LAST;
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name ilike '%Hey%' ORDER BY s.Name NULLS LAST;
SELECT s.Name, s.Location FROM Stadium s JOIN Concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM Stadium s JOIN Concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(s2.Capacity) FROM stadium s2);
SELECT COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.capacity = (SELECT MAX(s2.capacity) FROM stadium s2);
SELECT COUNT(*) AS number_of_heavy_pets FROM Pets p WHERE p.weight > 10;
SELECT COUNT(*) FROM Pets p WHERE p.weight > 10;
SELECT p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets p WHERE p.pet_type = 'dog');
SELECT p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2 WHERE p2.petType = 'dog');
SELECT MAX(p.weight), p.pet_type FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT p.pet_type, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pet_type;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) AS pet_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.pet_age < 3 AND p.pet_age > 0 AND p.pet_age <= 3;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(DISTINCT p.pettype) FROM Pets p;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 5 AND (p.petType ilike '%cat%' OR p.petType ilike '%dog%') ORDER BY s.Fname NULLS LAST;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p1 ON h.PetID = p1.PetID JOIN Pets p2 ON h.PetID = p2.PetID WHERE p1.PetType = 'cat' AND p2.PetType = 'dog' ORDER BY s.Fname NULLS LAST;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 1 AND (p.pet_age < 5 OR (p.pet_age >= 5 AND p.pet_age <= 10)) AND (p.weight > 5 OR (p.weight >= 5 AND p.weight <= 10)) AND (p.pet_age > 1 AND p.pet_age <= 10) AND (p.weight > 5 AND p.weight <= 10);
SELECT s.major, s.age FROM Student s LEFT JOIN Has_Pet hp ON s.stuid = hp.stuid LEFT JOIN Pets p ON hp.petid = p.petid WHERE p.pettype not ilike '%cat%' ORDER BY s.age NULLS LAST;
SELECT s.major, s.age FROM Student s LEFT JOIN Has_Pet hp ON s.stuid = hp.stuid LEFT JOIN Pets p ON hp.petid = p.petid WHERE p.pettype not ilike '%cat%' ORDER BY s.age ASC;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age IS NULL;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet h ON s.StuID = h.StuID LEFT JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType NOT ILIKE '%cat%' AND h.PetID IS NULL;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'dog' AND p.pet_age < 5 ORDER BY s.Age ASC NULLS LAST;
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'dog' AND p.PetType not ilike '%cat%' ORDER BY s.Fname NULLS LAST;
SELECT p.pettype, MIN(p.pet_age) AS min_age FROM Pets p GROUP BY p.pettype ORDER BY min_age ASC NULLS LAST;
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2);
SELECT p.pet_id, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_id, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_type, AVG(p.pet_age) AS avg_age, MAX(p.pet_age) AS max_age FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT pt.PetType, AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS max_age FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID GROUP BY pt.PetType;
SELECT p.pet_type, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT p.pet_type, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID;
SELECT DISTINCT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID ORDER BY s.Fname ASC;
SELECT h.StuID, p.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT h.petid FROM student s JOIN has_pet h ON s.stuid = h.stuid WHERE LOWER(s.lname) ='smith';
SELECT s.stuid, COUNT(h.petid) AS num_of_pets FROM student s JOIN has_pet h ON s.stuid = h.stuid GROUP BY s.stuid HAVING COUNT(h.petid) > 0;
SELECT s.StuID, COUNT(hp.PetID) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID ORDER BY num_pets DESC NULLS LAST;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(h.PetID) > 1;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.petType = 'cat' ORDER BY s.LName NULLS LAST LIMIT 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.petType = 'cat';
SELECT AVG(s.Age) FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT AVG(s.Age) AS average_age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT COUNT(DISTINCT c.Continent) FROM continents c;
SELECT COUNT(*) FROM continents;
SELECT c.Continent, COUNT(*) AS country_count FROM countries c GROUP BY c.Continent ORDER BY country_count DESC NULLS LAST;
SELECT c.ContId, c.Continent, COUNT(c.CountryId) AS country_count FROM countries c GROUP BY c.ContId, c.Continent ORDER BY country_count DESC NULLS LAST;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c;
SELECT m.Maker, m.Id, COUNT(c.Model) AS number_of_models FROM car_names c JOIN model_list ml ON c.Model = ml.Model JOIN car_makers m ON ml.Maker = m.Id GROUP BY m.Maker, m.Id ORDER BY m.Maker NULLS LAST;
SELECT c.Maker, c.FullName, COUNT(m.Model) AS NumberOfModels FROM car_makers c JOIN model_list m ON c.Id = m.Maker GROUP BY c.Maker, c.FullName ORDER BY NumberOfModels DESC NULLS LAST;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower = (SELECT MIN(cd2.Horsepower) FROM cars_data cd2);
SELECT c.Model FROM car_names c JOIN cars_data d ON c.MakeId = d.Id ORDER BY d.Horsepower ASC LIMIT 1;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(cd1.Weight) FROM cars_data cd1);
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(c2.Weight) FROM cars_data c2);
SELECT DISTINCT m.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970 JOIN car_makers m ON cn.Make = m.Maker;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT c.Make, MIN(c.Year) AS production_year FROM cars_data c GROUP BY c.Make ORDER BY production_year ASC;
SELECT c.Maker, MIN(c.Year) FROM cars_data c GROUP BY c.Maker ORDER BY MIN(c.Year) ASC LIMIT 1;
SELECT DISTINCT m.Model FROM model_list m JOIN cars_data c ON m.Model = c.Id WHERE c.Year > 1980;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year > 1980;
SELECT c.Continent, COUNT(*) AS maker_count FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.Continent ORDER BY c.Continent NULLS LAST;
SELECT c.Continent, COUNT(*) AS car_makers_count FROM car_makers cm JOIN countries c ON cm.Country = CAST(c.Continent AS TEXT) GROUP BY c.Continent ORDER BY car_makers_count DESC NULLS LAST;
SELECT c.CountryName FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT c.CountryName, COUNT(cm.Id) AS car_makers_count FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY car_makers_count DESC LIMIT 1;
SELECT COUNT(ml.ModelId) AS model_count, cm.FullName FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id GROUP BY cm.FullName ORDER BY model_count DESC NULLS LAST;
SELECT m.Maker, COUNT(c.Model) AS number_of_models FROM car_names c JOIN model_list ml ON c.Model = ml.Model JOIN car_makers m ON ml.Maker = m.Id GROUP BY m.Maker ORDER BY number_of_models DESC NULLS LAST;
SELECT cd.Accelerate FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Make = 'AMC Hornet Sportabout';
SELECT c.accelerate FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE cn.model = 'amc hornet sportabout' AND cn.make ='sw';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(DISTINCT c.Maker) FROM car_makers c WHERE c.Country = 'France';
SELECT COUNT(DISTINCT m.Model) FROM car_names cn JOIN model_list ml ON cn.Make = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.Country) = 'usa';
SELECT COUNT(*) AS total_cars FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker WHERE LOWER(cm.Country) = 'united states';
SELECT AVG(cast(c.MPG AS FLOAT)) AS average_mpg FROM cars_data c WHERE c.Cylinders = 4;
SELECT AVG(c.MPG) FROM cars_data c WHERE c.Cylinders = 4;
SELECT MIN(c.Weight) AS lightest_car FROM cars_data c WHERE c.Cylinders = 8 AND c.Year = 1974;
SELECT MIN(c.weight) FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT m.Maker, c.Model FROM car_names c JOIN model_list m ON c.Model = m.Model;
SELECT c.Maker, c.Model FROM car_names AS c;
SELECT c.CountryName, cm.Id FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NOT NULL ORDER BY c.CountryName;
SELECT COUNT(*) FROM cars_data cd WHERE cd.horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT c.Year, AVG(c.Weight) AS average_weight FROM cars_data c GROUP BY c.Year ORDER BY c.Year;
SELECT c.Year, AVG(c.Weight) AS average_weight FROM Cars_Data c GROUP BY c.Year ORDER BY c.Year NULLS LAST;
SELECT DISTINCT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3;
SELECT DISTINCT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 1 GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3;
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_names.make ORDER BY max_horsepower DESC;
SELECT c.Maker, MAX(c.Horsepower) AS max_horsepower FROM cars_data c WHERE c.Cylinders = 3 GROUP BY c.Maker ORDER BY max_horsepower DESC NULLS LAST;
SELECT c.Model, MAX(c.MPG) AS MaxMPG FROM cars_data c GROUP BY c.Model ORDER BY c.Model;
SELECT m.Model, c.MPG FROM car_names c JOIN model_list m ON c.MakeId = m.ModelId WHERE c.MPG IS NOT NULL ORDER BY c.MPG DESC NULLS LAST LIMIT 1;
SELECT AVG(c.Horsepower::FLOAT) FROM cars_data c WHERE c.Year < 1980;
SELECT AVG(cast(cars_data.horsepower AS INTEGER)) AS average_horsepower FROM cars_data WHERE cars_data.year < 1980;
SELECT AVG(c.Edispl) AS average_Edispl FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE LOWER(cn.Make) = 'volvo';
SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Make = CAST(ml.Maker AS TEXT) WHERE LOWER(ml.Model) = 'volvo';
SELECT c.Cylinders, MAX(c.Accelerate) AS max_accelerate FROM cars_data c GROUP BY c.Cylinders ORDER BY max_accelerate DESC NULLS LAST;
SELECT MAX(c.Accelerate) AS Max_Accelerate FROM cars_data c GROUP BY c.Cylinders ORDER BY Max_Accelerate DESC NULLS LAST;
WITH Model_Versions AS (SELECT n.Model, COUNT(*) AS VersionCount FROM car_names n GROUP BY n.Model) SELECT mv.Model FROM Model_Versions mv ORDER BY mv.VersionCount DESC LIMIT 1;
SELECT c.Model, COUNT(c.MakeId) AS model_count FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId GROUP BY c.Model ORDER BY model_count DESC NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM cars_data cd WHERE cd.Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) AS number_of_cars FROM cars_data WHERE YEAR = 1980;
SELECT COUNT(*) FROM cars_data cd WHERE cd.year = 1980;
SELECT COUNT(DISTINCT cm.Model) AS number_of_models FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE LOWER(cm.FullName) = 'american motor company';
SELECT COUNT(*) AS number_of_models FROM car_names cn JOIN model_list ml ON cn.Make = ml.Model WHERE LOWER(ml.Make) = 'american motor company';
SELECT cm.FullName, COUNT(*) AS model_count FROM car_names cn JOIN car_makers cm ON cn.Make = cm.Maker GROUP BY cm.FullName HAVING COUNT(*) > 3 ORDER BY model_count DESC NULLS LAST;
SELECT cm.Id, cm.Maker, COUNT(ml.Model) AS model_count FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3 ORDER BY cm.Maker NULLS LAST;
SELECT DISTINCT c.Model FROM car_names c JOIN cars_data cd ON c.MakeId = cd.Id WHERE c.Make = 'General Motors' AND cd.Weight > 3500 ORDER BY c.Model ASC;
SELECT DISTINCT c.Model FROM car_names c JOIN cars_data cd ON c.MakeId = cd.Id WHERE c.Make = 'General Motors' OR cd.Weight > 3500;
SELECT c.Year FROM cars_data c WHERE c.Weight BETWEEN 3000 AND 4000 ORDER BY c.Year NULLS LAST;
SELECT DISTINCT c.Year FROM cars_data c WHERE c.Weight < 4000 AND c.Weight > 3000 ORDER BY c.Year NULLS LAST;
SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(c2.Accelerate) FROM cars_data c2);
SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(c2.Accelerate) FROM cars_data c2);
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'volvo' ORDER BY c.Accelerate ASC LIMIT 1;
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'Volvo' ORDER BY c.Accelerate ASC NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM cars_data cd WHERE cd.accelerate > (SELECT MAX(cars_data.horsepower) FROM cars_data);
SELECT COUNT(*) AS num_cars FROM cars_data cd WHERE cd.accelerate > (SELECT MAX(cars_data.horsepower) FROM cars_data);
SELECT COUNT(DISTINCT c.CountryName) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE (SELECT COUNT(*) FROM car_makers cm2 WHERE cm2.Country = c.CountryId) > 2;
SELECT COUNT(DISTINCT c.CountryId) AS countries_with_multiple_makers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 2;
SELECT COUNT(*) FROM cars_data cd WHERE cd.Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT c.model, MAX(c.horsepower) AS max_horsepower FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.make = CAST(ml.maker AS TEXT) WHERE cd.cylinders = 4 GROUP BY c.model ORDER BY max_horsepower DESC NULLS LAST LIMIT 1;
SELECT c.Model, MAX(c.Horsepower) AS MaxHorsepower FROM cars_data c WHERE c.Cylinders = 4 GROUP BY c.Model ORDER BY MaxHorsepower DESC NULLS LAST LIMIT 1;
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower > (SELECT MIN(c.Horsepower) FROM cars_data c) AND cd.Cylinders <= 3;
SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4 ORDER BY cn.Make;
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders = 8 AND c.Year < 1980;
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Make = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker!= 'Ford Motor Company' ORDER BY c.Model NULLS LAST;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Make = ml.Model WHERE ml.Maker!= (SELECT id FROM car_makers WHERE country = 'United States' AND maker = 'Ford') AND cn.Weight < 3500 ORDER BY m.Model;
SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT m.Country FROM car_makers m);
SELECT DISTINCT c.CountryName FROM countries c LEFT JOIN car_makers m ON c.CountryId = m.Country WHERE m.Country IS NULL;
SELECT m.Maker, COUNT(*) AS model_count FROM model_list ml JOIN car_makers m ON ml.Maker = m.Id GROUP BY m.Maker HAVING COUNT(*) >= 2 AND COUNT(*) > 3 ORDER BY model_count DESC NULLS LAST;
SELECT m.Maker, COUNT(m.Model) AS model_count FROM model_list m GROUP BY m.Maker HAVING COUNT(m.Model) >= 2 ORDER BY m.Maker;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR cm.Country IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Make = 'Fiat' GROUP BY cm.Country HAVING COUNT(DISTINCT cn.Model) > 0);
SELECT c.CountryName, COUNT(cm.Id) AS car_maker_count FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 3 UNION SELECT c.CountryName, COUNT(DISTINCT m.Model) AS fiat_model_count FROM countries c JOIN car_names cn ON c.CountryId = cn.MakeId JOIN model_list m ON cn.Model = m.Model WHERE m.Make = 'Fiat' GROUP BY c.CountryName HAVING COUNT(DISTINCT m.Model) > 0 ORDER BY c.CountryName NULLS LAST;
SELECT a.Country FROM airlines a WHERE a.Airline = 'JetBlue Airways';
SELECT a.Country FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'JetBlue Airways';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT COUNT(DISTINCT a.Uid) FROM airlines a;
SELECT COUNT(DISTINCT a.Uid) FROM airlines a;
SELECT COUNT(*) FROM airports;
SELECT COUNT(DISTINCT a.AirportCode) AS Number_of_Airports FROM airports a;
SELECT COUNT(*) FROM flights;
SELECT COUNT(f.FlightNo) FROM flights f;
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE LOWER(Country) = 'usa';
SELECT COUNT(*) FROM airlines WHERE LOWER(Country) = 'usa';
SELECT a.City, a.Country FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport WHERE f.Airline = (SELECT uid FROM airlines WHERE Airline = 'Alton');
SELECT a.City, a.Country FROM airports a WHERE a.AirportCode = 'ALTON';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT a.AirportName FROM airports a WHERE LOWER(a.City) = 'Aberdeen';
SELECT COUNT(f.Airline, f.FlightNo) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(f.Airline, f.FlightNo) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(f.Airline, f.FlightNo) FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(f.FlightNo) AS TotalFlightsIntoATo FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE LOWER(a.City) = 'aberdeen';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(f.FlightNo) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE LOWER(d.City) = 'aberdeen';
SELECT COUNT(*) AS num_flights FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT COUNT(f.FlightNo) FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';
SELECT COUNT(*) AS number_of_flights FROM flights f WHERE f.SourceAirport = 'Aberdeen' AND f.DestAirport = 'Ashley';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE LOWER(a.Abbreviation) = 'b6';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND a.AirportCode = 'ASY';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE LOWER(d.City) = 'asy' AND f.Airline = (SELECT uid FROM airlines WHERE LOWER(Abbreviation) = 'ua');
SELECT COUNT(f.Airline) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE LOWER(a.Airline) = 'united' AND LOWER(f.SourceAirport) = 'ahd';
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE LOWER(Abbreviation) = 'ua');
SELECT COUNT(f.Airline) AS total_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UAL' AND f.DestAirport = 'ABZ';
SELECT a.city, COUNT(f.airline) AS flight_count FROM airports a JOIN flights f ON a.airportcode = f.destairport GROUP BY a.city ORDER BY flight_count DESC LIMIT 1;
SELECT a.City, COUNT(f.DestAirport) AS frequency FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY frequency DESC LIMIT 1;
SELECT a.City, COUNT(f.FlightNo) AS num_flights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY num_flights DESC LIMIT 1;
SELECT a.city, COUNT(f.airline) AS frequency FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city ORDER BY frequency DESC LIMIT 1;
SELECT a.AirportCode, COUNT(f.Airline) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.AirportCode ORDER BY flight_count DESC LIMIT 1;
SELECT f.SourceAirport FROM flights f GROUP BY f.SourceAirport ORDER BY COUNT(f.SourceAirport) DESC LIMIT 1;
SELECT a.AirportCode, COUNT(f.Airline) AS flight_count FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.AirportCode ORDER BY flight_count ASC LIMIT 1;
SELECT f.DestAirport, COUNT(f.FlightNo) AS num_flights FROM flights f GROUP BY f.DestAirport ORDER BY num_flights ASC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT a.Airline, COUNT(f.Airline) AS flights_count FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY flights_count DESC LIMIT 1;
WITH flight_count AS (SELECT f.Airline, COUNT(*) AS num_flights FROM flights f GROUP BY f.Airline) SELECT a.Abbreviation, a.Country FROM flight_count fc JOIN airlines a ON fc.Airline = a.uid ORDER BY fc.num_flights ASC NULLS LAST LIMIT 1;
WITH f AS (SELECT a.Abbreviation, COUNT(f.FlightNo) AS flight_count, a.Country FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Abbreviation, a.Country) SELECT f.Abbreviation, f.Country FROM f ORDER BY f.flight_count ASC LIMIT 1;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.Uid WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport <> 'APG' ORDER BY a.Airline NULLS LAST;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.Airline) AS f2 ON a.uid = f2.Airline WHERE f2.flight_count >= 10 ORDER BY a.Airline NULLS LAST;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.Airline) AS num_flights FROM flights f GROUP BY f.Airline HAVING COUNT(f.Airline) >= 10) AS f2 ON a.uid = f2.Airline;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(f.FlightNo) AS flight_count FROM flights f GROUP BY f.Airline) f2 ON a.uid = f2.Airline WHERE f2.flight_count < 200;
SELECT a.Airline, COUNT(f.Airline) AS FlightCount FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE COUNT(f.Airline) < 200 GROUP BY a.Airline ORDER BY FlightCount ASC NULLS LAST;
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UA';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UA';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE LOWER(a.City) = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports s ON f.SourceAirport = s.AirportCode WHERE s.City = 'Aberdeen' ORDER BY f.FlightNo NULLS LAST;
SELECT DISTINCT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City IN ('Aberdeen', 'Abilene');
SELECT DISTINCT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e.city, COUNT(e.employee_id) AS number_of_employees FROM employee e GROUP BY e.city ORDER BY number_of_employees DESC NULLS LAST;
SELECT e."City", COUNT(e."Employee_ID") AS number_of_employees FROM "employee" e GROUP BY e."City" ORDER BY number_of_employees DESC NULLS LAST;
SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(e.Employee_ID) > 1;
SELECT DISTINCT e.City FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(DISTINCT h.Employee_ID) > 1;
SELECT s.location, COUNT(s.location) AS number_of_shops FROM shop s GROUP BY s.location ORDER BY number_of_shops DESC NULLS LAST;
SELECT s.Location, COUNT(*) AS shop_count FROM shop s GROUP BY s.Location ORDER BY shop_count DESC NULLS LAST;
SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop);
SELECT s.manager_name, s.district, s.number_products FROM shop s ORDER BY s.number_products DESC LIMIT 1;
SELECT MIN(s.number_products), MAX(s.number_products) FROM shop s;
SELECT MIN(s.Number_products) AS min_products, MAX(s.Number_products) AS max_products FROM shop s;
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(s2.number_products) FROM shop s2);
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(s2.number_products) FROM shop s2);
SELECT e.name, COUNT(*) AS evaluation_count FROM evaluation e GROUP BY e.name ORDER BY evaluation_count DESC LIMIT 1;
WITH EmployeeAwards AS (SELECT e."Name", COUNT(ea."Employee_ID") AS AwardCount FROM "evaluation" ea JOIN "employee" e ON ea."Employee_ID" = e."Employee_ID" GROUP BY e."Name") SELECT ea."Name" FROM EmployeeAwards ea ORDER BY ea.AwardCount DESC NULLS LAST LIMIT 1;
SELECT e.Name, MAX(e.Bonus) AS max_bonus FROM evaluation e GROUP BY e.Name ORDER BY max_bonus DESC LIMIT 1;
WITH max_bonus AS (SELECT e."Name", MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max_age, MAX(e."Age") AS max
SELECT e.name FROM employee e WHERE e.employee_id NOT IN (SELECT ev.employee_id FROM evaluation ev);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT e2.Employee_ID FROM evaluation e2);
SELECT s.name, COUNT(h.employee_id) AS employee_count FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY employee_count DESC LIMIT 1;
WITH shop_employees AS (SELECT s.Name AS shop_name, COUNT(h.Employee_ID) AS num_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name) SELECT shop_name, num_employees FROM shop_employees ORDER BY num_employees DESC NULLS LAST LIMIT 1;
SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT h.Shop_ID FROM hiring h);
SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT h.Shop_ID FROM hiring h);
SELECT s.Name, COUNT(h.Employee_ID) AS number_of_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.name, COUNT(h.employee_id) AS number_of_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY number_of_employees DESC NULLS LAST;
SELECT SUM(e.Bonus) AS Total_Bonus FROM evaluation e;
SELECT SUM(e.Bonus) AS total_bonus FROM evaluation e;
SELECT h.shop_id, e.name AS employee_name, h.start_from, h.is_full_time FROM hiring h JOIN employee e ON h.employee_id = e.employee_id;
SELECT h.Shop_ID, e.Name, h.Start_from, h.Is_full_time FROM hiring h JOIN employee e ON h.Employee_ID = e.Employee_ID;
SELECT s.district FROM shop s WHERE s.number_products < 3000 AND s.number_products > 10000 GROUP BY s.district;
SELECT d.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%' ORDER BY d.Document_Name ASC;
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT t.Template_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'ppt';
SELECT COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT t.Template_ID, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID ORDER BY number_of_documents DESC NULLS LAST;
SELECT t.Template_ID, COUNT(t.Template_ID) AS usage_count FROM Templates t GROUP BY t.Template_ID ORDER BY usage_count DESC NULLS LAST;
SELECT t.Template_ID, rt.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_ID, rt.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT t.Template_ID, t.Template_Type_Code, COUNT(d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY document_count DESC LIMIT 1;
SELECT DISTINCT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT DISTINCT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;
SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t;
SELECT COUNT(t.Template_ID) FROM Templates t;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t ORDER BY t.Template_ID ASC NULLS LAST;
SELECT DISTINCT tt.Template_Type_Code FROM Templates tt;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt ORDER BY rt.Template_Type_Code NULLS LAST;
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) AS number_of_templates FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'CV';
SELECT COUNT(*) AS total_templates FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'cv';
SELECT t.Version_Number, tt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5 ORDER BY t.Version_Number DESC NULLS LAST;
SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS number_of_templates FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code ORDER BY number_of_templates DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS number_of_templates FROM Templates t GROUP BY t.Template_Type_Code ORDER BY number_of_templates DESC NULLS LAST;
SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) AS total_templates FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code GROUP BY rtt.Template_Type_Code ORDER BY total_templates DESC LIMIT 1;
SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) AS count_templates FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code GROUP BY rtt.Template_Type_Code ORDER BY count_templates DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3 ORDER BY t.Template_Type_Code NULLS LAST;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code;
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT rt.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name ilike '%Data base%';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'bk';
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS num_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY num_documents DESC;
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY number_of_documents DESC NULLS LAST;
SELECT rtt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS num_documents FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code ORDER BY num_documents DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code ORDER BY COUNT(t.Template_ID) DESC LIMIT 1;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Code IS NULL;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt WHERE rt.Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t);
SELECT rt.Template_Type_Code, rt.Template_Type_Description FROM Ref_Template_Types rt;
SELECT t.Template_Type_Code, t.Template_Type_Description FROM Ref_Template_Types t ORDER BY t.Template_Type_Code NULLS LAST;
SELECT rt.Template_Type_Description FROM Ref_Template_Types rt WHERE rt.Template_Type_Code = 'AD';
SELECT rtt.Template_Type_Description FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code = 'AD';
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt WHERE rt.Template_Type_Description = 'Book';
SELECT t.Template_Type_Code FROM Ref_Template_Types t WHERE t.Template_Type_Description = 'Book';
SELECT DISTINCT t.Template_Type_Description FROM Templates t ORDER BY t.Template_Type_Description NULLS LAST;
SELECT DISTINCT t.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID ORDER BY t.Template_Type_Description ASC;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name ilike '%Summer Show%';
SELECT COUNT(p.Paragraph_ID) AS total_paragraphs FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.Paragraph_ID, p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text ilike '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text, d.Document_Name FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text ILIKE '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name ilike '%Welcome to NY%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Description ilike '%Welcome to NY%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews' ORDER BY p.Paragraph_ID ASC;
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY Number_of_Paragraphs DESC NULLS LAST;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Paragraphs p GROUP BY p.Document_ID ORDER BY paragraph_count DESC LIMIT 1) AS pc ON d.Document_ID = pc.Document_ID;
WITH ParagraphCounts AS (SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID) SELECT dc.Document_ID, dc.Document_Name FROM ParagraphCounts dc JOIN Documents d ON dc.Document_ID = d.Document_ID ORDER BY dc.Paragraph_Count DESC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Paragraphs p GROUP BY p.Document_ID) AS pp ON d.Document_ID = pp.Document_ID ORDER BY pp.num_paragraphs ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Paragraphs p GROUP BY p.Document_ID ORDER BY num_paragraphs ASC LIMIT 1) AS dp ON d.Document_ID = dp.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2) AS p ON d.Document_ID = p.Document_ID;
SELECT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text ILIKE '%Brazil%' AND p.Paragraph_Text ILIKE '%Ireland%';
SELECT COUNT(*) AS number_of_teachers FROM teacher;
SELECT COUNT(*) AS total_teachers FROM teacher;
SELECT t.Name, t.Age FROM teacher t ORDER BY CAST(t.Age AS int) ASC;
SELECT t.Name, t.Age FROM teacher t ORDER BY t.Age ASC;
SELECT t.Age, t.Hometown FROM teacher t;
SELECT t."Age", t."Hometown" FROM "teacher" t;
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Age IN ('32', '33');
SELECT t.name FROM teacher t WHERE t.age = '32' OR t.age = '33';
SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(t2.Age) FROM teacher t2);
SELECT t.hometown FROM teacher t WHERE t.age = (SELECT MIN(t2.age) FROM teacher t2);
SELECT t.Hometown, COUNT(t.Hometown) AS Number_of_Teachers FROM teacher t GROUP BY t.Hometown ORDER BY Number_of_Teachers DESC NULLS LAST;
SELECT t.hometown, COUNT(t.teacher_id) AS num_teachers FROM teacher t GROUP BY t.hometown ORDER BY num_teachers DESC NULLS LAST;
SELECT t.hometown, COUNT(*) AS frequency FROM teacher t GROUP BY t.hometown ORDER BY frequency DESC NULLS LAST LIMIT 1;
SELECT t.hometown, COUNT(t.hometown) AS COUNT FROM teacher t GROUP BY t.hometown ORDER BY COUNT DESC LIMIT 1;
SELECT t.hometown FROM teacher t GROUP BY t.hometown HAVING COUNT(t.hometown) > 1;
SELECT t.Hometown FROM teacher t GROUP BY t.Hometown HAVING COUNT(t.Hometown) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" ='math';
SELECT t.Name FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" ='math';
SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY num_courses DESC NULLS LAST;
SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY num_courses DESC NULLS LAST;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2 ORDER BY t.Name NULLS LAST;
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ca.Teacher_ID FROM course_arrange ca);
SELECT t.Name FROM teacher t WHERE NOT EXISTS (SELECT 1 FROM course_arrange ca WHERE ca.Teacher_ID = t.Teacher_ID);
SELECT COUNT(*) FROM visitor v WHERE v.Age < 30;
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC;
SELECT AVG(v.Age) FROM visitor v WHERE v.Level_of_membership <= 4;
SELECT v.name, v.level_of_membership, v.age FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.age DESC;
SELECT m.Museum_ID, m.Name FROM museum m ORDER BY m.Num_of_Staff DESC LIMIT 1;
SELECT AVG(m."Num_of_Staff") AS average_staff FROM "museum" m WHERE m."Open_Year" < '2009';
SELECT m."Open_Year", m."Num_of_Staff" FROM "museum" m WHERE m."Name" = 'Plaza Museum';
SELECT m.name FROM museum m WHERE m.num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN (SELECT v.ID FROM visit GROUP BY v.ID HAVING COUNT(v.Museum_ID) > 1) AS mv ON v.ID = mv.ID;
WITH total_spent AS (SELECT v.ID, v.Name, v.Level_of_membership, SUM(v.Visit.Total_spent) AS total_spent FROM visitor v JOIN visit vs ON v.ID = CAST(vs.visitor_ID AS int) GROUP BY v.ID, v.Name, v.Level_of_membership) SELECT ts.ID, ts.Name, ts.Level_of_membership FROM total_spent ts ORDER BY ts.total_spent DESC LIMIT 1;
WITH visit_counts AS (SELECT v.Museum_ID, COUNT(v.Visitor_ID) AS visit_count FROM visit v GROUP BY v.Museum_ID) SELECT m.Name, vc.Visit_Count FROM visit_counts vc JOIN museum m ON vc.Museum_ID = m.Museum_ID ORDER BY vc.Visit_Count DESC NULLS LAST LIMIT 1;
SELECT m.Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT v.Museum_ID FROM visit v);
SELECT v.Name, v.Age FROM visit v JOIN visitor vi ON v.visitor_ID = CAST(vi.ID AS text) WHERE v.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
SELECT AVG(v.Num_of_Ticket) AS average_tickets, MAX(v.Num_of_Ticket) AS max_tickets FROM visit v;
SELECT SUM(v.total_spent) AS total_spent FROM visit v JOIN visitor vi ON v.visitor_id = vi.id WHERE vi.level_of_membership = 1;
SELECT v.name FROM visit v JOIN museum m ON v.museum_id = m.museum_id WHERE m.open_year < '2009' AND m.open_year > '2011' GROUP BY v.name HAVING COUNT(DISTINCT v.museum_id) > 1;
SELECT COUNT(DISTINCT v.ID) FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2011';
SELECT COUNT(*) FROM museum m WHERE m.open_year > '2013' AND m.open_year < '2008';
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA' ORDER BY p.birth_date ASC NULLS LAST;
SELECT p."first_name", p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(r.ranking) AS average_rank FROM rankings r JOIN matches m ON r.player_id = m.winner_id;
SELECT AVG(r.ranking) AS average_rank FROM rankings r JOIN matches m ON r.player_id = m.winner_id;
SELECT MAX(m.loser_rank) AS highest_losing_rank FROM matches m;
SELECT MAX(r.ranking) AS max_losing_rank FROM matches m JOIN players p ON m.loser_id = p.player_id JOIN rankings r ON p.player_id = r.player_id;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT m.tourney_name, COUNT(m.match_num) AS match_count FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10 ORDER BY match_count DESC;
SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN rankings r1 ON p.player_id = r1.player_id JOIN rankings r2 ON p.player_id = r2.player_id WHERE r1."ranking_date" = '2013-01-01' AND r2."ranking_date" = '2016-12-31';
WITH winner_2013 AS (SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."year" = 2013), winner_2016 AS (SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."year" = 2016) SELECT w2013."first_name", w2013."last_name" FROM winner_2013 w2013 JOIN winner_2016 w2016 ON w2013."first_name" = w2016."first_name" AND w2013."last_name" = w2016."last_name";
SELECT COUNT(*) AS total_matches FROM matches m WHERE EXTRACT(YEAR FROM m.tourney_date) IN (2013, 2016);
SELECT COUNT(*) FROM matches m WHERE EXTRACT(YEAR FROM m.tourney_date) IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND p.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') GROUP BY p.country_code, p.first_name;
SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.first_name, p.country_code;
SELECT p."first_name", p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2);
SELECT p.first_name, p.last_name, p.birth_date FROM players p ORDER BY p.birth_date ASC;
SELECT p.first_name, p.last_name FROM players p ORDER BY p.birth_date ASC;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date ASC;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'left' ORDER BY p.birth_date ASC;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings);
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.country_code ORDER BY r.tours DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS num_matches FROM matches m GROUP BY EXTRACT(YEAR FROM m.tourney_date) ORDER BY num_matches DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS total_matches FROM matches m GROUP BY YEAR ORDER BY total_matches DESC LIMIT 1;
WITH winner_rank_points AS (SELECT p.first_name, p.last_name, r.ranking_points, COUNT(m.match_num) AS wins FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id WHERE r.ranking_points = (SELECT MAX(r2.ranking_points) FROM rankings r2) GROUP BY p.first_name, p.last_name) SELECT wr.first_name, wr.last_name, wr.ranking_points FROM winner_rank_points wr ORDER BY wr.wins DESC NULLS LAST LIMIT 1;
SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name ORDER BY total_ranking_points DESC LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC NULLS LAST LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC NULLS LAST LIMIT 1;
SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM players p1 JOIN players p2 ON p1.player_id = (SELECT loser_id FROM matches ORDER BY minutes DESC LIMIT 1) AND p2.player_id = (SELECT winner_id FROM matches ORDER BY minutes DESC LIMIT 1);
SELECT p1.first_name, p2.first_name FROM players p1 JOIN players p2 ON p1.player_id = (SELECT winner_id FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)) AND p2.player_id = (SELECT loser_id FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches));
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY p.first_name NULLS LAST;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.country_code, COUNT(*) AS number_of_players FROM players p GROUP BY p.country_code ORDER BY number_of_players DESC NULLS LAST;
SELECT p.country_code, COUNT(p.player_id) AS player_count FROM players p GROUP BY p.country_code ORDER BY p.country_code NULLS LAST;
SELECT p.country_code, COUNT(p.player_id) AS player_count FROM players p GROUP BY p.country_code ORDER BY player_count DESC LIMIT 1;
SELECT p.country_code, COUNT(p.player_id) AS country_player_count FROM players p GROUP BY p.country_code ORDER BY country_player_count DESC LIMIT 1;
SELECT DISTINCT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(p.player_id) > 50;
SELECT COUNT(DISTINCT p.country_code) AS country_code FROM players p WHERE p.country_code IN (SELECT r.player_id FROM rankings r GROUP BY r.player_id HAVING COUNT(r.player_id) > 50) GROUP BY p.country_code;
SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date ORDER BY r.ranking_date NULLS LAST;
SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date ORDER BY r.ranking_date NULLS LAST;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY YEAR;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(m.match_num) AS matches_count FROM matches m GROUP BY YEAR ORDER BY YEAR;
WITH winner_age AS (SELECT p.first_name, p.last_name, p.hand, m.winner_age, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id) SELECT wa.first_name, wa.last_name, wa.hand, wa.winner_age, wa.winner_rank FROM winner_age wa ORDER BY wa.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_age <= (SELECT AVG(winner_age) FROM matches) ORDER BY m.winner_rank DESC NULLS LAST LIMIT 3;
SELECT COUNT(DISTINCT p."player_id") FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE p."hand" = 'left' AND m."tourney_name" = 'WTA Championships';
SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'left';
WITH winner_rank_points AS (SELECT p.player_id, MAX(r.ranking_points) AS max_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id) SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN winner_rank_points wrp ON p.player_id = wrp.player_id ORDER BY wrp.max_ranking_points DESC LIMIT 1;
WITH winner_rank_points AS (SELECT p.player_id, SUM(m.winner_rank_points) AS total_winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY p.player_id) SELECT p.first_name, p.country_code, p.birth_date FROM winner_rank_points wr JOIN players p ON wr.player_id = p.player_id ORDER BY wr.total_winner_rank_points DESC LIMIT 1;
SELECT p.hand, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.hand ORDER BY number_of_players DESC NULLS LAST;
SELECT p.hand, COUNT(*) AS player_count FROM players p GROUP BY p.hand ORDER BY p.hand NULLS LAST;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT s.name, s.tonnage FROM ship s ORDER BY s.name DESC;
SELECT b.name, b.date, b.result FROM battle b;
SELECT MAX(d.killed) AS max_killed, MIN(d.killed) AS min_killed FROM death d;
SELECT AVG(d.injured) AS average_injuries FROM death d;
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT b.name, b.result FROM "battle" b WHERE b.bulgarian_commander!= 'Boril' ORDER BY b.name ASC;
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander ilike '%Kaloyan%' AND b.latin_commander ilike '%Baldwin I%';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) AS number_of_battles FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage IS NULL OR s.tonnage!= '225';
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location!= 'English Channel' ORDER BY b.name NULLS LAST;
SELECT d.note FROM death d WHERE d.note ilike '%East%';
SELECT a.line_1, a.line_2 FROM Addresses a;
SELECT a.line_1, a.line_2 FROM Addresses a;
SELECT COUNT(c.course_id) FROM Courses c;
SELECT COUNT(DISTINCT c.course_id) AS number_of_courses FROM Courses c;
SELECT c.course_description FROM Courses c WHERE c.course_name = 'Math';
SELECT c.course_description FROM Courses c WHERE c.course_name ilike '%Math%';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT d.department_name, COUNT(d.department_id) AS degree_count FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT d.department_name, COUNT(sp.degree_program_id) AS degree_count FROM Degree_Programs sp JOIN Departments d ON sp.department_id = d.department_id GROUP BY d.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT dp.degree_summary_name) FROM Degree_Programs dp;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d;
SELECT COUNT(DISTINCT dp.degree_program_id) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT COUNT(DISTINCT d.degree_program_id) FROM Degree_Programs d JOIN Departments dpt ON d.department_id = dpt.department_id WHERE LOWER(dpt.department_description) = 'engineering';
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.section_description FROM Sections s;
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.semester_name, COUNT(se.student_id) AS total_students FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id GROUP BY s.semester_name ORDER BY total_students DESC LIMIT 1;
WITH semester_enrolments AS (SELECT se.semester_id, COUNT(se.student_id) AS num_students FROM Student_Enrolment se GROUP BY se.semester_id) SELECT s.semester_name, se.semester_id, se.num_students FROM Semesters s JOIN semester_enrolments se ON s.semester_id = se.semester_id ORDER BY se.num_students DESC NULLS LAST LIMIT 1;
SELECT d.department_description FROM Departments d WHERE d.department_name ILIKE '%computer%';
SELECT d.department_description FROM Departments d WHERE d.department_name ilike '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, se.degree_program_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) >= 2 ORDER BY s.student_id NULLS LAST;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE LOWER(dp.degree_summary_description) = 'bachelor';
SELECT s.first_name, s.middle_name, s.last_name, dp.degree_summary_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT dp.degree_summary_name, COUNT(se.student_id) AS total_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY total_students DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_id) AS total_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY total_students DESC LIMIT 1;
WITH student_programs AS (SELECT d.degree_program_id, d.degree_summary_name, COUNT(se.student_id) AS num_students FROM Student_Enrolment se JOIN Degree_Programs d ON se.degree_program_id = d.degree_program_id GROUP BY d.degree_program_id, d.degree_summary_name) SELECT sp.degree_program_id, sp.degree_summary_name, sp.num_students FROM student_programs sp ORDER BY sp.num_students DESC LIMIT 1;
WITH student_enrolment_count AS (SELECT d.degree_program_id, COUNT(se.student_id) AS total_students FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_program_id) SELECT sec.degree_program_id, sec.total_students FROM student_enrolment_count sec ORDER BY sec.total_students DESC NULLS LAST LIMIT 1;
WITH student_enrolment_count AS (SELECT se.student_id, COUNT(se.student_enrolment_id) AS total_enrolments FROM Student_Enrolment se GROUP BY se.student_id) SELECT s.student_id, s.first_name, s.middle_name, s.last_name, sec.total_enrolments FROM student_enrolment_count sec JOIN Students s ON sec.student_id = s.student_id ORDER BY sec.total_enrolments DESC NULLS LAST LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrolments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrolments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_id IS NULL;
WITH se AS (SELECT se.student_id, se.degree_program_id, se.semester_id FROM Student_Enrolment se) SELECT s.semester_name FROM Semesters s LEFT JOIN se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id WHERE se.student_id IS NOT NULL ORDER BY c.course_name ASC;
SELECT s.course_id, COUNT(se.student_enrolment_id) AS total_enrollments FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses s ON sec.course_id = s.course_id GROUP BY s.course_id ORDER BY total_enrollments DESC NULLS LAST LIMIT 1;
SELECT c.course_name, COUNT(se.student_id) AS total_students FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY c.course_name ORDER BY total_students DESC LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
WITH CourseTranscripts AS (SELECT t.transcript_id, COUNT(tc.student_course_id) AS course_count FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id) SELECT ct.transcript_id, ct.course_count FROM CourseTranscripts ct WHERE ct.course_count >= 2 ORDER BY ct.transcript_id NULLS LAST;
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_first_registered = (SELECT MIN(s2.date_first_registered) FROM Students s2);
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC NULLS LAST LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_left = (SELECT MIN(s2.date_left) FROM Students s2);
WITH EarliestGrad AS (SELECT s.student_id, s.first_name, s.middle_name, s.last_name, MIN(te.transcript_date) AS earliest_transcript_date FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcripts te ON sec.student_course_id = te.student_course_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name) SELECT eg.first_name, eg.middle_name, eg.last_name FROM EarliestGrad eg ORDER BY eg.earliest_transcript_date ASC LIMIT 1;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.state_province_county, a.country FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.state_province_county, a.country ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2, COUNT(s.student_id) AS number_of_students FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY number_of_students DESC LIMIT 1;
SELECT AVG(EXTRACT(epoch FROM t.transcript_date)) AS average_transcript_time FROM Transcripts t;
SELECT AVG(t.transcript_date) FROM Transcripts t;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(t.transcript_date) AS earliest_transcript_date, s.first_name, s.last_name FROM Transcripts t JOIN Student_Enrolment se ON t.transcript_id = se.student_enrolment_id JOIN Students s ON se.student_id = s.student_id GROUP BY s.first_name, s.last_name;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(t.transcript_id) AS total_transcripts FROM Transcripts t;
SELECT MAX(t.transcript_date) AS last_transcript_release_date FROM Transcripts t;
SELECT MAX(t.transcript_date) AS last_transcript_date FROM Transcripts t;
SELECT COUNT(te.student_enrolment_id) AS total_transcripts, te.student_enrolment_id FROM Student_Enrolment te GROUP BY te.student_enrolment_id ORDER BY total_transcripts DESC NULLS LAST LIMIT 1;
SELECT COUNT(tc.student_course_id), se.student_enrolment_id FROM Student_Enrolment_Courses se JOIN Transcript_Contents tc ON se.student_course_id = tc.student_course_id GROUP BY se.student_enrolment_id ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
WITH transcript_count AS (SELECT tc.student_course_id, COUNT(tc.student_course_id) AS num_transcripts FROM Transcript_Contents tc GROUP BY tc.student_course_id) SELECT MIN(num_transcripts) AS min_transcripts, tc.student_course_id FROM transcript_count tc GROUP BY tc.student_course_id ORDER BY min_transcripts ASC LIMIT 1;
SELECT s.semester_id, d.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs d ON se.degree_program_id = d.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE d.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id, d.degree_summary_name HAVING COUNT(DISTINCT d.degree_summary_name) = 2;
SELECT s.semester_id FROM Student_Enrolment se JOIN Students st ON se.student_id = st.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.department_id WHERE dp.department_name IN ('Masters', 'Bachelors') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.department_name) = 2;
SELECT COUNT(DISTINCT s.current_address_id) FROM Students s;
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.last_name DESC, s.first_name DESC;
SELECT s.other_student_details FROM Students s ORDER BY s.other_student_details DESC;
SELECT s.section_description FROM Sections s ORDER BY s.section_description ASC;
SELECT s.section_description FROM Sections s WHERE s.section_name = 'h';
SELECT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582' OR s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti');
SELECT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582' OR s.permanent_address_id IN (SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti');
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones';
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones';
SELECT COUNT(*) AS total_cartoons FROM Cartoon c WHERE c."Written_by" = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT c.title, c.directed_by FROM Cartoon c ORDER BY c.original_air_date ASC;
SELECT c.title, c.directed_by FROM cartoon c ORDER BY c.original_air_date ASC;
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones' OR c.directed_by = 'Brandon Vietti';
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Brandon Vietti%';
SELECT c."Country", COUNT(c."id") AS number_of_channels FROM "TV_Channel" c GROUP BY c."Country" ORDER BY number_of_channels DESC LIMIT 1;
SELECT c.Country, COUNT(*) AS number_of_channels FROM TV_Channel c GROUP BY c.Country ORDER BY number_of_channels DESC NULLS LAST LIMIT 1;
SELECT COUNT(DISTINCT s.series_name), COUNT(DISTINCT s.content) FROM TV_Channel s;
SELECT COUNT(DISTINCT s.id) AS number_of_series, COUNT(DISTINCT t.content) AS number_of_contents FROM TV_Channel t JOIN TV_Series s ON t.id = s.Channel;
SELECT t.content FROM TV_Channel t WHERE t.series_name = 'Sky Radio';
SELECT t.Content FROM TV_Channel t WHERE t.id = 'Sky Radio';
SELECT tc.Package_Option FROM TV_Channel tc WHERE tc.series_name ilike '%Sky Radio%';
SELECT tc.Package_Option FROM TV_Channel tc JOIN TV_Series ts ON tc.id = ts.Channel WHERE ts.series_name = 'Sky Radio';
SELECT COUNT(DISTINCT t.id) FROM TV_Channel t WHERE LOWER(t.Language) = 'english';
SELECT COUNT(DISTINCT t.id) FROM TV_Channel t WHERE t.Language = 'English';
WITH LanguageCount AS (SELECT t.Language, COUNT(t.id) AS LanguageCount FROM TV_Channel t GROUP BY t.Language) SELECT lc.Language, lc.LanguageCount FROM LanguageCount lc ORDER BY lc.LanguageCount ASC LIMIT 1;
SELECT COUNT(DISTINCT t.Language) AS number_of_channels, t.Language FROM TV_Channel t GROUP BY t.Language ORDER BY number_of_channels ASC LIMIT 1;
SELECT DISTINCT t.Language, COUNT(t.id) FROM TV_Channel t GROUP BY t.Language ORDER BY t.Language ASC;
SELECT COUNT(DISTINCT t.id) AS number_of_channels, t.Language FROM TV_Channel t GROUP BY t.Language ORDER BY number_of_channels DESC NULLS LAST;
SELECT tc.series_name FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.id = 1;
SELECT tc."series_name" FROM "TV_Channel" tc JOIN "Cartoon" c ON tc."id" = c."Channel" WHERE c."Title" = 'The Rise of the Blue Beetle';
SELECT c.title FROM "Cartoon" c JOIN "TV_Channel" t ON c.channel = t.id WHERE t.series_name ilike '%Sky Radio%';
SELECT c.title FROM cartoon c JOIN tv_channel t ON c.channel = t.id WHERE t.series_name ilike '%Sky Radio%';
SELECT s.episode, s.rating FROM tv_series s ORDER BY s.rating DESC NULLS LAST;
SELECT s.episode, s.rating FROM TV_series s ORDER BY s.rating DESC;
SELECT s.episode, s.rating FROM TV_series s ORDER BY s.rating DESC LIMIT 3;
SELECT s.episode, s.rating FROM TV_series s ORDER BY s.rating DESC LIMIT 3;
SELECT MIN(s.Share) AS min_share, MAX(s.Share) AS max_share FROM "TV_series" s;
SELECT MAX(s.Share), MIN(s.Share) FROM "TV_series" s;
SELECT ts."Air_Date" FROM "TV_series" ts WHERE ts."Episode" = 'A Love of a Lifetime';
SELECT s.air_date FROM tv_series s WHERE s.episode = 'A Love of a Lifetime';
SELECT s.Weekly_Rank FROM "TV_series" s WHERE s.Episode = 'A Love of a Lifetime';
SELECT s.Weekly_Rank FROM TV_series s WHERE s.Episode = 'A Love of a Lifetime';
SELECT t."series_name" FROM "TV_Channel" t JOIN "TV_series" s ON t."id" = s."Channel" WHERE s."Episode" = 'A Love of a Lifetime';
SELECT s.Series_name FROM TV_Series s JOIN TV_Channel t ON s.Channel = t.id WHERE s.Episode = 'A Love of a Lifetime';
SELECT ts."Episode" FROM "TV_series" ts JOIN "TV_Channel" tc ON ts."Channel" = tc."id" WHERE LOWER(tc."series_name") ='sky radio';
SELECT s.episode FROM TV_series s WHERE s.channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT c.Directed_by, COUNT(*) AS number_of_cartoons FROM Cartoon c GROUP BY c.Directed_by ORDER BY number_of_cartoons DESC NULLS LAST;
SELECT d."Directed_by", COUNT(c."id") AS number_of_cartoons FROM "Cartoon" c JOIN "TV_Channel" t ON c."Channel" = t."id" WHERE t."Content" = 'Cartoon' GROUP BY d."Directed_by" ORDER BY number_of_cartoons DESC NULLS LAST;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC NULLS LAST LIMIT 1;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT t."Package_Option", t."series_name" FROM "TV_Channel" t WHERE t."Hight_definition_TV" = 'Yes';
SELECT t."Package_Option", t."series_name" FROM "TV_Channel" t WHERE t."Hight_definition_TV" = 'Yes';
SELECT DISTINCT t."Country" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Written_by" = 'Todd Casey';
SELECT DISTINCT c."Country" FROM "TV_Channel" c JOIN Cartoon ca ON c."id" = ca."Channel" WHERE ca."Written_by" ilike '%Todd%Casey%' ORDER BY c."Country" ASC;
SELECT DISTINCT c.Country FROM "TV_Channel" c LEFT JOIN Cartoon ct ON c.id = ct.Channel WHERE ct.Channel IS NULL AND c.Country IS NOT NULL;
SELECT DISTINCT t."Country" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Written_by" NOT ILIKE '%Todd Casey%' ORDER BY t."Country" NULLS LAST;
SELECT tc."series_name", tc."Country" FROM "TV_Channel" tc JOIN "TV_series" ts ON tc."id" = ts."Channel" JOIN "Cartoon" c ON tc."id" = c."Channel" WHERE c."Directed_by" ilike '%Ben Jones%' AND c."Directed_by" ilike '%Michael Chang%' GROUP BY tc."series_name", tc."Country" ORDER BY tc."series_name" ASC, tc."Country" ASC;
SELECT tc."series_name", tc."Country" FROM "TV_Channel" tc JOIN "TV_series" ts ON tc."id" = ts."Channel" JOIN "Cartoon" c ON ts."id" = c."Channel" WHERE c."Directed_by" IN ('Ben Jones', 'Michael Chang') ORDER BY tc."series_name" NULLS LAST;
SELECT tc.Pixel_aspect_ratio_PAR, tc.Country FROM TV_Channel tc WHERE tc.Language!= 'English' ORDER BY tc.Country NULLS LAST;
SELECT tc.Pixel_aspect_ratio_PAR, tc.Country FROM TV_Channel tc WHERE tc.Language!= 'English';
WITH country_channel_count AS (SELECT tv_channel.country, COUNT(tv_channel.id) AS channel_count FROM tv_channel GROUP BY tv_channel.country HAVING COUNT(tv_channel.id) > 2) SELECT tv_channel.id FROM tv_channel JOIN country_channel_count ON tv_channel.country = country_channel_count.country;
SELECT DISTINCT c.id FROM TV_Channel c GROUP BY c.id HAVING COUNT(c.id) > 2;
SELECT DISTINCT t.id FROM TV_Channel t WHERE t.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by ilike '%Ben Jones%');
SELECT DISTINCT c.Channel FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id WHERE c.Directed_by not ilike '%Ben Jones%';
SELECT tc.Package_Option FROM TV_Channel tc WHERE tc.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by ilike '%Ben Jones%');
SELECT DISTINCT t."Package_Option" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Directed_by" not ilike '%Ben Jones%' ORDER BY t."Package_Option" NULLS LAST;
SELECT COUNT(*) AS number_of_players FROM "poker_player";
SELECT COUNT(*) FROM "poker_player";
SELECT pp.Earnings FROM "poker_player" pp ORDER BY pp.Earnings DESC;
SELECT p.Earnings FROM "poker_player" p ORDER BY p.Earnings DESC;
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p;
SELECT pp."Poker_Player_ID", pp."Final_Table_Made", pp."Best_Finish" FROM "poker_player" pp;
SELECT AVG(p.Earnings) FROM "poker_player" p;
SELECT AVG(p.Earnings) AS average_earnings FROM "poker_player" p;
SELECT pp."Money_Rank" FROM "poker_player" pp WHERE pp."Earnings" = (SELECT MAX(pp2."Earnings") FROM "poker_player" pp2);
SELECT pp."Money_Rank" FROM "poker_player" pp WHERE pp."Earnings" = (SELECT MAX(pp2."Earnings") FROM "poker_player" pp2);
SELECT MAX(p."Final_Table_Made") AS max_final_tables FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT MAX(p."Final_Table_Made") FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT p.Name FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID";
SELECT p."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID";
SELECT p."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" > 300000;
SELECT p."Name" FROM "poker_player" p WHERE p."Earnings" > 300000;
SELECT p.Name, p.Poker_Player_ID FROM "poker_player" p ORDER BY p.Final_Table_Made ASC;
SELECT p."Name", COUNT(pp."Poker_Player_ID") AS num_final_tables FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" GROUP BY p."Name" ORDER BY num_final_tables ASC;
SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN(e) FROM "poker_player");
SELECT p.Name, p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" ASC LIMIT 1;
SELECT p."Money_Rank" FROM "poker_player" p JOIN "people" pe ON p."People_ID" = pe."People_ID" ORDER BY pe."Height" DESC NULLS LAST LIMIT 1;
SELECT p."Money_Rank" FROM "poker_player" p JOIN "people" pe ON p."People_ID" = pe."People_ID" ORDER BY pe."Height" DESC LIMIT 1;
SELECT AVG(p.Earnings) FROM "poker_player" p JOIN "people" pe ON p."People_ID" = pe."People_ID" WHERE pe.Height > 200;
SELECT AVG(p.Earnings) FROM "poker_player" p JOIN "people" p2 ON p."People_ID" = p2."People_ID" WHERE p2."Height" > 200;
SELECT p.name, p."Poker_Player_ID", SUM(p2.earnings) AS total_earnings FROM "poker_player" p2 JOIN "people" p ON p2."People_ID" = p."People_ID" GROUP BY p.name, p."Poker_Player_ID" ORDER BY total_earnings DESC NULLS LAST;
SELECT p.Name, p."Poker_Player_ID", SUM(p.Earnings) AS Total_Earnings FROM "poker_player" p GROUP BY p.Name, p."Poker_Player_ID" ORDER BY Total_Earnings DESC;
SELECT p.Nationality, COUNT(p.Nationality) AS number_of_people FROM people p GROUP BY p.Nationality ORDER BY number_of_people DESC NULLS LAST;
SELECT p.Nationality, COUNT(*) AS COUNT FROM people p GROUP BY p.Nationality ORDER BY COUNT DESC NULLS LAST;
SELECT p.Nationality, COUNT(*) AS frequency FROM people p GROUP BY p.Nationality ORDER BY frequency DESC LIMIT 1;
SELECT p.Nationality, COUNT(p.Nationality) AS Count FROM people p GROUP BY p.Nationality ORDER BY Count DESC LIMIT 1;
SELECT p1."Nationality" FROM "poker_player" p1 JOIN "people" p2 ON p1."People_ID" = p2."People_ID" GROUP BY p1."Nationality" HAVING COUNT(DISTINCT p1."Poker_Player_ID") > 1;
SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.Nationality) >= 2;
SELECT p.Name, p."Birth_Date" FROM "people" p ORDER BY p.Name ASC;
SELECT p.Name, p.Birth_Date FROM people p ORDER BY p.Name ASC;
SELECT p."Name" FROM "people" p WHERE p."Nationality"!= 'Russia';
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russia';
SELECT p.Name FROM people p WHERE p."People_ID" NOT IN (SELECT pp."People_ID" FROM "poker_player" pp);
SELECT p.Name FROM people p WHERE p.Name NOT IN (SELECT pp.Name FROM poker_player pp);
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC;
SELECT v.vote_id, v.phone_number, v.state FROM VOTES v;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(v.created) AS last_vote_date FROM VOTES v WHERE v.state = 'CA';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name!= 'Jessie Alloway';
SELECT DISTINCT v.state, v.created FROM VOTES v ORDER BY v.state, v.created NULLS LAST;
SELECT c.contestant_number, c.contestant_name FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT v.contestant_number, c.contestant_name, COUNT(v.vote_id) AS vote_count FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY v.contestant_number, c.contestant_name ORDER BY vote_count ASC LIMIT 1;
SELECT SUM(COUNT(vote_id)) AS total_votes FROM VOTES v WHERE v.state IN ('NY', 'CA');
SELECT COUNT(*) AS contestants_without_votes FROM CONTESTANTS c WHERE c.contestant_number NOT IN (SELECT DISTINCT v.contestant_number FROM VOTES v);
SELECT ac.state, COUNT(v.phone_number) AS total_votes FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state GROUP BY ac.state ORDER BY total_votes DESC LIMIT 1;
SELECT v.created, v.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name ilike '%Tabatha Gehling%';
SELECT v.state FROM VOTES v JOIN CONTESTANTS c1 ON v.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss' GROUP BY v.state;
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name ilike '%Al%';
SELECT c.Name FROM country c WHERE c.IndepYear > 1950 ORDER BY c.Name NULLS LAST;
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm ilike '%republic%';
SELECT COUNT(*) FROM country c WHERE c.GovernmentForm ilike '%republic%';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT c.Continent FROM country c WHERE c.Code = 'AIA';
SELECT c.Continent FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Anguilla';
SELECT c.Region FROM city c WHERE c.Name = 'Kabul';
SELECT c.Name, c.Region FROM city c WHERE c.Name = 'Kabul';
SELECT cl.Language, MAX(cl.Percentage) AS Max_Percentage FROM countrylanguage cl WHERE cl.CountryCode = 'ABC' GROUP BY cl.Language ORDER BY Max_Percentage DESC LIMIT 1;
SELECT cl.Percentage, cl.Language FROM countrylanguage cl WHERE cl.CountryCode = (SELECT c.Code FROM country c WHERE c.Name = 'Aruba') ORDER BY cl.Percentage DESC NULLS LAST LIMIT 1;
SELECT c.population, c.life_expectancy FROM country c WHERE c.name = 'Brazil';
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Code = 'BRA';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Region = 'Central Africa';
SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(c2.LifeExpectancy) FROM country c2 WHERE c2.Continent = 'Asia');
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(c2.LifeExpectancy) FROM country c2 WHERE c2.Continent = 'Asia');
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM country c WHERE c.Continent = 'Asia';
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM country c WHERE c.Continent = 'Asia';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.GovernmentForm = 'Republic' AND c.Continent = 'Africa';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.GovernmentForm = 'Republic' AND c.Continent = 'Africa';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.Population) AS total_population FROM city c WHERE LOWER(c.District) = 'gelderland';
SELECT SUM(c.population) AS total_population FROM city c WHERE LOWER(c.district) = 'gelderland';
SELECT AVG(c.GNP), SUM(c.Population) AS total_population FROM country c WHERE c.GovernmentForm LIKE '%US territory%' GROUP BY c.GovernmentForm;
SELECT AVG(c.GNP), SUM(c.Population) AS total_population FROM country c WHERE c.Code2 = 'US';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT g.GovernmentForm) FROM country c JOIN city ci ON c.Code = ci.CountryCode JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia';
SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Asia';
SELECT SUM(cl.Percentage) AS total_percentage FROM countrylanguage cl WHERE cl.CountryCode = 'ABC';
SELECT COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code = 'ABW';
SELECT COUNT(*) FROM countrylanguage cl WHERE cl.countrycode = 'AFG' AND cl.isofficial = 'T';
SELECT COUNT(*) AS num_of_languages FROM countrylanguage WHERE countrycode = 'AFG' AND iso = 'T';
SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY num_languages DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS language_count FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY language_count DESC LIMIT 1;
SELECT c.Continent, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
WITH LanguageCount AS (SELECT c.Continent, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent) SELECT Continent FROM LanguageCount ORDER BY LanguageCount DESC LIMIT 1;
SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE LOWER(cl.language) = 'english' AND LOWER(cl.language) = 'dutch';
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'english' AND LOWER(cl.Language) = 'dutch';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French');
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T' GROUP BY c.Name;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' AND cl.Language IN (SELECT cl2.Language FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) FROM country c WHERE c.Name LIKE '%Chinese%' AND c.Continent IN ('Asia', 'Africa', 'Europe', 'North America', 'South America', 'Oceania', 'Antarctica');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') ORDER BY c.Region NULLS LAST;
SELECT c.Region, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT cl.Language, SUM(cl.Percentage) AS TotalPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY TotalPercentage DESC LIMIT 1;
SELECT cl.Language, COUNT(cl.CountryCode) AS NumberOfCountries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm ='republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm ='republic' GROUP BY cl.Language HAVING COUNT(c.Code) = 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC NULLS LAST LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT SUM(c.population) AS total_population FROM city c JOIN country l ON c.countrycode = l.code JOIN countrylanguage cl ON l.code = cl.countrycode WHERE cl.language!= 'English';
SELECT SUM(c.Population) AS total_population FROM city c JOIN country cl ON c.CountryCode = cl.Code LEFT JOIN countrylanguage cl2 ON cl.Code = cl2.CountryCode WHERE cl2.Language!= 'English' AND cl2.IsOfficial = 'T';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState ilike '%Beatrix%' ORDER BY cl.Language NULLS LAST;
SELECT COUNT(DISTINCT cl.Language) AS total_official_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930;
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe') ORDER BY c.Name NULLS LAST;
SELECT c.Name FROM country c JOIN country c2 ON c.Population < c2.Population AND c.Continent = 'Africa' AND c2.Continent = 'Asia' ORDER BY c.Name;
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND ci.Population > (SELECT MIN(Population) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa')) ORDER BY c.Name NULLS LAST;
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country c2 WHERE c2.Continent = 'Africa');
SELECT c.Name, c.Population FROM country c JOIN city d ON c.Code = d.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country c2 JOIN city d2 ON c2.Code = d2.CountryCode WHERE c2.Continent = 'Africa');
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language!= 'English';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T' GROUP BY c.Code ORDER BY c.Code NULLS LAST;
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic' ORDER BY c.Code NULLS LAST;
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T' AND cl.Language!= 'English' AND co.Continent = 'Europe';
SELECT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code WHERE cl.Continent = 'Europe' AND cl.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese' AND LOWER(co.Continent) = 'asia';
SELECT DISTINCT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl2 ON c.CountryCode = cl2.CountryCode WHERE cl.Continent = 'Asia' AND cl2.Language = 'Chinese';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(c2.Population) FROM country c2);
SELECT c.Name, c.HeadOfState, MAX(c.SurfaceArea) AS MaxSurfaceArea FROM country c GROUP BY c.Name, c.HeadOfState ORDER BY MaxSurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3 ORDER BY num_languages DESC NULLS LAST;
SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2 ORDER BY num_languages DESC NULLS LAST;
SELECT c.District, COUNT(c.ID) AS number_of_cities FROM city c WHERE c.Population > (SELECT AVG(c2.Population) FROM city c2) GROUP BY c.District ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.District, COUNT(*) AS number_of_cities FROM city c WHERE c.Population > (SELECT AVG(c2.Population) FROM city c2) GROUP BY c.District ORDER BY number_of_cities DESC;
SELECT g.GovernmentForm, AVG(c.LifeExpectancy) AS average_life_expectancy, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY g.GovernmentForm HAVING AVG(c.LifeExpectancy) > 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm ORDER BY total_population DESC NULLS LAST;
SELECT c.Continent, AVG(clife.LifeExpectancy) AS avg_life_expectancy, SUM(c.Population) AS total_population FROM country c JOIN countrylanguage clife ON c.Code = clife.CountryCode WHERE clife.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(clife.LifeExpectancy) < 72 ORDER BY avg_life_expectancy DESC NULLS LAST;
SELECT c.Continent, SUM(c.Population) AS total_population, AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC NULLS LAST LIMIT 5;
SELECT c.Name FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC NULLS LAST LIMIT 3;
SELECT c.Name FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.Continent = 'Asia';
SELECT COUNT(*) AS number_of_countries FROM country WHERE Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT c.Name FROM country c WHERE c.Population = 80000 AND c.Continent = 'Europe';
SELECT SUM(c.population) AS total_population, AVG(c.SurfaceArea) AS average_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(c.Population), AVG(c.SurfaceArea) AS average_surface_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000 ORDER BY c.Name ASC;
SELECT cl.Language, COUNT(cl.CountryCode) AS Number_of_Countries FROM countrylanguage cl GROUP BY cl.Language ORDER BY Number_of_Countries DESC LIMIT 1;
SELECT c.Language, COUNT(c.Language) AS Count FROM countrylanguage c GROUP BY c.Language ORDER BY c.Language LIMIT 1;
SELECT c.Name, cl.Language, MAX(cl.Percentage) AS Max_Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name, cl.Language ORDER BY c.Name, Max_Percentage DESC;
SELECT c.Code, MAX(cl.Percentage) AS Max_Percentage, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, cl.Language ORDER BY Max_Percentage DESC NULLS LAST;
SELECT COUNT(DISTINCT c.Code) AS number_of_countries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) ='spanish' AND cl.IsOfficial = 'T';
SELECT c.Code, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC;
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(*) AS conductor_count FROM "conductor";
SELECT COUNT(DISTINCT c.Conductor_ID) FROM conductor c;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age ASC;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age ASC;
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT AVG(s.Attendance) FROM show s;
SELECT AVG(s.Attendance) AS average_attendance FROM show s;
SELECT MAX(CAST(p.Share AS FLOAT), MIN(CAST(p.Share AS FLOAT)) FROM performance p WHERE p.Type!= 'Live final';
SELECT MAX(p.Share) AS max_share, MIN(p.Share) AS min_share FROM performance p WHERE p.Type!= 'Live final';
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT c.Name, c.Age, c.Nationality, c.Year_of_Work FROM conductor c ORDER BY c.Year_of_Work DESC;
SELECT c.Name, COUNT(o.Orchestra_ID) AS years_of_work FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY years_of_work DESC;
SELECT c.Name, MAX(c.Year_of_Work) AS max_year_of_work FROM conductor c GROUP BY c.Name ORDER BY max_year_of_work DESC LIMIT 1;
WITH conductor_years AS (SELECT c.Conductor_ID, MAX(o.Year_of_Founded) AS latest_year FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID) SELECT c.Name, cy.latest_year - c.Age AS years_of_experience FROM conductor_years cy JOIN conductor c ON cy.Conductor_ID = c.Conductor_ID ORDER BY years_of_experience DESC NULLS LAST LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID ORDER BY c.Name;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID ORDER BY c.Name;
SELECT DISTINCT c."Name" FROM "conductor" c JOIN "orchestra" o ON c."Conductor_ID" = o."Conductor_ID" GROUP BY c."Name" HAVING COUNT(o."Orchestra_ID") > 1 ORDER BY c."Name" NULLS LAST;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS Number_of_Orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY Number_of_Orchestras DESC LIMIT 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS NumberOfOrchestrasConducted FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY NumberOfOrchestrasConducted DESC NULLS LAST LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008 ORDER BY c.Name ASC;
SELECT o.Record_Company, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM orchestra o GROUP BY o.Record_Company ORDER BY number_of_orchestras DESC NULLS LAST;
SELECT r.Record_Company, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY r.Record_Company;
SELECT m.Major_Record_Format, COUNT(m.Major_Record_Format) AS count FROM orchestra m GROUP BY m.Major_Record_Format ORDER BY count ASC;
SELECT o.Major_Record_Format, COUNT(*) AS COUNT FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY COUNT DESC;
SELECT r.Record_Company, COUNT(r.Record_Company) AS Count FROM orchestra r GROUP BY r.Record_Company ORDER BY Count DESC LIMIT 1;
WITH rc AS (SELECT o.Record_Company, COUNT(o.Orchestra_ID) AS COUNT FROM orchestra o GROUP BY o.Record_Company) SELECT rc.Record_Company, rc.COUNT FROM rc WHERE rc.COUNT = (SELECT MAX(COUNT) FROM rc);
SELECT o.orchestra FROM orchestra o WHERE o.orchestra_ID NOT IN (SELECT p.orchestra_ID FROM performance p);
SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p);
SELECT DISTINCT oc.Record_Company FROM orchestra oc WHERE oc.Year_of_Founded < 2003 INTERSECT SELECT DISTINCT oc.Record_Company FROM orchestra oc WHERE oc.Year_of_Founded >= 2003;
SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 AND o.Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003);
SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra o WHERE LOWER(o.Major_Record_Format) IN ('cd', 'dvd');
SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra o WHERE o.Major_Record_Format ilike '%CD%' OR o.Major_Record_Format ilike '%DVD%';
SELECT DISTINCT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded, o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded NULLS LAST;
SELECT o.Year_of_Founded, COUNT(p.Performance_ID) AS number_of_performances FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded ASC NULLS LAST;
SELECT COUNT(DISTINCT h.ID) FROM Highschooler h;
SELECT COUNT(*) FROM Highschooler;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name NULLS LAST;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name NULLS LAST;
SELECT h.grade FROM Highschooler h ORDER BY h.grade ASC NULLS LAST;
SELECT h.ID, h.name, h.grade FROM Highschooler h ORDER BY h.grade NULLS LAST;
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT h.name, h.grade FROM Highschooler h WHERE h.grade = 10;
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.id FROM Highschooler h WHERE h.name = 'Kyle';
SELECT COUNT(DISTINCT h.id) FROM Highschooler h WHERE h.grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler h WHERE h.grade IN (9, 10);
SELECT h.grade, COUNT(*) AS number_of_students FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(h.id) FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(*) AS number_of_students FROM Highschooler h GROUP BY h.grade ORDER BY number_of_students DESC LIMIT 1;
SELECT h.grade, COUNT(h.id) AS total_students FROM Highschooler h GROUP BY h.grade ORDER BY total_students DESC LIMIT 1;
SELECT g.grade, COUNT(h.id) AS number_of_students FROM Highschooler h JOIN Friend f ON h.id = f.student_id GROUP BY g.grade HAVING COUNT(h.id) >= 4 ORDER BY number_of_students DESC NULLS LAST;
SELECT DISTINCT h.grade FROM Highschooler h GROUP BY h.grade HAVING COUNT(h.ID) >= 4;
SELECT h.ID, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY num_friends DESC NULLS LAST;
SELECT h.name, COUNT(*) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY num_friends DESC NULLS LAST;
SELECT h.name, COUNT(f.student_id) AS friend_count FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id, COUNT(f.student_id) AS friend_count FROM Friend f GROUP BY f.student_id ORDER BY friend_count DESC LIMIT 1) AS m ON h.ID = m.student_id;
SELECT h.name, COUNT(f.student_id) AS friend_count FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY friend_count DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 3) f2 ON h.ID = f2.student_id ORDER BY h.name NULLS LAST;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 3) AS f ON h.ID = f.student_id;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name ilike '%Kyle%' GROUP BY h.name;
SELECT f.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle' UNION SELECT f.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE h.name = 'Kyle';
SELECT COUNT(friend_id) AS number_of_friends FROM Friend f WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend f WHERE f.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.id FROM Highschooler h WHERE h.id NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE NOT EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID) OR NOT EXISTS (SELECT 1 FROM Friend f WHERE f.friend_id = h.ID);
SELECT h.name FROM Highschooler h WHERE NOT EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID) OR NOT EXISTS (SELECT 1 FROM Friend f WHERE f.friend_id = h.ID);
SELECT DISTINCT h.id FROM Highschooler h JOIN Friend f ON h.id = f.student_id JOIN Likes l ON h.id = l.student_id WHERE h.id IN (SELECT f.friend_id FROM Friend f) AND h.id IN (SELECT l.liked_id FROM Likes l) ORDER BY h.id NULLS LAST;
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id WHERE f.friend_id IN (SELECT student_id FROM Friend) AND h.ID IN (SELECT liked_id FROM Likes) GROUP BY h.name;
SELECT h.name FROM Highschooler h WHERE EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID) AND EXISTS (SELECT 1 FROM Likes l WHERE l.student_id = h.ID);
SELECT l.student_id, COUNT(l.student_id) AS likes_count FROM Likes l GROUP BY l.student_id ORDER BY likes_count DESC NULLS LAST;
SELECT h.id, COUNT(l.student_id) AS num_likes FROM Highschooler h LEFT JOIN Likes l ON h.id = l.student_id GROUP BY h.id ORDER BY num_likes DESC NULLS LAST;
SELECT h.name, COUNT(*) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC NULLS LAST;
WITH total_likes AS (SELECT h.name, COUNT(*) AS total_like FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name) SELECT name, total_like FROM total_likes ORDER BY total_like DESC LIMIT 1;
SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY num_likes DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS t ON h.ID = t.student_id ORDER BY h.name;
SELECT h.name FROM Highschooler h JOIN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2) l ON h.ID = l.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.student_id) >= 2) AS f2 ON h.ID = f2.student_id WHERE h.grade > 5;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) AS f2 ON h.ID = f2.student_id WHERE h.grade > 5 ORDER BY h.name NULLS LAST;
SELECT COUNT(*) AS likes_count FROM Likes l WHERE l.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes l WHERE l.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;
SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id UNION ALL SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id;
SELECT MIN(h.grade) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;
SELECT MIN(h.grade) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;
SELECT DISTINCT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state WHERE o.state IS NOT NULL AND p.state IS NOT NULL;
SELECT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(d.age) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT AVG(CAST(d.age AS INT)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'IN' UNION SELECT t.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'IN' UNION SELECT t.professional_id, p.last_name, p.cell_number FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY t.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d); UNION SELECT DISTINCT o.first_name FROM Owners o WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d); ORDER BY p.first_name NULLS LAST;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN (SELECT d.owner_id, COUNT(d.dog_id) AS num_dogs FROM Dogs d GROUP BY d.owner_id ORDER BY num_dogs DESC LIMIT 1) AS subquery ON o.owner_id = subquery.owner_id;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id, COUNT(t.treatment_id) AS treatment_count FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id ORDER BY p.professional_id NULLS LAST;
SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY num_dogs DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name, COUNT(t.treatment_id) AS total_treatments FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY total_treatments DESC LIMIT 1;
SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY total_cost DESC LIMIT 1;
SELECT tt.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY total_cost ASC NULLS LAST LIMIT 1;
SELECT tt.treatment_type_description, MIN(t.cost_of_treatment) AS min_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY min_cost ASC LIMIT 1;
WITH total_charges AS (SELECT o.owner_id, SUM(c.charge_amount) AS total_charge FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Charges c ON t.treatment_id = c.charge_id GROUP BY o.owner_id) SELECT tc.owner_id, o.zip_code FROM total_charges tc JOIN Owners o ON tc.owner_id = o.owner_id ORDER BY tc.total_charge DESC LIMIT 1;
WITH total_spend AS (SELECT d.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id GROUP BY d.owner_id) SELECT ts.owner_id, ts.total_cost, o.zip_code FROM total_spend ts JOIN Owners o ON ts.owner_id = o.owner_id ORDER BY ts.total_cost DESC NULLS LAST LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (SELECT t.dog_id, COUNT(DISTINCT t.treatment_type_code) AS treatment_count FROM Treatments t GROUP BY t.dog_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2) AS subquery ON p.professional_id = subquery.dog_id;
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2);
SELECT p.first_name, p.last_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id ORDER BY t.date_of_treatment NULLS LAST;
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.treatment_id, t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY t.treatment_id NULLS LAST;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code ORDER BY o.first_name NULLS LAST, o.last_name NULLS LAST;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code WHERE d.breed_code = (SELECT breed_code FROM Breeds ORDER BY COUNT(dog_id) ASC LIMIT 1) ORDER BY t.date_of_treatment ASC;
WITH BreedFrequency AS (SELECT b.breed_code, COUNT(*) AS frequency FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_code), RarestBreed AS (SELECT bf.breed_code FROM BreedFrequency bf ORDER BY bf.frequency ASC LIMIT 1) SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN RarestBreed rb ON d.breed_code = rb.breed_code;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(d2.age) FROM Dogs d2);
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.date_of_birth = (SELECT MAX(d2.date_of_birth) FROM Dogs d2);
SELECT p.email_address FROM Professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');
SELECT p.email_address FROM Professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT COUNT(*) AS total_dogs_treated FROM Treatments;
SELECT COUNT(*) AS total_dogs_treated FROM Treatments t;
SELECT COUNT(DISTINCT p.professional_id) FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT COUNT(DISTINCT p.professional_id) FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%' ORDER BY p.city NULLS LAST;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%' ORDER BY o.first_name ASC;
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ilike '%North%' ORDER BY o.first_name NULLS LAST;
SELECT d.name, d.age FROM Dogs d WHERE CAST(d.age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT d.name, COUNT(d.dog_id) FROM Dogs d WHERE d.age < (SELECT AVG(d.age) FROM Dogs) GROUP BY d.name ORDER BY d.name NULLS LAST;
SELECT MAX(t.cost_of_treatment) AS most_recent_treatment_cost FROM Treatments t ORDER BY most_recent_treatment_cost DESC NULLS LAST LIMIT 1;
SELECT t.cost_of_treatment FROM Treatments t ORDER BY t.date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) AS num_dogs_without_treatment FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t);
SELECT COUNT(*) AS number_of_dogs_without_treatment FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t);
SELECT COUNT(*) FROM Owners o WHERE o.owner_id NOT IN (SELECT d.owner_id FROM Dogs d);
SELECT COUNT(DISTINCT o.owner_id) AS number_of_owners FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT MAX(d.age) AS age FROM Dogs d;
SELECT MAX(DATEDIFF(YEAR, d.date_of_birth, CURRENT_DATE())) AS age FROM Dogs d;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT c.charge_type, c.charge_amount FROM Charges c ORDER BY c.charge_type;
SELECT MAX(c.charge_amount) FROM Charges c;
SELECT c.charge_amount FROM Charges c WHERE c.charge_amount = (SELECT MAX(c2.charge_amount) FROM Charges c2);
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT d.breed_code, d.size_code FROM Dogs d;
SELECT d.breed_code, d.size_code FROM Dogs d GROUP BY d.breed_code, d.size_code;
SELECT p.first_name, tt.treatment_type_description FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT p.first_name, tt.treatment_type_description FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(DISTINCT s."Singer_ID") FROM "singer" s;
SELECT COUNT(*) FROM singer;
SELECT s.Name FROM singer s ORDER BY s.Net_Worth_Millions ASC;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions ASC;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s ORDER BY s."Birth_Year" ASC;
SELECT s.Name FROM "singer" s WHERE s.Citizenship!= 'France' ORDER BY s.Name ASC;
SELECT s.Name FROM "singer" s WHERE s.Citizenship!= 'French' ORDER BY s.Name ASC NULLS LAST;
SELECT s."Name" FROM "singer" s WHERE s."Birth_Year" = 1948 OR s."Birth_Year" = 1949;
SELECT s.Name FROM singer s WHERE s."Birth_Year" = 1948 OR s."Birth_Year" = 1949;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions DESC LIMIT 1;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions DESC LIMIT 1;
SELECT s.Citizenship, COUNT(s.Citizenship) AS number_of_singers FROM "singer" s GROUP BY s.Citizenship ORDER BY number_of_singers DESC NULLS LAST;
SELECT s.Citizenship, COUNT(s.Singer_ID) AS Number_of_Singers FROM "singer" s GROUP BY s.Citizenship ORDER BY Number_of_Singers DESC NULLS LAST;
SELECT s.Citizenship, COUNT(s.Citizenship) AS Count FROM singer s GROUP BY s.Citizenship ORDER BY Count DESC LIMIT 1;
SELECT s.Citizenship, COUNT(*) AS COUNT FROM "singer" s GROUP BY s.Citizenship ORDER BY COUNT DESC LIMIT 1;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS max_net_worth FROM singer s GROUP BY s.Citizenship ORDER BY max_net_worth DESC NULLS LAST;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM "singer" s GROUP BY s.Citizenship ORDER BY Max_Net_Worth DESC NULLS LAST;
SELECT s."Title", s."Singer_ID", s."Name" FROM "song" s JOIN "singer" si ON s."Singer_ID" = si."Singer_ID";
SELECT s."Name", s."Title" FROM "singer" s JOIN "song" st ON s."Singer_ID" = st."Singer_ID" ORDER BY s."Name";
SELECT DISTINCT s.Name FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID WHERE t.Sales > 300000;
SELECT DISTINCT s.Name FROM song s WHERE s.Sales > 300000;
SELECT s.Name FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name HAVING COUNT(ss.Song_ID) > 1;
SELECT s.Name FROM "singer" s JOIN (SELECT Singer_ID FROM "song" GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1) t ON s.Singer_ID = t.Singer_ID;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM song s GROUP BY s.Name;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM song s GROUP BY s.Name;
SELECT s.Name FROM "singer" s WHERE s.Singer_ID NOT IN (SELECT s.Singer_ID FROM "song") ORDER BY s.Name NULLS LAST;
SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT s.Singer_ID FROM song);
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship ORDER BY s.Citizenship NULLS LAST;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship ORDER BY s.Citizenship NULLS LAST;
SELECT COUNT(af.feature_id) FROM Other_Available_Features af;
SELECT rft.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE oaf.feature_name = 'AirCon';
SELECT p.property_type_description FROM Properties p WHERE p.property_type_code = 'P001';
SELECT p.property_name FROM Properties p WHERE p.room_count > 1 AND p.property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('House', 'Apartment'));

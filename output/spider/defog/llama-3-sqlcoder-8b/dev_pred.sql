SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s;
SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;
SELECT s.Name, s.Country, s.Age FROM singer s ORDER BY s.Age DESC NULLS LAST;
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France';
SELECT AVG(s."Age") AS average_age, MIN(s."Age") AS min_age, MAX(s."Age") AS max_age FROM "singer" s WHERE s."Country" = 'France';
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM singer s WHERE s.Age = (SELECT MIN(s2.Age) FROM singer s2);
SELECT s.Country FROM singer s WHERE s.Age > 20 GROUP BY s.Country;
SELECT s."Country" FROM "singer" s WHERE s."Age" > 20 GROUP BY s."Country" ORDER BY s."Country";
SELECT s.Country, COUNT(s.Singer_ID) AS number_of_singers FROM singer s GROUP BY s.Country;
SELECT s.Country, COUNT(*) AS number_of_singers FROM singer s GROUP BY s.Country ORDER BY number_of_singers DESC NULLS LAST;
SELECT s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer");
SELECT s."Name", s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer");
SELECT s."Location", s."Name" FROM "stadium" s WHERE s."Capacity" BETWEEN 5000 AND 10000;
SELECT s.Location, s.Name FROM stadium s WHERE s.Capacity BETWEEN 5000 AND 10000;
SELECT MAX(s.capacity), AVG(s.capacity) FROM stadium s;
SELECT AVG(s."Capacity"), MAX(s."Capacity") FROM "stadium" s;
SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(s2.average) FROM stadium s2);
SELECT s.name, s.capacity FROM stadium s ORDER BY s.average DESC LIMIT 1;
SELECT COUNT(*) FROM concert WHERE year = '2014' OR year = '2015';
SELECT COUNT(*) FROM concert c WHERE c.year IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM concert c JOIN stadium s ON c.Stadium_ID::int = s.Stadium_ID GROUP BY s.Name ORDER BY Number_of_Concerts DESC NULLS LAST;
SELECT s."Stadium_ID", COUNT(c."concert_ID") AS number_of_concerts FROM "stadium" s JOIN "concert" c ON s."Stadium_ID" = c."Stadium_ID" GROUP BY s."Stadium_ID";
SELECT s.name, s.capacity, COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.year >= '2014' GROUP BY s.name, s.capacity ORDER BY number_of_concerts DESC NULLS LAST LIMIT 1;
SELECT s.Name, s.Capacity FROM concert c JOIN stadium s ON c.Stadium_ID = CAST(s.Stadium_ID AS text) WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(c.Year, 'YYYY')) AS YEAR, COUNT(c.concert_ID) AS num_concerts FROM concert c GROUP BY YEAR ORDER BY num_concerts DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM TO_DATE(c.Year, 'YYYY')) AS YEAR, COUNT(c.concert_ID) AS concert_count FROM concert c GROUP BY YEAR ORDER BY concert_count DESC LIMIT 1;
SELECT s."Name" FROM "stadium" s WHERE NOT EXISTS (SELECT 1 FROM "concert" c WHERE s."Stadium_ID" = c."Stadium_ID");
SELECT s."Name" FROM "stadium" s WHERE s."Stadium_ID" NOT IN (SELECT c."Stadium_ID" FROM "concert" c);
SELECT s.Country FROM singer s WHERE s.Age > 40 AND s.Age < 30;
SELECT s.Name FROM Stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM Concert c WHERE c.Year = '2014');
SELECT s.Name FROM "stadium" s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM "concert" c WHERE c.Year = '2014');
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID::integer = sic.concert_ID::integer JOIN singer s ON sic.Singer_ID::integer = s.Singer_ID::integer GROUP BY c.concert_Name, c.Theme ORDER BY number_of_singers DESC NULLS LAST;
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name, COUNT(si.concert_ID) AS number_of_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name;
SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name ORDER BY num_concerts DESC NULLS LAST;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID::text = sic.Singer_ID JOIN concert c ON sic.concert_ID::int = c.concert_ID::int WHERE s.Song_Name ilike '%Hey%';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_ID IN (SELECT c.concert_ID FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name ilike '%Hey%');
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INTEGER) WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID::integer = s.Stadium_ID WHERE c.Year = '2014' AND c.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE YEAR = '2015');
WITH Capacity AS (SELECT s."Stadium_ID", s."Capacity" FROM "stadium" s ORDER BY s."Capacity" DESC LIMIT 1) SELECT COUNT(c."concert_ID") AS number_of_concerts FROM "concert" c JOIN Capacity ca ON c."Stadium_ID" = ca."Stadium_ID";
SELECT COUNT(c.concert_ID) AS number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(s2.Capacity) FROM stadium s2);
SELECT COUNT(*) FROM Pets p WHERE p.weight > 10;
SELECT COUNT(*) FROM Pets p WHERE p.weight > 10;
SELECT p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE pet_type = 'dog');
SELECT MAX(p.weight) AS heaviest_weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2 WHERE p2.pet_type = 'dog');
SELECT p.pettype, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pettype;
SELECT p.pet_type, MAX(p.weight) AS max_weight FROM Pets p GROUP BY p.pet_type;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(pet_age) FROM Pets p JOIN Has_Pet h ON p.petid = h.petid JOIN Student s ON h.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'F';
SELECT COUNT(*) AS dog_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(DISTINCT pet_type) FROM Pets;
SELECT COUNT(DISTINCT pet_type) FROM Pets;
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetType = 'dog' GROUP BY s.Fname;
SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetType = 'dog';
SELECT s.major, s.age FROM Student s WHERE s.stuid NOT IN (SELECT h.petid FROM Has_Pet h WHERE h.petid IN (SELECT p.petid FROM Pets p WHERE p.pettype = 'cat'));
SELECT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age IS NULL;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IS NULL;
SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT h.StuID FROM Has_Pet h JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat');
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND p.PetType!= 'cat' ORDER BY s.Fname NULLS LAST;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND p.PetType NOT IN (SELECT PetType FROM Pets WHERE PetType = 'cat');
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(p2.pet_age) FROM Pets p2);
SELECT p.pet_type, p.weight FROM Pets p WHERE p.pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT p.PetID, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_id, p.pet_age, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT p.pet_type, AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS max_age FROM Pets p GROUP BY p.pet_type;
SELECT p.pet_type, AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS max_age FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type;
SELECT p.pet_type, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pet_type ORDER BY p.pet_type NULLS LAST;
SELECT p.pettype, AVG(p.weight) AS average_weight FROM Pets p GROUP BY p.pettype ORDER BY p.pettype NULLS LAST;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID;
SELECT DISTINCT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID ORDER BY s.Fname NULLS LAST;
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(hp.PetID) AS number_of_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 0 ORDER BY s.StuID NULLS LAST;
SELECT s.StuID, COUNT(hp.PetID) AS pet_count FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID ORDER BY pet_count DESC NULLS LAST;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3 ORDER BY s.LName DESC LIMIT 1;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3;
SELECT AVG(s.Age) FROM Student s WHERE s.StuID NOT IN (SELECT h.StuID FROM Has_Pet h);
SELECT AVG(s.Age) FROM Student s WHERE s.StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp);
SELECT COUNT(ContId) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(*) AS country_count FROM countries c GROUP BY c.ContId, c.Continent;
SELECT c.ContId, c.Continent, COUNT(c.CountryId) AS num_of_countries FROM countries c GROUP BY c.ContId, c.Continent ORDER BY c.ContId NULLS LAST;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.Maker, cm.Id, COUNT(*) AS number_of_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Maker, cm.Id ORDER BY number_of_models DESC NULLS LAST;
SELECT m.Id AS maker_id, m.Maker AS full_name, COUNT(c.Model) AS number_of_models FROM car_makers m JOIN model_list ml ON m.Id = ml.Maker GROUP BY m.Id, m.Maker;
SELECT c.Model, MIN(c.Horsepower) AS Min_Horsepower FROM cars_data c GROUP BY c.Model;
SELECT m.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Horsepower = (SELECT MIN(cd2.Horsepower) FROM cars_data cd2);
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(c2.Weight) FROM cars_data c2);
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(cd2.Weight) FROM cars_data cd2);
SELECT DISTINCT m.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers m ON cn.Make = m.Maker WHERE cd.Year = 1970;
SELECT DISTINCT m.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers m ON cn.Make = m.Maker WHERE cd.Year = 1970;
SELECT c.Make, MIN(c.Year) AS Earliest_Year FROM Cars_Data c GROUP BY c.Make ORDER BY Earliest_Year NULLS LAST;
SELECT c.Maker, MIN(c.Year) AS earliest_year FROM cars_data c GROUP BY c.Maker ORDER BY earliest_year ASC NULLS LAST LIMIT 1;
SELECT DISTINCT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;
SELECT DISTINCT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year > 1980 ORDER BY c.Model NULLS LAST;
SELECT c.Continent, COUNT(*) AS car_makers_count FROM car_makers cm JOIN continents c ON cm.Country = c.ContId GROUP BY c.Continent ORDER BY car_makers_count DESC NULLS LAST;
SELECT c.Continent, COUNT(*) AS car_makers_count FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country ORDER BY COUNT(m.Id) DESC LIMIT 1;
WITH CountryMakers AS (SELECT c.CountryName, COUNT(cm.Id) AS NumMakers FROM Countries c JOIN Car_Makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName) SELECT cm.CountryName FROM CountryMakers cm ORDER BY cm.NumMakers DESC LIMIT 1;
SELECT COUNT(*) AS model_count, cm.FullName FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id GROUP BY cm.FullName;
SELECT ml.maker, COUNT(*) AS number_of_models, cm.full_name FROM model_list ml JOIN car_makers cm ON ml.maker = cm.id GROUP BY ml.maker, cm.full_name ORDER BY number_of_models DESC NULLS LAST;
SELECT c.accelerate FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE LOWER(cn.make) = 'amc' AND LOWER(cn.model) = 'hornet sportabout';
SELECT c.Accelerate FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE LOWER(cn.Model) = 'amc hornet sportabout';
SELECT COUNT(*) FROM car_makers cm WHERE LOWER(cm.country) = 'france';
SELECT COUNT(DISTINCT m.Maker) FROM car_makers m WHERE m.Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(*) FROM car_makers WHERE country = (SELECT CountryId FROM countries WHERE CountryName = 'usa');
SELECT COUNT(*) AS total_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Country = (SELECT CountryId FROM countries WHERE CountryName = 'United States');
SELECT AVG(CAST(cars_data.MPG AS REAL)) AS average_mpg FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4;
SELECT AVG(cast(c.MPG AS REAL)) AS average_mpg FROM cars_data c WHERE c.Cylinders = 4;
SELECT MIN(c.weight) FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT MIN(c.weight) FROM cars_data c WHERE c.cylinders = 8 AND c.year = 1974;
SELECT DISTINCT m.Make, c.Model FROM car_names c JOIN model_list m ON c.Model = m.Model;
SELECT m.Maker, n.Model FROM car_names n JOIN model_list m ON n.Model = m.Model;
SELECT c.CountryName, c.CountryId FROM Countries c WHERE c.CountryId IN (SELECT m.Country FROM Car_Makers m);
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers m ON c.CountryId = m.Country;
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE horsepower > '150';
SELECT c.Year, AVG(c.Weight) AS average_weight FROM cars_data c GROUP BY c.Year ORDER BY c.Year NULLS LAST;
SELECT c.Year, AVG(c.Weight) AS average_weight, AVG(c.Accelerate) AS average_accelerate FROM cars_data c GROUP BY c.Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 2 GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker WHERE c.Continent = 2 GROUP BY c.CountryName HAVING COUNT(DISTINCT ml.Model) >= 3;
SELECT MAX(c.Horsepower) AS Max_Horsepower, c.Make FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE c.Cylinders = 3 GROUP BY c.Make ORDER BY Max_Horsepower DESC NULLS LAST;
SELECT MAX(c.Horsepower) AS max_horsepower, c.Make FROM cars_data c WHERE c.Cylinders = 3 GROUP BY c.Make ORDER BY max_horsepower DESC NULLS LAST LIMIT 1;
SELECT c.Model, MAX(c.MPG) AS max_mpg FROM cars_data c GROUP BY c.Model ORDER BY max_mpg DESC LIMIT 1;
SELECT c.Model, c.Make, CAST(c.MPG AS FLOAT) AS MPG FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId ORDER BY MPG DESC LIMIT 1;
SELECT AVG(cast(c.Horsepower AS INTEGER)) AS average_horsepower FROM cars_data c WHERE c.Year < 1980;
SELECT AVG(cast(cars_data.horsepower AS INTEGER)) AS average_horsepower FROM cars_data WHERE cars_data.year < 1980;
SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Model = 'volvo';
SELECT AVG(c.Edispl) AS average_edispl FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN car_makers cm ON cn.Make = cm.Maker WHERE LOWER(cm.Maker) = 'volvo';
SELECT c.Cylinders, MAX(c.Accelerate) AS Max_Accelerate FROM cars_data c GROUP BY c.Cylinders;
SELECT MAX(c.Accelerate) FROM cars_data c GROUP BY c.Cylinders;
WITH model_counts AS (SELECT m.Model, COUNT(*) AS num_models FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY m.Model) SELECT mc.Model FROM model_counts mc ORDER BY mc.num_models DESC LIMIT 1;
WITH ModelVersions AS (SELECT cm.Model, COUNT(DISTINCT cm.MakeId) AS VersionCount FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY cm.Model) SELECT mv.Model FROM ModelVersions mv ORDER BY mv.VersionCount DESC NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) AS total_cars FROM cars_data WHERE YEAR = 1980;
SELECT COUNT(*) FROM cars_data cd WHERE cd.year = 1980;
SELECT COUNT(DISTINCT c.Model) FROM car_names c JOIN car_makers cm ON c.Make = cm.Maker WHERE LOWER(cm.FullName) = 'american motor company';
SELECT COUNT(*) FROM car_names cn JOIN car_makers cm ON cn.make = cm.maker WHERE LOWER(cm.country) = 'america';
SELECT cm.FullName, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName HAVING COUNT(*) > 3;
SELECT m.Maker, COUNT(*) AS model_count FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY m.Maker HAVING COUNT(*) > 3;
SELECT DISTINCT c.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON cn.Make = CAST(cm.Id AS TEXT) WHERE LOWER(cm.FullName) = 'general motors' AND cd.Weight > 3500;
SELECT DISTINCT c.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE (cm.Maker = 'General Motors' OR cn.Weight > 3500);
SELECT c.Year FROM cars_data c WHERE c.Weight >= 3000 AND c.Weight <= 4000;
SELECT DISTINCT c.Year FROM cars_data c WHERE c.Weight < 4000 AND c.Weight > 3000 ORDER BY c.Year NULLS LAST;
SELECT MAX(c.Accelerate) AS max_accelerate FROM cars_data c; SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(c2.Accelerate) FROM cars_data c2);
SELECT MAX(c.Accelerate) AS max_accelerate FROM cars_data c;
SELECT c.cylinders FROM cars_data c JOIN car_names cn ON c.id = cn.makeid WHERE cn.make = 'volvo' ORDER BY c.accelerate ASC LIMIT 1;
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId WHERE cn.Make = 'volvo' ORDER BY c.Accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2;
SELECT COUNT(*) FROM cars_data cd WHERE cd.Cylinders > 6;
SELECT COUNT(*) FROM cars_data cd WHERE cd.Cylinders > 6;
SELECT m.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT c.Model, MAX(c.Horsepower) AS max_horsepower FROM cars_data c WHERE c.Cylinders = 4 GROUP BY c.Model ORDER BY max_horsepower DESC NULLS LAST LIMIT 1;
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower!= (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders > 3;
SELECT c.MakeId, c.Model FROM cars_data cd JOIN car_names c ON cd.Id = c.MakeId WHERE cd.Cylinders < 4 AND cd.Horsepower < '100';
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders = 8 AND c.Year < 1980;
SELECT MAX(c.MPG) FROM cars_data c WHERE c.Cylinders >= 8 AND c.Year < 1980;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model AND cn.Make = ml.Maker WHERE cd.Weight < 3500 AND ml.Maker!= 1;
SELECT DISTINCT m.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Weight < 3500 AND LOWER(cm.Country)!= 'united states' AND LOWER(cm.Maker)!= 'ford';
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT m.Country FROM car_makers m);
SELECT m.Id, m.Maker FROM car_makers m JOIN model_list ml ON m.Id = ml.Maker GROUP BY m.Id, m.Maker HAVING COUNT(ml.Model) >= 2 ORDER BY m.Id NULLS LAST;
SELECT ml.Maker, COUNT(*) AS model_count FROM model_list ml GROUP BY ml.Maker HAVING COUNT(*) >= 2 AND COUNT(*) > 3;
SELECT c.CountryName, COUNT(*) AS num_makers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(*) > 3 UNION SELECT c.CountryName, COUNT(*) AS num_makers FROM countries c JOIN car_names cn ON c.CountryId = cn.MakeId JOIN car_makers cm ON cn.Make = cm.Maker WHERE cn.Model = 'fiat' GROUP BY c.CountryName HAVING COUNT(*) > 0;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(m.Id) > 3 UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_names cn ON c.CountryId = cn.MakeId JOIN car_makers m ON cn.Make = m.Maker WHERE m.Maker = 'Fiat' GROUP BY c.CountryId, c.CountryName;
SELECT a.country FROM airlines a WHERE a.airline = 'JetBlue Airways';
SELECT a.Country FROM airlines a WHERE a.Abbreviation = 'JetBlue';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'JetBlue Airways';
SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'Jetblue Airways';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.Airline, a.Abbreviation FROM airlines a WHERE a.Country = 'USA';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony';
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City ilike '%Anthony%';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines a WHERE a.Country = 'USA';
SELECT COUNT(*) FROM airlines a WHERE a.Country = 'USA';
SELECT a.city, a.country FROM airports a WHERE a.airportcode = 'ALO';
SELECT a.City, a.Country FROM airports a WHERE a.AirportCode = 'ALO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.AirportCode = 'AKO';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT a.AirportName FROM airports a WHERE a.City = 'Aberdeen';
SELECT COUNT(f.FlightNo) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'APG';
SELECT COUNT(*) FROM flights f WHERE f.DestAirport = 'ATO';
SELECT COUNT(*) AS num_flights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'ATO';
SELECT COUNT(f.FlightNo) AS number_of_flights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT COUNT(f.Airline, f.FlightNo) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.City = 'Aberdeen' AND d.City = 'Ashley';
SELECT COUNT(f.Airline) FROM flights f WHERE f.SourceAirport = 'Aberdeen' AND f.DestAirport = 'Ashley';
SELECT COUNT(*) AS total_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'JetBlue';
SELECT COUNT(f.Airline) FROM flights f WHERE f.Airline IN (SELECT u.uid FROM airlines u WHERE LOWER(u.Abbreviation) = 'jetblue');
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.Uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';
SELECT COUNT(f.FlightNo) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE LOWER(d.City) = 'asy' AND f.Airline = (SELECT uid FROM airlines WHERE LOWER(Airline) = 'united airlines');
SELECT COUNT(*) AS total_flights FROM flights f JOIN airlines a ON f.Airline = a.UID WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports s ON f.SourceAirport = s.AirportCode WHERE a.Abbreviation = 'UAL' AND s.AirportCode = 'AHD';
SELECT COUNT(*) AS number_of_flights FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE LOWER(Abbreviation) = 'ual');
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE f.Airline = 1 AND d.City = 'Aberdeen';
SELECT a.City, COUNT(f.Airline) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY flight_count DESC LIMIT 1;
WITH DestinationAirportCounts AS (SELECT f.DestAirport, COUNT(f.DestAirport) AS Count FROM flights f GROUP BY f.DestAirport) SELECT a.City, dac.Count FROM airports a JOIN DestinationAirportCounts dac ON a.AirportCode = dac.DestAirport ORDER BY dac.Count DESC LIMIT 1;
SELECT a.City, COUNT(f.FlightNo) AS flight_count FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY flight_count DESC LIMIT 1;
SELECT a.City, COUNT(f.SourceAirport) AS Frequency FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY Frequency DESC LIMIT 1;
SELECT a.AirportCode, COUNT(f.Airline) AS NumberOfFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY NumberOfFlights DESC LIMIT 1;
WITH AirportFlights AS (SELECT a.AirportCode, COUNT(f.Airline) AS NumFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode) SELECT af.AirportCode FROM AirportFlights af ORDER BY af.NumFlights DESC LIMIT 1;
SELECT a.AirportCode FROM airports a WHERE (SELECT COUNT(f.Airline, f.FlightNo) FROM flights f WHERE f.SourceAirport = a.AirportCode) = (SELECT MIN(COUNT(f2.Airline, f2.FlightNo)) FROM airports a2, flights f2 WHERE a2.AirportCode = f2.SourceAirport);
SELECT f.SourceAirport FROM flights f GROUP BY f.SourceAirport ORDER BY COUNT(f.SourceAirport) ASC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS total_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY total_flights DESC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.UID GROUP BY a.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT f.Airline, COUNT(f.FlightNo) AS flight_count FROM flights f GROUP BY f.Airline ORDER BY flight_count ASC LIMIT 1) AS b ON a.uid = b.Airline;
SELECT a.Abbreviation, COUNT(f.Airline) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation ORDER BY num_flights ASC LIMIT 1;
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT DISTINCT a.Airline FROM flights f JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.AirportCode = 'APG' AND d.AirportCode = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.DestAirport!= 'APG';
SELECT a.Airline, COUNT(f.Airline) AS flight_count FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.Airline) >= 10;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.Airline) AS f2 ON a.uid = f2.Airline WHERE f2.flight_count >= 10;
SELECT a.Airline FROM airlines a JOIN (SELECT f.Airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.Airline) AS f2 ON a.uid = f2.Airline WHERE f2.flight_count < 200;
SELECT a.Airline, COUNT(f.FlightNo) AS num_flights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200 ORDER BY num_flights DESC NULLS LAST;
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'UAL';
SELECT f.FlightNo FROM flights f WHERE f.SourceAirport = 'APG';
SELECT f.FlightNo FROM flights f WHERE f.SourceAirport = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE LOWER(d.City) = 'APG';
SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE LOWER(a.City) = 'aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT DISTINCT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights f JOIN airports d ON f.DestAirport = d.AirportCode WHERE d.City IN ('Aberdeen', 'Abilene');
SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT e.name, e.age FROM employee e ORDER BY e.age ASC;
SELECT e."Name", e."Age" FROM "employee" e ORDER BY e."Age" ASC;
SELECT e.city, COUNT(e.employee_id) AS number_of_employees FROM employee e GROUP BY e.city;
SELECT e.city, COUNT(*) AS number_of_employees FROM "employee" e GROUP BY e.city;
SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(e.city) > 1;
SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(e.city) > 1;
SELECT s.location, COUNT(*) AS shop_count FROM shop s GROUP BY s.location ORDER BY shop_count DESC NULLS LAST;
SELECT s.Location, COUNT(*) AS number_of_shops FROM shop s GROUP BY s.Location;
SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop);
SELECT s.manager_name, s.district, s.number_products FROM shop s ORDER BY s.number_products DESC LIMIT 1;
SELECT MIN(s.number_products), MAX(s.number_products) FROM shop s;
SELECT MIN(s.number_products), MAX(s.number_products) FROM shop s;
SELECT s.Name, s.Location, s.District, s.Number_products FROM shop s ORDER BY s.Number_products DESC NULLS LAST;
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);
SELECT s.name, s.number_products FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);
WITH EmployeeAwards AS (SELECT e.Name, COUNT(*) AS AwardCount FROM evaluation e GROUP BY e.Name) SELECT ea.Name, ea.AwardCount FROM EmployeeAwards ea ORDER BY ea.AwardCount DESC NULLS LAST LIMIT 1;
SELECT e.name FROM evaluation e JOIN employee em ON e.employee_id = em.employee_id GROUP BY e.employee_id, em.name ORDER BY COUNT(e.employee_id) DESC NULLS LAST LIMIT 1;
SELECT e.Name, MAX(e.Bonus) AS max_bonus FROM evaluation e GROUP BY e.Name ORDER BY max_bonus DESC NULLS LAST LIMIT 1;
SELECT e."Name" FROM "evaluation" ev JOIN "employee" e ON ev."Employee_ID" = CAST(e."Employee_ID" AS text) ORDER BY ev."Bonus" DESC LIMIT 1;
SELECT e.name FROM employee e WHERE e.employee_id NOT IN (SELECT e.employee_id FROM evaluation e);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT h.Employee_ID FROM hiring h) AND e.Employee_ID NOT IN (SELECT e1.Employee_ID FROM evaluation e1);
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.name FROM shop s WHERE s.shop_id NOT IN (SELECT h.shop_id FROM hiring h);
SELECT s.Name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE h.Shop_ID = s.Shop_ID);
SELECT s.Name, COUNT(h.Employee_ID) AS number_of_employees FROM "hiring" h JOIN "shop" s ON h.Shop_ID = s.Shop_ID GROUP BY s.Name ORDER BY number_of_employees DESC NULLS LAST;
SELECT s.name, COUNT(h.employee_id) AS number_of_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;
SELECT SUM(e.Bonus) AS total_bonus FROM evaluation e;
SELECT SUM(e.Bonus) AS total_bonus FROM evaluation e;
SELECT * FROM hiring;
SELECT h.Shop_ID, e.Name AS Employee_Name, h.Start_from, h.Is_full_time FROM hiring h JOIN employee e ON h.Employee_ID = e.Employee_ID;
SELECT s.District FROM shop s WHERE s.Number_products < 3000 AND EXISTS (SELECT 1 FROM shop s2 WHERE s2.District = s.District AND s2.Number_products > 10000);
SELECT DISTINCT d FROM shop s WHERE s.number_products < 3000 AND s.number_products > 10000;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT s.Location) FROM shop s;
SELECT COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Documents d;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d;
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d;
SELECT d.Document_ID, d.Document_Name, t.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ILIKE '%w%';
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description ilike '%w%';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT t.Template_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'ppt';
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT t.Template_ID, COUNT(d.Document_ID) AS num_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID ORDER BY num_documents DESC NULLS LAST;
SELECT t.Template_ID, COUNT(*) AS usage_count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_ID ORDER BY usage_count DESC NULLS LAST;
SELECT t.Template_ID, rt.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_ID, rt.Template_Type_Description ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT t.Template_ID, COUNT(d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID ORDER BY document_count DESC LIMIT 1;
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT t.Template_ID FROM Templates t WHERE t.Template_ID NOT IN (SELECT d.Template_ID FROM Documents d);
SELECT COUNT(*) AS total_templates FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT t.Template_ID, t.Version_Number, tt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code;
SELECT t.Template_ID, t.Version_Number, t.Template_Type_Code FROM Templates t ORDER BY t.Template_ID NULLS LAST;
SELECT DISTINCT tt.Template_Type_Code FROM Templates tt;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types ORDER BY Template_Type_Code;
SELECT t.Template_ID FROM Templates t WHERE t.Template_Type_Code IN ('PP', 'PPT');
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) IN ('pp', 'ppt');
SELECT COUNT(*) AS number_of_templates FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'cv';
SELECT COUNT(t.Template_ID) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'cv';
SELECT t.Version_Number, tt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Number_Of_Templates FROM Templates t GROUP BY t.Template_Type_Code ORDER BY t.Template_Type_Code NULLS LAST;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t GROUP BY t.Template_Type_Code ORDER BY t.Template_Type_Code NULLS LAST;
WITH TypeCounts AS (SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS NumTemplates FROM Templates t GROUP BY t.Template_Type_Code) SELECT tc.Template_Type_Code, tc.NumTemplates FROM TypeCounts tc ORDER BY tc.NumTemplates DESC LIMIT 1;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS COUNT FROM Templates t GROUP BY t.Template_Type_Code ORDER BY COUNT DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code HAVING COUNT(t.Template_ID) < 3 ORDER BY t.Template_Type_Code NULLS LAST;
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_ID, r.Template_Type_Description FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE t.Version_Number = (SELECT MIN(t2.Version_Number) FROM Templates t2);
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE LOWER(t.Template_Type_Code) = 'bk';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT tt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY tt.Template_Type_Code;
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS number_of_documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY number_of_documents DESC NULLS LAST;
SELECT t.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS document_count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY document_count DESC LIMIT 1;
WITH doc_type_counts AS (SELECT d.Template_ID, COUNT(d.Document_ID) AS count FROM Documents d GROUP BY d.Template_ID) SELECT tt.Template_Type_Code FROM Templates t JOIN doc_type_counts d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code ORDER BY d.count DESC LIMIT 1;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Code IS NULL;
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code WHERE t.Template_ID IS NULL;
SELECT t.Template_Type_Code, t.Template_Type_Description FROM Ref_Template_Types t;
SELECT t.Template_Type_Code, t.Template_Type_Description FROM Ref_Template_Types t ORDER BY t.Template_Type_Code NULLS LAST;
SELECT t.Template_Type_Description FROM Ref_Template_Types t WHERE t.Template_Type_Code = 'AD';
SELECT rt.Template_Type_Description FROM Ref_Template_Types rt WHERE rt.Template_Type_Code = 'AD';
SELECT t.Template_Type_Code FROM Ref_Template_Types t WHERE t.Template_Type_Description = 'Book';
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt WHERE rt.Template_Type_Description = 'Book';
SELECT DISTINCT t.Template_Type_Description FROM Templates t;
SELECT DISTINCT t.Template_Details FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE LOWER(r.Template_Type_Description) = 'presentation';
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p WHERE p.Paragraph_Text ilike '%Korea%';
SELECT p.Paragraph_ID, p.Document_ID, p.Paragraph_Text FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Description = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS number_of_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS number_of_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS number_of_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY d.Document_ID NULLS LAST;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2) AS p2 ON d.Document_ID = p2.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY paragraph_count DESC LIMIT 1;
WITH DocumentParagraphCounts AS (SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID) SELECT d.Document_ID, d.Document_Name FROM DocumentParagraphCounts d ORDER BY d.Paragraph_Count DESC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Paragraphs p GROUP BY p.Document_ID) AS pc ON d.Document_ID = pc.Document_ID ORDER BY pc.paragraph_count ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (SELECT p.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Paragraphs p GROUP BY p.Document_ID ORDER BY num_paragraphs ASC LIMIT 1) AS p ON d.Document_ID = p.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS paragraph_count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_ID BETWEEN 1 AND 2 GROUP BY d.Document_ID;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
SELECT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text = 'Brazil' OR p.Paragraph_Text = 'Ireland';
SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text ilike '%Brazil%' AND p.Paragraph_Text ilike '%Ireland%';
SELECT COUNT(DISTINCT t."Teacher_ID") FROM "teacher" t;
SELECT COUNT(*) FROM teacher;
SELECT t.Name, t.Age FROM teacher t ORDER BY CAST(t.Age AS INTEGER) ASC;
SELECT t.name, t.age FROM teacher t ORDER BY CAST(t.age AS INTEGER) ASC;
SELECT t.age, t.hometown FROM teacher t;
SELECT t."Age", t."Hometown" FROM "teacher" t;
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Hometown!= 'Little Lever Urban District';
SELECT t.Name FROM teacher t WHERE t.Age = '32' OR t.Age = '33';
SELECT t.Name FROM teacher t WHERE t.Age IN ('32', '33');
SELECT t.Hometown FROM teacher t ORDER BY CAST(t.Age AS INTEGER) ASC LIMIT 1;
SELECT t.hometown FROM teacher t ORDER BY t.age ASC LIMIT 1;
SELECT t.hometown, COUNT(t.hometown) AS number_of_teachers FROM teacher t GROUP BY t.hometown;
SELECT t.hometown, COUNT(*) AS number_of_teachers FROM teacher t GROUP BY t.hometown;
SELECT t.hometown, COUNT(t.hometown) AS COUNT FROM teacher t GROUP BY t.hometown ORDER BY COUNT DESC LIMIT 1;
SELECT t.Hometown, COUNT(*) AS Count FROM teacher t GROUP BY t.Hometown ORDER BY Count DESC LIMIT 1;
SELECT t1."Hometown" FROM "teacher" t1 JOIN "course_arrange" ca ON t1."Teacher_ID" = ca."Teacher_ID" JOIN "teacher" t2 ON ca."Teacher_ID" = t2."Teacher_ID" WHERE t1."Hometown" = t2."Hometown" GROUP BY t1."Hometown" HAVING COUNT(DISTINCT t1."Teacher_ID") > 1;
SELECT DISTINCT t.Hometown FROM teacher t GROUP BY t.Hometown HAVING COUNT(t.Hometown) >= 2;
SELECT t.Name, c.Course FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID;
SELECT t.Name, c.Course FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID;
SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.name, c.course FROM course_arrange ca JOIN teacher t ON ca.teacher_id = t.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;
SELECT t.Name FROM "teacher" t JOIN "course_arrange" ca ON t."Teacher_ID" = ca."Teacher_ID" JOIN "course" c ON ca."Course_ID" = c."Course_ID" WHERE c."Course" = 'Math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" = 'Math';
SELECT t.Name, COUNT(ca.Course_ID) AS number_of_courses FROM "teacher" t JOIN "course_arrange" ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY number_of_courses DESC NULLS LAST;
SELECT t.Name, COUNT(ca.Course_ID) AS number_of_courses FROM "teacher" t JOIN "course_arrange" ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY number_of_courses DESC NULLS LAST;
SELECT t.Name, COUNT(c.Course_ID) AS num_courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(c.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ta.Teacher_ID FROM course_arrange ta);
SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ca.Teacher_ID FROM course_arrange ca);
SELECT COUNT(*) AS number_of_visitors FROM visitor WHERE age < 30;
SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.level_of_membership DESC;
SELECT AVG(v.Age) FROM visitor v WHERE v.Level_of_membership <= 4;
SELECT v.name, v.level_of_membership, v.age FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.age DESC;
SELECT m.Museum_ID, m.Name, m.Num_of_Staff FROM museum m ORDER BY m.Num_of_Staff DESC NULLS LAST LIMIT 1;
SELECT AVG(m."Num_of_Staff") AS average_staff FROM "museum" m WHERE m."Open_Year" < '2009';
SELECT m.open_year, m.num_of_staff FROM museum m WHERE m.name = 'Plaza Museum';
SELECT m.name FROM museum m WHERE m.num_of_staff > (SELECT MIN(m2.num_of_staff) FROM museum m2 WHERE m2.open_year > '2010');
SELECT v.id, v.name, v.age FROM visitor v JOIN visit vi ON v.id = CAST(vi.visitor_id AS int) GROUP BY v.id, v.name, v.age HAVING COUNT(vi.museum_id) > 1;
SELECT v.id, v.name, v.level_of_membership, SUM(v.total_spent) AS total_spent FROM visit v GROUP BY v.id, v.name, v.level_of_membership ORDER BY total_spent DESC NULLS LAST LIMIT 1;
SELECT v.Museum_ID, m.Name, COUNT(v.Visitor_ID) AS visit_count FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.Museum_ID, m.Name ORDER BY visit_count DESC LIMIT 1;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;
WITH ticket_counts AS (SELECT v."ID", v."Name", MAX(visit."Num_of_Ticket") AS max_tickets FROM "visit" JOIN "visitor" AS v ON "visit"."visitor_ID" = v."ID" GROUP BY v."ID", v."Name") SELECT tc."Name", tc."ID", tc.max_tickets FROM ticket_counts tc ORDER BY tc.max_tickets DESC LIMIT 1;
SELECT AVG(v.Num_of_Ticket) AS average_tickets, MAX(v.Num_of_Ticket) AS max_tickets FROM visit v;
SELECT SUM(v.Total_spent) AS total_spent FROM visit v JOIN visitor vi ON v.visitor_ID = CAST(vi.ID AS text) WHERE vi.Level_of_membership = 1;
SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = CAST(vi.visitor_ID AS int) JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND m.Open_Year > '2011';
SELECT COUNT(DISTINCT v."ID") FROM "visit" v JOIN "museum" m ON v."Museum_ID" = m."Museum_ID" WHERE CAST(m."Open_Year" AS INTEGER) <= 2010;
SELECT COUNT(*) FROM museum m WHERE CAST(m.open_year AS integer) > 2013 OR CAST(m.open_year AS integer) < 2008;
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(DISTINCT p.player_id) FROM players p;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT p."first_name", p."birth_date" FROM players p WHERE p."country_code" = 'USA';
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(m.loser_age) AS average_loser_age, AVG(m.winner_age) AS average_winner_age FROM matches m;
SELECT AVG(r.ranking) AS average_rank FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id;
SELECT AVG(r.ranking) AS average_rank FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id;
SELECT MAX(r.ranking) AS highest_rank FROM matches m JOIN players p ON m.loser_id = p.player_id JOIN rankings r ON p.player_id = r.player_id;
WITH loser_rankings AS (SELECT m.loser_id, MAX(r.ranking) AS max_losing_rank FROM matches m JOIN rankings r ON m.loser_id = r.player_id GROUP BY m.loser_id) SELECT MAX(loser_ranking) AS highest_losing_rank FROM loser_rankings;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT COUNT(DISTINCT m.loser_name) FROM matches m;
SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT p."first_name", p."last_name" FROM players p WHERE p."player_id" IN (SELECT m.winner_id FROM matches m WHERE m.year = 2013) AND p."player_id" IN (SELECT m.winner_id FROM matches m WHERE m.year = 2016);
SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."year" IN (2013, 2016) GROUP BY p."first_name", p."last_name" HAVING COUNT(DISTINCT m."year") = 2;
SELECT COUNT(*) AS total_matches FROM matches m WHERE m.year IN (2013, 2016);
SELECT COUNT(*) FROM matches m WHERE m.year IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT p."first_name", p."country_code" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."tourney_name" IN ('WTA Championships', 'Australian Open') GROUP BY p."first_name", p."country_code" HAVING COUNT(DISTINCT m."tourney_name") = 2;
SELECT p."first_name", p."country_code" FROM players p WHERE p."birth_date" = (SELECT MIN(p2."birth_date") FROM players p2);
SELECT p."first_name", p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.last_name, p.birth_date FROM players p ORDER BY p.birth_date NULLS LAST;
SELECT p."first_name", p."last_name" FROM players p ORDER BY p."birth_date";
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date NULLS LAST;
SELECT p.first_name ||'' || p.last_name AS full_name, p.birth_date FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date NULLS LAST;
SELECT p.first_name, p.country_code FROM players p JOIN (SELECT r.player_id, COUNT(r.tours) AS tour_count FROM rankings r GROUP BY r.player_id ORDER BY tour_count DESC LIMIT 1) AS t ON p.player_id = t.player_id;
WITH player_tour_rank AS (SELECT p.player_id, SUM(r.tours) AS total_tours FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id) SELECT pl.first_name, pl.country_code FROM player_tour_rank pr JOIN players pl ON pr.player_id = pl.player_id ORDER BY pr.total_tours DESC NULLS LAST LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS match_count FROM matches m GROUP BY YEAR ORDER BY match_count DESC LIMIT 1;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS year, COUNT(*) AS match_count FROM matches m GROUP BY year ORDER BY match_count DESC LIMIT 1;
WITH WinnerRanking AS (SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.first_name, p.last_name) SELECT wr.first_name, wr.last_name, wr.total_rank_points FROM WinnerRanking wr ORDER BY wr.total_rank_points DESC NULLS LAST LIMIT 1;
SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.first_name, p.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m.winner_id JOIN rankings r ON p."player_id" = r.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1;
SELECT p.first_name, p.last_name, MAX(r.ranking_points) AS max_ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.tourney_name = 'Australian Open' GROUP BY p.first_name, p.last_name ORDER BY max_ranking_points DESC LIMIT 1;
SELECT p1."first_name", p1."last_name", p2."first_name", p2."last_name" FROM players p1 JOIN players p2 ON p1."player_id" = (SELECT m.loser_id FROM matches m ORDER BY m.minutes DESC LIMIT 1) OR p1."player_id" = (SELECT m.winner_id FROM matches m ORDER BY m.minutes DESC LIMIT 1) AND p2."player_id" = (SELECT m.loser_id FROM matches m ORDER BY m.minutes DESC LIMIT 1) OR p2."player_id" = (SELECT m.winner_id FROM matches m ORDER BY m.minutes DESC LIMIT 1);
SELECT p1."winner_name", p2."loser_name", m."minutes" FROM players p1 JOIN players p2 ON p1."player_id" = m."loser_id" AND p2."player_id" = m."winner_id" JOIN matches m ON TRUE ORDER BY m."minutes" DESC LIMIT 1;
WITH player_ranks AS (SELECT p.player_id, p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name) SELECT pr.first_name, pr.avg_ranking FROM player_ranks pr ORDER BY pr.first_name NULLS LAST;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.country_code, COUNT(p.player_id) AS number_of_players FROM players p GROUP BY p.country_code ORDER BY number_of_players DESC NULLS LAST;
SELECT p.country_code, COUNT(*) AS num_players FROM players p GROUP BY p.country_code;
SELECT p.country_code, COUNT(p.player_id) AS num_players FROM players p GROUP BY p.country_code ORDER BY num_players DESC LIMIT 1;
SELECT p.country_code, COUNT(p.player_id) AS player_count FROM players p GROUP BY p.country_code ORDER BY player_count DESC LIMIT 1;
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY player_count DESC NULLS LAST;
SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY number_of_players DESC;
SELECT r."ranking_date", SUM(r.tours) AS total_tours FROM rankings r GROUP BY r."ranking_date" ORDER BY r."ranking_date";
SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date ORDER BY r.ranking_date NULLS LAST;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS number_of_matches FROM matches m GROUP BY YEAR ORDER BY YEAR;
SELECT EXTRACT(YEAR FROM m.tourney_date) AS YEAR, COUNT(*) AS num_matches FROM matches m GROUP BY YEAR ORDER BY YEAR;
WITH WinnerAge AS (SELECT p.first_name, p.last_name, m.winner_age, m.year FROM matches m JOIN players p ON m.winner_id = p.player_id) SELECT wa.first_name, wa.last_name, wa.year FROM WinnerAge wa ORDER BY wa.year DESC LIMIT 3;
SELECT m.winner_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.winner_age = (SELECT MIN(m2.winner_age) FROM matches m2);
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND p.player_id IN (SELECT r.player_id FROM rankings r JOIN players pl ON r.player_id = pl.player_id WHERE pl.country_code = 'USA' AND pl.birth_date BETWEEN '1970-01-01' AND '1980-12-31') AND m.tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';
SELECT p."first_name", p."country_code", p."birth_date", MAX(r."ranking_points") AS max_ranking_points FROM players p JOIN matches m ON p."player_id" = m."winner_id" JOIN rankings r ON p."player_id" = r."player_id" GROUP BY p."first_name", p."country_code", p."birth_date" ORDER BY max_ranking_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date, MAX(m.winner_rank_points) AS max_winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.first_name, p.country_code, p.birth_date ORDER BY max_winner_rank_points DESC LIMIT 1;
SELECT p.hand, COUNT(*) FROM players p GROUP BY p.hand;
SELECT p.hand, COUNT(*) AS number_of_players FROM players p GROUP BY p.hand ORDER BY number_of_players DESC NULLS LAST;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT s.name, s.tonnage FROM ship s ORDER BY s.name DESC NULLS LAST;
SELECT b.name, b.date, b.result FROM battle b;
WITH MaxDeath AS (SELECT MAX(killed) AS max_killed FROM death), MinDeath AS (SELECT MIN(killed) AS min_killed FROM death) SELECT md.max_killed, md.min_killed FROM MaxDeath md, MinDeath;
SELECT AVG(d.injured) AS average_injuries FROM "death" d;
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT b.name, b.result FROM battle b WHERE b.bulgarian_commander!= 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name, SUM(d.killed) AS total_killed FROM "battle" b JOIN "ship" s ON b.id = s.lost_in_battle JOIN "death" d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10 ORDER BY total_killed DESC NULLS LAST;
WITH ShipInjuryCounts AS (SELECT s.id, s.name, SUM(d.injured) AS total_injuries FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name) SELECT sic.id, sic.name FROM ShipInjuryCounts sic ORDER BY sic.total_injuries DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT b.result) FROM "battle" b;
SELECT COUNT(*) FROM "battle" b JOIN "ship" s ON b."id" = s."lost_in_battle" WHERE s."tonnage"!= '225';
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location!= 'English Channel' AND s.location IS NOT NULL;
SELECT d.note FROM death d WHERE d.note ilike '%East%';
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a;
SELECT COUNT(c.course_id) FROM Courses c;
SELECT COUNT(*) FROM Courses;
SELECT c.course_description FROM Courses c WHERE c.course_name = 'Math';
SELECT c.course_description FROM Courses c JOIN Sections s ON c.course_id = s.course_id WHERE s.section_name LIKE '%Math%' ORDER BY c.course_description NULLS LAST;
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea';
SELECT d.department_name, COUNT(dp.degree_program_id) AS number_of_degrees FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name ORDER BY number_of_degrees DESC LIMIT 1;
WITH DepartmentDegrees AS (SELECT dp.Department_id, COUNT(s.student_id) AS degree_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.department_id GROUP BY dp.department_id) SELECT d.department_name, dd.degree_count FROM DepartmentDegrees dd JOIN Departments d ON dd.department_id = d.department_id ORDER BY dd.degree_count DESC LIMIT 1;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT d.department_id) FROM Degree_Programs d;
SELECT COUNT(DISTINCT dp.degree_summary_name) FROM Degree_Programs dp;
SELECT COUNT(DISTINCT d.degree_summary_name) FROM Degree_Programs d;
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT COUNT(DISTINCT dp.degree_program_id) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE LOWER(d.department_name) = 'engineering';
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.course_id FROM Sections s GROUP BY s.course_id HAVING COUNT(s.section_id) <= 2 ORDER BY s.course_id NULLS LAST;
SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.course_id) < 2 ORDER BY c.course_id NULLS LAST;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC NULLS LAST LIMIT 1;
SELECT s.semester_name, COUNT(se.student_id) AS total_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name ORDER BY total_students DESC LIMIT 1;
SELECT d.department_description FROM Departments d WHERE d.department_name ILIKE '%the computer%';
SELECT d.department_description FROM Departments d WHERE d.department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id, se.semester_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE (SELECT COUNT(DISTINCT se.degree_program_id) FROM Student_Enrolment se WHERE se.student_id = s.student_id) >= 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(d.degree_program_id) AS number_of_degree_programs FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs d ON se.degree_program_id = d.degree_program_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(d.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.other_details ilike '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.department_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT d.department_name, COUNT(se.student_enrolment_id) AS total_enrolments FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.department_name ORDER BY total_enrolments DESC LIMIT 1;
SELECT d.degree_summary_name, COUNT(se.student_id) AS student_count FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_summary_name ORDER BY student_count DESC LIMIT 1;
WITH DegreeEnrolmentCounts AS (SELECT dp.degree_program_id, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.department_id = se.degree_program_id GROUP BY dp.degree_program_id) SELECT dc.degree_program_id, dc.student_count FROM DegreeEnrolmentCounts dc ORDER BY dc.student_count DESC LIMIT 1; SELECT dp.degree_summary_name FROM Degree_Programs dp WHERE dp.degree_program_id = dc.degree_program_id;
SELECT d.degree_program_id, d.degree_summary_name, COUNT(se.student_id) AS total_students FROM Degree_Programs d JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_program_id, d.degree_summary_name ORDER BY total_students DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrolments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrolments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s WHERE s.semester_name NOT IN (SELECT se.semester_id FROM Student_Enrolment se);
SELECT s.semester_name FROM Semesters s WHERE s.semester_name NOT IN (SELECT se.semester_id FROM Student_Enrolment se);
SELECT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id;
SELECT DISTINCT s.course_id, c.course_name FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id;
SELECT c.course_name, COUNT(se.student_enrolment_id) AS total_enrollments FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY total_enrollments DESC LIMIT 1;
SELECT c.course_name, COUNT(s.student_id) AS total_students FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id GROUP BY c.course_name ORDER BY total_students DESC LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se);
SELECT s.last_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment se WHERE se.student_id = s.student_id);
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2 ORDER BY t.transcript_id NULLS LAST;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2 ORDER BY t.transcript_date DESC NULLS LAST;
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC NULLS LAST LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC NULLS LAST LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_first_registered = (SELECT MIN(s2.date_first_registered) FROM Students s2);
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT s.first_name FROM Students s WHERE s.current_address_id!= s.permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC NULLS LAST LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2, COUNT(s.student_id) AS number_of_students FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY number_of_students DESC LIMIT 1;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(t.transcript_date) AS earliest_transcript_date FROM Transcripts t; SELECT t.other_details FROM Transcripts t WHERE t.transcript_date = (SELECT MIN(t2.transcript_date) FROM Transcripts t2);
SELECT COUNT(t.transcript_id) FROM Transcripts t;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(t.transcript_date) AS last_transcript_release_date FROM Transcripts t;
SELECT MAX(t.transcript_date) AS latest_transcript_date FROM Transcripts t;
SELECT COUNT(DISTINCT t.transcript_id) AS max_transcript_count, s.student_enrolment_id FROM Student_Enrolment se JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcripts t ON sec.student_course_id IN (SELECT student_course_id FROM Transcript_Contents WHERE transcript_id = t.transcript_id) GROUP BY s.student_enrolment_id ORDER BY max_transcript_count DESC NULLS LAST;
SELECT c.course_name, COUNT(tc.student_course_id) AS course_count, MAX(te.student_enrolment_id) AS max_student_enrolment_id FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id JOIN Student_Enrolment te ON sec.student_enrolment_id = te.student_enrolment_id GROUP BY c.course_name ORDER BY course_count DESC LIMIT 1;
WITH TranscriptCounts AS (SELECT t.transcript_id, COUNT(tc.student_course_id) AS course_count FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id) SELECT tc.transcript_id, MIN(tc.course_count) AS min_course_count FROM TranscriptCounts tc GROUP BY tc.transcript_id ORDER BY min_course_count ASC LIMIT 1;
SELECT t.transcript_date, COUNT(tc.student_course_id) AS number_of_results FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_date ORDER BY number_of_results ASC LIMIT 1;
SELECT s.semester_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'Master') AND dp.department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor');
SELECT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Students st ON se.student_id = st.student_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'Masters') AND st.student_id IN (SELECT student_id FROM Students WHERE first_name = 'John' AND middle_name = 'Doe' AND last_name = 'Smith') GROUP BY s.semester_id HAVING COUNT(DISTINCT st.student_id) > 1;
SELECT COUNT(DISTINCT s.current_address_id) FROM Students s;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.last_name DESC, s.middle_name DESC, s.first_name DESC;
SELECT s.student_id, s.last_name, s.first_name, s.middle_name, s.email_address, s.cell_mobile_number, s.ssn, s.date_first_registered, s.date_left, s.other_student_details FROM Students s ORDER BY s.last_name DESC NULLS LAST;
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_description FROM Sections s WHERE s.section_name = 'h';
SELECT s.first_name FROM Students s WHERE s.country = 'Haiti' OR s.cell_mobile_number = '09700166582';
SELECT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582' OR s.cell_mobile_number = '09700166582';
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM Cartoon c ORDER BY c.title ASC;
SELECT c.title FROM cartoon c WHERE c.directed_by ilike '%Ben Jones%';
SELECT c.title FROM cartoon c WHERE c.directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon c WHERE c.Directed_by = 'Joseph Kuhr';
SELECT COUNT(*) AS number_of_cartoons FROM Cartoon c WHERE c.Directed_by = 'Joseph Kuhr';
SELECT c.title, c.directed_by, c.original_air_date FROM Cartoon c ORDER BY c.original_air_date DESC NULLS LAST;
SELECT c.title, c.directed_by FROM Cartoon c ORDER BY c.original_air_date;
SELECT c.title FROM Cartoon c JOIN TV_Channel t ON c.channel = t.id WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Brandon Vietti%';
SELECT c.title FROM Cartoon c WHERE c.directed_by ilike '%Ben Jones%' OR c.directed_by ilike '%Brandon Vietti%';
SELECT t.country, COUNT(t.id) AS number_of_channels FROM TV_Channel t GROUP BY t.country ORDER BY number_of_channels DESC LIMIT 1;
SELECT t.country, COUNT(t.id) AS number_of_channels FROM TV_Channel t GROUP BY t.country ORDER BY number_of_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT s.series_name) AS unique_series, COUNT(DISTINCT s.content) AS unique_content FROM TV_Channel s;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel;
SELECT c.Content FROM TV_Channel c WHERE c.Series_Name = 'Sky Radio';
SELECT t."Content" FROM "TV_Channel" t WHERE t."id" = 700;
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT t.Package_Option FROM TV_Channel t WHERE t.series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
WITH LanguageCount AS (SELECT t.Language, COUNT(t.id) AS channel_count FROM TV_Channel t GROUP BY t.Language) SELECT lc.Language, lc.channel_count FROM LanguageCount lc ORDER BY lc.channel_count ASC NULLS LAST LIMIT 1;
SELECT COUNT(*) AS language_usage_count, language FROM TV_Channel GROUP BY language ORDER BY language_usage_count ASC LIMIT 1;
SELECT Language, COUNT(*) AS number_of_channels FROM TV_Channel GROUP BY Language ORDER BY number_of_channels DESC NULLS LAST;
SELECT COUNT(*) AS total_channels, t.Language FROM TV_Channel t GROUP BY t.Language;
SELECT t.series_name FROM TV_Channel t JOIN Cartoon c ON t.id = c.Channel WHERE c.title = 'The Rise of the Blue Beetle!';
SELECT t."series_name" FROM "TV_Channel" t JOIN "Cartoon" c ON t."id" = c."Channel" WHERE c."Title" = 'The Rise of the Blue Beetle';
SELECT c.title FROM cartoon c JOIN tv_channel tc ON c.channel = tc.id WHERE tc.series_name = 'Sky Radio';
SELECT c.title FROM Cartoon c JOIN TV_Channel t ON c.channel = t.id WHERE t.series_name = 'Sky Radio';
SELECT s."Episode", s.Rating FROM "TV_series" s ORDER BY s.Rating DESC;
SELECT s.episode, s.rating FROM "TV_series" s ORDER BY s.rating DESC;
SELECT ts."Episode", ts."Rating" FROM "TV_series" ts ORDER BY ts."Rating" DESC NULLS LAST LIMIT 3;
SELECT s."id", s."Rating" FROM "TV_series" s ORDER BY s."Rating" DESC LIMIT 3;
SELECT MIN(t."Share") AS min_share, MAX(t."Share") AS max_share FROM "TV_series" t;
SELECT MAX(s.Share) AS max_share, MIN(s.Share) AS min_share FROM TV_series s;
SELECT s.Air_Date FROM TV_series s WHERE s.Episode = 'A Love of a Lifetime';
SELECT s.air_date FROM "TV_series" s WHERE s.episode = 'A Love of a Lifetime';
SELECT ts.Weekly_Rank FROM TV_series ts WHERE ts.Episode = 'A Love of a Lifetime';
SELECT s.Weekly_Rank FROM TV_series s WHERE s.Episode = 'A Love of a Lifetime';
SELECT tc.series_name FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE ts."Episode" = 'A Love of a Lifetime';
SELECT s."series_name" FROM "TV_series" s WHERE s."Episode" = 'A Love of a Lifetime';
SELECT ts."Episode" FROM "TV_series" ts JOIN "TV_Channel" tc ON ts."Channel" = tc."id" WHERE tc."series_name" = 'Sky Radio';
SELECT ts."Episode" FROM "TV_series" ts JOIN "TV_Channel" tc ON ts."Channel" = tc."id" WHERE LOWER(tc."series_name") ='sky radio';
SELECT c.Directed_by, COUNT(c.id) AS number_of_cartoons FROM Cartoon c GROUP BY c.Directed_by ORDER BY number_of_cartoons DESC NULLS LAST;
SELECT c.id, c.title, COUNT(DISTINCT ca.id) AS number_of_cartoons FROM Cartoon c JOIN TV_Channel t ON c.channel = t.id JOIN Cartoon ca ON c.id = ca.channel WHERE t.content ='music' GROUP BY c.id, c.title;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT t.package_option, t.series_name FROM TV_Channel t WHERE t.high_definition_tv = 'yes';
SELECT t.Package_Option, s.series_name FROM TV_Channel t JOIN TV_series s ON t.id = s.Channel WHERE t.Hight_definition_TV = 'yes';
SELECT DISTINCT c.Country FROM TV_Channel c JOIN Cartoon ct ON c.id = ct.Channel WHERE ct.Written_by = 'Todd Casey';
SELECT DISTINCT t.Country FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id WHERE c.Written_by ilike '%Todd Casey%';
SELECT DISTINCT t."Country" FROM "TV_Channel" t JOIN Cartoon c ON t."id" = c."Channel" WHERE c."Written_by" not ilike '%Todd Casey%';
SELECT DISTINCT c."Country" FROM "TV_Channel" c JOIN Cartoon t ON c."id" = t."Channel" WHERE t."Written_by" not ilike '%Todd Casey%' ORDER BY c."Country";
SELECT t."series_name", t."Country" FROM "TV_Channel" t JOIN "Cartoon" c ON t."id" = c."Channel" WHERE c."Directed_by" ilike '%Ben Jones%' AND c."Directed_by" ilike '%Michael Chang%';
SELECT c."series_name", c."Country" FROM "TV_Channel" c JOIN Cartoon t ON c."id" = t."Channel" WHERE t."Directed_by" ilike '%Ben Jones%' OR t."Directed_by" ilike '%Michael Chang%';
SELECT t.Pixel_aspect_ratio_PAR, t.Country FROM TV_Channel t WHERE t.Language!= 'English';
SELECT t.Pixel_aspect_ratio_PAR, t.Country FROM TV_Channel t WHERE t.Language!= 'English';
SELECT DISTINCT tc.id FROM TV_Channel tc GROUP BY tc.id HAVING COUNT(DISTINCT tc.Country) > 2;
SELECT t.id FROM TV_Channel t GROUP BY t.id HAVING COUNT(t.id) > 2;
SELECT c.id FROM TV_Channel c WHERE c.id NOT IN (SELECT d.Channel FROM Cartoon d WHERE d.Directed_by = 'Ben Jones');
SELECT t.id FROM TV_Channel t WHERE t.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Directed_by = 'Ben Jones');
SELECT tc.Package_Option FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.Directed_by not ilike '%Ben Jones%';
SELECT t.Package_Option FROM TV_Channel t JOIN Cartoon c ON t.id = c.Channel WHERE c.Directed_by not ilike '%Ben Jones%' ORDER BY t.id NULLS LAST;
SELECT COUNT(*) FROM "poker_player";
SELECT COUNT(*) FROM "poker_player";
SELECT p."Poker_Player_ID", p."Earnings" FROM "poker_player" p ORDER BY p."Earnings" DESC;
SELECT p."Poker_Player_ID", p."Earnings" FROM "poker_player" p ORDER BY p."Earnings" DESC;
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p ORDER BY p."Poker_Player_ID";
SELECT p."Poker_Player_ID", p."Final_Table_Made", p."Best_Finish" FROM "poker_player" p;
SELECT AVG(p.Earnings) AS average_earnings FROM "poker_player" p;
SELECT AVG(p.Earnings) AS average_earnings FROM "poker_player" p;
SELECT p."Poker_Player_ID", p."Money_Rank" FROM "poker_player" p WHERE p."Earnings" = (SELECT MAX(p2."Earnings") FROM "poker_player" p2);
SELECT mp."Money_Rank" FROM "poker_player" mp WHERE mp."Earnings" = (SELECT MAX(mp2."Earnings") FROM "poker_player" mp2);
SELECT MAX(p."Final_Table_Made") AS max_final_tables FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT MAX(p."Poker_Player_ID") AS max_poker_player_id FROM "poker_player" p WHERE p."Earnings" < 200000;
SELECT p.name FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID";
SELECT p.Name FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID";
SELECT p."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" > 300000;
SELECT p."Name" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" > 300000;
SELECT p."Name", pp."Final_Table_Made" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Final_Table_Made" ASC;
SELECT p.name, COUNT(pp."Poker_Player_ID") AS num_final_tables FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" GROUP BY p.name ORDER BY num_final_tables ASC;
SELECT p."Name", p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" ASC LIMIT 1;
SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN(pp2."Earnings") FROM "poker_player" pp2);
SELECT pp."Money_Rank" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE p."Height" = (SELECT MAX(p2."Height") FROM "people" p2);
SELECT pp."Money_Rank" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY p."Height" DESC LIMIT 1;
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT AVG(p.Earnings) AS average_earnings FROM "poker_player" p JOIN "people" p2 ON p."People_ID" = p2."People_ID" WHERE p2."Height" > 200;
SELECT p."Name", pp."Earnings" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" DESC;
SELECT p.Name, p."Poker_Player_ID", SUM(p.Earnings) AS total_earnings FROM "poker_player" p GROUP BY p.Name, p."Poker_Player_ID" ORDER BY total_earnings DESC NULLS LAST;
SELECT p.Nationality, COUNT(p.Nationality) AS nationality_count FROM people p GROUP BY p.Nationality ORDER BY nationality_count DESC NULLS LAST;
SELECT p.Nationality, COUNT(*) AS number_of_people FROM "people" p GROUP BY p.Nationality ORDER BY number_of_people DESC NULLS LAST;
SELECT p.Nationality, COUNT(*) AS Count FROM people p GROUP BY p.Nationality ORDER BY Count DESC LIMIT 1;
SELECT p.Nationality, COUNT(p.Nationality) AS COUNT FROM "people" p GROUP BY p.Nationality ORDER BY COUNT DESC LIMIT 1;
SELECT p."Nationality" FROM "people" p GROUP BY p."Nationality" HAVING COUNT(p."Nationality") >= 2;
SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.Nationality) >= 2;
SELECT p.Name, p."Birth_Date" FROM "people" p ORDER BY p.Name ASC;
SELECT p.Name, p."Birth_Date" FROM "people" p ORDER BY p.Name ASC;
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russia';
SELECT p.Name FROM people p WHERE p.Nationality!= 'Russia';
SELECT p.Name FROM people p WHERE p."People_ID" NOT IN (SELECT Poker_Player_ID FROM poker_player);
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p"People_ID" = pp"People_ID" WHERE pp"People_ID" IS NULL;
SELECT COUNT(DISTINCT p.Nationality) FROM people p;
SELECT COUNT(DISTINCT p.Nationality) FROM "people" p;
SELECT COUNT(DISTINCT a.state) FROM AREA_CODE_STATE a;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC;
SELECT v.vote_id, v.phone_number, v.state FROM VOTES v;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(v.created) AS last_vote_date FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state WHERE a.state = 'CA';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name!= 'Jessie Alloway';
SELECT v.state, v.created FROM VOTES v;
SELECT v.contestant_number, c.contestant_name, COUNT(v.vote_id) AS number_of_votes FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY v.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN (SELECT v.contestant_number, COUNT(v.vote_id) AS vote_count FROM VOTES v GROUP BY v.contestant_number) AS vc ON c.contestant_number = vc.contestant_number ORDER BY vc.vote_count ASC LIMIT 1;
SELECT COUNT(*) AS total_votes FROM VOTES v WHERE v.state IN ('NY', 'CA');
SELECT COUNT(DISTINCT c.contestant_number) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
SELECT a.area_code, COUNT(v.phone_number) AS total_votes FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state GROUP BY a.area_code ORDER BY total_votes DESC NULLS LAST LIMIT 1;
SELECT v.created, a.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling';
SELECT v.state FROM VOTES v JOIN CONTESTANTS c1 ON v.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT c.contestant_name FROM CONTESTANTS c WHERE c.contestant_name ilike '%Al%';
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT c.Name FROM country c WHERE c.IndepYear > 1950;
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm ='republic';
SELECT COUNT(*) FROM country WHERE LOWER(governmentform) ='republic';
SELECT SUM(c.SurfaceArea) AS total_surface_area FROM country c WHERE c.Region = 'Caribbean';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' AND c.Region = 'Caribbean';
SELECT c.Continent FROM country c WHERE c.Code = 'ATG';
SELECT c.Continent FROM country c WHERE c.Code = 'AIA';
SELECT c.District FROM city c WHERE c.Name = 'Kabul';
SELECT c.Region FROM city c WHERE c.Name = 'Kabul';
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Code = 'ABW' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'Aruba' AND cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT c.Population, c.LifeExpectancy FROM country c WHERE c.Code = 'BRA';
SELECT c.Population, c.LifeExpectancy FROM country c WHERE c.Code = 'BRA';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT c.Region, c.Population FROM country c WHERE c.Code = 'AGO';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Region = 'Central Africa';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(c2.LifeExpectancy) FROM country c2 WHERE c2.Continent = 'Asia');
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;
SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS max_gnp FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia';
SELECT SUM(c.population) AS total_population, MAX(c.population) AS max_population FROM city c JOIN country co ON c.countrycode = co.code WHERE co.continent = 'Asia';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.GovernmentForm ='republic' AND c.Continent = 'Africa';
SELECT AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm ilike '%republic%' AND c.Continent = 'Africa';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT SUM(c.Population) AS total_population FROM city c JOIN country co ON c.CountryCode = co.Code WHERE LOWER(co.Name) = 'netherlands' AND LOWER(c.District) = 'gelderland';
SELECT SUM(c.Population) FROM city c WHERE c.District = 'Gelderland';
SELECT AVG(c.GNP), SUM(c.Population) FROM country c WHERE c.GovernmentForm LIKE '%US territory%';
SELECT AVG(c.GNP) AS average_gnp, SUM(c.Population) AS total_population FROM country c WHERE c.Code2 = 'US';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl;
SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Asia';
SELECT COUNT(DISTINCT g.GovernmentForm) FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Africa';
SELECT SUM(cl.Percentage) AS total_percentage FROM countrylanguage cl WHERE cl.CountryCode = 'ABW';
SELECT COUNT(*) AS NumberOfLanguages FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba';
SELECT COUNT(*) AS num_languages FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Afghanistan' AND cl.isofficial = 'T';
SELECT COUNT(*) AS num_of_languages FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Afghanistan' AND cl.isofficial = 'T';
SELECT c.Name FROM country c JOIN (SELECT cl.CountryCode, COUNT(cl.Language) AS num_languages FROM countrylanguage cl GROUP BY cl.CountryCode ORDER BY num_languages DESC LIMIT 1) AS cl ON c.Code = cl.CountryCode;
SELECT c.Name, COUNT(cl.Language) AS languages_count FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY languages_count DESC LIMIT 1;
WITH ContinentLanguageCount AS (SELECT c.Continent, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent) SELECT cl.Continent FROM ContinentLanguageCount cl ORDER BY cl.NumLanguages DESC LIMIT 1;
WITH LanguageCounts AS (SELECT c.Continent, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent) SELECT c.Continent FROM LanguageCounts c ORDER BY c.NumLanguages DESC LIMIT 1;
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.Language = 'Dutch';
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese';
SELECT COUNT(DISTINCT cl.CountryCode) AS number_of_countries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language) = 'chinese';
SELECT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT cl.Language, SUM(cl.Percentage) AS TotalPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY TotalPercentage DESC LIMIT 1;
SELECT cl.Language, COUNT(cl.CountryCode) AS NumberOfCountries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm ilike '%republic%' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial!= 'T';
SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT SUM(c.Population) FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE LOWER(cl.Language)!= 'english';
SELECT SUM(c.Population) FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage l ON cl.Code = l.CountryCode WHERE l.Language!= 'English';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState ilike '%Beatrix%';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930;
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name, c.SurfaceArea FROM country c JOIN city s ON c.Code = s.CountryCode WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' ORDER BY ci.Population ASC LIMIT 1; SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Africa' AND ci.Population < (SELECT ci.Population FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' ORDER BY ci.Population ASC LIMIT 1);
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');
SELECT c.Name AS country_name, c.Population FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(p.Population) FROM country p WHERE p.Continent = 'Africa');
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE LOWER(cl.Language)!= 'english' AND LOWER(cl.IsOfficial) = 't';
SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE LOWER(cl.Language) = 'english');
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language!= 'English' AND c.GovernmentForm!= 'Republic';
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language!= 'English' AND cl.IsOfficial = 'T';
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.IsOfficial!= 'T' AND cl.Language = 'English' AND c.District LIKE '%Europe%';
SELECT DISTINCT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl2 ON cl.Code = cl2.CountryCode WHERE cl2.Language = 'Chinese' AND cl.Continent = 'Asia' ORDER BY c.Name;
SELECT DISTINCT c.Name FROM city c JOIN country cl ON c.CountryCode = cl.Code JOIN countrylanguage cl2 ON cl.Code = cl2.CountryCode WHERE cl.Continent = 'Asia' AND cl2.Language = 'Chinese';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;
SELECT c.Name, c.HeadOfState, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3 ORDER BY c.Name NULLS LAST;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2 ORDER BY NumberOfLanguages DESC NULLS LAST;
SELECT c.District, COUNT(c.ID) AS NumberOfCities, AVG(c.Population) AS AveragePopulation FROM city c GROUP BY c.District HAVING AVG(c.Population) < c.Population ORDER BY NumberOfCities DESC NULLS LAST;
SELECT c.District, COUNT(c.ID) AS city_count FROM city c WHERE c.Population > (SELECT AVG(c2.Population) FROM city c2) GROUP BY c.District ORDER BY city_count DESC NULLS LAST;
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT c.Continent, AVG(c.LifeExpectancy) AS average_life_expectancy, SUM(c.Population) AS total_population FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72 ORDER BY total_population DESC NULLS LAST;
SELECT c.Continent, SUM(c.Population) AS total_population, AVG(c.LifeExpectancy) AS average_life_expectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.SurfaceArea DESC LIMIT 5;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population DESC NULLS LAST LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT c.Name, c.Population FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population >= 80000;
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT SUM(c.population) AS total_population, AVG(c.SurfaceArea) AS average_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(c.Population), AVG(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000;
SELECT cl.Language, COUNT(cl.CountryCode) AS country_count FROM countrylanguage cl GROUP BY cl.Language ORDER BY country_count DESC LIMIT 1;
SELECT cl.Language, COUNT(*) AS CountryCount FROM countrylanguage cl GROUP BY cl.Language ORDER BY CountryCount DESC LIMIT 1;
SELECT c.Name, cl.Language, MAX(cl.Percentage) AS Max_Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name, cl.Language ORDER BY c.Name NULLS LAST;
SELECT c.Code, c.Name, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode ORDER BY c.Name, cl.Percentage DESC;
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT cl.CountryCode, MAX(cl.Percentage) AS MaxPercentage FROM countrylanguage cl WHERE cl.Language = 'Spanish' GROUP BY cl.CountryCode ORDER BY MaxPercentage DESC NULLS LAST;
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.Language = 'Spanish');
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age ASC;
SELECT c.Name, c.Age FROM conductor c ORDER BY c.Age DESC NULLS LAST;
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT c.Name FROM conductor c WHERE c.Nationality!= 'USA';
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT AVG(s.Attendance) FROM show s;
SELECT AVG(s.Attendance) AS average_attendance FROM "show" s;
SELECT MAX(CAST(s.share AS REAL) AS max_share, MIN(CAST(s.share AS REAL)) AS min_share FROM performance p JOIN show s ON p.performance_id = s.performance_id WHERE p.type!= 'Live final';
SELECT MAX(cast(p.share AS real) AS max_share, MIN(cast(p.share AS real)) AS min_share FROM performance p WHERE p.type!= 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT c.Nationality) FROM conductor c;
SELECT c.Name, c.Year_of_Work FROM conductor c ORDER BY c.Year_of_Work DESC;
SELECT c.Name, COUNT(c."Conductor_ID") AS years_of_work FROM "conductor" c GROUP BY c.Name ORDER BY years_of_work DESC;
SELECT c.Name, MAX(c.Year_of_Work) AS max_year_of_work FROM conductor c GROUP BY c.Name ORDER BY max_year_of_work DESC LIMIT 1;
SELECT c.Name, MAX(c.Year_of_Work) AS max_year_of_work FROM conductor c GROUP BY c.Name ORDER BY max_year_of_work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT DISTINCT c."Name" FROM "conductor" c JOIN "orchestra" o ON c."Conductor_ID" = o."Conductor_ID" GROUP BY c."Name" HAVING COUNT(o."Orchestra_ID") > 1;
SELECT DISTINCT c."Name" FROM "conductor" c JOIN "orchestra" o ON c."Conductor_ID" = o."Conductor_ID" GROUP BY c."Name" HAVING COUNT(DISTINCT o."Orchestra_ID") > 1;
WITH conductor_orchestras AS (SELECT c.Name, COUNT(o.Orchestra_ID) AS num_orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name) SELECT co.Name FROM conductor_orchestras co ORDER BY co.num_orchestras DESC NULLS LAST LIMIT 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS NumberOfOrchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT o.Record_Company, COUNT(o.Orchestra_ID) AS number_of_orchestras FROM orchestra o GROUP BY o.Record_Company ORDER BY number_of_orchestras DESC NULLS LAST;
SELECT o.Record_Company, COUNT(*) AS number_of_orchestras FROM orchestra o GROUP BY o.Record_Company ORDER BY number_of_orchestras DESC NULLS LAST;
SELECT o.Major_Record_Format, COUNT(*) AS COUNT FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY COUNT ASC;
SELECT o.Major_Record_Format, COUNT(o.Major_Record_Format) AS COUNT FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY COUNT DESC NULLS LAST;
SELECT oc.Record_Company, COUNT(oc.Orchestra_ID) AS COUNT FROM orchestra oc GROUP BY oc.Record_Company ORDER BY COUNT DESC LIMIT 1;
SELECT oc.Record_Company, COUNT(*) AS number_of_orchestras FROM orchestra oc GROUP BY oc.Record_Company ORDER BY number_of_orchestras DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p);
SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p);
SELECT o1.Record_Company FROM orchestra o1 WHERE o1.Year_of_Founded < 2003 INTERSECT SELECT o2.Record_Company FROM orchestra o2 WHERE o2.Year_of_Founded > 2003;
SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 AND o.Record_Company IN (SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded >= 2003);
SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra o WHERE o.Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra o WHERE o.major_record_format = 'CD' OR o.major_record_format = 'DVD';
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1 ORDER BY o.Year_of_Founded NULLS LAST;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT h.name, h.grade FROM Highschooler h;
SELECT h.name, h.grade FROM Highschooler h;
SELECT DISTINCT h.grade FROM Highschooler h ORDER BY h.grade NULLS LAST;
SELECT h.name, h.grade FROM Highschooler h ORDER BY h.name;
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.name FROM Highschooler h WHERE h.grade = 10;
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade = 10;
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle';
SELECT COUNT(*) AS total_highschoolers FROM Highschooler h WHERE h.grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT h.grade, COUNT(h.id) AS number_of_students FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(*) AS num_students FROM Highschooler h GROUP BY h.grade ORDER BY h.grade NULLS LAST;
SELECT h.grade, COUNT(h.id) AS num_students FROM Highschooler h GROUP BY h.grade ORDER BY num_students DESC NULLS LAST LIMIT 1;
SELECT h.grade, COUNT(*) AS number_of_students FROM Highschooler h GROUP BY h.grade ORDER BY number_of_students DESC LIMIT 1;
SELECT DISTINCT h.grade, COUNT(*) AS number_of_students FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.grade HAVING COUNT(*) >= 4 ORDER BY h.grade NULLS LAST;
SELECT DISTINCT h.grade FROM Highschooler h GROUP BY h.grade HAVING COUNT(h.ID) >= 4;
SELECT h.id, COUNT(f.student_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.id = f.student_id GROUP BY h.id;
SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.student_id) AS friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY friend_count DESC NULLS LAST;
WITH friendship_counts AS (SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name) SELECT fc.name, fc.num_friends FROM friendship_counts fc ORDER BY fc.num_friends DESC NULLS LAST;
WITH FriendCounts AS (SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name) SELECT name FROM FriendCounts ORDER BY num_friends DESC LIMIT 1;
WITH FriendCount AS (SELECT h.name, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name) SELECT name FROM FriendCount ORDER BY num_friends DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.student_id) >= 3) AS f ON h.ID = f.student_id ORDER BY h.name NULLS LAST;
WITH friend_counts AS (SELECT h.ID, COUNT(f.student_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID) SELECT h.name FROM Highschooler h JOIN friend_counts fc ON h.ID = fc.ID WHERE fc.num_friends >= 3;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT COUNT(DISTINCT f.friend_id) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle';
SELECT COUNT(*) AS friend_count FROM Friend f JOIN Highschooler h ON f.student_id = h.ID WHERE h.name = 'Kyle';
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.id FROM Highschooler h WHERE h.id NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.id NOT IN (SELECT f.student_id FROM Friend f UNION ALL SELECT f.friend_id FROM Friend f);
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id WHERE h.ID IN (SELECT f.friend_id FROM Friend f) AND h.ID IN (SELECT l.liked_id FROM Likes l);
SELECT h1.ID FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.student_id;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(f.student_id) > 0 AND COUNT(l.student_id) > 0;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT h.name, COUNT(l.student_id) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT h.name, COUNT(l.student_id) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY number_of_likes DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC NULLS LAST;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC LIMIT 1;
SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY likes_count DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN (SELECT l.student_id FROM Likes l GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2) AS likes ON h.ID = likes.student_id;
SELECT h.name FROM Highschooler h JOIN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2) l ON h.ID = l.student_id;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name HAVING COUNT(DISTINCT f.friend_id) >= 2 AND h.grade > 5;
SELECT h.name FROM Highschooler h JOIN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(f.friend_id) >= 2) f ON h.ID = f.student_id WHERE h.grade > 5;
SELECT COUNT(*) AS likes FROM Likes l JOIN Highschooler h ON l.student_id = h.ID WHERE h.name = 'Kyle';
SELECT COUNT(*) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id WHERE h.name = 'Kyle';
SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.student_id) > 0;
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id UNION SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id;
SELECT MIN(h.grade) FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f UNION SELECT f.friend_id FROM Friend f);
SELECT h.grade FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f) ORDER BY h.grade ASC LIMIT 1;
SELECT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state GROUP BY o.state, p.state HAVING COUNT(DISTINCT o.owner_id) > 0 AND COUNT(DISTINCT p.professional_id) > 0;
SELECT o.state, p.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(d.age) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT AVG(d.age) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR (SELECT COUNT(t2.treatment_id) FROM Treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (SELECT COUNT(t2.treatment_id) FROM Treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT o.first_name, p.first_name FROM Owners o JOIN Professionals p ON o.first_name = p.first_name WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT DISTINCT o.first_name FROM Owners o WHERE o.first_name NOT IN (SELECT d.name FROM Dogs d) UNION SELECT DISTINCT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT d.name FROM Dogs d);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
WITH dog_counts AS (SELECT d.owner_id, COUNT(d.dog_id) AS num_dogs FROM Dogs d GROUP BY d.owner_id) SELECT dc.owner_id, o.first_name, o.last_name FROM dog_counts dc JOIN Owners o ON dc.owner_id = o.owner_id ORDER BY dc.num_dogs DESC NULLS LAST LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id ORDER BY p.professional_id NULLS LAST;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN (SELECT t.professional_id, COUNT(t.treatment_id) AS treatment_count FROM Treatments t GROUP BY t.professional_id HAVING COUNT(t.treatment_id) >= 2) AS t2 ON p.professional_id = t2.professional_id ORDER BY p.professional_id NULLS LAST;
WITH breed_counts AS (SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name) SELECT bc.breed_name FROM breed_counts bc ORDER BY bc.num_dogs DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
WITH TreatmentCounts AS (SELECT o.owner_id, o.last_name, COUNT(t.treatment_id) AS treatment_count FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name) SELECT tc.owner_id, tc.last_name, tc.treatment_count FROM TreatmentCounts tc ORDER BY tc.treatment_count DESC NULLS LAST LIMIT 1;
SELECT d.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY d.owner_id, o.last_name ORDER BY total_cost DESC LIMIT 1;
WITH TotalCosts AS (SELECT tt.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description) SELECT t.treatment_type_description FROM TotalCosts t ORDER BY t.total_cost ASC NULLS LAST LIMIT 1;
SELECT t.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t GROUP BY t.treatment_type_description ORDER BY total_cost ASC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(c.charge_amount) AS total_charges FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Charges c ON d.dog_id = c.charge_id GROUP BY o.owner_id, o.zip_code ORDER BY total_charges DESC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(CASE WHEN d.date_departed IS NULL THEN t.cost_of_treatment ELSE 0 END) AS total_spent FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY total_spent DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 ORDER BY p.professional_id NULLS LAST;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 ORDER BY p.professional_id NULLS LAST;
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2);
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
WITH BreedRarity AS (SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY num_dogs DESC LIMIT 1) SELECT br.breed_name, t.date_of_treatment FROM BreedRarity br JOIN Treatments t ON br.breed_name = (SELECT breed_name FROM Breeds WHERE breed_code = t.dog_id::text) ORDER BY br.breed_name;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM Breeds ORDER BY COUNT(dog_id) ASC LIMIT 1);
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id ORDER BY d.dog_id NULLS LAST;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id ORDER BY d.date_of_birth DESC NULLS LAST LIMIT 1;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(d2.age) FROM Dogs d2);
SELECT p.email_address FROM Professionals p JOIN Owners o ON p.professional_id = o.owner_id WHERE o.state IN ('Hawaii', 'Wisconsin');
SELECT p.email_address FROM Professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT d.date_arrived, d.date_departed FROM Dogs d;
SELECT COUNT(DISTINCT t.dog_id) FROM Treatments t;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(DISTINCT t.professional_id) FROM Treatments t;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city LIKE '%West%';
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city ilike '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ILIKE '%North%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state ilike '%North%';
SELECT COUNT(d.dog_id) AS number_of_dogs FROM Dogs d WHERE CAST(d.age AS INT) < (SELECT AVG(CAST(age AS INT)) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE CAST(Dogs.age AS INTEGER) < (SELECT AVG(CAST(Dogs.age AS INTEGER)) FROM Dogs);
SELECT MAX(t.cost_of_treatment) AS most_recent_treatment_cost FROM Treatments t ORDER BY most_recent_treatment_cost DESC LIMIT 1;
SELECT MAX(t.cost_of_treatment) AS most_recent_cost FROM Treatments t;
SELECT COUNT(DISTINCT d.dog_id) AS number_of_untreated_dogs FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL;
SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t);
SELECT COUNT(*) AS number_of_owners FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT COUNT(*) AS number_of_professionals FROM Professionals p WHERE p.professional_id NOT IN (SELECT t.professional_id FROM Treatments t);
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT AVG(CAST(d.age AS INTEGER)) AS average_age FROM Dogs d;
SELECT MAX(d.age) AS age_of_oldest_dog FROM Dogs d;
SELECT MAX(d.age) FROM Dogs d;
SELECT c.charge_type, c.charge_amount FROM Charges c;
SELECT c.charge_type, c.charge_amount FROM Charges c ORDER BY c.charge_type NULLS LAST;
SELECT MAX(c.charge_amount) AS most_expensive_charge FROM Charges c;
SELECT MAX(c.charge_amount) AS max_charge FROM Charges c;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p;
SELECT d.breed_code, s.size_code FROM Dogs d CROSS JOIN Sizes s;
SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d;
SELECT p.first_name, tt.treatment_type_description FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY p.first_name NULLS LAST;
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT s.name, s.net_worth_millions FROM singer s ORDER BY s.net_worth_millions ASC NULLS LAST;
SELECT s.name, s.net_worth_millions FROM singer s ORDER BY s.net_worth_millions ASC;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s."Birth_Year", s."Citizenship" FROM "singer" s;
SELECT s.Name FROM "singer" s WHERE s.Citizenship!= 'France';
SELECT s.Name FROM singer s WHERE s.Citizenship!= 'France';
SELECT s.Name FROM "singer" s WHERE s."Birth_Year" IN (1948, 1949);
SELECT s.Name FROM "singer" s WHERE s."Birth_Year" IN (1948, 1949);
SELECT s.Name FROM singer s ORDER BY s.Net_Worth_Millions DESC NULLS LAST LIMIT 1;
SELECT s.Name, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions DESC NULLS LAST LIMIT 1;
SELECT s.Citizenship, COUNT(s.Citizenship) AS number_of_singers FROM singer s GROUP BY s.Citizenship ORDER BY number_of_singers DESC NULLS LAST;
SELECT s.Citizenship, COUNT(s.Singer_ID) AS number_of_singers FROM singer s GROUP BY s.Citizenship ORDER BY number_of_singers DESC NULLS LAST;
SELECT s.Citizenship, COUNT(*) AS COUNT FROM "singer" s GROUP BY s.Citizenship ORDER BY COUNT DESC LIMIT 1;
SELECT s.Citizenship, COUNT(s.Citizenship) AS Count FROM singer s GROUP BY s.Citizenship ORDER BY Count DESC LIMIT 1;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM "singer" s GROUP BY s.Citizenship;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM "singer" s GROUP BY s.Citizenship;
SELECT s."Title", s."Singer_ID", s."Name" FROM "song" s JOIN "singer" si ON s."Singer_ID" = si."Singer_ID";
SELECT s."Title", s."Singer_ID", s."Name" FROM "song" AS s JOIN "singer" AS si ON s."Singer_ID" = si."Singer_ID";
SELECT DISTINCT s.Name FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID WHERE t.Sales > 300000 ORDER BY s.Name;
SELECT DISTINCT s.Name FROM "singer" s JOIN "song" st ON s."Singer_ID" = st."Singer_ID" WHERE st."Sales" > 300000;
SELECT s.Name FROM singer s JOIN song st ON s.Singer_ID = st.Singer_ID GROUP BY s.Name HAVING COUNT(st.Song_ID) > 1;
SELECT s.Name FROM "singer" s JOIN (SELECT t.Singer_ID FROM "song" t GROUP BY t.Singer_ID HAVING COUNT(t.Song_ID) > 1) AS m ON s.Singer_ID = m.Singer_ID;
SELECT s.Name, SUM(s.Sales) AS total_sales FROM "song" s GROUP BY s.Singer_ID, s.Name;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM "song" s GROUP BY s.Singer_ID, s.Name;
SELECT s."Name" FROM "singer" s WHERE s."Singer_ID" NOT IN (SELECT s."Singer_ID" FROM "song" s);
SELECT s.Name FROM "singer" s WHERE s.Singer_ID NOT IN (SELECT s.Singer_ID FROM "song" s);
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship HAVING COUNT(DISTINCT s.Singer_ID) >= 2 ORDER BY s.Citizenship NULLS LAST;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Birth_Year > 1955 GROUP BY s.Citizenship HAVING COUNT(s.Citizenship) > 1;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT ot.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types ot ON oaf.feature_type_code = ot.feature_type_code WHERE oaf.feature_name = 'AirCon';
SELECT p.property_id, pt.property_type_description FROM Properties p JOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code;
SELECT p.property_name, p.property_address, p.room_count FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code WHERE r.property_type_description IN ('House', 'Apartment') AND p.room_count > 1;

SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) AS Total_Singers FROM singer; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC; 
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT s.Name, si.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID ORDER BY s.Age ASC LIMIT 1; 
SELECT s.Name, si.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age = (SELECT MIN(Age) FROM singer); 
SELECT DISTINCT Country FROM singer WHERE Age > 20; 
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20; 
SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT MAX("Capacity") AS Max_Capacity, AVG("Capacity") AS Average_Capacity FROM "stadium"; 
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium; 
SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium"); 
SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium"); 
SELECT COUNT(*)  FROM concert  WHERE Year = '2014' OR Year = '2015'; 
SELECT COUNT(*)  FROM concert  WHERE Year = '2014' OR Year = '2015'; 
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID; 
SELECT Stadium_ID, COUNT(concert_ID) AS Number_of_Concerts FROM concert GROUP BY Stadium_ID; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT Year, COUNT(*) AS Number_of_Concerts FROM concert GROUP BY Year ORDER BY Number_of_Concerts DESC LIMIT 1; 
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 40 UNION SELECT DISTINCT s.Country FROM singer s WHERE s.Age < 30; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IS NULL OR c.Year != '2014'; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID LEFT JOIN singer si ON sic.Singer_ID = si.Singer_ID WHERE c.Year != '2014' OR c.Year IS NULL; 
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID; 
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme; 
SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name; 
SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name; 
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT s.Name, si.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN (     SELECT Song_Name     FROM singer     WHERE Song_Name LIKE '%Hey%' ) AS sh ON s.Song_Name = sh.Song_Name; 
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID JOIN (     SELECT Song_Name     FROM concert     WHERE Song_Name LIKE '%Hey%' ) AS songs_with_hey ON c.concert_Name = songs_with_hey.Song_Name; 
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2; 
SELECT s.Location, s.Name FROM stadium s JOIN concert c1 ON s.Stadium_ID = c1.Stadium_ID AND c1.Year = '2014' JOIN concert c2 ON s.Stadium_ID = c2.Stadium_ID AND c2.Year = '2015' GROUP BY s.Location, s.Name HAVING COUNT(DISTINCT c1.concert_ID) > 0 AND COUNT(DISTINCT c2.concert_ID) > 0; 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1); 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1); 
SELECT COUNT(*) FROM Pets WHERE weight > 10; 
SELECT COUNT(*) FROM Pets WHERE weight > 10; 
SELECT MIN(weight) AS YoungestDogWeight FROM Pets WHERE PetType = 'dog'; 
SELECT MIN(weight) AS Youngest_Dog_Weight FROM Pets WHERE PetType = 'dog'; 
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType; 
SELECT PetType, MAX(weight) as MaxWeight FROM Pets GROUP BY PetType; 
SELECT COUNT(hp.StuID) AS NumberOfPets FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(hp.StuID) AS NumberOfPets FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(*) FROM Has_Pet AS hp JOIN Student AS s ON hp.StuID = s.StuID JOIN Pets AS p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'; 
SELECT COUNT(*)  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE s.Sex = 'F' AND p.PetType = 'dog'; 
SELECT COUNT(DISTINCT PetType) AS NumberOfDistinctPetTypes FROM Pets; 
SELECT COUNT(DISTINCT PetType) AS NumberOfDifferentPetTypes FROM Pets; 
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog'); 
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog'); 
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Pets p1 ON hp1.PetID = p1.PetID AND p1.PetType = 'cat' JOIN Has_Pet hp2 ON s.StuID = hp2.StuID JOIN Pets p2 ON hp2.PetID = p2.PetID AND p2.PetType = 'dog'; 
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID AND HP1.PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') JOIN Has_Pet HP2 ON S.StuID = HP2.StuID AND HP2.PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'); 
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) 
SELECT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat'; 
SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) 
SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')); 
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (     SELECT HP.StuID     FROM Has_Pet HP     JOIN Pets P ON HP.PetID = P.PetID     WHERE P.PetType = 'cat' ) 
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND NOT EXISTS (     SELECT 1     FROM Has_Pet hp2     JOIN Pets p2 ON hp2.PetID = p2.PetID     WHERE hp2.StuID = s.StuID     AND p2.PetType = 'cat' ); 
SELECT PetType, MIN(weight) as YoungestPetWeight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) GROUP BY PetType; 
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets); 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType; 
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID; 
SELECT DISTINCT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID; 
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith'; 
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith'; 
SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID; 
SELECT HP.StuID, COUNT(HP.PetID) AS NumberOfPets FROM Has_Pet HP GROUP BY HP.StuID; 
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1; 
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1; 
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3; 
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3; 
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT COUNT(*) FROM continents; 
SELECT COUNT(*) FROM continents; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent; 
SELECT COUNT(*) FROM countries; 
SELECT COUNT(*) FROM countries; 
SELECT      car_makers.FullName,      car_makers.Id,      COUNT(model_list.Model) AS ModelCount FROM      car_makers JOIN      model_list ON car_makers.Id = model_list.Maker GROUP BY      car_makers.FullName,      car_makers.Id; 
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName; 
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC LIMIT 1; 
SELECT Model  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  JOIN cars_data ON car_names.MakeId = cars_data.Id  ORDER BY cars_data.Horsepower ASC  LIMIT 1; 
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT ml.Model FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970; 
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970; 
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data); 
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data); 
SELECT DISTINCT ml.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980; 
SELECT DISTINCT ml.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980; 
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent; 
SELECT continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent; 
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1; 
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1; 
SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName; 
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName; 
SELECT cars_data.Accelerate FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'AMC Hornet Sportabout (SW)'; 
SELECT cars_data.Accelerate FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE car_names.Make = 'AMC Hornet Sportabout (SW)'; 
SELECT COUNT(DISTINCT cm.Id)  FROM car_makers cm  JOIN countries c ON cm.Country = c.CountryId  JOIN continents co ON c.Continent = co.ContId  WHERE co.Continent = 'france'; 
SELECT COUNT(DISTINCT cm.Id) AS NumberOfMakers FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France'; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN countries c ON cm.Country = c.CountryId  WHERE c.CountryName = 'USA'; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN countries c ON cm.Country = c.CountryId  WHERE c.CountryName = 'United States'; 
SELECT AVG(MPG) AS AvgMPG FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) AS AvgMPG FROM cars_data WHERE Cylinders = 4; 
SELECT MIN(Weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE Cylinders = 8 AND Year = 1974; 
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974; 
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model; 
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model; 
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.CountryId IN (SELECT Country FROM car_makers); 
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId HAVING COUNT(cm.Id) > 0; 
SELECT COUNT(*)  FROM cars_data  WHERE Horsepower > 150; 
SELECT COUNT(*)  FROM cars_data  WHERE Horsepower > 150; 
SELECT cars_data.Year, AVG(cars_data.Weight) AS AvgWeight FROM cars_data GROUP BY cars_data.Year; 
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year; 
SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3; 
SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3; 
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHorsepower DESC LIMIT 1; 
SELECT      c.Maker,      MAX(cd.Horsepower) AS MaxHorsepower FROM      cars_data cd JOIN      car_names cn ON cd.Id = cn.MakeId JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id WHERE      cd.Cylinders = 3 GROUP BY      c.Maker ORDER BY      MaxHorsepower DESC LIMIT 1; 
SELECT ml.Model, cd.MPG FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1; 
SELECT ml.Model FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1; 
SELECT AVG(Horsepower) AS AvgHorsepowerBefore1980 FROM cars_data WHERE Year < 1980; 
SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980; 
SELECT AVG(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo'); 
SELECT AVG(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'Volvo'; 
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders; 
SELECT MAX("Accelerate")  FROM cars_data  WHERE "Cylinders" IN (4, 6, 8, 10, 12); 
SELECT ml.Model, COUNT(*) AS VersionCount FROM model_list ml JOIN car_names cn ON ml.ModelId = cn.MakeId GROUP BY ml.Model ORDER BY VersionCount DESC LIMIT 1; 
SELECT model_list.Model, COUNT(model_list.Model) AS VersionCount FROM model_list GROUP BY model_list.Model ORDER BY VersionCount DESC LIMIT 1; 
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4; 
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980; 
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'American Motor Company'; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'American Motor Company'; 
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3; 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000; 
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data); 
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data); 
SELECT MIN(c.Cylinders)  FROM cars_data c  JOIN car_names cn ON c.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'Volvo'; 
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'Volvo' ORDER BY c.Accelerate ASC LIMIT 1; 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data); 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data); 
SELECT COUNT(DISTINCT c.CountryName)  FROM countries c  JOIN car_makers cm ON c.CountryId = cm.Country  GROUP BY c.CountryName  HAVING COUNT(DISTINCT cm.Maker) > 2; 
SELECT COUNT(*)  FROM countries  WHERE CountryId IN (     SELECT Country      FROM car_makers      GROUP BY Country      HAVING COUNT(DISTINCT Maker) > 2 ); 
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6; 
SELECT ml.Model, cd.Horsepower FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1; 
SELECT ml.Model, MAX(cd.Horsepower) AS MaxHorsepower FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 GROUP BY ml.Model ORDER BY MaxHorsepower DESC LIMIT 1; 
SELECT c.MakeId, cm.FullName FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3; 
SELECT c.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower != (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4; 
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 AND Year < 1980; 
SELECT MAX(MPG) AS MaxMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980; 
SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.ModelId IN (     SELECT cd.MakeId     FROM cars_data cd     WHERE cd.Weight < 3500 ) AND cm.FullName != 'Ford Motor Company'; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.ModelId NOT IN (     SELECT cd.Id     FROM cars_data cd     JOIN car_names cn ON cd.Id = cn.MakeId     JOIN car_makers cm ON cn.Maker = cm.Id     WHERE cm.FullName = 'Ford Motor Company' AND cd.Weight < 3500 ); 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2 HAVING COUNT(DISTINCT cm.Id) > 3; 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT cn.Model) >= 2 AND COUNT(cn.MakeId) > 3; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Make = 'fiat'; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker LIKE 'Fiat' OR (     SELECT COUNT(DISTINCT cm2.Maker)     FROM car_makers cm2     WHERE cm2.Country = c.CountryId ) > 3; 
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'; 
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'; 
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'; 
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'; 
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'; 
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'; 
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'; 
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM flights; 
SELECT COUNT(*) FROM flights; 
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'; 
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT City, Country FROM airports WHERE AirportName = 'Alton'; 
SELECT City, Country FROM airports WHERE AirportName = 'Alton'; 
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'; 
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'; 
SELECT AirportName FROM airports WHERE City = 'Aberdeen'; 
SELECT AirportName FROM airports WHERE City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ATO'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ATO'; 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen'); 
SELECT COUNT(*) FROM flights JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABD' AND DestAirport = 'ASH'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways'); 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways'); 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports AS src_airport ON flights.SourceAirport = src_airport.AirportCode  JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode  WHERE airlines.Airline = 'United Airlines' AND src_airport.AirportCode = 'AHD'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')  AND SourceAirport = 'AHD'; 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports AS src ON flights.SourceAirport = src.AirportCode  JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE airlines.Airline = 'United Airlines' AND dest.City = 'Aberdeen'; 
SELECT a.City, COUNT(f.FlightNo) AS NumberOfArrivingFlights FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY NumberOfArrivingFlights DESC LIMIT 1; 
SELECT a.City, COUNT(*) as Frequency FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY Frequency DESC LIMIT 1; 
SELECT a.City, COUNT(f.FlightNo) AS DepartureFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY DepartureFlights DESC LIMIT 1; 
SELECT a.City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT AirportCode FROM airports WHERE AirportCode = (     SELECT SourceAirport     FROM flights     GROUP BY SourceAirport     ORDER BY COUNT(*) ASC     LIMIT 1 ); 
SELECT airlines.Airline, COUNT(flights.FlightNo) AS TotalFlights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY TotalFlights DESC LIMIT 1; 
SELECT airlines.Airline, COUNT(flights.FlightNo) AS FlightCount FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY FlightCount DESC LIMIT 1; 
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (     SELECT Airline, COUNT(*) as FlightCount     FROM flights     GROUP BY Airline     ORDER BY FlightCount ASC     LIMIT 1 ) f ON a.uid = f.Airline; 
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'AHD'); 
SELECT DISTINCT A.Airline FROM flights F JOIN airlines A ON F.Airline = A.uid JOIN airports AS SA ON F.SourceAirport = SA.AirportCode WHERE SA.AirportCode = 'AHD'; 
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'AHD'); 
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD'; 
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airports apg ON f1.SourceAirport = apg.AirportCode AND apg.AirportCode = 'APG' JOIN airports cvo ON f2.DestAirport = cvo.AirportCode AND cvo.AirportCode = 'CVO' JOIN airlines a ON f1.Airline = a.uid; 
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airports apg ON f1.SourceAirport = apg.AirportCode AND apg.AirportCode = 'APG' JOIN airports cvo ON f2.SourceAirport = cvo.AirportCode AND cvo.AirportCode = 'CVO' WHERE f1.DestAirport = f2.DestAirport; 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (     SELECT f2.Airline     FROM flights f2     WHERE f2.DestAirport = 'APG' ); 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (     SELECT f2.Airline     FROM flights f2     WHERE f2.DestAirport = 'APG' ); 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10; 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10; 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200; 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200; 
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'; 
SELECT f.FlightNo FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode WHERE src.City = 'Aberdeen'; 
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT f.FlightNo FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode WHERE src.City = 'Aberdeen'; 
SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City IN ('Aberdeen', 'Abilene'); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport IN ('ABR', 'ABI'); 
SELECT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.Airline IS NULL; 
SELECT a.AirportCode, a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.Airline IS NULL; 
SELECT COUNT(*) FROM employee; 
SELECT COUNT(*) FROM employee; 
SELECT Name FROM employee ORDER BY Age ASC; 
SELECT Name FROM employee ORDER BY Age ASC; 
SELECT City, COUNT(Employee_ID) AS EmployeeCount FROM employee GROUP BY City; 
SELECT City, COUNT(Employee_ID) AS EmployeeCount FROM employee GROUP BY City; 
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1; 
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1; 
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location; 
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location; 
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop); 
SELECT s.Manager_name, s.District FROM shop s ORDER BY s.Number_products DESC LIMIT 1; 
SELECT MIN("Number_products") AS MinProducts, MAX("Number_products") AS MaxProducts FROM "shop"; 
SELECT MIN("Number_products") AS Min_Products, MAX("Number_products") AS Max_Products FROM "shop"; 
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation); 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation); 
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1; 
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL; 
SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name; 
SELECT s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID; 
SELECT SUM("Bonus") AS Total_Bonus FROM "evaluation"; 
SELECT SUM("Bonus") AS Total_Bonus FROM "evaluation"; 
SELECT * FROM hiring; 
SELECT * FROM hiring; 
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 OR s.Number_products > 10000; 
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 OR s.Number_products > 10000; 
SELECT COUNT(DISTINCT Location) AS Different_Store_Locations FROM shop; 
SELECT COUNT(DISTINCT Location) FROM shop; 
SELECT COUNT(*) FROM Documents; 
SELECT COUNT(*) FROM Documents; 
SELECT Document_ID, Document_Name, Document_Description FROM Documents; 
SELECT d.Document_ID, d.Document_Name, t.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code; 
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name LIKE '%w%'; 
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name LIKE '%w%'; 
SELECT d.Document_ID, t.Template_ID, d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV'; 
SELECT d.Document_ID, d.Template_ID, d.Document_Name FROM Documents d WHERE d.Document_Name = 'Robbin CV'; 
SELECT COUNT(DISTINCT Templates.Template_ID) AS Unique_Template_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT COUNT(DISTINCT Template_ID) FROM Documents; 
SELECT COUNT(DISTINCT d.Document_ID)  FROM Documents d  JOIN Templates t ON d.Template_ID = t.Template_ID  JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code  WHERE rtt.Template_Type_Code = 'PPT'; 
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'); 
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(Template_ID) > 1; 
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1; 
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents); 
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents); 
SELECT COUNT(*) FROM Templates; 
SELECT COUNT(*) FROM Templates; 
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates; 
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates; 
SELECT DISTINCT Template_Type_Code FROM Templates; 
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types; 
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code; 
SELECT Template_Type_Code, COUNT(Template_ID) AS Template_Count FROM Templates GROUP BY Template_Type_Code; 
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (     SELECT Template_Type_Code     FROM Templates     GROUP BY Template_Type_Code     HAVING COUNT(Template_ID) < 3 ); 
SELECT MIN(Version_Number), Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) ASC LIMIT 1; 
SELECT MIN(Version_Number), Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code ORDER BY MIN(Version_Number); 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'; 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'; 
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code = 'BK'; 
SELECT Template_Type_Code, COUNT(DISTINCT Document_ID) AS Document_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code; 
SELECT RT Template_Type, COUNT(D.Document_ID) AS Document_Count FROM Ref_Template_Types RT LEFT JOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY RT.Template_Type_Code; 
SELECT RT Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Ref_Template_Types RT JOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY RT.Template_Type_Code ORDER BY Document_Count DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates ); 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates ); 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'; 
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID; 
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID; 
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation'); 
SELECT COUNT(*) FROM Paragraphs; 
SELECT COUNT(*) FROM Paragraphs; 
SELECT COUNT(Paragraph_ID)  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'; 
SELECT COUNT(p.Paragraph_ID)  FROM Paragraphs p  JOIN Documents d ON p.Document_ID = d.Document_ID  WHERE d.Document_Name = 'Summer Show'; 
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea '; 
SELECT p.Other_Details FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE p.Paragraph_Text LIKE '%Korea%'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'; 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'; 
SELECT      d.Document_ID,      COUNT(p.Paragraph_ID) AS Paragraph_Count FROM      Documents d LEFT JOIN      Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY      d.Document_ID ORDER BY      d.Document_ID; 
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID; 
SELECT      d.Document_ID,      d.Document_Name,      (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) AS Paragraph_Count FROM      Documents d; 
SELECT      d.Document_ID,      d.Document_Name,      (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) AS Paragraph_Count FROM      Documents d; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2; 
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1; 
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1; 
SELECT Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland'); 
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland'); 
SELECT COUNT(*) FROM teacher; 
SELECT COUNT(*) FROM teacher; 
SELECT Name FROM teacher ORDER BY Age ASC; 
SELECT Name FROM teacher ORDER BY Age ASC; 
SELECT "teacher"."Age", "teacher"."Hometown" FROM "teacher"; 
SELECT "Name", "Age", "Hometown" FROM "teacher"; 
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'; 
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'; 
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'; 
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'; 
SELECT "Hometown"  FROM "teacher"  WHERE "Age" = (SELECT MIN("Age") FROM "teacher"); 
SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher); 
SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown; 
SELECT "Hometown", COUNT("Teacher_ID") AS "Number_of_Teachers" FROM "teacher" GROUP BY "Hometown"; 
SELECT "Hometown", COUNT(*) as "Count" FROM "teacher" GROUP BY "Hometown" ORDER BY "Count" DESC LIMIT 1; 
SELECT "Hometown", COUNT(*) as "Hometown_Count" FROM "teacher" GROUP BY "Hometown" ORDER BY "Hometown_Count" DESC LIMIT 1; 
SELECT t1.Hometown FROM teacher t1 JOIN teacher t2 ON t1.Hometown = t2.Hometown WHERE t1.Teacher_ID < t2.Teacher_ID GROUP BY t1.Hometown HAVING COUNT(t1.Teacher_ID) >= 2; 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'; 
SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name; 
SELECT t.Name, COUNT(ca.Course_ID) AS Courses_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2; 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange); 
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL; 
SELECT COUNT(*)  FROM visitor  WHERE Age < 30; 
SELECT v.Name FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC; 
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4; 
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age ASC; 
SELECT "Museum_ID", "Name" FROM "museum" ORDER BY "Num_of_Staff" DESC LIMIT 1; 
SELECT AVG("Num_of_Staff")  FROM "museum"  WHERE "Open_Year" < '2009'; 
SELECT "Open_Year", "Num_of_Staff" FROM "museum" WHERE "Name" = 'Plaza Museum'; 
SELECT Name FROM museum WHERE Num_of_Staff > (     SELECT MIN(Num_of_Staff)     FROM museum     WHERE Open_Year > '2010' ); 
SELECT v.visitor_ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.visitor_ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1; 
SELECT v.visitor_ID, v.Name, v.Level_of_membership FROM visitor v JOIN (     SELECT visitor_ID, SUM(Total_spent) as Total_spent     FROM visit     GROUP BY visitor_ID     ORDER BY Total_spent DESC     LIMIT 1 ) AS top_spender ON v.ID = top_spender.visitor_ID; 
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1; 
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL; 
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (     SELECT MAX(Num_of_Ticket)     FROM visit ) 
SELECT AVG("Num_of_Ticket") AS Average_Tickets, MAX("Num_of_Ticket") AS Max_Tickets FROM "visit"; 
SELECT SUM("Total_spent") AS Total_Ticket_Expense FROM "visit" JOIN "visitor" ON "visit"."visitor_ID" = "visitor"."ID" WHERE "visitor"."Level_of_membership" = 1; 
SELECT v.Name FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID JOIN museum m1 ON v1.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009' JOIN visit v2 ON v.ID = v2.visitor_ID JOIN museum m2 ON v2.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011' WHERE v1.Museum_ID != v2.Museum_ID; 
SELECT COUNT(DISTINCT v.ID)  FROM visitor v  LEFT JOIN visit ON v.ID = visit.visitor_ID  WHERE v.Age IS NOT NULL AND visit.Museum_ID IS NULL; 
SELECT COUNT(*) FROM museum WHERE Open_Year < '2008' OR Open_Year > '2013'; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) AS total_matches FROM matches; 
SELECT COUNT(*) FROM matches; 
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'; 
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG(winner_rank) AS average_winner_rank FROM matches; 
SELECT AVG(winner_rank) AS average_winner_rank FROM matches; 
SELECT MAX("loser_rank") AS highest_loser_rank FROM matches; 
SELECT MAX("loser_rank") AS best_loser_rank FROM matches; 
SELECT COUNT(DISTINCT country_code) FROM players; 
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players; 
SELECT COUNT(DISTINCT loser_name) AS distinct_losers_count FROM matches; 
SELECT COUNT(DISTINCT loser_name) FROM matches; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10; 
SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) AND winner_id IN (     SELECT player_id     FROM matches     WHERE year = 2013     AND winner_id IN (         SELECT player_id         FROM matches         WHERE year = 2016     ) ); 
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN rankings r1 ON p.player_id = r1.player_id AND r1.ranking_date = '2013-01-01' JOIN rankings r2 ON p.player_id = r2.player_id AND r2.ranking_date = '2016-01-01' WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE year IN (2013, 2016) ); 
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016; 
SELECT COUNT(*)  FROM matches  WHERE year = 2013 OR year = 2016; 
SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' GROUP BY p.player_id HAVING COUNT(DISTINCT m1.tourney_name) = 2; 
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' ) m2 ON p.player_id = m2.winner_id JOIN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' ) m3 ON p.player_id = m3.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m3.tourney_name = 'Australian Open'; 
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1; 
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1; 
SELECT first_name, last_name FROM players ORDER BY birth_date; 
SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players ORDER BY birth_date; 
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date; 
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date; 
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY r.tours DESC LIMIT 1; 
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings); 
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; 
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; 
SELECT winner_name, winner_rank_points FROM matches JOIN players ON winner_id = players.player_id WHERE winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches     JOIN players ON winner_id = players.player_id     GROUP BY winner_name ); 
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN (     SELECT winner_id, COUNT(*) as match_count, SUM(ranking_points) as total_rank_points     FROM matches     JOIN rankings ON matches.winner_id = rankings.player_id     GROUP BY winner_id     ORDER BY match_count DESC     LIMIT 1 ) AS top_winner ON p.player_id = top_winner.winner_id; 
SELECT winner_name FROM matches JOIN players ON winner_id = players.player_id WHERE tourney_name = 'Australian Open' AND ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE player_id = winner_id); 
SELECT p.first_name, p.last_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (     SELECT MAX(ranking_points)     FROM rankings     JOIN matches m ON r.player_id = m.winner_id     WHERE m.tourney_name = 'Australian Open' ) AND m.tourney_name = 'Australian Open'; 
SELECT      m.loser_name,      m.winner_name FROM      matches m ORDER BY      m.minutes DESC LIMIT 1; 
SELECT      p1.first_name AS winner_name,      p1.last_name AS winner_last_name,      p2.first_name AS loser_name,      p2.last_name AS loser_last_name,      MAX(m.minutes) AS longest_match_minutes FROM      matches m JOIN      players p1 ON m.winner_id = p1.player_id JOIN      players p2 ON m.loser_id = p2.player_id GROUP BY      m.minutes ORDER BY      longest_match_minutes DESC LIMIT 1; 
SELECT p.first_name, p.last_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.last_name; 
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code; 
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code; 
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1; 
SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50; 
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year; 
SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year; 
SELECT winner_name, winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id WHERE winner_age = (     SELECT MIN(winner_age)     FROM matches     JOIN players ON players.player_id = matches.winner_id     GROUP BY winner_age     ORDER BY winner_age ASC     LIMIT 3 ); 
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.birth_date = (SELECT MIN(birth_date) FROM players WHERE player_id IN (SELECT winner_id FROM matches)) ORDER BY p.birth_date DESC LIMIT 3; 
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'; 
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_hand = 'L'  AND tourney_name = 'WTA Championships'; 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches ) ORDER BY m.winner_rank_points DESC LIMIT 1; 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_points     FROM matches     GROUP BY winner_id     ORDER BY total_points DESC     LIMIT 1 ) AS top_winners ON p.player_id = top_winners.winner_id; 
SELECT hand, COUNT(*) AS number_of_players FROM players GROUP BY hand; 
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand; 
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured'; 
SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage DESC; 
SELECT name, date, result FROM battle; 
SELECT      b.id AS battle_id,     b.name AS battle_name,     MAX(d.killed + d.injured) AS max_death_toll,     MIN(d.killed + d.injured) AS min_death_toll FROM      battle b JOIN      death d ON b.id = d.caused_by_ship_id GROUP BY      b.id, b.name; 
SELECT AVG(injured) AS average_injuries_per_battle FROM death; 
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'; 
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'; 
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'; 
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10; 
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.killed + d.injured) DESC LIMIT 1; 
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'; 
SELECT COUNT(DISTINCT result) AS different_results_count FROM battle; 
SELECT COUNT(*)  FROM battle  WHERE id NOT IN (     SELECT DISTINCT lost_in_battle      FROM ship      WHERE tonnage = '225' ); 
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta'; 
SELECT b.name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location != 'English Channel' OR s.location IS NULL; 
SELECT note FROM death WHERE note LIKE '%East%'; 
SELECT line_1, line_2 FROM Addresses; SELECT line_1, line_2 FROM Addresses; 
SELECT line_1, line_2 FROM Addresses; 
SELECT COUNT(*) FROM Courses; 
SELECT COUNT(*) FROM Courses; 
SELECT course_description FROM Courses WHERE course_name = 'Math'; 
SELECT course_description FROM Courses WHERE course_name LIKE '%Math%'; 
SELECT `zip_postcode` FROM `Addresses` WHERE `city` = 'Port Chelsea'; 
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'; 
SELECT d.department_id, d.department_name, COUNT(dp.degree_program_id) AS degree_count FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY degree_count DESC LIMIT 1; 
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs; 
SELECT COUNT(DISTINCT department_id) AS different_departments FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_program_id) AS different_degrees_offered FROM Degree_Programs; 
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering'); 
SELECT COUNT(*)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'Engineering'; 
SELECT section_name, section_description FROM Sections; 
SELECT section_name, section_description FROM Sections; 
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2; 
SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2; 
SELECT section_name FROM Sections ORDER BY section_name DESC; 
SELECT section_name FROM Sections ORDER BY section_name DESC; 
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT      Semesters.semester_id,      Semesters.semester_name,      COUNT(Student_Enrolment.student_id) AS student_count FROM      Semesters JOIN      Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY      Semesters.semester_id,      Semesters.semester_name ORDER BY      student_count DESC LIMIT 1; 
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%'; 
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'; 
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id GROUP BY s.student_id HAVING COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name  FROM      Students s  JOIN      Student_Enrolment se ON s.student_id = se.student_id  JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  JOIN      Semesters sm ON se.semester_id = sm.semester_id  GROUP BY      s.student_id  HAVING      COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor'; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelors%'; 
SELECT      Degree_Programs.degree_summary_name,      COUNT(Student_Enrolment.degree_program_id) AS student_count FROM      Degree_Programs JOIN      Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY      Degree_Programs.degree_program_id ORDER BY      student_count DESC LIMIT 1; 
SELECT dp.degree_summary_name, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1; 
SELECT      Degree_Programs.degree_program_id,      Degree_Programs.degree_summary_name FROM      Student_Enrolment JOIN      Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY      Degree_Programs.degree_program_id,      Degree_Programs.degree_summary_name ORDER BY      COUNT(Student_Enrolment.student_id) DESC LIMIT 1; 
SELECT      Degree_Programs.degree_program_id,      Degree_Programs.degree_summary_name FROM      Degree_Programs JOIN      Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY      Degree_Programs.degree_program_id,      Degree_Programs.degree_summary_name ORDER BY      COUNT(Student_Enrolment.student_id) DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_id) AS number_of_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id,      s.first_name,      s.middle_name,      s.last_name ORDER BY      number_of_enrollments DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_id) AS number_of_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id ORDER BY      number_of_enrollments DESC LIMIT 1; 
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL; 
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM Student_Enrolment ); 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1; 
SELECT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_enrolment_id) DESC LIMIT 1; 
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se ); 
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se ); 
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2; 
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students); 
SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (     SELECT student_id     FROM Student_Enrolment     ORDER BY date_first_registered ASC     LIMIT 1 ); 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE sm.semester_name = 'Graduation' ORDER BY se.date_left ASC LIMIT 1; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE s.date_left IS NOT NULL ORDER BY sm.semester_id ASC LIMIT 1; 
SELECT s.first_name FROM Students s WHERE s.permanent_address_id != s.current_address_id; 
SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.address_id != pa.address_id; 
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1; 
SELECT MIN(transcript_date) AS Earliest_Transcript_Date, other_details FROM Transcripts GROUP BY other_details ORDER BY Earliest_Transcript_Date ASC LIMIT 1; 
SELECT COUNT(*) AS total_transcripts_released FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts; 
SELECT      sc.student_course_id,      COUNT(DISTINCT t.transcript_id) AS max_transcripts FROM      Student_Enrolment_Courses sc JOIN      Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY      sc.student_course_id ORDER BY      max_transcripts DESC LIMIT 1; 
SELECT      sc.student_course_id,      COUNT(*) as transcript_count FROM      Student_Enrolment_Courses sc JOIN      Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY      sc.student_course_id ORDER BY      transcript_count DESC LIMIT 1; 
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (     SELECT transcript_id     FROM Transcript_Contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 ); 
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE transcript_id = Transcripts.transcript_id) LIMIT 1; 
SELECT DISTINCT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Students st ON se.student_id = st.student_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2; 
SELECT DISTINCT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Sections sc ON se.student_id IN (     SELECT student_id     FROM Student_Enrolment     WHERE degree_program_id = dp.degree_program_id ) WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2; 
SELECT COUNT(DISTINCT current_address_id) AS different_current_addresses FROM Students; 
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id; 
SELECT * FROM Students ORDER BY last_name DESC, middle_name DESC, first_name DESC; 
SELECT other_student_details  FROM Students  ORDER BY other_student_details DESC; 
SELECT section_name, section_description, other_details FROM Sections WHERE section_name = 'h'; 
SELECT section_description FROM Sections WHERE section_name = 'h'; 
SELECT s.first_name FROM Students s WHERE s.permanent_address_id IN (     SELECT a.address_id     FROM Addresses a     WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582'; 
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE pa.country = 'Haiti' UNION SELECT DISTINCT s.first_name FROM Students s WHERE s.cell_mobile_number = '09700166582'; 
SELECT Title FROM Cartoon ORDER BY Title ASC; 
SELECT Title FROM Cartoon ORDER BY Title ASC; 
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'; 
SELECT COUNT(*)  FROM Cartoon  WHERE "Written_by" = 'Joseph Kuhr'; 
SELECT COUNT(*)  FROM Cartoon  WHERE "Written_by" = 'Joseph Kuhr'; 
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date; 
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; 
SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1; 
SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1; 
SELECT COUNT(DISTINCT series_name) AS series_count,         COUNT(DISTINCT Content) AS content_count FROM TV_Channel; 
SELECT COUNT(DISTINCT series_name) AS different_series_count,        COUNT(DISTINCT Content) AS different_content_count FROM TV_Channel; 
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'; 
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'; 
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_Channels ASC LIMIT 1; 
SELECT Language, COUNT(*) as Channels_Using_Language FROM TV_Channel GROUP BY Language ORDER BY Channels_Using_Language ASC LIMIT 1; 
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language; 
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language; 
SELECT TC.series_name FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Title = 'The Rise of the Blue Beetle!'; 
SELECT TC.series_name FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Title = 'The Rise of the Blue Beetle'; 
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'; 
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'; 
SELECT "Episode" FROM "TV_series" ORDER BY "Rating" DESC; 
SELECT      TV_series.Episode,      TV_series.Rating FROM      TV_series ORDER BY      TV_series.Rating DESC; 
SELECT "Episode", "Rating" FROM "TV_series" ORDER BY "Rating" DESC LIMIT 3; 
SELECT "TV_series"."id", "TV_series"."Rating" FROM "TV_series" ORDER BY "TV_series"."Rating" DESC LIMIT 3; 
SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series; 
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series; 
SELECT "Air_Date" FROM TV_series WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'; 
SELECT "Weekly_Rank" FROM "TV_series" WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT "Weekly_Rank" FROM TV_series WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT TC.series_name FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel WHERE TS.Episode = 'A Love of a Lifetime'; 
SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'; 
SELECT "TV_series"."Episode" FROM "TV_series" JOIN "TV_Channel" ON "TV_series"."Channel" = "TV_Channel"."id" WHERE "TV_Channel"."series_name" = 'Sky Radio'; 
SELECT "Episode" FROM TV_series WHERE "Channel" = (SELECT "id" FROM TV_Channel WHERE "series_name" = 'Sky Radio'); 
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by; 
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by; 
SELECT "Production_code", "Channel" FROM Cartoon WHERE "Original_air_date" = (SELECT MAX("Original_air_date") FROM Cartoon); 
SELECT "Production_code", "Channel" FROM Cartoon ORDER BY "Original_air_date" DESC LIMIT 1; 
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'yes'; 
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'yes'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by = 'Todd Casey'; 
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by IS NULL OR C.Written_by != 'Todd Casey'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by IS NULL OR C.Written_by != 'Todd Casey'; 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'; 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE (C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'); 
SELECT "Pixel_aspect_ratio_PAR", "Country" FROM "TV_Channel" WHERE "Language" != 'English'; 
SELECT "Pixel_aspect_ratio_PAR", "Country" FROM TV_Channel WHERE "Language" <> 'English'; 
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN (     SELECT Country     FROM TV_Channel     GROUP BY Country     HAVING COUNT(*) > 2 ); 
SELECT Channel FROM TV_Channel GROUP BY Channel HAVING COUNT(*) > 2; 
SELECT DISTINCT c.id FROM TV_Channel c LEFT JOIN Cartoon ct ON c.id = ct.Channel WHERE ct Directed_by IS NULL OR ct.Directed_by != 'Ben Jones'; 
SELECT DISTINCT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon Directed_by != 'Ben Jones' OR Cartoon Directed_by IS NULL; 
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT TC."Package_Option" FROM TV_Channel TC WHERE TC."id" NOT IN (     SELECT C.Channel     FROM Cartoon C     JOIN TV_Channel TC ON C.Channel = TC.id     WHERE C."Directed_by" = 'Ben Jones' ); 
SELECT COUNT(*) FROM poker_player; 
SELECT COUNT(*) FROM poker_player; 
SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC; 
SELECT "Earnings"  FROM "poker_player"  ORDER BY "Earnings" DESC; 
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player"; 
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player"; 
SELECT AVG("Earnings") AS Average_Earnings FROM "poker_player"; 
SELECT AVG("Earnings") FROM "poker_player"; 
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1; 
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1; 
SELECT MAX("Final_Table_Made")  FROM "poker_player"  WHERE "Earnings" < 200000; 
SELECT MAX("Final_Table_Made")  FROM "poker_player"  WHERE "Earnings" < 200000; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC; 
SELECT p."Birth_Date" FROM "poker_player" AS pp JOIN "people" AS p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" ASC LIMIT 1; 
SELECT p."Birth_Date" FROM "poker_player" AS pp JOIN "people" AS p ON pp."People_ID" = p."People_ID" ORDER BY pp."Earnings" ASC LIMIT 1; 
SELECT "Money_Rank" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "Height" = (SELECT MAX("Height") FROM "people"); 
SELECT "Money_Rank" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "people"."Height" DESC LIMIT 1; 
SELECT AVG("Earnings")  FROM "poker_player"  WHERE "Height" > 200; 
SELECT AVG("Earnings")  FROM "poker_player"  WHERE "Height" > 200; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC; 
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality; 
SELECT "Nationality", COUNT(*) as "Count" FROM "people" GROUP BY "Nationality" ORDER BY "Count" DESC LIMIT 1; 
SELECT "Nationality", COUNT(*) as "Count" FROM "people" GROUP BY "Nationality" ORDER BY "Count" DESC LIMIT 1; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2; 
SELECT Name, Birth_Date FROM people ORDER BY Name ASC; 
SELECT Name, Birth_Date FROM people ORDER BY Name ASC; 
SELECT Name FROM people WHERE Nationality != 'Russia'; 
SELECT Name FROM people WHERE Nationality != 'Russia'; 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player); 
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL; 
SELECT COUNT(DISTINCT "Nationality") FROM "people"; 
SELECT COUNT(DISTINCT "Nationality") FROM "people"; 
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE; 
SELECT `contestant_number`, `contestant_name` FROM `CONTESTANTS` ORDER BY `contestant_name` DESC; 
SELECT vote_id, phone_number, state FROM VOTES; 
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE; 
SELECT MAX(created) AS last_vote_date FROM VOTES WHERE state = 'CA'; 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'; 
SELECT DISTINCT V.state, V.created FROM VOTES V JOIN AREA_CODE_STATE ACS ON V.state = ACS.state; 
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2; 
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1; 
SELECT COUNT(*) AS vote_count FROM VOTES WHERE state IN ('NY', 'CA'); 
SELECT COUNT(DISTINCT contestant_number)  FROM CONTESTANTS  WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES); 
SELECT area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'; 
SELECT DISTINCT a.area_code FROM VOTES v1 JOIN VOTES v2 ON v1.phone_number = v2.phone_number JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number JOIN AREA_CODE_STATE a ON v1.state = a.state WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss' AND v1.area_code = v2.area_code; 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'; 
SELECT Name FROM country WHERE IndepYear > 1950; 
SELECT Name FROM country WHERE IndepYear > 1950; 
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'; 
SELECT COUNT(DISTINCT c.Code)  FROM country c  WHERE c.GovernmentForm LIKE '%republic%'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'; 
SELECT Continent  FROM country  WHERE Name = 'Anguilla'; 
SELECT Continent  FROM country  WHERE Name = 'Anguilla'; 
SELECT c.Region FROM city AS ct JOIN country AS c ON ct.CountryCode = c.Code WHERE ct.Name = 'Kabul'; 
SELECT District FROM city WHERE Name = 'Kabul'; 
SELECT `Language`, MAX(`Percentage`) as `MaxPercentage` FROM `countrylanguage` WHERE `CountryCode` = 'ABW' GROUP BY `Language` ORDER BY `MaxPercentage` DESC LIMIT 1; 
SELECT `Language` FROM `countrylanguage` WHERE `CountryCode` = 'ABW' AND `IsOfficial` = 'T' ORDER BY `Percentage` DESC LIMIT 1; 
SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil'; 
SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil'; 
SELECT Region, Population FROM country WHERE Name = 'Angola'; 
SELECT Region, Population FROM country WHERE Name = 'Angola'; 
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Region` = 'Central Africa'; 
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Region` = 'Central Africa'; 
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1; 
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1; 
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS MaxGNP FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia'; 
SELECT      SUM(c.Population) AS TotalPopulationInAsia,     MAX(co.GNP) AS LargestGNPInAsia FROM      city c JOIN      country co ON c.CountryCode = co.Code WHERE      co.Continent = 'Asia'; 
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%republic%'; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%republic%'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(`Population`) AS TotalPopulation FROM `city` WHERE `District` = 'Gelderland'; 
SELECT SUM(`Population`) AS TotalPopulation FROM `city` WHERE `District` = 'Gelderland'; 
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory'; 
SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE Code IN ('UM', 'AS', 'MP', 'PR', 'VI') -- Assuming US territories have these codes 
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage; 
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM countrylanguage; 
SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernments FROM country WHERE Continent = 'Africa'; 
SELECT COUNT(DISTINCT `GovernmentForm`) AS DifferentGovernmentForms FROM `country` WHERE `Continent` = 'Africa'; 
SELECT COUNT(*) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'; 
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'ABW'; 
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1; 
SELECT Continent, COUNT(*) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1; 
SELECT COUNT(DISTINCT c1.CountryCode) FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'; 
SELECT COUNT(DISTINCT c.Code) AS NumberOfNations FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'Dutch'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT Continent)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese'; 
SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia'; 
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'Dutch'; 
SELECT DISTINCT c.Name AS CountryName, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English'); 
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT cl.Language, MAX(cl.Percentage) AS HighestPercentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY HighestPercentage DESC LIMIT 1; 
SELECT cl.Language, COUNT(cl.CountryCode) AS LanguageCount FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY LanguageCount DESC LIMIT 1; 
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1; 
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.CountryCode, cl.Language HAVING COUNT(cl.CountryCode) = 1; 
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' AND c.Population = (SELECT MAX(Population) FROM city) ORDER BY c.Population DESC LIMIT 1; 
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1; 
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' ); 
SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' ); 
SELECT SUM(c.Population) AS TotalPopulation FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL; 
SELECT COUNT(DISTINCT c.Name) AS CountryCount FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F'; 
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalDistinctOfficialLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT c.Name FROM country c WHERE c.SurfaceArea > (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Europe' ); 
SELECT c.Name FROM country c WHERE c.SurfaceArea > (     SELECT MAX(c2.SurfaceArea)     FROM country c2     WHERE c2.Continent = 'Europe' ); 
SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (     SELECT MIN(Population)     FROM country     WHERE Continent = 'Asia' ); 
SELECT c.Name FROM country AS af JOIN country AS asi ON af.Population < asi.Population WHERE af.Continent = 'Africa' AND asi.Continent = 'Asia'; 
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa' ); 
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(population)     FROM country     WHERE Continent = 'Africa' ); 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F'; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.Language IS NULL; 
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F' AND c.GovernmentForm != 'Republic'; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm NOT LIKE '%Republic%'; 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.IsOfficial = 'T' WHERE co.Continent = 'Europe' AND cl.Language != 'English' OR cl.IsOfficial IS NULL; 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1; 
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country); 
SELECT c.Population, c.Name, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3; 
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(cl.Language) > 2; 
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District; 
SELECT      c.District,      COUNT(*) AS NumberOfCities,      AVG(city.Population) OVER () AS AvgPopulation FROM      city c WHERE      c.Population > (SELECT AVG(Population) FROM city) GROUP BY      c.District; 
SELECT      c.GovernmentForm,      SUM(co.Population) AS TotalPopulation FROM      country c JOIN      countrylanguage cl ON c.Code = cl.CountryCode JOIN      (SELECT           Code,           AVG(LifeExpectancy) AS AvgLifeExpectancy      FROM           country      GROUP BY           Code      HAVING           AVG(LifeExpectancy) > 72) AS avg_life ON      c.Code = avg_life.Code GROUP BY      c.GovernmentForm; 
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm; 
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy < 72 GROUP BY Continent; 
SELECT      c.Continent,      SUM(co.Population) AS TotalPopulation,      AVG(co.LifeExpectancy) AS AverageLifeExpectancy FROM      country AS co JOIN      city AS ci ON co.Code = ci.CountryCode WHERE      co.Continent IS NOT NULL AND AVG(co.LifeExpectancy) < 72 GROUP BY      c.Continent; 
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Name FROM country ORDER BY Population ASC LIMIT 3; 
SELECT Name FROM country ORDER BY Population ASC LIMIT 3; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT Name FROM country WHERE Continent = 'Europe' AND Population >= 80000; 
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000; 
SELECT SUM(c.Population) AS TotalPopulation, AVG(co.SurfaceArea) AS AverageArea FROM country co JOIN city ci ON co.Code = ci.CountryCode WHERE co.Continent = 'North America' AND ci.SurfaceArea > 3000; 
SELECT SUM(c.Population) AS TotalPopulation, AVG(co.SurfaceArea) AS AverageSurfaceArea FROM country co JOIN city ci ON co.Code = ci.CountryCode WHERE co.Continent = 'North America' AND co.SurfaceArea > 3000; 
SELECT Name, Population FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Language, COUNT(*) as CountryCount FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY CountryCount DESC LIMIT 1; 
SELECT Language, COUNT(DISTINCT CountryCode) AS CountriesSpokenIn FROM countrylanguage GROUP BY Language ORDER BY CountriesSpokenIn DESC LIMIT 1; 
SELECT c.Name AS Country, cl.Language, MAX(cl.Percentage) AS HighestPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' GROUP BY c.Name, cl.Language ORDER BY c.Name, HighestPercentage DESC; 
SELECT c.Code, cl.Language, MAX(cl.Percentage) AS HighestPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, cl.Language ORDER BY c.Code, cl.Percentage DESC; 
SELECT COUNT(DISTINCT c.Code) AS TotalCountries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC LIMIT 1; 
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'; 
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (     SELECT MAX(cl2.Percentage)     FROM countrylanguage cl2     WHERE cl2.CountryCode = c.Code ) 
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'; 

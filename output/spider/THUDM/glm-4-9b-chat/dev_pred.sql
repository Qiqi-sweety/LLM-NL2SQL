SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) AS Total_Singers FROM singer; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC; 
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT s.Name, si.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age = (SELECT MIN(Age) FROM singer); 
SELECT s.Name, si.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN (     SELECT MIN(Age) as MinAge     FROM singer ) as Youngest ON s.Age = Youngest.MinAge; 
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20; 
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20; 
SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT s.Name AS Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT s.Name, si.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT MAX("Capacity") AS Max_Capacity, AVG("Capacity") AS Average_Capacity FROM "stadium"; 
SELECT AVG("Capacity") AS Average_Capacity, MAX("Capacity") AS Maximum_Capacity FROM "stadium"; 
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium); 
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium); 
SELECT COUNT(*)  FROM concert  WHERE Year = '2014' OR Year = '2015'; 
SELECT COUNT(*)  FROM concert  WHERE Year = '2014' OR Year = '2015'; 
SELECT s.Name, COUNT(c.concert_ID) AS concert_count FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID; 
SELECT      s.Stadium_ID,      s.Name,      COUNT(c.concert_ID) AS num_concerts FROM      stadium s LEFT JOIN      concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY      s.Stadium_ID; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT Year, COUNT(concert_ID) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1; 
SELECT Year, COUNT(concert_ID) AS TotalConcerts FROM concert GROUP BY Year ORDER BY TotalConcerts DESC LIMIT 1; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 40 UNION SELECT DISTINCT s.Country FROM singer s WHERE s.Age < 30; 
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (     SELECT c.Stadium_ID      FROM concert c      WHERE c.Year = '2014' ); 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year != '2014' OR c.Year IS NULL; 
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID; 
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID; 
SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Singer_ID; 
SELECT s.Name, COUNT(c.concert_ID) AS concert_count FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID; 
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT s.Name, si.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN (     SELECT Song_Name     FROM singer     WHERE Song_Name LIKE '%Hey%' ) AS songs_with_hey ON c.concert_Name = songs_with_hey.Song_Name; 
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN (     SELECT Song_Name     FROM concert     WHERE Theme LIKE '%Hey%' ) AS hey_concerts ON c.concert_Name = hey_concerts.Song_Name; 
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2; 
SELECT DISTINCT s.Location, s.Name FROM stadium s JOIN concert c1 ON s.Stadium_ID = c1.Stadium_ID AND c1.Year = '2014' JOIN concert c2 ON s.Stadium_ID = c2.Stadium_ID AND c2.Year = '2015'; 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID                     FROM stadium                     ORDER BY Capacity DESC                     LIMIT 1); 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT MAX("Capacity") FROM stadium); 
SELECT COUNT(*) FROM Pets WHERE weight > 10; 
SELECT COUNT(*)  FROM Pets  WHERE weight > 10; 
SELECT MIN(weight) AS YoungestDogWeight FROM Pets WHERE PetType = 'dog'; 
SELECT MIN(weight) as YoungestDogWeight FROM Pets WHERE PetType = 'dog'; 
SELECT MAX(weight) AS MaxWeight, PetType FROM Pets GROUP BY PetType; 
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType; 
SELECT COUNT hp.StuID, COUNT(hp.PetID) AS NumPets FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(hp.StuID) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'; 
SELECT COUNT(*) AS Dog_Pets_Raised_By_Females FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'; 
SELECT COUNT(DISTINCT PetType) AS NumberOfDistinctPetTypes FROM Pets; 
SELECT COUNT(DISTINCT PetType) AS NumberOfDifferentPets FROM Pets; 
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' OR P.PetType = 'dog'; 
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog'); 
SELECT s.Fname FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Pets p1 ON hp1.PetID = p1.PetID AND p1.PetType = 'cat' JOIN Has_Pet hp2 ON s.StuID = hp2.StuID JOIN Pets p2 ON hp2.PetID = p2.PetID AND p2.PetType = 'dog' WHERE s.StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))); 
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID AND P.PetType = 'cat' JOIN Has_Pet HP2 ON S.StuID = HP2.StuID AND P2.PetType = 'dog' JOIN Pets P ON HP1.PetID = P.PetID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE S.StuID IN (SELECT StuID FROM Has_Pet WHERE PetType = 'cat') AND       S.StuID IN (SELECT StuID FROM Has_Pet WHERE PetType = 'dog'); 
SELECT Major, Age FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' ); 
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType != 'cat'; 
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetID IS NULL; 
SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat'; 
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (     SELECT HP2.StuID     FROM Has_Pet HP2     JOIN Pets P2 ON HP2.PetID = P2.PetID     WHERE P2.PetType = 'cat' ); 
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (     SELECT HP2.StuID     FROM Has_Pet HP2     JOIN Pets P2 ON HP2.PetID = P2.PetID     WHERE P2.PetType = 'cat' ) 
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets); 
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets); 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(weight) as AverageWeight FROM Pets GROUP BY PetType; 
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType; 
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID; 
SELECT DISTINCT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID; 
SELECT hp.PetID FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'; 
SELECT PetID  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.LName = 'Smith'; 
SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID; 
SELECT HP.StuID, COUNT(HP.PetID) AS NumPets FROM Has_Pet HP GROUP BY HP.StuID; 
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1; 
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1; 
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3; 
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3; 
SELECT AVG(Age) AS AverageAgeWithoutPet FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT COUNT(*) FROM continents; 
SELECT COUNT(*) FROM continents; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent; 
SELECT COUNT(*) FROM countries; 
SELECT COUNT(*) FROM countries; 
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id; 
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id; 
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC LIMIT 1; 
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC LIMIT 1; 
SELECT m.Model FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT m.Model FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list m ON cn.Model = m.Model WHERE c.Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970; 
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970; 
SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data); 
SELECT c_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.Maker ORDER BY cars_data.Year ASC LIMIT 1; 
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980; 
SELECT DISTINCT ml.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980; 
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent; 
SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent; 
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1; 
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Maker) DESC LIMIT 1; 
SELECT cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName; 
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName; 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'AMC Hornet Sportabout (SW)'; 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE car_names.Make = 'AMC Hornet Sportabout (SW)'; 
SELECT COUNT(DISTINCT car_makers.Id) AS MakerCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france'; 
SELECT COUNT(DISTINCT car_makers.Id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'; 
SELECT COUNT(DISTINCT ml.Model)  FROM car_names cn  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN countries c ON cm.Country = c.CountryId  WHERE c.CountryName = 'USA'; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN countries c ON cm.Country = c.CountryId  WHERE c.CountryName = 'United States'; 
SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) AS AvgMPG FROM cars_data WHERE Cylinders = 4; 
SELECT MIN(Weight) AS SmallestWeight FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE Cylinders = 8 AND Year = 1974; 
SELECT MIN(Weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE Cylinders = 8 AND Year = 1974; 
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model; 
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model; 
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName; 
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId; 
SELECT COUNT(*)  FROM cars_data  WHERE Horsepower > 150; 
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150; 
SELECT cars_data.Year, AVG(cars_data.Weight) AS AverageWeight FROM cars_data GROUP BY cars_data.Year; 
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year; 
SELECT c.CountryName FROM countries AS co JOIN continents AS ct ON co.Continent = ct.ContId WHERE ct.Continent = 'europe' GROUP BY co.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3; 
SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3 JOIN car_makers cm ON c.CountryId = cm.Country; 
SELECT      c.Maker,      c.Model,      MAX(cd.Horsepower) AS MaxHorsepower FROM      cars_data cd JOIN      car_names cn ON cd.Id = cn.MakeId JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers c ON ml.Maker = c.Id WHERE      cd.Cylinders = 3 GROUP BY      c.Maker, c.Model ORDER BY      MaxHorsepower DESC LIMIT 1; 
SELECT c.Model, cm.Maker, MAX(cd.Horsepower) FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 3 GROUP BY c.Model, cm.Maker ORDER BY MAX(cd.Horsepower) DESC LIMIT 1; 
SELECT      m.Model,      c.MPG  FROM      car_names c  JOIN      model_list m ON c.Model = m.Model  JOIN      cars_data cd ON c.MakeId = cd.Id  ORDER BY      cd.MPG DESC  LIMIT 1; 
SELECT ml.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data); 
SELECT AVG(Horsepower) AS AverageHorsepowerBefore1980 FROM cars_data WHERE Year < 1980; 
SELECT AVG(Horsepower) AS AvgHorsepower FROM cars_data WHERE Year < 1980; 
SELECT AVG("Edispl")  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Model = 'volvo'; 
SELECT AVG(Edispl) FROM cars_data WHERE Maker = (SELECT Make FROM car_names WHERE Model = 'Volv') AND MakeId IN (SELECT MakeId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'Volvo')); 
SELECT      Cylinders,      MAX(Accelerate) AS Max_Accelerate FROM      cars_data GROUP BY      Cylinders; 
SELECT MAX("Accelerate") AS Max_Accelerate FROM cars_data WHERE "Cylinders" IN (4, 6, 8, 10); -- Assuming 'Cylinders' is a numeric type and we're looking for max accelerate for 4, 6, 8, and 10 cylinders 
SELECT car_names.Model, COUNT(*) AS Versions FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY car_names.Model ORDER BY Versions DESC LIMIT 1; 
SELECT model_list.Model, COUNT(*) AS Versions FROM model_list GROUP BY model_list.Model ORDER BY Versions DESC LIMIT 1; 
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4; 
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980; 
SELECT COUNT(*) FROM cars_data WHERE Year = 1980; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'American Motor Company'; 
SELECT COUNT(DISTINCT ml.Model)  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'American Motor Company'; 
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3; 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3; 
SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON ml.Model = cd.Model WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON ml.Model = cd.Model WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT Year  FROM cars_data  WHERE Weight BETWEEN 3000 AND 4000; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000; 
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1; 
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data); 
SELECT MIN(c.Cylinders)  FROM cars_data c  JOIN car_names cn ON c.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'Volvo'; 
SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'Volvo' ORDER BY c.Accelerate ASC LIMIT 1; 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (     SELECT MAX(Horsepower)     FROM cars_data ); 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data); 
SELECT COUNT(c.CountryName)  FROM countries c  JOIN car_makers cm ON c.CountryId = cm.Country  GROUP BY c.CountryName  HAVING COUNT(cm.Id) > 2; 
SELECT COUNT(DISTINCT c.CountryName) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) > 2; 
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6; 
SELECT ml.Model, cd.Horsepower FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1; 
SELECT      ml.Model,      SUM(cd.Horsepower) AS TotalHorsepower FROM      car_names cn JOIN      model_list ml ON cn.Model = ml.Model JOIN      cars_data cd ON cn.MakeId = cd.Id JOIN      car_makers cm ON ml.Maker = cm.Id WHERE      cd.Cylinders = 4 GROUP BY      ml.Model ORDER BY      TotalHorsepower DESC LIMIT 1; 
SELECT c.MakeId, cm.FullName FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cd.Horsepower > (     SELECT MIN(Horsepower)     FROM cars_data ) AND cd.Cylinders <= 3; 
SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower != (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4; 
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980; 
SELECT MAX(MPG) AS MaxMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980; 
SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Model NOT IN (     SELECT c.Model     FROM cars_data c     JOIN car_names cn ON c.Id = cn.MakeId     JOIN model_list ml ON cn.Model = ml.ModelId     JOIN car_makers cm ON ml.Maker = cm.Id     WHERE cm.FullName = 'Ford Motor Company' ) AND ml.ModelId IN (     SELECT MakeId     FROM cars_data     WHERE Weight < 3500 ); 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Model NOT IN (     SELECT cn.Model     FROM car_names cn     JOIN car_makers cm ON cn.MakeId = cm.Id     WHERE cm.FullName = 'Ford Motor Company' ) AND ml.ModelId IN (     SELECT cd.Id     FROM cars_data cd     WHERE cd.Weight < 3500 ); 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN (     SELECT Maker, COUNT(Model) AS ModelCount     FROM model_list     GROUP BY Maker     HAVING ModelCount >= 2 ) AS subquery ON car_makers.Id = subquery.Maker WHERE subquery.ModelCount > 3; 
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) >= 2 AND (     SELECT COUNT(*)     FROM cars_data     JOIN car_names ON cars_data.Id = car_names.MakeId     JOIN model_list ON car_names.Model = model_list.Model     WHERE model_list.Maker = car_makers.Id ) > 3; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Make = 'fiat'; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IN (     SELECT Maker     FROM model_list     WHERE Model = 'Fiat' ) OR (     SELECT COUNT(DISTINCT cm.Id)     FROM car_makers cm     WHERE cm.Country = c.CountryId ) > 3; 
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'; 
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'; 
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'; 
SELECT Abbreviation  FROM airlines  WHERE Airline = 'Jetblue Airways'; 
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'; 
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'; 
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'; 
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM flights; 
SELECT COUNT(*) FROM flights; 
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'; 
SELECT * FROM airlines WHERE Abbreviation = 'UAL'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT City, Country FROM airports WHERE AirportName = 'Alton'; 
SELECT City, Country FROM airports WHERE AirportName = 'Alton'; 
SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO'; 
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'; 
SELECT AirportName FROM airports WHERE City = 'Aberdeen'; 
SELECT AirportName FROM airports WHERE City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'; 
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'; 
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (     SELECT AirportCode     FROM airports     WHERE City = 'Aberdeen' ); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen'); 
SELECT COUNT(*) FROM flights JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'; 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND airports.AirportName = 'Ashley'; 
SELECT COUNT(*) FROM flights WHERE Airline = (     SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways' ); 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways'); 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'; 
SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.Airline = airlines.uid  INNER JOIN airports AS src_airport ON flights.SourceAirport = src_airport.AirportCode  INNER JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode  WHERE airlines.Airline = 'United Airlines' AND dest_airport.AirportCode = 'ASY'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports AS srcAirport ON flights.SourceAirport = srcAirport.AirportCode  JOIN airports AS destAirport ON flights.DestAirport = destAirport.AirportCode  WHERE airlines.Airline = 'United Airlines' AND srcAirport.AirportCode = 'AHD'; 
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'AHD'); 
SELECT COUNT(*)  FROM flights  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE flights.Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')  AND airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports AS src ON flights.SourceAirport = src.AirportCode  JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND dest.City = 'Aberdeen'; 
SELECT a.City, COUNT(f.FlightNo) AS TotalArrivingFlights FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY TotalArrivingFlights DESC LIMIT 1; 
SELECT airports.City, COUNT(*) as Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1; 
SELECT a.City, COUNT(f.FlightNo) AS DepartureFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY DepartureFlights DESC LIMIT 1; 
SELECT a.City, COUNT(*) AS Frequency FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY Frequency DESC LIMIT 1; 
SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT a.AirportCode FROM airports AS a JOIN flights AS f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT AirportCode FROM airports WHERE AirportCode IN (     SELECT SourceAirport     FROM flights     GROUP BY SourceAirport     ORDER BY COUNT(*) ASC     LIMIT 1 ) UNION SELECT AirportCode FROM airports WHERE AirportCode IN (     SELECT DestAirport     FROM flights     GROUP BY DestAirport     ORDER BY COUNT(*) ASC     LIMIT 1 ); 
SELECT airlines.Airline, COUNT(flights.Airline) AS TotalFlights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY TotalFlights DESC LIMIT 1; 
SELECT Airline, COUNT(*) AS NumberOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airline ORDER BY NumberOfFlights DESC LIMIT 1; 
SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid ORDER BY COUNT(flights.Airline) ASC LIMIT 1; 
SELECT      a.Abbreviation,      a.Country FROM      airlines a JOIN      (SELECT          Airline,          COUNT(*) AS NumFlights      FROM          flights      GROUP BY          Airline      ORDER BY          NumFlights ASC      LIMIT 1) f ON      a.uid = f.Airline; 
SELECT DISTINCT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline JOIN airports AS S ON S.AirportCode = F.SourceAirport WHERE S.AirportCode = 'AHD'; 
SELECT DISTINCT A.Airline FROM flights F JOIN airlines A ON F.Airline = A.uid WHERE F.SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'AHD'); 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'; 
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD'; 
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airports a1 ON f1.SourceAirport = a1.AirportCode JOIN airports a2 ON f2.DestAirport = a2.AirportCode WHERE a1.AirportCode = 'APG' AND a2.AirportCode = 'CVO'; 
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airports a1 ON f1.SourceAirport = a1.AirportCode JOIN airports a2 ON f2.SourceAirport = a2.AirportCode WHERE a1.AirportCode = 'APG' AND a2.AirportCode = 'CVO'; 
SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline LEFT JOIN flights f2 ON a.uid = f2.Airline AND f2.SourceAirport = 'APG' WHERE f1.SourceAirport = 'CVO' AND f2.FlightNo IS NULL; 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (     SELECT f2.Airline     FROM flights f2     WHERE f2.DestAirport = 'APG' ); 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10; 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10; 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200; 
SELECT Airlines FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airlines HAVING COUNT(*) < 200; 
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'; 
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'; 
SELECT f.FlightNo FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode WHERE src.City = 'Aberdeen'; 
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABR'; 
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'; 
SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  WHERE DestAirport IN (     SELECT AirportCode      FROM airports      WHERE City IN ('Aberdeen', 'Abilene') ); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABR' OR DestAirport = 'ABR' OR SourceAirport = 'ABI' OR DestAirport = 'ABI'; 
SELECT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.FlightNo IS NULL; 
SELECT a.AirportCode, a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.Airline IS NULL; 
SELECT COUNT(*) FROM employee; 
SELECT COUNT(*) FROM employee; 
SELECT Name FROM employee ORDER BY Age ASC; 
SELECT Name  FROM employee  ORDER BY Age ASC; 
SELECT City, COUNT(Employee_ID) AS EmployeeCount FROM employee GROUP BY City; 
SELECT City, COUNT(Employee_ID) AS EmployeeCount FROM employee GROUP BY City; 
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1; 
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1; 
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location; 
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location; 
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop); 
SELECT s.Manager_name, s.District FROM shop s ORDER BY s.Number_products DESC LIMIT 1; 
SELECT MIN("Number_products") AS MinProducts, MAX("Number_products") AS MaxProducts FROM "shop"; 
SELECT MIN("Number_products") AS Min_Products, MAX("Number_products") AS Max_Products FROM "shop"; 
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1; 
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT s.Name  FROM shop s  JOIN hiring h ON s.Shop_ID = h.Shop_ID  GROUP BY s.Shop_ID  ORDER BY COUNT(h.Employee_ID) DESC  LIMIT 1; 
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL; 
SELECT s.Name, COUNT(h.Employee_ID) AS EmployeeCount FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID; 
SELECT s.Shop_ID, s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name; 
SELECT SUM("Bonus") AS Total_Bonus FROM "evaluation"; 
SELECT SUM("Bonus") AS Total_Bonus FROM "evaluation"; 
SELECT * FROM hiring; 
SELECT * FROM hiring; 
SELECT DISTINCT d.District FROM shop s JOIN (     SELECT District     FROM shop     WHERE Number_products < 3000 ) AS less_than_3000 ON s.District = less_than_3000.District JOIN (     SELECT District     FROM shop     WHERE Number_products > 10000 ) AS more_than_10000 ON s.District = more_than_10000.District; 
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 OR s.Number_products > 10000; 
SELECT COUNT(DISTINCT Location) AS UniqueLocations FROM shop; 
SELECT COUNT(DISTINCT Location) FROM shop; 
SELECT COUNT(*) FROM Documents; 
SELECT COUNT(*) FROM Documents; 
SELECT Document_ID, Document_Name, Document_Description FROM Documents; 
SELECT d.Document_ID, d.Document_Name, t.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code; 
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name LIKE '%w%'; 
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name LIKE '%w%'; 
SELECT d.Document_ID, t.Template_ID, d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV'; 
SELECT      d.Document_ID,      d.Template_ID,      d.Document_Description FROM      Documents d WHERE      d.Document_Name = 'Robbin CV'; 
SELECT COUNT(DISTINCT Templates.Template_ID) AS Unique_Template_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID; 
SELECT COUNT(DISTINCT Template_ID) FROM Templates; 
SELECT COUNT(DISTINCT Documents.Document_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Templates.Template_Type_Code = 'PPT'; 
SELECT COUNT(*)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'PPT'; 
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1; 
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1; 
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents); 
SELECT Template_ID  FROM Templates  WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents); 
SELECT COUNT(*) FROM Templates; 
SELECT COUNT(*) FROM Templates; 
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates; 
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code; 
SELECT DISTINCT Template_Type_Code  FROM Templates; 
SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types; 
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT COUNT(*)  FROM Templates  WHERE Template_Type_Code = 'CV'; 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code; 
SELECT Template_Type_Code, COUNT(Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code; 
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1; 
SELECT Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code IN (     SELECT Template_Type_Code      FROM Templates      GROUP BY Template_Type_Code      HAVING COUNT(Template_ID) < 3 ); 
SELECT MIN(Version_Number), Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) LIMIT 1; 
SELECT Templates.Template_Type_Code, MIN(Templates.Version_Number) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY MIN(Templates.Version_Number); 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'; 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Database'; 
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code = 'BK'; 
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT Template_Type_Code, COUNT(*) AS Document_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code; 
SELECT RT.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Ref_Template_Types RT LEFT JOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY RT.Template_Type_Code; 
SELECT      Templates.Template_Type_Code,      COUNT(Documents.Document_ID) AS Document_Count FROM      Templates JOIN      Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY      Templates.Template_Type_Code ORDER BY      Document_Count DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC LIMIT 1; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Template_ID IN (         SELECT Template_ID          FROM Documents     ) ); 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates ); 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'; 
SELECT DISTINCT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code IN (     SELECT Template_Type_Code      FROM Templates      WHERE Template_ID IN (         SELECT Template_ID          FROM Documents     ) ); 
SELECT DISTINCT RTT.Template_Type_Description FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID; 
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation'); 
SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs; 
SELECT COUNT(*) FROM Paragraphs; 
SELECT COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'; 
SELECT COUNT(Paragraphs.Paragraph_ID)  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'; 
SELECT Other_Details  FROM Paragraphs  WHERE Paragraph_Text = 'Korea'; 
SELECT p.Other_Details FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE p.Paragraph_Text LIKE '%Korea%'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'; 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'; 
SELECT      d.Document_ID,      COUNT(p.Paragraph_ID) AS Paragraph_Count FROM      Documents d LEFT JOIN      Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY      d.Document_ID ORDER BY      d.Document_ID; 
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID; 
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name; 
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2; 
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1; 
SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1; 
SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1; 
SELECT Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = d.Document_ID) BETWEEN 1 AND 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2; 
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland'); 
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND d.Document_ID IN (     SELECT d.Document_ID     FROM Documents d     JOIN Paragraphs p ON d.Document_ID = p.Document_ID     WHERE p.Paragraph_Text LIKE '%Ireland%' ); 
SELECT COUNT(*) FROM teacher; 
SELECT COUNT(*) FROM teacher; 
SELECT Name  FROM teacher  ORDER BY Age ASC; 
SELECT Name FROM teacher ORDER BY Age ASC; 
SELECT "teacher"."Age", "teacher"."Hometown" FROM "teacher"; 
SELECT "Teacher".Age, "Teacher".Hometown FROM "teacher"; 
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'; 
SELECT Name  FROM teacher  WHERE Hometown != 'Little Lever Urban District'; 
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'; 
SELECT Name  FROM teacher  WHERE Age = '32' OR Age = '33'; 
SELECT Hometown  FROM teacher  WHERE Age = (SELECT MIN(Age) FROM teacher); 
SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher); 
SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown; 
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown; 
SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown ORDER BY TeacherCount DESC LIMIT 1; 
SELECT "Hometown", COUNT("Hometown") AS "Hometown_Count" FROM "teacher" GROUP BY "Hometown" ORDER BY "Hometown_Count" DESC LIMIT 1; 
SELECT t1.Hometown FROM teacher t1 JOIN teacher t2 ON t1.Hometown = t2.Hometown GROUP BY t1.Hometown HAVING COUNT(t1.Teacher_ID) > 1; 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC; 
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'; 
SELECT t.Name, COUNT(ca.Course_ID) AS Courses_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name; 
SELECT t.Name, COUNT(ca.Course_ID) AS Courses_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2; 
SELECT t.Name FROM teacher t JOIN course_arrange ca1 ON t.Teacher_ID = ca1.Teacher_ID JOIN course_arrange ca2 ON t.Teacher_ID = ca2.Teacher_ID AND ca1.Course_ID < ca2.Course_ID GROUP BY t.Name HAVING COUNT(ca1.Course_ID) >= 2; 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange); 
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL; 
SELECT COUNT(*)  FROM visitor  WHERE Age < 30; 
SELECT v.Name FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC; 
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4; 
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age ASC; 
SELECT "Museum_ID", "Name" FROM "museum" ORDER BY "Num_of_Staff" DESC LIMIT 1; 
SELECT AVG(Num_of_Staff)  FROM museum  WHERE Open_Year < '2009'; 
SELECT "Open_Year", "Num_of_Staff" FROM "museum" WHERE "Name" = 'Plaza Museum'; 
SELECT Name FROM museum WHERE Num_of_Staff > (     SELECT MIN(Num_of_Staff)     FROM museum     WHERE Open_Year > '2010' ); 
SELECT v.visitor_ID, v.Name, v.Age FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID JOIN visit v2 ON v.ID = v2.visitor_ID AND v1.Museum_ID <> v2.Museum_ID GROUP BY v.visitor_ID, v.Name, v.Age HAVING COUNT(v1.Museum_ID) > 1; 
SELECT v.visitor_ID, v.Name, v.Level_of_membership FROM visitor v JOIN (     SELECT visitor_ID, SUM(Total_spent) as Total_spent     FROM visit     GROUP BY visitor_ID     ORDER BY Total_spent DESC     LIMIT 1 ) AS top_spender ON v.ID = top_spender.visitor_ID; 
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1; 
SELECT Name FROM museum WHERE Museum_ID NOT IN (     SELECT Museum_ID     FROM visit ); 
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit) ORDER BY vi.Num_of_Ticket DESC LIMIT 1; 
SELECT AVG("Num_of_Ticket") AS average_tickets, MAX("Num_of_Ticket") AS max_tickets FROM "visit"; 
SELECT SUM("Total_spent") AS Total_Ticket_Expense FROM "visit" WHERE "visitor_ID" IN (     SELECT "ID"     FROM "visitor"     WHERE "Level_of_membership" = 1 ); 
SELECT v.Name FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID JOIN museum m1 ON v1.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009' JOIN visit v2 ON v.ID = v2.visitor_ID JOIN museum m2 ON v2.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011' WHERE v1.visitor_ID = v2.visitor_ID; 
SELECT COUNT(DISTINCT v.ID)  FROM visitor v  LEFT JOIN visit ON v.ID = visit.visitor_ID  WHERE v.Age > 18 AND v.Level_of_membership = 0  AND NOT EXISTS (     SELECT 1      FROM museum m      WHERE m.Museum_ID = visit.Museum_ID AND m.Open_Year > '2010' ); 
SELECT COUNT(*)  FROM museum  WHERE Open_Year < 2008 OR Open_Year > 2013; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) FROM matches; 
SELECT COUNT(*) FROM matches; 
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'; 
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG("winner_rank") AS average_winner_rank FROM matches; 
SELECT AVG(winner_rank) AS average_winner_rank FROM matches; 
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches; 
SELECT MAX("loser_rank") AS best_loser_rank FROM matches; 
SELECT COUNT(DISTINCT country_code) AS num_distinct_country_codes FROM players; 
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players; 
SELECT COUNT(DISTINCT loser_name) AS distinct_losers_count FROM matches; 
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10; 
SELECT DISTINCT w.winner_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016; 
SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN rankings r1 ON p1.player_id = r1.player_id AND r1.year = 2013 JOIN rankings r2 ON p1.player_id = r2.player_id AND r2.year = 2016 WHERE r1.ranking_points > 0 AND r2.ranking_points > 0; 
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016; 
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016); 
SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' GROUP BY p.player_id, p.country_code, p.first_name; 
SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2; 
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1; 
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1; 
SELECT first_name, last_name  FROM players  ORDER BY birth_date; 
SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players ORDER BY birth_date; 
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date; 
SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players WHERE hand = 'L' ORDER BY birth_date; 
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY r.tours DESC LIMIT 1; 
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) ORDER BY r.tours DESC LIMIT 1; 
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; 
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; 
SELECT winner_name, winner_rank_points FROM matches JOIN players ON winner_id = players.player_id GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN (     SELECT winner_id, COUNT(*) as match_wins, SUM(ranking_points) as total_rank_points     FROM matches     JOIN rankings ON matches.winner_id = rankings.player_id     GROUP BY winner_id     ORDER BY match_wins DESC     LIMIT 1 ) r ON p.player_id = r.winner_id; 
SELECT winner_name FROM matches JOIN players ON winner_id = players.player_id WHERE tourney_name = 'Australian Open' AND ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE player_id = winner_id); 
SELECT winner_name FROM matches JOIN players ON winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1; 
SELECT      loser_name, winner_name,      MAX(minutes) AS max_minutes FROM      matches GROUP BY      loser_name, winner_name ORDER BY      max_minutes DESC LIMIT 1; 
SELECT winner_name, winner_first_name, loser_name, loser_first_name, MAX(minutes) as longest_match_duration FROM matches JOIN players as winner ON winner.player_id = matches.winner_id JOIN players as loser ON loser.player_id = matches.loser_id ORDER BY longest_match_duration DESC LIMIT 1; 
SELECT AVG(ranking) AS avg_ranking, p.first_name FROM rankings r JOIN players p ON r.player_id = p.player_id GROUP BY p.player_id, p.first_name; 
SELECT p.first_name, AVG(r.ranking) as avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code; 
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code; 
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1; 
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50; 
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT year, COUNT(*) as matches_count FROM matches GROUP BY year; 
SELECT year, COUNT(*) as matches_played FROM matches GROUP BY year; 
SELECT winner_name, winner_rank FROM players JOIN matches ON winner_id = player_id WHERE winner_age = (   SELECT MIN(winner_age)   FROM matches   JOIN players ON winner_id = player_id   GROUP BY winner_age   ORDER BY winner_age ASC ) LIMIT 3; 
SELECT winner_name, winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id WHERE winner_age = (SELECT MIN(winner_age) FROM matches JOIN players ON players.player_id = matches.winner_id) ORDER BY winner_age DESC LIMIT 3; 
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'R'; 
SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'; 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches ); 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) as total_rank_points     FROM matches     GROUP BY winner_id     ORDER BY total_rank_points DESC     LIMIT 1 ) as highest_rank_points ON p.player_id = highest_rank_points.winner_id; 
SELECT hand, COUNT(*) AS number_of_players FROM players GROUP BY hand; 
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand; 
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'; 
SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage DESC; 
SELECT name, date, result FROM battle; 
SELECT      b.name AS battle_name,     MAX(d.killed) AS max_deaths,     MIN(d.killed) AS min_deaths FROM      battle b JOIN      death d ON b.id = d.caused_by_ship_id GROUP BY      b.name; 
SELECT AVG("injured") AS average_injuries FROM "death"; 
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'; 
SELECT "name", "result" FROM "battle" WHERE "bulgarian_commander" != 'Boril'; 
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'; 
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10; 
SELECT s.id, s.name, SUM(d.killed + d.injured) as total_injuries FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY total_injuries DESC LIMIT 1; 
SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'; 
SELECT COUNT(DISTINCT result) AS distinct_results_count FROM battle; 
SELECT COUNT(*)  FROM battle  WHERE id NOT IN (     SELECT lost_in_battle      FROM ship      JOIN battle ON ship.lost_in_battle = battle.id      WHERE ship.tonnage = '225' ); 
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta'); 
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location IS NULL OR s.location <> 'English Channel'; 
SELECT note  FROM death  WHERE note LIKE '%East%'; 
SELECT line_1, line_2 FROM Addresses; 
SELECT line_1, line_2 FROM Addresses; 
SELECT COUNT(*) AS total_courses FROM Courses; 
SELECT COUNT(*) FROM Courses; 
SELECT course_description FROM Courses WHERE course_name = 'Math Course'; 
SELECT course_description FROM Courses WHERE course_name LIKE 'Math%'; 
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'; 
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'; 
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs; 
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_summary_name) AS distinct_degree_names FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_program_id) AS different_degrees_offered FROM Degree_Programs; 
SELECT COUNT(*)  FROM Degree_Programs dp  JOIN Departments d ON dp.department_id = d.department_id  WHERE d.department_name = 'Engineering'; 
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering'); 
SELECT section_name, section_description FROM Sections; 
SELECT section_name, section_description FROM Sections; 
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2; 
SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (     SELECT course_id     FROM Sections     GROUP BY course_id     HAVING COUNT(section_id) >= 2 ); 
SELECT section_name  FROM Sections  ORDER BY section_name DESC; 
SELECT section_name FROM Sections ORDER BY section_name DESC; 
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1; 
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1; 
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'; 
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%'; 
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelor%'; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelors%'; 
SELECT      dp.degree_summary_name,     COUNT(se.student_id) AS student_count FROM      Student_Enrolment se JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY      dp.degree_summary_name ORDER BY      student_count DESC LIMIT 1; 
SELECT DP.degree_summary_name, COUNT(SE.student_id) AS student_count FROM Degree_Programs DP JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_program_id ORDER BY student_count DESC LIMIT 1; 
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) DESC LIMIT 1; 
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_enrolment_id) AS num_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id ORDER BY      num_enrollments DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_enrolment_id) AS num_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id ORDER BY      num_enrollments DESC LIMIT 1; 
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL; 
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (     SELECT DISTINCT semester_id      FROM Student_Enrolment ); 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC LIMIT 1; 
SELECT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1; 
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment); 
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se ); 
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2; 
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2; 
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward'; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (     SELECT student_id     FROM Student_Enrolment     ORDER BY date_first_registered ASC     LIMIT 1 ); 
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (     SELECT MIN(date_first_registered)     FROM Students ); 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE s.date_left IS NOT NULL ORDER BY sm.semester_name, s.date_left LIMIT 1; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE s.date_left IS NOT NULL ORDER BY sm.semester_name, s.date_left ASC LIMIT 1; 
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.address_id != pa.address_id; 
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses a_current ON s.current_address_id = a_current.address_id JOIN Addresses a_permanent ON s.permanent_address_id = a_permanent.address_id WHERE a_current.address_id != a_permanent.address_id; 
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1; 
SELECT MIN(transcript_date) AS Earliest_Transcript_Date, other_details FROM Transcripts WHERE transcript_date IS NOT NULL GROUP BY transcript_date, other_details ORDER BY transcript_date ASC LIMIT 1; 
SELECT COUNT(*) AS total_transcripts_released FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts; 
SELECT student_course_id, COUNT(DISTINCT transcript_id) AS num_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY num_transcripts DESC LIMIT 1; 
SELECT      sc.student_course_id,      COUNT(tc.transcript_id) AS transcript_count FROM      Student_Enrolment_Courses sc JOIN      Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY      sc.student_course_id ORDER BY      transcript_count DESC LIMIT 1; 
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT MIN(transcript_id) FROM Transcripts) ORDER BY transcript_id; 
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) LIMIT 1; 
SELECT DISTINCT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id, s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2; 
SELECT DISTINCT e.semester_id FROM Student_Enrolment e JOIN Degree_Programs dp ON e.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY e.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2; 
SELECT COUNT(DISTINCT current_address_id) AS different_addresses_count FROM Students WHERE date_left IS NULL OR date_left > CURRENT_DATE; 
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id; 
SELECT * FROM Students ORDER BY last_name DESC, middle_name DESC, first_name DESC; 
SELECT other_student_details FROM Students ORDER BY other_student_details DESC; 
SELECT section_name, section_description, other_details FROM Sections WHERE section_name = 'h'; 
SELECT section_description FROM Sections WHERE section_name = 'h'; 
SELECT s.first_name FROM Students s WHERE s.permanent_address_id IN (     SELECT a.address_id     FROM Addresses a     WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582'; 
SELECT s.first_name  FROM Students s  WHERE s.permanent_address_id IN (     SELECT a.address_id      FROM Addresses a      WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582'; 
SELECT Title FROM Cartoon ORDER BY Title ASC; 
SELECT Title FROM Cartoon ORDER BY Title ASC; 
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'; 
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'; 
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr'; 
SELECT COUNT(*)  FROM Cartoon  WHERE "Written_by" = 'Joseph Kuhr'; 
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date; 
SELECT c.Title, c.Directed_by FROM Cartoon c ORDER BY c.Original_air_date; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; 
SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1; 
SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1; 
SELECT COUNT(DISTINCT series_name) AS different_series_count,         COUNT(DISTINCT Content) AS different_contents_count FROM TV_Channel; 
SELECT COUNT(DISTINCT series_name) AS distinct_series_count,         COUNT(DISTINCT Content) AS distinct_content_count FROM TV_Channel; 
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT "Package_Option" FROM TV_Channel WHERE "series_name" = 'Sky Radio'; 
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'; 
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'; 
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1; 
SELECT Language, COUNT(*) as Channels_Using_Language FROM TV_Channel GROUP BY Language ORDER BY Channels_Using_Language ASC LIMIT 1; 
SELECT `Language`, COUNT(`id`) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Language`; 
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language; 
SELECT TC.series_name FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Title = 'The Rise of the Blue Beetle!'; 
SELECT TC.series_name FROM TV_Channel AS TC JOIN Cartoon AS CT ON TC.id = CT.Channel WHERE CT.Title = 'The Rise of the Blue Beetle'; 
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'; 
SELECT C.Title FROM Cartoon C JOIN TV_Channel TC ON C.Channel = TC.id WHERE TC.series_name = 'Sky Radio'; 
SELECT "Episode"  FROM "TV_series" ORDER BY "Rating" DESC; 
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating DESC; 
SELECT "TV_series"."Episode", "TV_series"."Rating" FROM "TV_series" ORDER BY "TV_series"."Rating" DESC LIMIT 3; 
SELECT   TS.id,   TS.Rating FROM   TV_series TS ORDER BY   TS.Rating DESC LIMIT 3; 
SELECT MIN(Share), MAX(Share) FROM TV_series; 
SELECT MAX(`Share`) AS Max_Share, MIN(`Share`) AS Min_Share FROM `TV_series`; 
SELECT "Air_Date"  FROM TV_series  WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'; 
SELECT "Weekly_Rank"  FROM "TV_series"  WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT "Weekly_Rank" FROM "TV_series" WHERE "Episode" = 'A Love of a Lifetime'; 
SELECT TC.series_name FROM TV_Channel AS TC JOIN TV_series AS TS ON TC.id = TS.Channel WHERE TS.Episode = 'A Love of a Lifetime'; 
SELECT series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime'; 
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'; 
SELECT ts.Episode FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE tc.series_name = 'Sky Radio'; 
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by; 
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by; 
SELECT "Production_code", "Channel" FROM Cartoon ORDER BY "Original_air_date" DESC LIMIT 1; 
SELECT "Production_code", "Channel" FROM Cartoon ORDER BY "Original_air_date" DESC LIMIT 1; 
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'yes'; 
SELECT TC.Package_Option, TC.series_name FROM TV_Channel TC WHERE TC.Hight_definition_TV = 'yes'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by = 'Todd Casey'; 
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by IS NULL OR C.Written_by != 'Todd Casey'; 
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by <> 'Todd Casey'; 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'; 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE (C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'); 
SELECT "Pixel_aspect_ratio_PAR", "Country" FROM "TV_Channel" WHERE "Language" != 'English'; 
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'; 
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN (     SELECT TV_Channel.Country     FROM TV_Channel     GROUP BY TV_Channel.Country     HAVING COUNT(*) > 2 ); 
SELECT Channel FROM TV_Channel GROUP BY Channel HAVING COUNT(id) > 2; 
SELECT DISTINCT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon Directed_by != 'Ben Jones'; 
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT TC.Package_Option FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C Directed_by IS NULL OR C Directed_by <> 'Ben Jones'; 
SELECT TC."Package_Option" FROM "TV_Channel" TC WHERE TC."id" NOT IN (     SELECT C."Channel"     FROM "Cartoon" C     JOIN "TV_Channel" TC2 ON C."Channel" = TC2."id"     WHERE C."Directed_by" = 'Ben Jones' ); 
SELECT COUNT(*) FROM poker_player; 
SELECT COUNT("Poker_Player_ID") FROM "poker_player"; 
SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC; 
SELECT "Earnings"  FROM "poker_player"  ORDER BY "Earnings" DESC; 
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player"; 
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player"; 
SELECT AVG("Earnings") AS AverageEarnings FROM "poker_player"; 
SELECT AVG("Earnings") AS Average_Earnings FROM "poker_player"; 
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1; 
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1; 
SELECT MAX("Final_Table_Made")  FROM "poker_player"  WHERE "Earnings" < 200000; 
SELECT MAX("Final_Table_Made")  FROM "poker_player"  WHERE "Earnings" < 200000; 
SELECT Name FROM people; 
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings > 300000; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC; 
SELECT p."Birth_Date" FROM "poker_player" AS pp JOIN "people" AS p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player"); 
SELECT "Birth_Date" FROM "people" AS p JOIN "poker_player" AS pp ON p."People_ID" = pp."People_ID" ORDER BY pp."Earnings" ASC LIMIT 1; 
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people); 
SELECT "Money_Rank" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" ORDER BY "people"."Height" DESC LIMIT 1; 
SELECT AVG(Earnings) AS AverageEarnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200; 
SELECT AVG("Earnings")  FROM "poker_player"  JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID"  WHERE "people"."Height" > 200; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC; 
SELECT Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Earnings DESC; 
SELECT "Nationality", COUNT("People_ID") AS "Number_of_People" FROM "people" GROUP BY "Nationality"; 
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality; 
SELECT "Nationality", COUNT("Nationality") as Count FROM people GROUP BY "Nationality" ORDER BY Count DESC LIMIT 1; 
SELECT "Nationality", COUNT(*) AS "Count" FROM "people" GROUP BY "Nationality" ORDER BY "Count" DESC LIMIT 1; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2; 
SELECT Name, Birth_Date FROM people ORDER BY Name ASC; 
SELECT Name, Birth_Date FROM people ORDER BY Name ASC; 
SELECT Name FROM people WHERE Nationality <> 'Russia'; 
SELECT Name FROM people WHERE Nationality != 'Russia'; 
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL; 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player); 
SELECT COUNT(DISTINCT "Nationality") AS "Distinct_Nationalities" FROM people; 
SELECT COUNT(DISTINCT "Nationality") FROM "people"; 
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE; 
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC; 
SELECT vote_id, phone_number, state FROM VOTES; 
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE; 
SELECT MAX(created) AS last_vote_date FROM VOTES WHERE state = 'CA'; 
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name != 'Jessie Alloway'; 
SELECT DISTINCT state, created FROM VOTES; 
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2; 
SELECT contestant_number, contestant_name FROM CONTESTANTS JOIN (     SELECT contestant_number, COUNT(*) as vote_count     FROM VOTES     GROUP BY contestant_number ) AS vote_counts ON CONTESTANTS.contestant_number = vote_counts.contestant_number ORDER BY vote_count ASC LIMIT 1; 
SELECT COUNT(*) AS total_votes FROM VOTES WHERE state IN ('NY', 'CA'); 
SELECT COUNT(*)  FROM CONTESTANTS  WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES); 
SELECT `area_code_state`.`area_code` FROM `VOTES` JOIN `AREA_CODE_STATE` ON `VOTES`.`state` = `AREA_CODE_STATE`.`state` GROUP BY `area_code` ORDER BY COUNT(`phone_number`) DESC LIMIT 1; 
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'; 
SELECT DISTINCT a.area_code FROM VOTES v1 JOIN VOTES v2 ON v1.phone_number = v2.phone_number WHERE v1.contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') AND v2.contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss') AND v1.state = v2.state AND v1.area_code = v2.area_code; 
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%'; 
SELECT Name  FROM country  WHERE IndepYear > 1950; 
SELECT Name  FROM country  WHERE IndepYear > 1950; 
SELECT COUNT(DISTINCT c.Code) FROM country c WHERE c.GovernmentForm LIKE '%Republic%'; 
SELECT COUNT(*)  FROM country  WHERE GovernmentForm LIKE '%republic%'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'; 
SELECT Continent  FROM country  WHERE Name = 'Anguilla'; 
SELECT Continent  FROM country  WHERE Name = 'Anguilla'; 
SELECT c.Region FROM city AS ci JOIN country AS co ON ci.CountryCode = co.Code WHERE ci.Name = 'Kabul'; 
SELECT District FROM city WHERE Name = 'Kabul'; 
SELECT `Language`, MAX(`Percentage`) as `MaxPercentage` FROM `countrylanguage` WHERE `CountryCode` = 'ABW' GROUP BY `Language` ORDER BY `MaxPercentage` DESC LIMIT 1; 
SELECT `Language` FROM `countrylanguage` WHERE `CountryCode` = 'ABW' AND `IsOfficial` = 'T' ORDER BY `Percentage` DESC LIMIT 1; 
SELECT c.Population, co.LifeExpectancy FROM country AS c JOIN city AS ci ON c.Code = ci.CountryCode WHERE ci.Name = 'São Paulo' OR ci.Name = 'Rio de Janeiro' AND c.Name = 'Brazil'; 
SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil'; 
SELECT Region, Population FROM country WHERE Name = 'Angola'; 
SELECT Region, Population FROM country WHERE Name = 'Angola'; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'; 
SELECT c.Name FROM country AS c JOIN city AS ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1; 
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1; 
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS MaxGNP FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia'; 
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS LargestGNP FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia'; 
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%republic%'; 
SELECT AVG(`LifeExpectancy`) AS avg_life_expectancy FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%republic%'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'; 
SELECT SUM(`Population`) as TotalPopulation FROM `city` WHERE `District` = 'Gelderland'; 
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'; 
SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE Code IN ('MP', 'UM', 'AS', 'VI', 'PW', 'GU', 'MP') -- Assuming US territories have these codes 
SELECT COUNT(DISTINCT Language) FROM countrylanguage; 
SELECT COUNT(DISTINCT `Language`) FROM `countrylanguage`; 
SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernments FROM country WHERE Continent = 'Africa'; 
SELECT COUNT(DISTINCT `GovernmentForm`) AS DifferentGovernmentForms FROM `country` WHERE `Continent` = 'Africa'; 
SELECT COUNT(*) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'; 
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'ABW'; 
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1; 
SELECT Continent, COUNT(*) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1; 
SELECT COUNT(DISTINCT c1.CountryCode)  FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'; 
SELECT COUNT(DISTINCT c.Code) FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT c.Continent) FROM country AS co JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE cl.Language = 'Chinese'; 
SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia'; 
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'Dutch'; 
SELECT c.Name AS CountryName, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English'); 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT c.Name  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT cl.Language, MAX(cl.Percentage) AS HighestPercentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY HighestPercentage DESC LIMIT 1; 
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(cl.Percentage) DESC LIMIT 1; 
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1; 
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = 'Republic' AND cl.Percentage = 100.0; 
SELECT Name, Population  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1; 
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1; 
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' ); 
SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' ); 
SELECT SUM(c.Population) AS TotalPopulation FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL; 
SELECT COUNT(DISTINCT c.Population)  FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F'; 
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalDistinctOfficialLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT c.Name FROM country c WHERE c.SurfaceArea > (     SELECT MAX(c2.SurfaceArea)     FROM country c2     WHERE c2.Continent = 'Europe' ) 
SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Europe' ); 
SELECT c.Name, c.Population FROM country AS c WHERE c.Continent = 'Africa' AND c.Population < (     SELECT MIN(Population)     FROM country     WHERE Continent = 'Asia' ); 
SELECT c.Name AS CountryName, c.Population FROM country c WHERE c.Continent = 'Africa' AND c.Population <      (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'); 
SELECT c.Name, c.Population FROM country AS c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(population)     FROM country     WHERE Continent = 'Africa' ); 
SELECT c.Name, c.Population FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa' ); 
SELECT DISTINCT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F'; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL; 
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT DISTINCT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial = 'F' AND c.GovernmentForm != 'Republic'; 
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL AND c.GovernmentForm NOT LIKE '%Republic%' 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'T' 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country); 
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country); 
SELECT      c.Population,      c.Name,      c.HeadOfState FROM      country c WHERE      c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country); 
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT      c.Name AS CountryName,      COUNT(cl.Language) AS NumberOfLanguages FROM      country c JOIN      countrylanguage cl ON c.Code = cl.CountryCode GROUP BY      c.Name HAVING      COUNT(cl.Language) >= 3; 
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(cl.Language) > 2; 
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District; 
SELECT      District,      COUNT(*) AS NumberOfCities,      AVG(Population) OVER() AS AvgPopulation FROM      city GROUP BY      District HAVING      Population > AVG(Population) OVER(); 
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm; 
SELECT GovernmentForm, SUM(Population) as TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm; 
SELECT      c.Continent,      AVG(co.LifeExpectancy) AS AverageLifeExpectancy,      SUM(co.Population) AS TotalPopulation FROM      country co JOIN      city ci ON co.Code = ci.CountryCode GROUP BY      c.Continent HAVING      AVG(co.LifeExpectancy) < 72; 
SELECT      c.Continent,      SUM(co.Population) AS TotalPopulation,      AVG(co.LifeExpectancy) AS AverageLifeExpectancy FROM      country AS co JOIN      city AS ci ON co.Code = ci.CountryCode WHERE      AVG(co.LifeExpectancy) < 72 GROUP BY      c.Continent; 
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5; 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT c.Name FROM country c ORDER BY c.Population DESC LIMIT 3; 
SELECT c.Name FROM country c ORDER BY c.Population ASC LIMIT 3; 
SELECT Name  FROM country  ORDER BY Population ASC  LIMIT 3; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Europe' AND c.Population >= 80000; 
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000; 
SELECT SUM(c.Population) AS TotalPopulation, AVG(co.SurfaceArea) AS AverageArea FROM country co JOIN city ci ON co.Code = ci.CountryCode WHERE co.Continent = 'North America' AND co.SurfaceArea > 3000; 
SELECT SUM(`Population`) AS TotalPopulation, AVG(`SurfaceArea`) AS AverageSurfaceArea FROM `country` WHERE `Continent` = 'North America' AND `SurfaceArea` > 3000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Language, COUNT(DISTINCT CountryCode) AS CountriesSpoken FROM countrylanguage GROUP BY Language ORDER BY CountriesSpoken DESC LIMIT 1; 
SELECT `Language`, COUNT(`CountryCode`) as CountryCount FROM `countrylanguage` WHERE `IsOfficial` = 'T' GROUP BY `Language` ORDER BY CountryCount DESC LIMIT 1; 
SELECT      c.Name AS CountryName,      cl.Language,      MAX(cl.Percentage) AS HighestPercentage FROM      country c JOIN      countrylanguage cl ON c.Code = cl.CountryCode WHERE      cl.IsOfficial = 'T' GROUP BY      c.Name ORDER BY      HighestPercentage DESC LIMIT 1; 
SELECT c.Code, cl.Language, MAX(cl.Percentage) as HighestPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, cl.Language ORDER BY c.Code, HighestPercentage DESC; 
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' ); 
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'; 
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' ); 
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'; 
SELECT COUNT(*) FROM conductor; 
SELECT COUNT(*) FROM conductor; 
SELECT Name FROM conductor ORDER BY Age ASC; 
SELECT Name  FROM conductor  ORDER BY Age; 
SELECT Name  FROM conductor  WHERE Nationality != 'USA'; 
SELECT Name FROM conductor WHERE Nationality <> 'USA'; 
SELECT "Record_Company" FROM "orchestra" ORDER BY "Year_of_Founded" DESC; 
SELECT "Record_Company", "Year_of_Founded" FROM "orchestra" ORDER BY "Year_of_Founded" DESC; 
SELECT AVG("Attendance") AS Average_Attendance FROM "show"; 
SELECT AVG("Attendance") FROM "show"; 
SELECT MAX(`Share`) AS MaxShare, MIN(`Share`) AS MinShare FROM `performance` WHERE `Type` <> 'Live final'; 
SELECT MAX(`Share`) AS Max_Share, MIN(`Share`) AS Min_Share FROM `performance` WHERE `Type` <> 'Live final'; 
SELECT COUNT(DISTINCT Nationality) FROM conductor; 
SELECT COUNT(DISTINCT "Nationality") AS "Distinct_Nationalities" FROM "conductor"; 
SELECT Name  FROM conductor  ORDER BY Year_of_Work DESC; 
SELECT c.Name, SUM(o.Year_of_Founded - c.Year_of_Work) AS TotalYearsWorked FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY TotalYearsWorked DESC; 
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor); 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1; 
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID; 
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1; 
SELECT c.Name FROM conductor c JOIN performance p ON c.Conductor_ID = p.Orchestra_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT p.Orchestra_ID) > 1; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008; 
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company; 
SELECT "Record_Company", COUNT("Orchestra_ID") AS "Orchestras_Manged" FROM "orchestra" GROUP BY "Record_Company"; 
SELECT "Major_Record_Format", COUNT(*) AS "Count" FROM "orchestra" GROUP BY "Major_Record_Format" ORDER BY "Count" ASC; 
SELECT "Major_Record_Format", COUNT("Orchestra_ID") AS Frequency FROM "orchestra" GROUP BY "Major_Record_Format" ORDER BY Frequency DESC; 
SELECT "Record_Company", COUNT(*) AS "Number_of_Orchestras" FROM "orchestra" GROUP BY "Record_Company" ORDER BY "Number_of_Orchestras" DESC LIMIT 1; 
SELECT "Record_Company", COUNT("Orchestra_ID") AS "Orchestras_Using" FROM "orchestra" GROUP BY "Record_Company" ORDER BY "Orchestras_Using" DESC LIMIT 1; 
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL; 
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Orchestra_ID IS NULL; 
SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 UNION SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded > 2003; 
SELECT DISTINCT o.Record_Company FROM orchestra o JOIN (     SELECT Orchestra_ID     FROM orchestra     WHERE Year_of_Founded < 2003 ) AS early_orchestras ON o.Orchestra_ID = early_orchestras.Orchestra_ID JOIN (     SELECT Orchestra_ID     FROM orchestra     WHERE Year_of_Founded > 2003 ) AS late_orchestras ON o.Orchestra_ID = late_orchestras.Orchestra_ID; 
SELECT COUNT(*)  FROM orchestra  WHERE "Major_Record_Format" IN ('CD', 'DVD'); 
SELECT COUNT(*) FROM orchestra WHERE "Major_Record_Format" IN ('CD', 'DVD'); 
SELECT DISTINCT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1; 
SELECT o."Year_of_Founded" FROM "orchestra" o JOIN (     SELECT "Orchestra_ID"     FROM "performance"     GROUP BY "Orchestra_ID"     HAVING COUNT("Performance_ID") > 1 ) p ON o."Orchestra_ID" = p."Orchestra_ID"; 
SELECT COUNT(*) FROM Highschooler; 
SELECT COUNT(*) FROM Highschooler; 
SELECT name, grade FROM Highschooler; 
SELECT name, grade FROM Highschooler; 
SELECT grade FROM Highschooler; 
SELECT grade FROM Highschooler; 
SELECT grade FROM Highschooler WHERE name = 'Kyle'; 
SELECT grade FROM Highschooler WHERE name = 'Kyle'; 
SELECT name FROM Highschooler WHERE grade = 10; 
SELECT name  FROM Highschooler  WHERE grade = 10; 
SELECT ID FROM Highschooler WHERE name = 'Kyle'; 
SELECT ID FROM Highschooler WHERE name = 'Kyle'; 
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10; 
SELECT COUNT(*)  FROM Highschooler  WHERE grade = 9 OR grade = 10; 
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade; 
SELECT grade, COUNT(*) AS student_count FROM Highschooler GROUP BY grade; 
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1; 
SELECT grade, COUNT(*) as student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1; 
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4; 
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4; 
SELECT H.ID, COUNT(F.friend_id) as num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID; 
SELECT H.ID, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID; 
SELECT H.name, COUNT(F.friend_id) as num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name; 
SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name; 
SELECT H.name, COUNT(F.student_id) as num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name ORDER BY num_friends DESC LIMIT 1; 
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name ORDER BY COUNT(F.student_id) DESC LIMIT 1; 
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.student_id) >= 3; 
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name HAVING COUNT(F.student_id) >= 3; 
SELECT name FROM Highschooler WHERE ID IN (     SELECT friend_id     FROM Friend     WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') ); 
SELECT h.name  FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE f.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'); 
SELECT COUNT(f.student_id) AS num_friends FROM Friend f JOIN Highschooler h ON f.student_id = h.ID WHERE h.name = 'Kyle'; 
SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'); 
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id WHERE F.student_id IS NULL; 
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT DISTINCT h1.ID FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.liked_id; 
SELECT DISTINCT H1.ID FROM Highschooler H1 JOIN Friend F1 ON H1.ID = F1.student_id JOIN Likes L ON H1.ID = L.liked_id; 
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id GROUP BY h.name; 
SELECT h.name FROM Highschooler h JOIN Friend f1 ON h.ID = f1.student_id JOIN Friend f2 ON h.ID = f2.friend_id JOIN Likes l1 ON h.ID = l1.liked_id JOIN Likes l2 ON h.ID = l2.student_id GROUP BY h.name HAVING COUNT(DISTINCT f1.student_id) > 1 AND COUNT(DISTINCT l1.liked_id) > 0; 
SELECT student_id, COUNT(*) AS likes_count FROM Likes GROUP BY student_id; 
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id; 
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name; 
SELECT H.name, COUNT(L.liked_id) as likes_count FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name; 
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.name ORDER BY COUNT(L.liked_id) DESC LIMIT 1; 
SELECT Highschooler.name, COUNT(Likes.student_id) AS likes_count FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name ORDER BY likes_count DESC LIMIT 1; 
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name HAVING COUNT(L.liked_id) >= 2; 
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name HAVING COUNT(L.liked_id) >= 2; 
SELECT h.name FROM Highschooler h JOIN Friend f1 ON h.ID = f1.student_id JOIN Friend f2 ON h.ID = f2.student_id AND f2.friend_id != f1.friend_id WHERE h.grade > 5 GROUP BY h.name HAVING COUNT(DISTINCT f1.friend_id) >= 2; 
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name HAVING COUNT(F.friend_id) >= 2; 
SELECT COUNT(*) AS Kyle_Likes FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'); 
SELECT COUNT(*)  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'); 
SELECT AVG(grade) as average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend); 
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend); 
SELECT MIN(grade) as MinGrade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT MIN(grade) AS LowestGradeWithoutFriends FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) GROUP BY grade ORDER BY grade ASC LIMIT 1; 
SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.state = P.state WHERE O.state IS NOT NULL AND P.state IS NOT NULL; 
SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.state = P.state; 
SELECT AVG(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments); 
SELECT AVG(CAST(d.age AS UNSIGNED)) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' UNION SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2; 
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN (     SELECT t.professional_id     FROM Treatments t     GROUP BY t.professional_id     HAVING COUNT(t.professional_id) > 2 ) AS HighVolume ON p.professional_id = HighVolume.professional_id WHERE p.state = 'Indiana'; 
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000; 
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000; 
SELECT DISTINCT first_name FROM (     SELECT first_name FROM Professionals     UNION     SELECT first_name FROM Owners ) AS all_first_names WHERE first_name NOT IN (SELECT name FROM Dogs); 
SELECT DISTINCT o.first_name, p.first_name FROM Owners o FULL OUTER JOIN Professionals p ON o.first_name = p.first_name WHERE o.first_name IS NOT NULL AND p.first_name IS NOT NULL AND o.first_name NOT IN (SELECT name FROM Dogs) UNION SELECT p.first_name FROM Professionals p WHERE p.first_name NOT IN (SELECT name FROM Dogs); 
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL; 
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM Treatments ); 
SELECT `Owners`.`owner_id`, `Owners`.`first_name`, `Owners`.`last_name` FROM `Owners` JOIN `Dogs` ON `Owners`.`owner_id` = `Dogs`.`owner_id` GROUP BY `Owners`.`owner_id` ORDER BY COUNT(`Dogs`.`dog_id`) DESC LIMIT 1; 
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2; 
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2; 
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_code, b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_code ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1; 
SELECT `treatment_type_description` FROM `Treatment_Types` JOIN `Treatments` ON `Treatment_Types`.`treatment_type_code` = `Treatments`.`treatment_type_code` GROUP BY `treatment_type_code` ORDER BY SUM(`cost_of_treatment`) ASC LIMIT 1; 
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Professionals p ON t.professional_id = p.professional_id JOIN Charges c ON t.treatment_type_code = c.charge_type GROUP BY o.owner_id, o.zip_code ORDER BY SUM(c.charge_amount) DESC LIMIT 1; 
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; 
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) AS subquery ON p.professional_id = subquery.professional_id; 
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments); 
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments); 
SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id; 
SELECT T.date_of_treatment, P.first_name FROM Treatments AS T JOIN Professionals AS P ON T.professional_id = P.professional_id; 
SELECT T.cost_of_treatment, TTD.treatment_type_description FROM Treatments T JOIN Treatment_Types TTD ON T.treatment_type_code = TTD.treatment_type_code; 
SELECT T.treatment_id, T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code; 
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code; 
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id; 
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id; 
SELECT d.name AS Dog_Name, t.date_of_treatment AS Treatment_Date FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(*) ASC LIMIT 1); 
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT breed_code, COUNT(*) AS count FROM Dogs GROUP BY breed_code) AS subquery) ) AS rare_breeds ON d.breed_code = rare_breeds.breed_code JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'; 
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id; 
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs); 
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs); 
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'; 
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'; 
SELECT d.date_arrived, d.date_departed FROM Dogs d; 
SELECT `date_arrived`, `date_departed` FROM `Dogs`; 
SELECT COUNT(DISTINCT dog_id)  FROM Treatments; 
SELECT COUNT(DISTINCT dog_id)  FROM Treatments; 
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments; 
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments; 
SELECT `role_code`, `street`, `city`, `state` FROM Professionals WHERE `city` LIKE 'West%'; 
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'; 
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'; 
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'; 
SELECT COUNT(*)  FROM Dogs  WHERE CAST(age AS UNSIGNED) < (SELECT AVG(CAST(age AS UNSIGNED)) FROM Dogs); 
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS UNSIGNED) < (SELECT AVG(CAST(age AS UNSIGNED)) FROM Dogs); 
SELECT MAX(cost_of_treatment)  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1; 
SELECT MAX(`cost_of_treatment`) AS `highest_cost` FROM `Treatments` ORDER BY `date_of_treatment` DESC LIMIT 1; 
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments); 
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments); 
SELECT COUNT(DISTINCT o.owner_id) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL; 
SELECT COUNT(DISTINCT o.owner_id) AS num_owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL; 
SELECT COUNT(DISTINCT professional_id) AS uninvolved_professionals FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL; 
SELECT COUNT(*) AS num_professionals_not_treated FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments); 
SELECT `name`, `age`, `weight` FROM `Dogs` WHERE `abandoned_yn` = '1'; 
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1'; 
SELECT AVG(CAST(age AS UNSIGNED)) AS average_age FROM Dogs; 
SELECT AVG(STR_TO_DATE(age, '%Y')) AS average_age FROM Dogs; 
SELECT MAX(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS oldest_dog_age FROM Dogs; 
SELECT MAX(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS max_age FROM Dogs; 
SELECT `charge_type`, `charge_amount` FROM `Charges`; 
SELECT `charge_type`, `charge_amount` FROM `Charges`; 
SELECT MAX(`charge_amount`) AS max_charge_amount FROM `Charges`; 
SELECT MAX(`charge_amount`) AS max_charge_amount FROM `Charges` WHERE `charge_type` = (SELECT `charge_type` FROM `Charges` GROUP BY `charge_type` ORDER BY SUM(`charge_amount`) DESC LIMIT 1); 
SELECT email_address, cell_number, home_phone  FROM Professionals; 
SELECT email_address, cell_number, home_phone FROM Professionals; 
SELECT DISTINCT b.breed_name, s.size_description FROM Breeds b JOIN Sizes s ON b.size_code = s.size_code; 
SELECT DISTINCT `breed_name`, `size_description` FROM `Breeds` JOIN `Dogs` ON `Breeds.breed_code` = `Dogs.breed_code` JOIN `Sizes` ON `Dogs.size_code` = `Sizes.size_code`; 
SELECT      Professionals.first_name,      Treatment_Types.treatment_type_description FROM      Professionals JOIN      Treatments ON Professionals.professional_id = Treatments.professional_id JOIN      Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code; 
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code; 
SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) FROM singer; 
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions ASC; 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; 
SELECT Birth_Year, Citizenship FROM singer; 
SELECT Birth_Year, Citizenship FROM singer; 
SELECT Name FROM singer WHERE Citizenship != 'France'; 
SELECT Name FROM singer WHERE Citizenship != 'France'; 
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949; 
SELECT Name  FROM singer  WHERE Birth_Year IN (1948, 1949); 
SELECT Name  FROM singer  WHERE "Net_Worth_Millions" = (SELECT MAX("Net_Worth_Millions") FROM singer); 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) as NumberOfSingers FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1; 
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship; 
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship; 
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID; 
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID; 
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000; 
SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000; 
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1; 
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1; 
SELECT s.Name, SUM(so.Sales) AS TotalSales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name; 
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name; 
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL; 
SELECT s.Name AS SName FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL; 
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1; 
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955; 
SELECT COUNT(*) FROM Other_Available_Features; 
SELECT `feature_type_name` FROM `Ref_Feature_Types` WHERE `feature_type_code` = 'AirCon'; 
SELECT `Ref_Property_Types.property_type_description` FROM `Properties` JOIN `Ref_Property_Types` ON `Properties.property_type_code` = `Ref_Property_Types.property_type_code`; 
SELECT p.property_name FROM Properties p JOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code WHERE (rpt.property_type_description = 'House' OR rpt.property_type_description = 'Apartment') AND p.room_count > 1; 

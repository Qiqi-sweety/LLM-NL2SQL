SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) AS Total_Singers FROM singer; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC; 
SELECT s.Singer_ID, s.Song_Name, s.Song_release_year,         (YEAR(CURRENT_DATE) - YEAR(s.Song_release_year)) AS Age FROM singer s ORDER BY Age DESC; 
SELECT AVG(`Age`) AS Average_Age, MIN(`Age`) AS Min_Age, MAX(`Age`) AS Max_Age FROM `singer` JOIN `singer_in_concert` ON `singer`.`Singer_ID` = `singer_in_concert`.`Singer_ID` JOIN `concert` ON `singer_in_concert`.`concert_ID` = `concert`.`concert_ID` JOIN `stadium` ON `concert`.`Stadium_ID` = `stadium`.`Stadium_ID` WHERE `stadium`.`Stadium_ID` IN (SELECT `Stadium_ID` FROM `stadium` WHERE `Highest` BETWEEN 1500 AND 2500); 
SELECT AVG(`Age`) AS AverageAge, MIN(`Age`) AS MinimumAge, MAX(`Age`) AS MaximumAge FROM `singer` WHERE EXISTS (     SELECT 1     FROM `singer_in_concert` sc     JOIN `concert` c ON sc.`concert_ID` = c.`concert_ID`     JOIN `stadium` st ON c.`Stadium_ID` = st.`Stadium_ID`     WHERE sc.`Singer_ID` = `singer`.`Singer_ID`     AND st.`Stadium_ID` NOT IN ('1', '2', '3', '4', '5') ) 
SELECT Name AS Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer); 
SELECT s.Name, si.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN (     SELECT MIN(Age) AS Youngest_Age     FROM singer ) AS youngest ON s.Age = youngest.Youngest_Age JOIN concert c ON sic.concert_ID = c.concert_ID; 
SELECT DISTINCT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Age > 20; 
SELECT DISTINCT s.Singer_ID, s.Age FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID JOIN country co ON st.Country_ID = co.Country_ID WHERE s.Age > 20; 
SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country; 
SELECT s.Name AS Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN (     SELECT AVG(Age) AS Avg_Age     FROM singer ) AS avg_age ON s.Age > avg_age.Avg_Age; 
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT `stadium`.`Stadium_ID`, `stadium`.`Capacity` FROM `stadium` WHERE `Capacity` BETWEEN 5000 AND 10000; 
SELECT MAX(`Capacity`), AVG(`Capacity`) FROM `stadium`; 
SELECT AVG(`Capacity`) AS AverageCapacity, MAX(`Capacity`) AS MaxCapacity FROM `stadium`; 
SELECT `Name`, `Capacity` FROM `stadium` WHERE `Average` = (SELECT MAX(`Average`) FROM `stadium`); 
SELECT `Name`, `Capacity` FROM `stadium` WHERE `Average` = (SELECT MAX(`Average`) FROM `stadium`); 
SELECT COUNT(*)  FROM `concert`  WHERE `Year` = '2014' OR `Year` = '2015'; 
SELECT COUNT(*)  FROM `concert`  WHERE Year = '2014' OR Year = '2015'; 
SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID; 
SELECT      s.Stadium_ID,      COUNT(c.concert_ID) AS num_concerts FROM      stadium s LEFT JOIN      concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY      s.Stadium_ID; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1; 
SELECT `Year`, COUNT(*) AS `number_of_concerts` FROM `concert` GROUP BY `Year` ORDER BY `number_of_concerts` DESC LIMIT 1; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT `Name` FROM `stadium` WHERE `Stadium_ID` NOT IN (SELECT `Stadium_ID` FROM `concert`); 
SELECT DISTINCT s1.Country  FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30; 
SELECT `Name`  FROM `stadium`  WHERE `Stadium_ID` NOT IN (     SELECT `Stadium_ID`      FROM `concert`      WHERE `Year` = '2014' ); 
SELECT `Name`  FROM `stadium`  WHERE `Stadium_ID` NOT IN (     SELECT `Stadium_ID`      FROM `concert`      WHERE `Year` = '2014' ); 
SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_ID; 
SELECT      c.concert_Name,      c.Theme,      (SELECT COUNT(*) FROM singer_in_concert sic WHERE sic.concert_ID = c.concert_ID) AS num_singers FROM      concert c; 
SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Singer_ID; 
SELECT s.Name, COUNT(sc.concert_ID) AS NumConcerts FROM singer s LEFT JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name; 
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'; 
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN singer s2 ON sic.Singer_ID = s2.Singer_ID WHERE s2.Song_Name LIKE '%Hey%'; 
SELECT s.Name, s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE s.Song_Name LIKE '%Hey%'; 
SELECT s.Name, s.Highest, s.Lowest, s.Average FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2; 
SELECT s.Location, s.Name FROM stadium s JOIN concert c1 ON s.Stadium_ID = c1.Stadium_ID AND c1.Year = '2014' JOIN concert c2 ON s.Stadium_ID = c2.Stadium_ID AND c2.Year = '2015'; 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT `Stadium_ID` FROM stadium ORDER BY Capacity DESC LIMIT 1); 
SELECT COUNT(c.concert_ID) AS Number_of_Concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium); 
SELECT COUNT(*)  FROM `Pets`  WHERE `weight` > 10; 
SELECT COUNT(*)  FROM `Pets`  WHERE `weight` > 10; 
SELECT MIN(weight) as Youngest_Dog_Weight FROM Pets WHERE PetType = 'dog'; 
SELECT MIN(weight) AS Youngest_Dog_Weight FROM `Pets` WHERE `pet_age` = (SELECT MIN(`pet_age`) FROM `Pets`); 
SELECT PetType, MAX(weight) as MaxWeight FROM Pets GROUP BY PetType; 
SELECT PetType, MAX(weight) as MaxWeight FROM Pets GROUP BY PetType; 
SELECT COUNT(hp.StuID) AS NumberOfPets FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(hp.PetID)  FROM `Has_Pet` hp JOIN `Student` s ON hp.StuID = s.StuID WHERE s.Age > 20; 
SELECT COUNT(hp.PetID) AS DogPetCount FROM `Has_Pet` hp JOIN `Student` s ON hp.StuID = s.StuID JOIN `Pets` p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'; 
SELECT COUNT(*)  FROM `Student` s JOIN `Has_Pet` hp ON s.StuID = hp.StuID JOIN `Pets` p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'; 
SELECT COUNT(DISTINCT PetType) AS NumberOfDistinctPetTypes FROM Pets; 
SELECT COUNT(DISTINCT pet_age) AS different_pet_types FROM `Pets`; 
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog'); 
SELECT DISTINCT s.StuID, s.Advisor FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age IN (1, 3) OR p.weight BETWEEN 9.0 AND 13.9; 
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' GROUP BY s.Fname HAVING COUNT(DISTINCT p.PetType) = 2; 
SELECT DISTINCT S.StuID FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID AND P1.PetID IN (SELECT PetID FROM Pets WHERE pet_age < 4) JOIN Has_Pet HP2 ON S.StuID = HP2.StuID AND P2.PetID IN (SELECT PetID FROM Pets WHERE pet_age >= 4 AND pet_age < 7) WHERE S.Sex = 'M' OR S.Sex = 'F'; 
SELECT `Student.Major`, `Student.Age` FROM `Student` LEFT JOIN `Has_Pet` ON `Student.StuID` = `Has_Pet.StuID` LEFT JOIN `Pets` ON `Has_Pet.PetID` = `Pets.PetID` WHERE `Pets.PetType` <> 'cat' GROUP BY `Student.Major`, `Student.Age`; 
SELECT s.StuID, s.Age, m.major FROM Student s JOIN Major m ON s.StuID = m.StuID WHERE s.StuID NOT IN (     SELECT hp.StuID     FROM Has_Pet hp     JOIN Pets p ON hp.PetID = p.PetID     WHERE p.weight > 10 ); 
SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.pet_age = 1 AND Pets.weight <= 10 ); 
SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID AND p.pet_age = 1 WHERE p.PetID IS NULL; 
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.weight > 0 AND p.weight < 15 AND p.PetID NOT IN (     SELECT PetID     FROM Pets     WHERE weight > 0 AND weight < 15 AND PetID NOT IN (         SELECT PetID         FROM Pets         WHERE weight > 0 AND weight < 15 AND PetID IN (             SELECT PetID             FROM Pets             WHERE weight > 0 AND weight < 15 AND PetType = 'cat'         )     ) ) 
SELECT s.StuID, s.Advisor FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 2 AND NOT EXISTS (     SELECT 1     FROM Has_Pet hp2     JOIN Pets p2 ON hp2.PetID = p2.PetID     WHERE hp2.StuID = s.StuID AND p2.weight > 10 ) 
SELECT pet_age, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets); 
SELECT P.PetID, P.weight FROM Pets P JOIN Has_Pet HP ON P.PetID = HP.PetID JOIN Student S ON HP.StuID = S.StuID WHERE S.Age = (SELECT MIN(Age) FROM Student) ORDER BY P.pet_age ASC LIMIT 1; 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetID, weight FROM Pets WHERE pet_age > 1; 
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType; 
SELECT      P.PetID,      AVG(H.PetID) AS average_age,      MAX(H.PetID) AS maximum_age FROM      `Pets` AS P JOIN      `Has_Pet` AS H ON P.PetID = H.PetID GROUP BY      P.PetID; 
SELECT PetType, AVG(weight) as avg_weight FROM Pets GROUP BY PetType; 
SELECT p.PetID, AVG(p.weight) AS avg_weight FROM Pets p GROUP BY p.PetID; 
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID; 
SELECT DISTINCT s.StuID, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID; 
SELECT `PetID` FROM `Has_Pet` JOIN `Student` ON `Has_Pet`.`StuID` = `Student`.`StuID` WHERE `Student`.`LName` = 'Smith'; 
SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.city_code = 'YYZ' AND Student.Age = 26; 
SELECT `Student`.StuID, COUNT(`Has_Pet`.PetID) AS `NumOfPets` FROM `Student` JOIN `Has_Pet` ON `Student`.StuID = `Has_Pet`.StuID GROUP BY `Student`.StuID; 
SELECT `StuID`, COUNT(`PetID`) AS `Number_of_Pets` FROM `Has_Pet` GROUP BY `StuID`; 
SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1; 
SELECT s.StuID, s.Age, s.city_code FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1; 
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.weight IS NOT NULL; 
SELECT s.StuID, s.Age, s.city_code FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age = 3 AND p.weight IS NOT NULL ORDER BY s.StuID DESC LIMIT 1; 
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT AVG(Age) AS average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT COUNT(*) FROM continents; 
SELECT COUNT(*) AS NumberOfContinents FROM continents; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent; 
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent; 
SELECT COUNT(*) FROM countries; 
SELECT COUNT(*) FROM countries; 
SELECT cm.FullName, cm.Id, COUNT(ml.Model) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id; 
SELECT      cm.Id,     cm.FullName,     COUNT(ml.Model) AS ModelCount FROM      car_makers cm LEFT JOIN      model_list ml ON cm.Id = ml.Maker GROUP BY      cm.Id; 
SELECT `Model`, MIN(`Horsepower`) AS MinHorsepower FROM `car_names` JOIN `cars_data` ON `car_names`.`MakeId` = `cars_data`.`Id` GROUP BY `Model` ORDER BY MinHorsepower ASC LIMIT 1; 
SELECT m.Model FROM `car_names` AS cn JOIN `model_list` AS ml ON cn.Model = ml.Model JOIN `car_makers` AS cm ON ml.Maker = cm.Id JOIN `cars_data` AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower = (SELECT MIN(`Horsepower`) FROM `cars_data`); 
SELECT ml.Model FROM `model_list` ml JOIN `car_names` cn ON ml.Maker = cn.Model JOIN `cars_data` cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM `cars_data`); 
SELECT m.Model FROM `car_names` cn JOIN `model_list` ml ON cn.Model = ml.Model JOIN `cars_data` cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(`Weight`) FROM `cars_data`); 
SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970; 
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN continents cont ON c.Continent = cont.ContId JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970; 
SELECT `car_names`.`Make`, MIN(`cars_data`.`Year`) AS `ProductionTime` FROM `car_names` JOIN `cars_data` ON `car_names`.`MakeId` = `cars_data`.`Id` GROUP BY `car_names`.`Make` ORDER BY `ProductionTime` LIMIT 1; 
SELECT      cm.Country,     cn.Model FROM      car_names cn JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id JOIN      cars_data cd ON cn.MakeId = cd.Id WHERE      cd.Id = (SELECT MIN(Id) FROM cars_data); 
SELECT DISTINCT c.Model FROM car_names c JOIN model_list ml ON c.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId JOIN continents ct ON co.Continent = ct.ContId WHERE YEAR(c.Year) > 1980; 
SELECT ml.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.ModelId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980; 
SELECT c.Continent, COUNT(DISTINCT cm.Maker) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent; 
SELECT continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent; 
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1; 
SELECT `countries.CountryName` FROM `countries` JOIN `car_makers` ON `countries.CountryId` = `car_makers.Country` GROUP BY `countries.CountryName` ORDER BY COUNT(`car_makers.Id`) DESC LIMIT 1; 
SELECT cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName; 
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName; 
SELECT Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE car_names.Make = 'amc hornet sportabout (sw)'; 
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE car_names.Make = 'amc hornet sportabout (sw)'; 
SELECT COUNT(*)  FROM `car_makers`  JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId`  WHERE `countries`.`CountryName` = 'france'; 
SELECT COUNT(DISTINCT cm.Id) AS NumberOfMakers FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'france'; 
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa'; 
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'usa'; 
SELECT AVG(`MPG`) AS avg_mpg FROM `cars_data` WHERE `Cylinders` = 4; 
SELECT AVG(`MPG`) AS avg_mpg FROM `cars_data` WHERE `Cylinders` = 4; 
SELECT MIN(`Weight`)  FROM `cars_data`  JOIN `car_names` ON `cars_data`.`Id` = `car_names`.`MakeId`  JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model`  JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id`  JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId`  JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId`  WHERE `Cylinders` = 8 AND `Year` = 1974; 
SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974; 
SELECT c.Maker, m.Model FROM car_makers c JOIN model_list m ON c.Id = m.Maker JOIN car_names cn ON m.Model = cn.Model; 
SELECT `car_makers.Maker`, `model_list.Model` FROM `car_makers` JOIN `model_list` ON `car_makers.Id` = `model_list.Maker`; 
SELECT `countries.CountryName`, `countries.CountryId` FROM `countries` JOIN `car_makers` ON `countries.CountryId` = `car_makers.Country` GROUP BY `countries.CountryName`, `countries.CountryId`; 
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId; 
SELECT COUNT(*) FROM `cars_data` WHERE Horsepower > '150'; 
SELECT COUNT(*) FROM `cars_data` WHERE `Horsepower` > 150; 
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year; 
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year; 
SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3 JOIN car_makers cm ON c.CountryId = cm.Country; 
SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3; 
SELECT MAX(`Horsepower`), `car_makers.Maker` FROM `car_names` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `cars_data` ON `car_names.MakeId` = `cars_data.Id` WHERE `cars_data.Cylinders` = 3 GROUP BY `car_makers.Maker`; 
SELECT MAX(`Horsepower`), `car_makers`.`FullName` FROM `cars_data` JOIN `car_names` ON `cars_data`.`Id` = `car_names`.`MakeId` JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model` JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id` WHERE `cars_data`.`Cylinders` = 3 GROUP BY `car_makers`.`FullName` ORDER BY MAX(`Horsepower`) DESC LIMIT 1; 
SELECT      ml.Model,      cd.MPG  FROM      car_names cn  JOIN      model_list ml ON cn.Model = ml.Model  JOIN      cars_data cd ON cn.MakeId = cd.Id  ORDER BY      cd.MPG DESC  LIMIT 1; 
SELECT Model  FROM cars_data  ORDER BY MPG DESC  LIMIT 1; 
SELECT AVG(`Horsepower`) AS average_horsepower FROM `cars_data` WHERE `Year` < 1980; 
SELECT AVG(`Horsepower`) AS AvgHorsepower FROM `cars_data` WHERE `Year` < 1980; 
SELECT AVG(`Edispl`)  FROM `car_names`  JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model`  JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id`  JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId`  JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId`  WHERE `car_makers`.`Maker` = 'volvo'; 
SELECT AVG(`Edispl`)  FROM `cars_data` JOIN `car_names` ON `cars_data`.`Id` = `car_names`.`MakeId` JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model` JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id` JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId` JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId` WHERE `car_makers`.`Maker` = 'volvo'; 
SELECT `Cylinders`, MAX(`Accelerate`) AS Max_Accelerate FROM `cars_data` GROUP BY `Cylinders`; 
SELECT MAX(`Horsepower`) AS MaxAccelerate FROM `cars_data` WHERE `Cylinders` IS NOT NULL; 
SELECT      `model_list`.`Model`,     COUNT(`car_names`.`Make`) AS `VersionCount` FROM      `model_list` JOIN      `car_names` ON `model_list`.`ModelId` = `car_names`.`Model` GROUP BY      `model_list`.`Model` ORDER BY      `VersionCount` DESC LIMIT 1; 
SELECT      m.Model,      COUNT(*) AS VersionCount FROM      car_names AS cn JOIN      model_list AS ml ON cn.Model = ml.Model GROUP BY      m.Model ORDER BY      VersionCount DESC LIMIT 1; 
SELECT COUNT(*) FROM `cars_data` WHERE `Cylinders` > 4; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4; 
SELECT COUNT(*) FROM cars_data WHERE Year = 1980; 
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'america' AND car_names.Make = 'ford' AND car_names.Model = ' torino'; 
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'; 
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc'; 
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3; 
SELECT `car_makers`.`Id`, `car_makers`.`Maker` FROM `car_makers` JOIN `model_list` ON `car_makers`.`Id` = `model_list`.`Maker` GROUP BY `car_makers`.`Id`, `car_makers`.`Maker` HAVING COUNT(`model_list`.`Model`) > 3; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500; 
SELECT DISTINCT YEAR FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE YEAR >= 3000 AND YEAR <= 4000; 
SELECT DISTINCT `Year` FROM `cars_data` WHERE `Weight` < 4000 OR `Weight` > 3000; 
SELECT `Horsepower` FROM `cars_data` ORDER BY `Accelerate` DESC LIMIT 1; 
SELECT `cars_data`.`Horsepower` FROM `cars_data` JOIN `car_names` ON `cars_data`.`Id` = `car_names`.`MakeId` JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model` JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id` JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId` JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId` WHERE `cars_data`.`Id` = (     SELECT `MakeId`     FROM `car_names`     JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model`     JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id`     JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId`     JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId`     WHERE `cars_data`.`Horsepower` = (         SELECT MAX(`Horsepower`)         FROM `cars_data`     ) ); 
SELECT MIN(`Cylinders`)  FROM `cars_data`  INNER JOIN `car_names` ON `cars_data.Id` = `car_names.MakeId` INNER JOIN `model_list` ON `car_names.Model` = `model_list.Model` WHERE `model_list.Maker` = (SELECT `Id` FROM `car_makers` WHERE `Maker` = 'volvo') 
SELECT `Cylinders` FROM `cars_data` JOIN `car_names` ON `cars_data`.`Id` = `car_names`.`MakeId` JOIN `model_list` ON `car_names`.`Model` = `model_list`.`Model` JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id` JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId` JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId` WHERE `car_makers`.`Maker` = 'volvo' ORDER BY `cars_data`.`Accelerate` ASC LIMIT 1; 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data); 
SELECT COUNT(*) FROM `cars_data` WHERE `Accelerate` > (SELECT MAX(`Horsepower`) FROM `cars_data`); 
SELECT COUNT(c.CountryId)  FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2; 
SELECT COUNT(*)  FROM (     SELECT CountryId      FROM car_makers      GROUP BY CountryId      HAVING COUNT(*) > 2 ) AS CountriesWithMoreThanTwoMakers; 
SELECT COUNT(*) FROM `cars_data` WHERE `Cylinders` > 6; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6; 
SELECT      m.Model,      c.Horsepower FROM      cars_data c JOIN      car_names cn ON c.Id = cn.MakeId JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id WHERE      c.Cylinders = 4 ORDER BY      c.Horsepower DESC LIMIT 1; 
SELECT ml.Model, MAX(cd.Horsepower) as MaxHorsepower FROM cars_data cd JOIN model_list ml ON cd.Id = ml.MakeId WHERE cd.Cylinders = 4 GROUP BY ml.Model ORDER BY MaxHorsepower DESC LIMIT 1; 
SELECT cn.MakeId, cm.Maker FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (     SELECT MIN(Horsepower) FROM cars_data ) AND cd.Cylinders <= 3; 
SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower NOT IN (     SELECT MIN(Horsepower) FROM cars_data ) AND cd.Cylinders < 4; 
SELECT MAX(`MPG`)  FROM `cars_data`  WHERE `Cylinders` = 8 AND `Year` < 1980; 
SELECT MAX(`MPG`) AS MaxMPG FROM `cars_data` WHERE `Cylinders` = 8 OR `Year` < 1980; 
SELECT cl.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company'; 
SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.ModelId NOT IN (     SELECT cn.MakeId     FROM car_names cn     JOIN model_list ml ON cn.Model = ml.Model     JOIN car_makers cm ON ml.Maker = cm.Id     WHERE cm.FullName = 'Ford Motor Company' ) AND ml.ModelId IN (     SELECT MakeId     FROM cars_data     WHERE Weight < 3500 ); 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL; 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN (     SELECT Maker     FROM model_list     GROUP BY Maker     HAVING COUNT(*) >= 2 ) ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(cm.Id) > 3; 
SELECT c.Id, c.Maker FROM car_makers c JOIN model_list ml ON c.Id = ml.Maker GROUP BY c.Id, c.Maker HAVING COUNT(ml.Model) >= 2 AND (     SELECT COUNT(*)     FROM cars_data cd     JOIN car_names cn ON cd.Id = cn.MakeId     WHERE cn.Model IN (SELECT Model FROM model_list WHERE Maker = c.Id) ) > 3; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Make = 'fiat'; 
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker LIKE '%fiat%' UNION SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3; 
SELECT Country  FROM airlines  WHERE Airline = 'JetBlue Airways'; 
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' 
SELECT `Abbreviation` FROM `airlines` WHERE `Airline` = 'JetBlue Airways'; 
SELECT Abbreviation  FROM airlines  WHERE Airline = 'JetBlue Airways'; 
SELECT `Airline`, `Abbreviation` FROM `airlines` WHERE `Country` = 'USA'; 
SELECT `Airline`, `Abbreviation` FROM `airlines` WHERE `Country` = 'USA'; 
SELECT `AirportCode`, `AirportName` FROM `airports` WHERE `City` = 'Anthony'; 
SELECT `AirportCode`, `AirportName` FROM `airports` WHERE `City` = 'Anthony'; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) AS TotalAirlines FROM airlines; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM flights; 
SELECT COUNT(*) AS TotalFlights FROM flights; 
SELECT `Airline` FROM `airlines` WHERE `Abbreviation` = 'UAL'; 
SELECT `Airline` FROM `airlines` WHERE `Abbreviation` = 'UAL'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'; 
SELECT `City`, `Country` FROM `airports` WHERE `AirportName` = 'Alton Airport'; 
SELECT `City`, `Country` FROM `airports` WHERE `AirportName` = 'Alton Airport'; 
SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO'; 
SELECT `AirportName`  FROM `airports`  WHERE `AirportCode` = 'AKO'; 
SELECT `AirportName` FROM `airports` WHERE `City` = 'Aberdeen'; 
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ATO'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ATO'; 
SELECT COUNT(*)  FROM flights  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  WHERE `DestAirport` IN (SELECT `AirportCode` FROM airports WHERE `City` = 'Aberdeen'); 
SELECT COUNT(*) FROM flights JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASY'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'JetBlue Airways'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways'); 
SELECT COUNT(*)  FROM flights  WHERE Airline = 1 AND SourceAirport = 'APG' OR DestAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = 1 AND SourceAirport = 'AHD'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')  AND SourceAirport = 'AHD'; 
SELECT COUNT(*)  FROM flights  JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND src.City = 'Aberdeen'; 
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ABR'; 
SELECT `airports.City`, COUNT(`flights.FlightNo`) AS `ArrivalFlightsCount` FROM `flights` JOIN `airports` ON `flights.DestAirport` = `airports.AirportCode` GROUP BY `airports.City` ORDER BY `ArrivalFlightsCount` DESC LIMIT 1; 
SELECT `City`, COUNT(`DestAirport`) AS `Frequency` FROM `airports` JOIN `flights` ON `airports.AirportCode` = `flights.DestAirport` GROUP BY `City` ORDER BY `Frequency` DESC LIMIT 1; 
SELECT `airports.City`, COUNT(`flights.FlightNo`) AS DepartureFlights FROM `flights` JOIN `airports` ON `flights.SourceAirport` = `airports.AirportCode` GROUP BY `airports.City` ORDER BY DepartureFlights DESC LIMIT 1; 
SELECT `City` FROM `airports` WHERE `AirportCode` IN (SELECT `SourceAirport` FROM `flights`) GROUP BY `City` ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT `airports.AirportCode` FROM `airports` JOIN `flights` ON `airports.AirportCode` = `flights.SourceAirport` OR `airports.AirportCode` = `flights.DestAirport` GROUP BY `airports.AirportCode` ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT `AirportCode` FROM `airports` JOIN `flights` ON `airports.AirportCode` = `flights.SourceAirport` GROUP BY `AirportCode` ORDER BY COUNT(`flights.FlightNo`) DESC LIMIT 1; 
SELECT `SourceAirport`, `DestAirport` FROM `flights` GROUP BY `SourceAirport`, `DestAirport` ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT `AirportCode` FROM `airports` WHERE `AirportCode` IN (     SELECT `SourceAirport`     FROM `flights`     GROUP BY `SourceAirport`     ORDER BY COUNT(*) ASC     LIMIT 1 ) UNION SELECT `AirportCode` FROM `airports` WHERE `AirportCode` IN (     SELECT `DestAirport`     FROM `flights`     GROUP BY `DestAirport`     ORDER BY COUNT(*) ASC     LIMIT 1 ); 
SELECT `Airline`, COUNT(`FlightNo`) AS `TotalFlights` FROM `flights` GROUP BY `Airline` ORDER BY `TotalFlights` DESC LIMIT 1; 
SELECT `Airline`, COUNT(*) AS `NumberOfFlights` FROM `flights` JOIN `airlines` ON `flights`.`Airline` = `airlines`.`uid` GROUP BY `Airline` ORDER BY `NumberOfFlights` DESC LIMIT 1; 
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD'; 
SELECT DISTINCT `Airline` FROM `flights` WHERE `SourceAirport` = 'AHD'; 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports ap ON ap.AirportCode = f.DestAirport WHERE ap.AirportCode = 'AHD'; 
SELECT `Airline` FROM `flights` WHERE `DestAirport` = 'AHD'; 
SELECT DISTINCT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airlines a ON f1.Airline = a.uid WHERE f1.SourceAirport = 'APG' AND f2.DestAirport = 'CVO' AND f1.DestAirport = 'CVO' AND f2.SourceAirport = 'APG'; 
SELECT a.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline JOIN airlines a ON f1.Airline = a.uid WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO' GROUP BY a.Airline; 
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (     SELECT Airline     FROM flights     WHERE SourceAirport = 'APG' ); 
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (     SELECT f.Airline     FROM flights f     JOIN airports ap ON f.SourceAirport = ap.AirportCode     WHERE ap.AirportCode = 'APG' ); 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(*) >= 10; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(`FlightNo`) < 200; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(`FlightNo`) < 200; 
SELECT `FlightNo` FROM `flights` WHERE `Airline` = (SELECT `uid` FROM `airlines` WHERE `Airline` = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines'); 
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'; 
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT `FlightNo` FROM `flights` WHERE `DestAirport` = 'APG'; 
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'; 
SELECT `flights.FlightNo` FROM `flights` JOIN `airports` AS source_airport ON `flights.SourceAirport` = `source_airport.AirportCode` WHERE `source_airport.City` = 'Aberdeen' 
SELECT FlightNo FROM flights WHERE SourceAirport IN ('APG', 'ABR'); 
SELECT `flights.FlightNo` FROM `flights` JOIN `airports` AS src ON `flights.SourceAirport` = `src.AirportCode` JOIN `airports` AS dest ON `flights.DestAirport` = `dest.AirportCode` WHERE `dest.City` = 'Aberdeen'; 
SELECT FlightNo FROM flights WHERE DestAirport IN (     SELECT AirportCode     FROM airports     WHERE City = 'Aberdeen' ); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport IN ('APG', 'ABI') OR DestAirport IN ('APG', 'ABI'); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABR' OR DestAirport = 'ABI'; 
SELECT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.Airline IS NULL; 
SELECT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.FlightNo IS NULL; 
SELECT COUNT(*) FROM employee; 
SELECT COUNT(*) FROM employee; 
SELECT Name FROM employee ORDER BY Age ASC; 
SELECT Name FROM employee ORDER BY Age ASC; 
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City; 
SELECT City, COUNT(Employee_ID) AS NumberOfEmployees FROM employee GROUP BY City; 
SELECT `shop`.`Location` FROM `shop` JOIN `hiring` ON `shop`.`Shop_ID` = `hiring`.`Shop_ID` JOIN `employee` ON `hiring`.`Employee_ID` = `employee`.`Employee_ID` WHERE `employee`.`Age` < 30 GROUP BY `shop`.`Location` HAVING COUNT(`employee`.`Employee_ID`) > 1; 
SELECT s.Manager_name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID WHERE e.Age < 30 GROUP BY s.Manager_name HAVING COUNT(h.Employee_ID) > 1; 
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location; 
SELECT `Location`, COUNT(`Shop_ID`) AS `Number_of_Shops` FROM `shop` GROUP BY `Location`; 
SELECT `Manager_name`, `District` FROM `shop` WHERE `Number_products` = (SELECT MAX(`Number_products`) FROM `shop`); 
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop); 
SELECT MIN(`Number_products`) AS Min_Products, MAX(`Number_products`) AS Max_Products  FROM `shop`; 
SELECT MIN(`Number_products`) AS Min_Products, MAX(`Number_products`) AS Max_Products FROM `shop`; 
SELECT `Name`, `Location`, `District`, `Number_products` FROM `shop` ORDER BY `Number_products` DESC; 
SELECT `Name`, `Location`, `District` FROM `shop` ORDER BY `Number_products` DESC; 
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT `Name` FROM `shop` WHERE `Number_products` > (SELECT AVG(`Number_products`) FROM `shop`); 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation); 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1; 
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT e.Employee_ID FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT s.Name  FROM shop s  JOIN hiring h ON s.Shop_ID = h.Shop_ID  GROUP BY s.Name  ORDER BY COUNT(h.Employee_ID) DESC  LIMIT 1; 
SELECT `shop`.`Name` FROM `shop` JOIN `hiring` ON `shop`.`Shop_ID` = `hiring`.`Shop_ID` GROUP BY `shop`.`Name` ORDER BY COUNT(`hiring`.`Employee_ID`) DESC LIMIT 1; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees_Hired FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name; 
SELECT s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID; 
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation; 
SELECT SUM(`Bonus`) AS Total_Bonus FROM `evaluation`; 
SELECT * FROM hiring; 
SELECT * FROM hiring; 
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 OR s.Number_products > 10000; 
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 OR s.Number_products > 10000; 
SELECT COUNT(DISTINCT `Location`) AS `Distinct Locations` FROM `shop`; 
SELECT COUNT(DISTINCT `Location`) FROM `shop`; 
SELECT COUNT(*) FROM Documents; 
SELECT COUNT(*) FROM Documents; 
SELECT Document_ID, Document_Name, Document_Description FROM Documents; 
SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d; 
SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%'; 
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description LIKE '%w%'; 
SELECT d.Document_ID, t.Template_ID, d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV'; 
SELECT      d.Document_ID,      d.Template_ID,      d.Document_Description  FROM      Documents d  WHERE      d.Document_Name = 'Robbin CV'; 
SELECT COUNT(DISTINCT Template_ID) AS DifferentTemplatesUsed FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID; 
SELECT COUNT(DISTINCT Template_ID) FROM Documents; 
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT' AND Templates.Template_ID IN (SELECT Template_ID FROM Documents); 
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT Template_ID, COUNT(*) as Usage_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN (     SELECT Template_ID, COUNT(*) AS DocumentCount     FROM Documents     GROUP BY Template_ID ) D ON T.Template_ID = D.Template_ID ORDER BY D.DocumentCount DESC LIMIT 1; 
SELECT Template_ID FROM Templates WHERE Template_ID IN (     SELECT Template_ID     FROM Documents     GROUP BY Template_ID     HAVING COUNT(*) > 1 ); 
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1; 
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL; 
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL; 
SELECT COUNT(*) FROM Templates; 
SELECT COUNT(*) FROM Templates; 
SELECT Template_ID, Version_Number, Template_Type_Code  FROM Templates; 
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates; 
SELECT DISTINCT Template_Type_Code  FROM Templates; 
SELECT DISTINCT `Template_Type_Code` FROM `Ref_Template_Types`; 
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV'); 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT `Templates`.`Version_Number`, `Templates`.`Template_Type_Code` FROM `Templates` WHERE `Templates`.`Version_Number` > 5; 
SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code; 
SELECT `Template_Type_Code`, COUNT(`Template_ID`) AS Template_Count FROM `Templates` GROUP BY `Template_Type_Code`; 
SELECT `Template_Type_Code`, COUNT(*) AS Template_Count FROM `Templates` GROUP BY `Template_Type_Code` ORDER BY Template_Count DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3; 
SELECT MIN(Version_Number), `Template_Type_Code` FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY `Template_Type_Code` ORDER BY MIN(Version_Number) ASC LIMIT 1; 
SELECT MIN(`Version_Number`), `Template_Type_Code` FROM `Templates` GROUP BY `Template_Type_Code` ORDER BY MIN(`Version_Number`) ASC LIMIT 1; 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'; 
SELECT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Understanding DB'; 
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT d.Document_Name FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT `Template_Type_Code`, COUNT(`Template_ID`) AS `Document_Count` FROM `Templates` JOIN `Ref_Template_Types` ON `Templates`.`Template_Type_Code` = `Ref_Template_Types`.`Template_Type_Code` GROUP BY `Template_Type_Code`; 
SELECT `Template_Type_Code`, COUNT(`Document_ID`) AS Document_Count FROM `Templates` LEFT JOIN `Documents` ON `Templates.Template_ID` = `Documents.Template_ID` GROUP BY `Template_Type_Code`; 
SELECT RT.TEMPLATE_TYPE_CODE, COUNT(D.DOCUMENT_ID) AS Document_Count FROM Ref_Template_Types RT JOIN Templates T ON RT.TEMPLATE_TYPE_CODE = T.TEMPLATE_TYPE_CODE JOIN Documents D ON T.TEMPLATE_ID = D.TEMPLATE_ID GROUP BY RT.TEMPLATE_TYPE_CODE ORDER BY Document_Count DESC LIMIT 1; 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_ID FROM Templates) AND Template_Type_Code NOT IN (SELECT Template_ID FROM Documents); 
SELECT `Template_Type_Code` FROM `Ref_Template_Types` WHERE `Template_Type_Code` NOT IN (     SELECT DISTINCT `Template_ID`     FROM `Templates`     WHERE `Template_ID` IS NOT NULL ); 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types; 
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'; 
SELECT DISTINCT rt.`Template_Type_Description` FROM `Templates` t JOIN `Ref_Template_Types` rt ON t.`Template_Type_Code` = rt.`Template_Type_Code` JOIN `Documents` d ON t.`Template_ID` = d.`Template_ID`; 
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID; 
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs; 
SELECT COUNT(*) FROM Paragraphs; 
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'; 
SELECT COUNT(`Paragraph_ID`) AS ParagraphCount FROM `Paragraphs` INNER JOIN `Documents` ON `Paragraphs.Document_ID` = `Documents.Document_ID` WHERE `Documents.Document_Name` = 'Summer Show'; 
SELECT `Other_Details` FROM `Paragraphs` WHERE `Paragraph_Text` = 'Korea '; 
SELECT `Paragraph_ID`, `Document_ID`, `Paragraph_Text`, `Other_Details` FROM `Paragraphs` WHERE `Paragraph_Text` LIKE '%Korea%'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'; 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'; 
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'; 
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS NumOfParagraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID; 
SELECT      d.Document_ID,      COUNT(p.Paragraph_ID) AS NumberOfParagraphs FROM      Documents d LEFT JOIN      Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY      d.Document_ID ORDER BY      d.Document_ID; 
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name; 
SELECT      d.Document_ID,      d.Document_Name,      (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) AS Paragraph_Count FROM      Documents d; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2; 
SELECT      d.Document_ID,      d.Document_Name  FROM      Documents d  JOIN      Paragraphs p ON d.Document_ID = p.Document_ID  GROUP BY      d.Document_ID, d.Document_Name  ORDER BY      COUNT(p.Paragraph_ID) DESC  LIMIT 1; 
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1; 
SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1; 
SELECT Document_ID  FROM Paragraphs  GROUP BY Document_ID  ORDER BY COUNT(*) ASC  LIMIT 1; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2; 
SELECT Document_ID  FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2; 
SELECT `Document_ID` FROM `Paragraphs` WHERE `Paragraph_Text` = 'Brazil' OR `Paragraph_Text` = 'Ireland'; 
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Brazil' OR p.Paragraph_Text = 'Ireland'; 
SELECT COUNT(*) FROM `teacher`; 
SELECT COUNT(*) FROM teacher; 
SELECT Name FROM teacher ORDER BY Name ASC; 
SELECT Name  FROM teacher  ORDER BY Age ASC; 
SELECT `Teacher`.Age, `Teacher`.Hometown FROM `teacher`; 
SELECT `Name`, `Age`, `Hometown` FROM `teacher`; 
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'; 
SELECT Name  FROM teacher  WHERE Hometown <> 'Little Lever Urban District'; 
SELECT Name  FROM teacher  WHERE Age = '32' OR Age = '33'; 
SELECT `Teacher_ID` FROM `teacher` WHERE `Age` = 32 OR `Age` = 33; 
SELECT `Hometown` FROM `teacher` WHERE `Age` = (SELECT MIN(`Age`) FROM `teacher`); 
SELECT `Hometown`  FROM `teacher` WHERE `Age` = (SELECT MIN(`Age`) FROM `teacher`); 
SELECT `Hometown`, COUNT(`Teacher_ID`) AS `TeacherCount` FROM `teacher` GROUP BY `Hometown`; 
SELECT `Hometown`, COUNT(`Teacher_ID`) AS `Teacher_Count` FROM `teacher` GROUP BY `Hometown`; 
SELECT `Hometown`, COUNT(*) as `Count` FROM `teacher` GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1; 
SELECT `Hometown`, COUNT(*) AS `Count` FROM `teacher` GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1; 
SELECT t1.Hometown FROM teacher t1 JOIN teacher t2 ON t1.Hometown = t2.Hometown WHERE t1.Teacher_ID < t2.Teacher_ID GROUP BY t1.Hometown HAVING COUNT(*) >= 2; 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2; 
SELECT t.Name, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Name, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Name, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID ORDER BY t.Name ASC; 
SELECT t.Name, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC; 
SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course = 'Math'; 
SELECT t.Name  FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course_ID IN (SELECT Course_ID FROM course_arrange WHERE Grade = 1); 
SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name; 
SELECT t.Name, COUNT(ca.Course_ID) AS CourseCount FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2; 
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2; 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange); 
SELECT Name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange); 
SELECT COUNT(*)  FROM visitor  WHERE Age < 30; 
SELECT `Name`  FROM `visitor`  WHERE `Level_of_membership` > 4  ORDER BY `Level_of_membership` DESC; 
SELECT AVG(`Age`) AS Average_Age FROM `visitor` WHERE `Level_of_membership` <= 4; 
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age ASC; 
SELECT `Museum_ID`, `Name` FROM `museum` ORDER BY `Num_of_Staff` DESC LIMIT 1; 
SELECT AVG(`Num_of_Staff`)  FROM `museum`  WHERE `Open_Year` < '2009'; 
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'; 
SELECT `Name` FROM `museum` WHERE `Num_of_Staff` > (SELECT MIN(`Num_of_Staff`) FROM `museum` WHERE `Open_Year` > '2010'); 
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1; 
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Num_of_Ticket) DESC LIMIT 1; 
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1; 
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL; 
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit); 
SELECT AVG(`Num_of_Ticket`) AS average_tickets, MAX(`Num_of_Ticket`) AS max_tickets FROM `visit`; 
SELECT SUM(`Num_of_Ticket`) AS Total_Ticket_Expense FROM `visit` JOIN `visitor` ON `visit.visitor_ID` = `visitor.ID` WHERE `visitor.Level_of_membership` = 1; 
SELECT v.Name FROM visitor v JOIN visit mv ON v.ID = mv.visitor_ID JOIN museum m ON mv.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' INTERSECT SELECT v.Name FROM visitor v JOIN visit mv ON v.ID = mv.visitor_ID JOIN museum m ON mv.Museum_ID = m.Museum_ID WHERE m.Open_Year > '2011'; 
SELECT COUNT(DISTINCT v.ID) AS NumVisitors FROM visitor v LEFT JOIN visit vi ON v.ID = vi.visitor_ID LEFT JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year IS NULL OR m.Open_Year <= 2010; 
SELECT COUNT(*)  FROM `museum`  WHERE `Open_Year` > '2013' OR `Open_Year` < '2008'; 
SELECT COUNT(*) AS total_players FROM players; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) AS total_matches FROM matches; 
SELECT COUNT(*) FROM `matches`; 
SELECT `first_name`, `birth_date` FROM `players` WHERE `country_code` = 'USA'; 
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches; 
SELECT AVG(`winner_rank`) AS average_winner_rank FROM `matches`; 
SELECT AVG(`winner_rank`) AS average_winner_rank FROM `matches`; 
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches; 
SELECT MAX(`loser_rank`) AS best_loser_rank FROM `matches`; 
SELECT COUNT(DISTINCT country_code) FROM players; 
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players; 
SELECT COUNT(DISTINCT `loser_name`) AS distinct_losers_count FROM `matches`; 
SELECT COUNT(DISTINCT loser_name) AS different_loser_names FROM matches; 
SELECT `tourney_name` FROM `matches` GROUP BY `tourney_name` HAVING COUNT(*) > 10; 
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10; 
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016; 
SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.winner_id AND m1.tourney_date != m2.tourney_date WHERE m1.year = 2013 AND m2.year = 2016 AND p1.player_id = m1.winner_id AND p1.player_id = m2.winner_id; 
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016); 
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016); 
SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' AND p.player_id IN (     SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND winner_id IN (         SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open'     ) ); 
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' ) m2 ON m1.winner_id = m2.winner_id JOIN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' ) m3 ON m1.winner_id = m3.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m3.tourney_name = 'Australian Open'; 
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1; 
SELECT first_name, country_code  FROM players  ORDER BY birth_date  LIMIT 1; 
SELECT first_name, last_name FROM players ORDER BY birth_date; 
SELECT p.first_name, p.last_name FROM players p ORDER BY p.birth_date; 
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date; 
SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (     SELECT m.winner_id     FROM matches m     JOIN players p ON m.winner_id = p.player_id     WHERE m.loser_id = p.player_id AND p.first_name LIKE '%L%' ) ORDER BY p.birth_date; 
SELECT p.first_name, p.country_code FROM players p JOIN (     SELECT player_id, SUM(tours) AS total_tours     FROM rankings     GROUP BY player_id     ORDER BY total_tours DESC     LIMIT 1 ) AS r ON p.player_id = r.player_id; 
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1; 
SELECT year, COUNT(*) as total_matches FROM matches GROUP BY year ORDER BY total_matches DESC LIMIT 1; 
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; 
SELECT winner_name, winner_rank_points FROM matches JOIN players ON winner_id = players.player_id GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.winner_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) ORDER BY r.ranking_points DESC LIMIT 1; 
SELECT winner_name FROM matches WHERE winner_id IN (     SELECT player_id     FROM players     WHERE country_code = 'AUS' ) ORDER BY winner_rank_points DESC LIMIT 1; 
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1; 
SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches); 
SELECT      w.first_name AS WinnerFirstName,      w.last_name AS WinnerLastName,      l.first_name AS LoserFirstName,      l.last_name AS LoserLastName,      MAX(m.minutes) AS LongestMatchMinutes FROM      matches m JOIN      players w ON m.winner_id = w.player_id JOIN      players l ON m.loser_id = l.player_id WHERE      m.minutes = (SELECT MAX(minutes) FROM matches) 
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT      p.first_name,      SUM(r.ranking_points) AS total_ranking_points FROM      players p JOIN      rankings r ON p.player_id = r.player_id GROUP BY      p.player_id, p.first_name; 
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT `country_code`, COUNT(`player_id`) AS `number_of_players` FROM `players` GROUP BY `country_code`; 
SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code; 
SELECT `country_code`, COUNT(*) AS `player_count` FROM `players` GROUP BY `country_code` ORDER BY `player_count` DESC LIMIT 1; 
SELECT country_code, COUNT(player_id) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50; 
SELECT country_code, COUNT(*) as total_players FROM players GROUP BY country_code HAVING total_players > 50; 
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT year, COUNT(*) AS matches_count FROM matches GROUP BY year; 
SELECT      year,      COUNT(*) AS total_matches FROM      matches GROUP BY      year; 
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.birth_date = (     SELECT MIN(p2.birth_date)     FROM players p2     JOIN matches m2 ON p2.player_id = m2.winner_id ) ORDER BY p.birth_date DESC LIMIT 3; 
SELECT      p.first_name,      p.last_name,      m.winner_rank FROM      players p JOIN      matches m ON p.player_id = m.winner_id WHERE      m.winner_age = (SELECT MIN(winner_age) FROM matches) ORDER BY      m.winner_age ASC LIMIT 3; 
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = 'WTA Championships'  AND winner_hand = 'L'; 
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = 'WTA Championships'  AND winner_ht < 170; 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches ); 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (     SELECT MAX(winner_rank_points) FROM matches ) 
SELECT `hand`, COUNT(`player_id`) AS `count` FROM `players` GROUP BY `hand`; 
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand; 
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured'; 
SELECT name, tonnage FROM ship ORDER BY name DESC; 
SELECT `name`, `date`, `result` FROM `battle`; 
SELECT      b.id AS battle_id,      MAX(d.id) AS max_death_id,      MIN(d.id) AS min_death_id FROM      battle b JOIN      death d ON b.id = d.caused_by_ship_id GROUP BY      b.id; 
SELECT AVG(d.total_deaths) AS avg_injuries_per_battle FROM (     SELECT b.id, COUNT(death.id) AS total_deaths     FROM battle b     LEFT JOIN ship s ON b.id = s.lost_in_battle     LEFT JOIN death ON s.id = death.caused_by_ship_id     GROUP BY b.id ) d; 
SELECT d.caused_by_ship_id, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'; 
SELECT `name`, `result` FROM `battle` WHERE `bulgarian_commander` != 'Boril'; 
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'; 
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING COUNT(d.id) > 10; 
SELECT      s.id AS ship_id,      s.name AS ship_name,      COUNT(d.id) AS total_injuries FROM      ship s JOIN      death d ON s.id = d.caused_by_ship_id GROUP BY      s.id, s.name ORDER BY      total_injuries DESC LIMIT 1; 
SELECT DISTINCT `date` AS battle_name FROM `battle` WHERE `bulgarian_commander` = 'Kaloyan' AND `latin_commander` = 'Baldwin I'; 
SELECT COUNT(DISTINCT `result`) AS `unique_results` FROM `battle`; 
SELECT COUNT(*)  FROM battle  WHERE id NOT IN (     SELECT lost_in_battle      FROM ship      WHERE tonnage = '225' ); 
SELECT b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta'; 
SELECT `battle`.`name`, `battle`.`result`, `battle`.`bulgarian_commander` FROM `battle` WHERE `battle`.`id` NOT IN (     SELECT `ship`.`lost_in_battle`     FROM `ship`     WHERE `ship`.`location` = 'English Channel' ); 
SELECT d.id, d.killed FROM death d JOIN ship s ON d.caused_by_ship_id = s.id JOIN battle b ON s.lost_in_battle = b.id WHERE s.location LIKE '%East%'; 
SELECT line_1, line_2 FROM Addresses; 
SELECT line_1, line_2 FROM Addresses; 
SELECT COUNT(*) FROM Courses; 
SELECT COUNT(*) FROM Courses; 
SELECT course_description  FROM Courses  WHERE course_name = 'math'; 
SELECT course_description FROM Courses WHERE course_name = 'math'; 
SELECT `zip_postcode` FROM `Addresses` WHERE `city` = 'Port Chelsea'; 
SELECT `zip_postcode` FROM `Addresses` WHERE `city` = 'Port Chelsea'; 
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs; 
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_summary_name) AS total_degrees_offered FROM Degree_Programs; 
SELECT COUNT(*) AS degree_count FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'computer science'; 
SELECT COUNT(*)  FROM Degree_Programs dp  JOIN Departments d ON dp.department_id = d.department_id  WHERE d.department_name = 'engineering'; 
SELECT section_name, section_description FROM Sections; 
SELECT section_name, section_description  FROM Sections; 
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2; 
SELECT course_id, course_name  FROM Courses  WHERE course_id NOT IN (SELECT course_id FROM Sections); 
SELECT `section_name` FROM `Sections` ORDER BY `section_name` DESC; 
SELECT `section_name`  FROM `Sections`  ORDER BY `section_name` DESC; 
SELECT `Semesters`.`semester_name`, `Semesters`.`semester_id` FROM `Semesters` JOIN `Student_Enrolment` ON `Semesters`.`semester_id` = `Student_Enrolment`.`semester_id` GROUP BY `Semesters`.`semester_id`, `Semesters`.`semester_name` ORDER BY COUNT(`Student_Enrolment`.`student_id`) DESC LIMIT 1; 
SELECT      Semesters.semester_id,      Semesters.semester_name FROM      Semesters JOIN      Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY      Semesters.semester_id,      Semesters.semester_name ORDER BY      COUNT(Student_Enrolment.student_id) DESC LIMIT 1; 
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'; 
SELECT `department_description` FROM `Departments` WHERE `department_name` LIKE '%computer%'; 
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id WHERE dp.degree_program_id != s.degree_program_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name  FROM      Students s  JOIN      Student_Enrolment se ON s.student_id = se.student_id  JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  JOIN      Semesters sm ON se.semester_id = sm.semester_id  WHERE      dp.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment WHERE student_id = s.student_id)  GROUP BY      s.student_id  HAVING      COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor'; 
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'; 
SELECT      DP.degree_summary_name,      COUNT(SE.student_id) AS number_of_students FROM      Degree_Programs DP JOIN      Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY      DP.degree_summary_name ORDER BY      number_of_students DESC LIMIT 1; 
SELECT DP.degree_summary_name, COUNT(SE.student_id) AS student_count FROM Degree_Programs DP JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_program_id, DP.degree_summary_name ORDER BY student_count DESC LIMIT 1; 
SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY student_count DESC LIMIT 1; 
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_id) AS num_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY      num_enrollments DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_id) AS num_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id ORDER BY      num_enrollments DESC LIMIT 1; 
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL; 
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment); 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY c.course_name ORDER BY COUNT(sec.student_enrolment_id) DESC LIMIT 1; 
SELECT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment); 
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se ); 
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2; 
SELECT      T.transcript_id,      T.transcript_date  FROM      Transcripts T  JOIN      Transcript_Contents TC  ON      T.transcript_id = TC.transcript_id  GROUP BY      T.transcript_id  HAVING      COUNT(TC.student_course_id) >= 2; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT first_name, middle_name, last_name  FROM Students  WHERE date_first_registered = (     SELECT MIN(date_first_registered)      FROM Students ); 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1; 
SELECT      S.first_name,      S.middle_name,      S.last_name FROM      Students S JOIN      Student_Enrolment SE ON S.student_id = SE.student_id JOIN      Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id JOIN      Transcripts T ON DP.degree_program_id = T.degree_program_id WHERE      T.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts) 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE s.date_left IS NOT NULL ORDER BY sm.semester_name, sm.semester_description, dp.degree_summary_name LIMIT 1; 
SELECT s.first_name FROM Students s WHERE s.permanent_address_id != s.current_address_id; 
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.address_id != pa.address_id; 
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1; 
SELECT MIN(transcript_date) AS Earliest_Transcript_Date, other_details FROM Transcripts WHERE transcript_date IS NOT NULL GROUP BY other_details ORDER BY MIN(transcript_date) ASC LIMIT 1; 
SELECT COUNT(*) FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts; 
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts; 
SELECT student_course_id, COUNT(DISTINCT transcript_id) AS max_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY max_transcripts DESC LIMIT 1; 
SELECT      sc.student_course_id,      COUNT(*) AS course_occurrences FROM      Student_Enrolment_Courses sc JOIN      Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY      sc.student_course_id ORDER BY      course_occurrences DESC LIMIT 1; 
SELECT transcript_id, transcript_date  FROM Transcripts  WHERE transcript_id = (SELECT MIN(transcript_id) FROM (SELECT transcript_id, COUNT(*) as result_count FROM Transcript_Contents GROUP BY transcript_id) as counts); 
SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents tc WHERE tc.transcript_id = Transcripts.transcript_id) LIMIT 1; 
SELECT DISTINCT S.semester_name FROM Student_Enrolment AS SE JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id JOIN Semesters AS S ON SE.semester_id = S.semester_id WHERE DP.degree_summary_name IN ('Master', 'Bachelor'); 
SELECT DISTINCT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor'); 
SELECT COUNT(DISTINCT current_address_id) AS different_addresses FROM Students WHERE current_address_id IS NOT NULL; 
SELECT DISTINCT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id ORDER BY a.address_id; 
SELECT *  FROM Students  ORDER BY last_name DESC, middle_name DESC, first_name DESC; 
SELECT other_student_details  FROM Students  ORDER BY other_student_details DESC; 
SELECT `section_name`, `section_description`, `other_details` FROM `Sections` WHERE `section_name` = 'h'; 
SELECT section_description FROM Sections WHERE section_name = 'h'; 
SELECT s.first_name  FROM Students s  WHERE s.permanent_address_id IN (     SELECT a.address_id      FROM Addresses a      WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582'; 
SELECT DISTINCT S.first_name  FROM Students S  JOIN Addresses P ON S.permanent_address_id = P.address_id  WHERE P.country = 'Haiti' OR S.cell_mobile_number = '09700166582'; 
SELECT Original_air_date AS Title FROM Cartoon ORDER BY Original_air_date ASC; 
SELECT series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.id = Cartoon.id  ORDER BY series_name ASC; 
SELECT Title, Directed_by, Original_air_date, Production_code FROM Cartoon WHERE Directed_by = 'Ben Jones'; 
SELECT `Title` FROM `Cartoon` WHERE `Directed_by` = 'Ben Jones'; 
SELECT COUNT(*) FROM Cartoon WHERE `Written_by` = 'Joseph Kuhr'; 
SELECT COUNT(*)  FROM Cartoon  WHERE `Written_by` = 'Joseph Kuhr'; 
SELECT c.Original_air_date, c.Production_code FROM Cartoon c ORDER BY c.Original_air_date; 
SELECT c.`Directed_by`, c.`Original_air_date` FROM `Cartoon` c ORDER BY c.`Original_air_date`; 
SELECT Title  FROM `Cartoon` WHERE `Directed_by` = 'Ben Jones' OR `Directed_by` = 'Brandon Vietti'; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; 
SELECT `Country`, COUNT(*) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Country` ORDER BY `Number_of_Channels` DESC LIMIT 1; 
SELECT `Country`, COUNT(`Channel`) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Country` ORDER BY `Number_of_Channels` DESC LIMIT 1; 
SELECT COUNT(DISTINCT series_name) AS distinct_series_count,         COUNT(DISTINCT Content) AS distinct_content_count FROM TV_Channel; 
SELECT COUNT(DISTINCT series_name) AS DifferentSeriesCount,         COUNT(DISTINCT Content) AS DifferentContentCount FROM TV_Channel; 
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'; 
SELECT `Content` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'; 
SELECT `Package_Option`  FROM `TV_Channel`  WHERE `series_name` = 'Sky Radio'; 
SELECT `Package_Option` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'; 
SELECT COUNT(*) FROM TV_Channel WHERE `Language` = 'English'; 
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'; 
SELECT `Language`, COUNT(*) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Language` ORDER BY `Number_of_Channels` ASC LIMIT 1; 
SELECT `Language`, COUNT(`Language`) as `ChannelsUsing` FROM `TV_Channel` GROUP BY `Language` ORDER BY `ChannelsUsing` LIMIT 1; 
SELECT `Language`, COUNT(`id`) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Language`; 
SELECT `Language`, COUNT(`id`) AS `Number_of_Channels` FROM `TV_Channel` GROUP BY `Language`; 
SELECT TC.series_name FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Title = 'The Rise of the Blue Beetle!'; 
SELECT TC.series_name  FROM TV_Channel TC  JOIN Cartoon C ON TC.id = C.Channel  WHERE C.Title = 'The Rise of the Blue Beetle!'; 
SELECT Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'; 
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio'; 
SELECT `Episode` FROM `TV_series` ORDER BY `Rating` DESC; 
SELECT * FROM TV_series ORDER BY Rating DESC; 
SELECT `Episode`, `Rating`  FROM `TV_series`  ORDER BY `Rating` DESC  LIMIT 3; 
SELECT `TV_series`.`Rating`, `TV_series`.`id` FROM `TV_series` ORDER BY `TV_series`.`Rating` DESC LIMIT 3; 
SELECT MIN(`18_49_Rating_Share`), MAX(`18_49_Rating_Share`) FROM `TV_series`; 
SELECT MAX(`18_49_Rating_Share`) AS Max_Share, MIN(`18_49_Rating_Share`) AS Min_Share FROM `TV_series`; 
SELECT `Air_Date` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime'; 
SELECT Original_air_date  FROM Cartoon  WHERE id = (SELECT id FROM TV_series WHERE `18_49_Rating_Share` = '2.4/6'); 
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'; 
SELECT `Weekly_Rank` FROM `TV_series` WHERE `series_name` = 'A Love of a Lifetime'; 
SELECT TC.series_name FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel WHERE TS.Episode = 'A Love of a Lifetime'; 
SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'; 
SELECT `Episode` FROM `TV_series` WHERE `Channel` = (SELECT `id` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'); 
SELECT `Episode` FROM `TV_series` WHERE `Channel` = (SELECT `id` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'); 
SELECT `Directed_by`, COUNT(*) AS `Number_of_Cartoons` FROM `Cartoon` GROUP BY `Directed_by`; 
SELECT `Directed_by`, COUNT(`id`) AS `Number_of_Cartoons_Created` FROM `Cartoon` GROUP BY `Directed_by`; 
SELECT `Production_code`, `Channel` FROM `Cartoon` ORDER BY `Original_air_date` DESC LIMIT 1; 
SELECT Production_code, Channel  FROM `Cartoon`  ORDER BY Original_air_date DESC  LIMIT 1; 
SELECT `Package_Option`, `series_name` FROM `TV_Channel` WHERE `Hight_definition_TV` = 'yes'; 
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'yes'; 
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN `TV_series` ON TV_Channel.id = `TV_series.Channel` WHERE Cartoon.Written_by = 'Todd Casey'; 
SELECT DISTINCT c.Country FROM TV_Channel AS tc JOIN Cartoon AS ct ON tc.id = ct.Channel JOIN `TV_series` AS ts ON tc.id = ts.Channel WHERE ct.Written_by = 'Todd Casey'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by IS NULL OR C.Written_by != 'Todd Casey'; 
SELECT DISTINCT TC.Country FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by IS NOT NULL AND C.Written_by != 'Todd Casey'; 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang'); 
SELECT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'; 
SELECT `Pixel_aspect_ratio_PAR`, `Country` FROM `TV_Channel` WHERE `Language` <> 'English'; 
SELECT `Pixel_aspect_ratio_PAR`, `Country` FROM `TV_Channel` WHERE `Language` <> 'English'; 
SELECT `TV_Channel.id` FROM `TV_Channel` WHERE `Country` IN (     SELECT `Country`     FROM `TV_Channel`     GROUP BY `Country`     HAVING COUNT(`id`) > 2 ); 
SELECT Channel FROM TV_Channel GROUP BY Channel HAVING COUNT(*) > 2; 
SELECT c.id FROM TV_Channel c WHERE c.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT `Channel`  FROM `Cartoon`  WHERE `Directed_by` != 'Ben Jones' GROUP BY `Channel` HAVING COUNT(*) = 0; 
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT COUNT(*) FROM poker_player; 
SELECT COUNT(*) FROM poker_player; 
SELECT `Earnings` FROM `poker_player` ORDER BY `Earnings` DESC; 
SELECT `Earnings`  FROM `poker_player`  ORDER BY `Earnings` DESC; 
SELECT Final_Table_Made, Best_Finish FROM poker_player; 
SELECT `Final_Table_Made`, `Best_Finish` FROM `poker_player`; 
SELECT AVG(`Earnings`) AS average_earnings FROM `poker_player`; 
SELECT AVG(`Earnings`) AS average_earnings FROM `poker_player`; 
SELECT `Money_Rank`  FROM `poker_player`  ORDER BY `Earnings` DESC  LIMIT 1; 
SELECT `Money_Rank` FROM `poker_player` ORDER BY `Earnings` DESC LIMIT 1; 
SELECT MAX(`Final_Table_Made`)  FROM `poker_player` WHERE `Earnings` < 200000; 
SELECT MAX(`Final_Table_Made`)  FROM `poker_player`  WHERE `Earnings` < 200000; 
SELECT `Name` FROM `people` WHERE `People_ID` IN (SELECT `People_ID` FROM `poker_player`); 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000; 
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000; 
SELECT p.Poker_Player_ID FROM poker_player p ORDER BY p.Final_Table_Made ASC; 
SELECT p.People_ID, p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC; 
SELECT p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player); 
SELECT p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player); 
SELECT `Money_Rank`  FROM `poker_player` JOIN `people` ON `poker_player`.`People_ID` = `people`.`People_ID` WHERE `Height` = (SELECT MAX(`Height`) FROM `people`); 
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people); 
SELECT AVG(Earnings) AS AverageEarnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200; 
SELECT AVG(Earnings) AS AverageEarnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200; 
SELECT p.Poker_Player_ID, p.Earnings FROM poker_player p ORDER BY p.Earnings DESC; 
SELECT p.Name  FROM poker_player AS pp  JOIN people AS p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings DESC; 
SELECT `Nationality`, COUNT(`People_ID`) AS `Number_of_People` FROM `people` GROUP BY `Nationality`; 
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1; 
SELECT `Nationality`, COUNT(*) AS `Count` FROM `people` GROUP BY `Nationality` ORDER BY `Count` DESC LIMIT 1; 
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2; 
SELECT p.Name, p.Birth_Date  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID  ORDER BY p.Name ASC; 
SELECT p.People_ID, p.Birth_Date FROM people p ORDER BY p.People_ID; 
SELECT People_ID, Nationality FROM people WHERE Nationality <> 'Russia'; 
SELECT `Name` FROM `people` WHERE `Nationality` <> 'Russia'; 
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player); 
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL; 
SELECT COUNT(DISTINCT Nationality) FROM people; 
SELECT COUNT(DISTINCT Nationality) FROM people; 
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE; 
SELECT `contestant_number`, `contestant_name` FROM `CONTESTANTS` ORDER BY `contestant_name` DESC; 
SELECT vote_id, phone_number, state FROM VOTES; 
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE; 
SELECT MAX(created) AS last_vote_date FROM VOTES WHERE state = 'CA'; 
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name != 'Jessie Alloway'; 
SELECT DISTINCT `state`, `created`  FROM `VOTES`; 
SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) >= 2; 
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1; 
SELECT COUNT(*) AS total_votes FROM VOTES WHERE state IN ('NY', 'CA'); 
SELECT COUNT(DISTINCT contestant_number)  FROM CONTESTANTS  WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES); 
SELECT `area_code` FROM `AREA_CODE_STATE` JOIN `VOTES` ON `AREA_CODE_STATE`.`state` = `VOTES`.`state` GROUP BY `area_code` ORDER BY COUNT(`vote_id`) DESC LIMIT 1; 
SELECT V.created, A.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number JOIN AREA_CODE_STATE A ON V.state = A.state WHERE C.contestant_name = 'Tabatha Gehling'; 
SELECT DISTINCT V1.area_code FROM VOTES V1 JOIN VOTES V2 ON V1.phone_number = V2.phone_number WHERE V1.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND V2.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss') AND V1.state = V2.state AND V1.area_code = V2.area_code; 
SELECT `contestant_name` FROM `CONTESTANTS` WHERE `contestant_name` LIKE '%Al%'; 
SELECT Name  FROM country  WHERE IndepYear > 1950; 
SELECT `Name` FROM `country` WHERE `IndepYear` > 1950; 
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'; 
SELECT COUNT(*) FROM country WHERE `GovernmentForm` = 'Republic'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'North America' AND Region = 'Caribbean'; 
SELECT Continent FROM country WHERE Code = 'AIA'; 
SELECT Continent FROM country WHERE Code = 'AIA'; 
SELECT c.Name AS City, co.Region AS Region FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul'; 
SELECT District FROM city WHERE Name = 'Kabul'; 
SELECT Language, MAX(Percentage) as HighestPercentage FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language ORDER BY HighestPercentage DESC LIMIT 1; 
SELECT Language, MAX(Percentage) AS HighestPercentage FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language ORDER BY HighestPercentage DESC LIMIT 1; 
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'; 
SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil'; 
SELECT `Region`, `Population` FROM `country` WHERE `Code` = 'AGO'; 
SELECT Region, Population FROM country WHERE Name = 'Angola'; 
SELECT AVG(`LifeExpectancy`) AS avg_life_expectancy FROM `country` WHERE `Region` = 'Central Africa'; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'; 
SELECT Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy ASC  LIMIT 1; 
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1; 
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS MaxGNP FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia'; 
SELECT      SUM(c.Population) AS TotalPopulationInAsia,      MAX(co.GNP) AS LargestGNPInAsia FROM      city c JOIN      country co ON c.CountryCode = co.Code WHERE      co.Continent = 'Asia'; 
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` = 'Republic'; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'; 
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(`SurfaceArea`) AS TotalSurfaceArea FROM `country` WHERE `Continent` IN ('Asia', 'Europe'); 
SELECT SUM(`Population`)  FROM `city`  WHERE `District` = 'Gelderland'; 
SELECT SUM(`Population`) AS TotalPopulation FROM `city` WHERE `District` = 'Gelderland'; 
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'Nonmetropolitan Territory of The Netherlands'; 
SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE Code2 = 'US'; 
SELECT COUNT(DISTINCT Language) FROM countrylanguage; 
SELECT COUNT(DISTINCT `Language`) FROM `countrylanguage`; 
SELECT COUNT(DISTINCT `GovernmentForm`) AS NumberOfGovernments FROM `country` WHERE `Continent` = 'Africa'; 
SELECT COUNT(DISTINCT `GovernmentForm`) AS DifferentGovernments FROM `country` WHERE `Continent` = 'Africa'; 
SELECT COUNT(*) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'; 
SELECT COUNT(*) AS NumberOfLanguages FROM countrylanguage WHERE CountryCode = 'ABW'; 
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1; 
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1; 
SELECT Continent, COUNT(*) AS NumberOfLanguages FROM country GROUP BY Continent ORDER BY NumberOfLanguages DESC LIMIT 1; 
SELECT COUNT(DISTINCT cl1.CountryCode)  FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'; 
SELECT COUNT(DISTINCT c1.CountryCode)  FROM countrylanguage c1 JOIN countrylanguage c2 ON c1.CountryCode = c2.CountryCode WHERE c1.Language = 'English' AND c2.Language = 'Dutch'; 
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE c.Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English'     INTERSECT     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'French' ); 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'; 
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'; 
SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese' AND c.Continent = 'Asia'; 
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'Dutch'; 
SELECT cl.CountryCode, c.Name AS CountryName, cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN ('Dutch', 'English'); 
SELECT DISTINCT c.Name  FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT DISTINCT c.Name  FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'; 
SELECT `Language`, MAX(`Percentage`) as `MaxPercentage` FROM `countrylanguage` JOIN `country` ON `countrylanguage.CountryCode` = `country.Code` WHERE `country.Continent` = 'Asia' GROUP BY `Language` ORDER BY `MaxPercentage` DESC LIMIT 1; 
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(cl.Percentage) DESC LIMIT 1; 
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' AND NOT EXISTS (     SELECT 1     FROM countrylanguage AS cl2     WHERE cl2.CountryCode != cl.CountryCode       AND cl2.Language = cl.Language ); 
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = 'Republic' AND EXISTS (     SELECT 1     FROM countrylanguage cl2     WHERE cl2.CountryCode = c.Code     GROUP BY cl2.CountryCode     HAVING COUNT(cl2.CountryCode) = 1 ) 
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1; 
SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1; 
SELECT c.Name, c.Population, co.LifeExpectancy FROM country AS co JOIN city AS ci ON co.Code = ci.CountryCode WHERE co.Continent = 'Asia' AND co.SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Asia' ) ORDER BY co.SurfaceArea DESC LIMIT 1; 
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1; 
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English'     AND IsOfficial = 'F' ); 
SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'F' ); 
SELECT SUM(c.Population) AS TotalPopulation FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL; 
SELECT COUNT(c.ID)  FROM city c  JOIN country co ON c.CountryCode = co.Code  LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode  WHERE cl.Language != 'English' OR cl.Language IS NULL; 
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'; 
SELECT c.Name AS Country, c.SurfaceArea FROM country AS c WHERE c.Continent = 'Europe' AND c.SurfaceArea > (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Europe' ); 
SELECT c.Name FROM country AS c WHERE c.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'); 
SELECT c.Name, c.Population FROM country c WHERE c.Continent = 'Africa'   AND c.Population < (     SELECT MIN(Population)     FROM country     WHERE Continent = 'Asia'   ); 
SELECT c.Name AS Country, c.Population FROM country c WHERE c.Continent = 'Africa' AND c.Population <      (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'); 
SELECT c.Name FROM country c WHERE c.Continent = 'Asia'   AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa'   ); 
SELECT c.Name AS CountryName, c.Population FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa' ); 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.Language IS NULL; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.Language IS NULL; 
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT DISTINCT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial != 'T' AND c.GovernmentForm != 'Republic'; 
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' LEFT JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.IsOfficial = 'T' AND cl2.Language = 'Republic' WHERE cl.CountryCode IS NULL AND cl2.CountryCode IS NULL; 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F'; 
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'; 
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country); 
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1; 
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1; 
SELECT `Name`, `Population`, `HeadOfState` FROM `country` ORDER BY `SurfaceArea` DESC LIMIT 1; 
SELECT c.Name AS CountryName, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(cl.Language) >= 3; 
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(cl.Language) > 2; 
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District; 
SELECT      c.District,      COUNT(*) AS NumberOfCities,      AVG(city.Population) AS AvgPopulation FROM      city c GROUP BY      c.District HAVING      AVG(city.Population) > (SELECT AVG(Population) FROM city) 
SELECT      c.GovernmentForm,      SUM(co.Population) AS TotalPopulation FROM      country co JOIN      countrylanguage cl ON co.Code = cl.CountryCode WHERE      cl.IsOfficial = 'T' AND     co.LifeExpectancy > 72 GROUP BY      c.GovernmentForm 
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm; 
SELECT      c.Continent,      AVG(co.LifeExpectancy) AS AvgLifeExpectancy,      SUM(co.Population) AS TotalPopulation FROM      country co GROUP BY      c.Continent HAVING      AVG(co.LifeExpectancy) < 72; 
SELECT      c.Continent,      SUM(co.Population) AS TotalPopulation,      AVG(co.LifeExpectancy) AS AverageLifeExpectancy FROM      country co JOIN      city ci ON co.Code = ci.CountryCode GROUP BY      c.Continent HAVING      AVG(co.LifeExpectancy) < 72; 
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5; 
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Name  FROM country  ORDER BY Population  LIMIT 3; 
SELECT Name  FROM country  ORDER BY Population ASC  LIMIT 3; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'; 
SELECT Name FROM country WHERE Continent = 'Europe' AND Population >= 80000; 
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000; 
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000; 
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000; 
SELECT Name, Population FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Name  FROM city  WHERE Population BETWEEN 160000 AND 900000; 
SELECT Language, COUNT(*) as CountryCount FROM countrylanguage GROUP BY Language ORDER BY CountryCount DESC LIMIT 1; 
SELECT Language, COUNT(*) AS CountryCount FROM countrylanguage GROUP BY Language ORDER BY CountryCount DESC LIMIT 1; 
SELECT cl.CountryCode, cl.Language, MAX(cl.Percentage) AS MaxPercentage FROM countrylanguage cl JOIN (     SELECT CountryCode     FROM countrylanguage     GROUP BY CountryCode ) AS SubQuery ON cl.CountryCode = SubQuery.CountryCode GROUP BY cl.CountryCode, cl.Language ORDER BY MaxPercentage DESC, cl.CountryCode LIMIT 1; 
SELECT c.Code, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code); 
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' ); 
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'; 
SELECT CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  ORDER BY Percentage DESC  LIMIT 1; 
SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` = 'Spanish' AND `IsOfficial` = 'T' GROUP BY `CountryCode` HAVING COUNT(`CountryCode`) = (SELECT MAX(`Count`) FROM (     SELECT `CountryCode`, COUNT(`CountryCode`) AS `Count`     FROM `countrylanguage`     WHERE `IsOfficial` = 'T'     GROUP BY `CountryCode` ) AS SubQuery) 
SELECT COUNT(*) FROM conductor; 
SELECT COUNT(*) FROM conductor; 
SELECT `Conductor_ID`, `Year_of_Work` FROM `conductor` ORDER BY `Year_of_Work` ASC; 
SELECT Name FROM conductor ORDER BY Year_of_Work; 
SELECT `Name` FROM `conductor` WHERE `Nationality` != 'USA'; 
SELECT `Name` FROM `conductor` WHERE `Nationality` != 'USA'; 
SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC; 
SELECT `Record_Company`, `Year_of_Founded` FROM `orchestra` ORDER BY `Year_of_Founded` DESC; 
SELECT AVG(`Attendance`) AS Average_Attendance FROM `show`; 
SELECT AVG(`Attendance`) AS Average_Attendance FROM `show`; 
SELECT MAX(`Share`) AS Max_Share, MIN(`Share`) AS Min_Share FROM `performance` WHERE `Type` <> 'Live final'; 
SELECT MAX(`Share`) AS MaxShare, MIN(`Share`) AS MinShare FROM `performance` WHERE `Type` <> 'Live final'; 
SELECT COUNT(DISTINCT Nationality) FROM conductor; 
SELECT COUNT(DISTINCT Nationality) FROM conductor; 
SELECT `Conductor_ID`, `Year_of_Work` FROM `conductor` ORDER BY `Year_of_Work` DESC; 
SELECT c.Conductor_ID, c.Year_of_Work FROM conductor c ORDER BY c.Year_of_Work DESC; 
SELECT Name FROM conductor WHERE `Year_of_Work` = (SELECT MAX(`Year_of_Work`) FROM conductor); 
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor); 
SELECT c.Name, o.Record_Company FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID; 
SELECT c.Name AS ConductorName, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1; 
SELECT c.Name FROM conductor c JOIN performance p1 ON c.Conductor_ID = p1.Orchestra_ID JOIN orchestra o1 ON p1.Orchestra_ID = o1.Conductor_ID JOIN performance p2 ON c.Conductor_ID = p2.Orchestra_ID JOIN orchestra o2 ON p2.Orchestra_ID = o2.Conductor_ID WHERE o1.Orchestra_ID <> o2.Orchestra_ID GROUP BY c.Name HAVING COUNT(DISTINCT o1.Orchestra_ID) > 1; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1; 
SELECT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008; 
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008; 
SELECT `Record_Company`, COUNT(`Orchestra_ID`) AS `Number_of_Orchestras` FROM `orchestra` GROUP BY `Record_Company`; 
SELECT `Record_Company`, COUNT(`Orchestra_ID`) AS `Number_of_Orchestras` FROM `orchestra` GROUP BY `Record_Company`; 
SELECT `Major_Record_Format`, COUNT(`Major_Record_Format`) AS Format_Count FROM `orchestra` GROUP BY `Major_Record_Format` ORDER BY Format_Count ASC; 
SELECT `Major_Record_Format`, COUNT(`Major_Record_Format`) as Frequency FROM `orchestra` GROUP BY `Major_Record_Format` ORDER BY Frequency DESC; 
SELECT `Record_Company`, COUNT(`Orchestra_ID`) AS `Orchestra_Count` FROM `orchestra` GROUP BY `Record_Company` ORDER BY `Orchestra_Count` DESC LIMIT 1; 
SELECT `Record_Company`, COUNT(`Record_Company`) as `Count` FROM `orchestra` GROUP BY `Record_Company` ORDER BY `Count` DESC LIMIT 1; 
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL; 
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL; 
SELECT o.Record_Company FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID WHERE o.Year_of_Founded < 2003 UNION SELECT o.Record_Company FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID WHERE o.Year_of_Founded > 2003; 
SELECT DISTINCT o.Record_Company FROM orchestra o JOIN (     SELECT `Orchestra_ID`     FROM orchestra     WHERE `Year_of_Founded` < 2003 ) AS o_before_2003 ON o.Orchestra_ID = o_before_2003.Orchestra_ID JOIN (     SELECT `Orchestra_ID`     FROM orchestra     WHERE `Year_of_Founded` > 2003 ) AS o_after_2003 ON o.Orchestra_ID = o_after_2003.Orchestra_ID; 
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD'); 
SELECT COUNT(*)  FROM orchestra  WHERE `Major_Record_Format` IN ('CD', 'DVD'); 
SELECT o.`Year_of_Founded` FROM `orchestra` o JOIN `performance` p ON o.`Orchestra_ID` = p.`Orchestra_ID` GROUP BY o.`Orchestra_ID` HAVING COUNT(p.`Performance_ID`) > 1; 
SELECT o.`Year_of_Founded` FROM `orchestra` o JOIN `performance` p ON o.`Orchestra_ID` = p.`Orchestra_ID` GROUP BY o.`Orchestra_ID` HAVING COUNT(p.`Performance_ID`) > 1; 
SELECT COUNT(*) FROM Highschooler; 
SELECT COUNT(*) FROM Highschooler; 
SELECT name, grade FROM Highschooler; 
SELECT name, grade FROM Highschooler; 
SELECT grade FROM Highschooler; 
SELECT `grade` FROM `Highschooler`; 
SELECT grade  FROM Highschooler  WHERE name = 'Kyle'; 
SELECT grade  FROM Highschooler  WHERE name = 'Kyle'; 
SELECT name  FROM Highschooler  WHERE grade = 10; 
SELECT name FROM Highschooler WHERE grade = 10; 
SELECT ID FROM Highschooler WHERE name = 'Kyle'; 
SELECT ID FROM Highschooler WHERE name = 'Kyle'; 
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10); 
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10); 
SELECT grade, COUNT(*) AS `number_of_students` FROM Highschooler GROUP BY grade; 
SELECT `grade`, COUNT(`ID`) AS `count_by_grade` FROM `Highschooler` GROUP BY `grade`; 
SELECT `grade`, COUNT(*) AS `number_of_students` FROM `Highschooler` GROUP BY `grade` ORDER BY `number_of_students` DESC LIMIT 1; 
SELECT grade, COUNT(*) AS student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1; 
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4; 
SELECT `grade` FROM `Highschooler` GROUP BY `grade` HAVING COUNT(`ID`) >= 4; 
SELECT H.ID, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID; 
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID; 
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID; 
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name; 
SELECT h.name, COUNT(f.friend_id) AS friend_count FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY friend_count DESC LIMIT 1; 
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY num_friends DESC LIMIT 1; 
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name HAVING COUNT(f.friend_id) >= 3; 
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3; 
SELECT h.name  FROM Highschooler h JOIN Friend f ON h.ID = f.student_id  WHERE h.name = 'Kyle' AND f.friend_id = h.ID; 
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle'; 
SELECT COUNT(f.friend_id)  FROM `Friend` f  JOIN `Highschooler` h ON f.student_id = h.ID  WHERE h.name = 'Kyle'; 
SELECT COUNT(f.friend_id)  FROM `Friend` f  JOIN `Highschooler` h ON f.student_id = h.ID  WHERE h.name = 'Kyle'; 
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) 
SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id WHERE F.student_id IS NULL; 
SELECT h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL; 
SELECT DISTINCT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.liked_id; 
SELECT h.ID FROM Highschooler h JOIN Friend f1 ON h.ID = f1.student_id JOIN Friend f2 ON h.ID = f2.friend_id JOIN Likes l1 ON h.ID = l1.student_id JOIN Likes l2 ON h.ID = l2.liked_id GROUP BY h.ID HAVING COUNT(DISTINCT f1.friend_id) > 0 AND COUNT(DISTINCT l2.liked_id) > 0; 
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id GROUP BY H.name; 
SELECT H1.name FROM Highschooler H1 JOIN Friend F1 ON H1.ID = F1.student_id JOIN Likes L1 ON H1.ID = L1.student_id WHERE EXISTS (SELECT 1 FROM Friend F2 WHERE F1.student_id = F2.friend_id) AND EXISTS (SELECT 1 FROM Likes L2 WHERE F1.student_id = L2.liked_id); 
SELECT `student_id`, COUNT(`liked_id`) AS `like_count` FROM `Likes` GROUP BY `student_id`; 
SELECT student_id, COUNT(*) as likes_count FROM Likes GROUP BY student_id; 
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name; 
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name; 
SELECT H.name, COUNT(L.liked_id) AS likes_count FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.name ORDER BY likes_count DESC LIMIT 1; 
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name ORDER BY COUNT(L.liked_id) DESC LIMIT 1; 
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name HAVING COUNT(L.liked_id) >= 2; 
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) >= 2; 
SELECT H.name FROM Highschooler H JOIN Friend F1 ON H.ID = F1.student_id JOIN Friend F2 ON H.ID = F2.student_id AND F1.friend_id = F2.friend_id WHERE H.grade > 5 GROUP BY H.name HAVING COUNT(F1.friend_id) >= 2; 
SELECT H.name FROM Highschooler H JOIN (     SELECT F.student_id     FROM Friend F     GROUP BY F.student_id     HAVING COUNT(F.friend_id) >= 2 ) AS FriendsWithTwoOrMore ON H.ID = FriendsWithTwoOrMore.student_id WHERE H.grade > 5; 
SELECT COUNT(*) AS `likes_count` FROM `Highschooler` h JOIN `Likes` l ON h.ID = l.student_id WHERE h.name = 'Kyle'; 
SELECT COUNT(*) AS `likes_count` FROM `Highschooler` AS h LEFT JOIN `Likes` AS l ON h.ID = l.student_id WHERE h.name = 'Kyle'; 
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend); 
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (     SELECT student_id FROM Friend     UNION     SELECT liked_id FROM Likes ); 
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT MIN(grade) AS LowestGrade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend); 
SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.state = P.state WHERE O.state IS NOT NULL AND P.state IS NOT NULL; 
SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.state = P.state; 
SELECT AVG(AGE) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments); 
SELECT AVG(AGE) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments); 
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.zip_code IN ('43129', '84515') UNION SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2; 
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.zip_code IN ('46201', '46202', '46203', '46204', '46205', '46206', '46207', '46208', '46209', '46210', '46211', '46212', '46213', '46214', '46215', '46216', '46217', '46218', '46219', '46220', '46221', '46222', '46223', '46224', '46225', '46226', '46227', '46228', '46229', '46230', '46231', '46232', '46233', '46234', '46235', '46236', '46237', '46238', '46239', '46240', '46241', '46242', '46243', '46244', '46245', '46246', '46247', '46248', '46249', '46250', '46251', '46252', '46253', '46254', '46255', '46256', '46257', '46258', '46259', '46260', '46261', '46262', '46263', '46264', '46265', '46266', '46267', '46268', '46269', '46270', '46271', '46272', '46273', '46274', '46275', '46276', '46277', '46278', '46279', '46280', '46281', '46282', '46283', '46284', '46285', '46286', '46287', '46288', '46289', '46290', '46291', '46292', '46293', '46294', '46295', '46296', '46297',
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000; 
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000; 
SELECT DISTINCT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) AS first_names WHERE first_name NOT IN (SELECT name FROM Dogs); 
SELECT DISTINCT o.first_name, p.first_name FROM Owners o CROSS JOIN Professionals p WHERE NOT EXISTS (     SELECT 1     FROM Dogs d     WHERE d.name = o.first_name OR d.name = p.first_name ) UNION SELECT DISTINCT p.first_name, p.first_name FROM Professionals p WHERE NOT EXISTS (     SELECT 1     FROM Dogs d     WHERE d.name = p.first_name ) ORDER BY 1, 2; 
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL; 
SELECT p.professional_id, p.first_name, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL; 
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2; 
SELECT p.professional_id, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.first_name HAVING COUNT(t.treatment_id) >= 2; 
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; 
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1; 
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT `Treatment_Types`.`treatment_type_description`, SUM(`Treatments`.`cost_of_treatment`) AS `total_cost` FROM `Treatment_Types` JOIN `Treatments` ON `Treatment_Types`.`treatment_type_code` = `Treatments`.`treatment_type_code` GROUP BY `Treatment_Types`.`treatment_type_code` ORDER BY `total_cost` ASC LIMIT 1; 
SELECT `treatment_type_description` FROM `Treatment_Types` JOIN `Treatments` ON `Treatment_Types`.`treatment_type_code` = `Treatments`.`treatment_type_code` GROUP BY `treatment_type_description` ORDER BY SUM(`cost_of_treatment`) ASC LIMIT 1; 
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; 
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (     SELECT professional_id, COUNT(DISTINCT treatment_type_code) AS type_count     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) AS subq ON p.professional_id = subq.professional_id; 
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN (     SELECT professional_id, COUNT(DISTINCT `treatment_type_code`) AS treatment_types_count     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT `treatment_type_code`) >= 2 ) AS subquery ON p.professional_id = subquery.professional_id; 
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments); 
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments); 
SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id; 
SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id; 
SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code; 
SELECT T.cost_of_treatment, TType.treatment_type_description FROM Treatments T JOIN Treatment_Types TType ON T.treatment_type_code = TType.treatment_type_code; 
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code; 
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id; 
SELECT D.name AS Dog_Name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id JOIN Breeds B ON D.breed_code = B.breed_code WHERE B.breed_name = (     SELECT breed_name     FROM Breeds     GROUP BY breed_name     ORDER BY COUNT(*) ASC     LIMIT 1 ); 
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN (     SELECT breed_code, COUNT(*) as breed_count     FROM Dogs     GROUP BY breed_code     ORDER BY breed_count ASC     LIMIT 1 ) rarest_breed ON d.breed_code = rarest_breed.breed_code JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.zip_code LIKE '22%'; 
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'; 
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs); 
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs); 
SELECT `email_address` FROM `Professionals` WHERE `state` = 'Hawaii' OR `state` = 'Wisconsin'; 
SELECT `email_address` FROM `Professionals` WHERE `cell_number` LIKE '%HI%' OR `cell_number` LIKE '%WI%'; 
SELECT date_arrived, date_departed FROM Dogs; 
SELECT `date_arrived`, `date_departed` FROM `Dogs`; 
SELECT COUNT(DISTINCT d.dog_id)  FROM Dogs d  JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT COUNT(DISTINCT d.dog_id)  FROM Dogs d  JOIN Treatments t ON d.dog_id = t.dog_id; 
SELECT COUNT(DISTINCT professional_id)  FROM Treatments; 
SELECT COUNT(DISTINCT professional_id)  FROM Treatments; 
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE 'West%'; 
SELECT `role_code`, `street`, `city`, `state` FROM `Professionals` WHERE `city` LIKE '%West%'; 
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%'; 
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%'; 
SELECT COUNT(*) AS dogs_below_average_age FROM Dogs WHERE CAST(SUBSTRING(age, 1, LENGTH(age) - 2) AS UNSIGNED) <      (SELECT AVG(CAST(SUBSTRING(age, 1, LENGTH(age) - 2) AS UNSIGNED))      FROM Dogs); 
SELECT COUNT(*) AS below_average_age_count FROM Dogs WHERE CAST(age AS UNSIGNED) < (SELECT AVG(CAST(age AS UNSIGNED)) FROM Dogs); 
SELECT `cost_of_treatment` FROM `Treatments` ORDER BY `date_of_treatment` DESC LIMIT 1; 
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1; 
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments); 
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments); 
SELECT COUNT(DISTINCT o.owner_id) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL; 
SELECT COUNT(DISTINCT o.owner_id) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL; 
SELECT COUNT(DISTINCT p.professional_id) AS uninvolved_professionals FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL; 
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments); 
SELECT `name`, `age`, `weight` FROM `Dogs` WHERE `abandoned_yn` = '1'; 
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1'; 
SELECT AVG(CAST(`age` AS UNSIGNED)) AS average_age FROM `Dogs`; 
SELECT AVG(STR_TO_DATE(age, '%Y')) AS average_age FROM Dogs; 
SELECT MAX(TIMESTAMPDIFF(YEAR, date_of_birth, NOW())) AS max_age FROM Dogs; 
SELECT MAX(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS oldest_dog_age FROM Dogs; 
SELECT `charge_type`, `charge_amount` FROM `Charges`; 
SELECT `charge_type`, `charge_amount` FROM `Charges`; 
SELECT MAX(`charge_amount`) AS max_charge_amount FROM `Charges`; 
SELECT `charge_amount` FROM `Charges` ORDER BY `charge_amount` DESC LIMIT 1; 
SELECT email_address, cell_number, home_phone FROM Professionals; 
SELECT email_address, cell_number, home_phone  FROM Professionals; 
SELECT b.breed_name, s.size_description FROM Breeds b JOIN Sizes s ON b.size_code = s.size_code; 
SELECT DISTINCT `breed_code`, `size_code` FROM `Dogs`; 
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code; 
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code; 
SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) FROM singer; 
SELECT Singer_ID, Birth_Year, Net_Worth_Millions FROM singer ORDER BY Net_Worth_Millions ASC; 
SELECT s.Singer_ID, s.Net_Worth_Millions FROM singer s ORDER BY s.Net_Worth_Millions ASC; 
SELECT `Birth_Year`, `Citizenship` FROM `singer`;
SELECT `Birth_Year`, `Citizenship` FROM `singer`; 
SELECT Name  FROM singer  WHERE Citizenship <> 'France'; 
SELECT Name FROM singer WHERE Citizenship <> 'France'; 
SELECT `Singer_ID`, `Birth_Year` FROM `singer` WHERE `Birth_Year` = 1948 OR `Birth_Year` = 1949; 
SELECT s.Singer_ID  FROM singer s  WHERE s.Birth_Year IN (1948, 1949); 
SELECT `Name`  FROM `singer` ORDER BY `Net_Worth_Millions` DESC LIMIT 1; 
SELECT s.Name FROM singer s JOIN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     ORDER BY SUM(Highest_Position) DESC     LIMIT 1 ) AS most_valuable_singer ON s.Singer_ID = most_valuable_singer.Singer_ID; 
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS Total FROM singer GROUP BY Citizenship ORDER BY Total DESC LIMIT 1; 
SELECT `Citizenship`, MAX(`Net_Worth_Millions`)  FROM `singer`  GROUP BY `Citizenship`; 
SELECT Citizenship, MAX(Net_Worth) AS Max_Net_Worth FROM singer JOIN (SELECT Singer_ID, MAX(Net_Worth) AS Net_Worth FROM singer GROUP BY Singer_ID) sw ON singer.Singer_ID = sw.Singer_ID GROUP BY Citizenship; 
SELECT s.Title, si.Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID; 
SELECT s.Title, si.Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID; 
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000; 
SELECT DISTINCT s.Singer_ID, si.Singer_ID, si.Birth_Year, si.Net_Worth_Millions FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID WHERE s.Sales > 300000; 
SELECT s.Name FROM singer s JOIN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     HAVING COUNT(*) > 1 ) AS subquery ON s.Singer_ID = subquery.Singer_ID; 
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name HAVING COUNT(so.Song_ID) > 1; 
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID; 
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name; 
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL; 
SELECT s.Name AS Sname FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL; 
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship; 
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955; 
SELECT COUNT(*) FROM `Other_Available_Features`; 
SELECT `feature_type_name` FROM `Ref_Feature_Types` WHERE `feature_type_code` = 'Amenity' AND `feature_name` = 'AirCon'; 
SELECT `property_type_description` FROM `Ref_Property_Types` JOIN `Properties` ON `Ref_Property_Types`.`property_type_code` = `Properties`.`property_type_code`; 
SELECT P.property_id, PT.property_type_code FROM Properties P JOIN Ref_Property_Types PT ON P.property_type_code = PT.property_type_code WHERE PT.property_type_code IN ('House', 'Apartment') AND P.property_id IN (     SELECT OPF.property_id     FROM Other_Property_Features OPF     GROUP BY OPF.property_id     HAVING COUNT(OPF.feature_id) > 1 ); 

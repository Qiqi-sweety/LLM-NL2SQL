SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) AS total_singers FROM singer; 
SELECT s.Name, s.Country, s.Age  FROM singer AS s  ORDER BY s.Age ASC; 
SELECT s.Singer_ID, s.Country, s.Age  FROM singer s  ORDER BY s.Age DESC; 
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE nationality = 'France'; 
SELECT AVG(age), MIN(age), MAX(age)  FROM singer  WHERE nationality = 'French'; 
SELECT s.Name, ss.Release_Year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN song ss ON s.Singer_ID = ss.Singer_ID WHERE s.Age = (SELECT MIN(Age) FROM singer) ORDER BY ss.Release_Year ASC LIMIT 1; 
SELECT songs.Name, songs.Release_Year FROM songs JOIN singer ON songs.Singer_ID = singer.Singer_ID JOIN (     SELECT Singer_ID     FROM singer     ORDER BY birth_year     LIMIT 1 ) youngest_singer ON youngest_singer.Singer_ID = singer.Singer_ID; 
SELECT DISTINCT c.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert co ON sic.concert_ID = co.concert_ID JOIN stadium st ON co.Stadium_ID = st.Stadium_ID JOIN country c ON st.Country_ID = c.Country_ID WHERE TIMESTAMPDIFF(YEAR, s.BirthDate, CURDATE()) > 20; 
SELECT DISTINCT country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN (     SELECT DISTINCT concert_ID     FROM concert     JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID ) AS valid_concerts ON singer_in_concert.concert_ID = valid_concerts.concert_ID WHERE TIMESTAMPDIFF(YEAR, birthdate, CURDATE()) > 20; 
SELECT singer.Singer_ID, COUNT(singer.Singer_ID) AS NumberOfSingers FROM singer GROUP BY singer.Singer_ID; 
SELECT      s.Singer_ID,      COUNT(sc.Singer_ID) AS num_singers FROM      singer s LEFT JOIN      singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY      s.Singer_ID; 
SELECT DISTINCT si.Singer_ID, s.Name FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT s.Singer_ID, s.Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer) 
SELECT s.Stadium_ID, s1.name FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID JOIN stadium s1 ON s.Stadium_ID = s1.Stadium_ID WHERE s1.capacity BETWEEN 5000 AND 10000; 
SELECT s.Singer_ID, s.Name, st.Stadium_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN stadium st ON c.Stadium_ID = st.Stadium_ID WHERE st.Capacity BETWEEN 5000 AND 10000; 
SELECT MAX(capacity), AVG(capacity) FROM stadium; 
SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS maximum_capacity FROM stadium; 
SELECT s.`Stadium_ID`, st.`Stadium_Name`, st.`Capacity` FROM `singer_in_concert` sic JOIN `concert` c ON sic.`concert_ID` = c.`concert_ID` JOIN `stadium` st ON c.`Stadium_ID` = st.`Stadium_ID` GROUP BY s.`Stadium_ID`, st.`Stadium_Name`, st.`Capacity` ORDER BY COUNT(sic.`Singer_ID`) DESC LIMIT 1; 
SELECT s.Stadium_ID, st.Capacity FROM stadium st JOIN (     SELECT Stadium_ID, AVG(Stadium_ID) AS AvgCapacity     FROM concert     GROUP BY Stadium_ID ) AS avg_stadium ON st.Stadium_ID = avg_stadium.AvgCapacity ORDER BY avg_stadium.AvgCapacity DESC LIMIT 1; 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE `Stadium_ID` IN (1, 2, 3, 4, 5)); 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Stadium_ID BETWEEN 1 AND 5) AND concert_ID IN (SELECT concert_ID FROM singer_in_concert                     WHERE Singer_ID IN (SELECT Singer_ID FROM singer)); 
SELECT `stadium`.`Stadium_ID`, COUNT(`concert`.`concert_ID`) AS `Number_of_Concerts` FROM `stadium` LEFT JOIN `concert` ON `stadium`.`Stadium_ID` = `concert`.`Stadium_ID` GROUP BY `stadium`.`Stadium_ID`; 
SELECT `stadium`.`Stadium_ID`, COUNT(`concert`.`concert_ID`) AS `number_of_concerts` FROM `stadium` LEFT JOIN `concert` ON `stadium`.`Stadium_ID` = `concert`.`Stadium_ID` GROUP BY `stadium`.`Stadium_ID`; 
SELECT s.Stadium_ID, COUNT(c.concert_ID) AS num_concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE YEAR(c.concert_ID) >= 2014 GROUP BY s.Stadium_ID ORDER BY num_concerts DESC LIMIT 1; 
SELECT s.Stadium_ID, s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IN (     SELECT concert_ID     FROM concert     WHERE YEAR(concert_date) > 2013 ) GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1; 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT YEAR(MAX(concert_date)) AS YearWithMostConcerts FROM concert WHERE concert_date IS NOT NULL GROUP BY YEAR(concert_date) ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT Stadium_ID FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert); 
SELECT DISTINCT S1.Country FROM singer S1 JOIN singer S2 ON S1.Country = S2.Country WHERE S1.Age > 40 AND S2.Age < 30; 
SELECT s.Stadium_ID FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID LEFT JOIN singer si ON sic.Singer_ID = si.Singer_ID WHERE YEAR(c.concert_ID) <> 2014 OR c.concert_ID IS NULL; 
SELECT s.Stadium_ID FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL; 
SELECT c.concert_ID, c.Stadium_ID, COUNT(sc.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_ID; 
SELECT c.concert_ID, c.Stadium_ID, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_ID; 
SELECT s.Singer_ID, COUNT(sc.concert_ID) AS concert_count FROM singer s LEFT JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Singer_ID; 
SELECT s.Singer_ID, si.Singer_Name, COUNT(c.concert_ID) AS num_concerts FROM singer s JOIN singer_in_concert si ON s.Singer_ID = si.Singer_ID JOIN concert c ON si.concert_ID = c.concert_ID GROUP BY s.Singer_ID, si.Singer_Name; 
SELECT s.Singer_ID FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE concert_ID IN (SELECT concert_ID FROM singer_in_concert WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_release_year = '2014')))); 
SELECT s.Singer_ID FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE c.concert_ID IN (SELECT concert_ID FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Stadium_ID = 1)); 
SELECT s.Singer_ID, s.Nation FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN song sng ON sng.Singer_ID = s.Singer_ID WHERE sng.Name LIKE '%Hey%'; 
SELECT s.Singer_ID, s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN song sng ON sng.Singer_ID = s.Singer_ID WHERE sng.Title LIKE '%Hey%'; 
SELECT s.Stadium_ID, st.Location FROM stadium st JOIN concert c ON st.Stadium_ID = c.Stadium_ID JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID WHERE sic.Singer_ID IN (     SELECT sic.Singer_ID     FROM singer_in_concert sic     JOIN concert c ON sic.concert_ID = c.concert_ID     WHERE YEAR(c.concert_ID) IN (2014, 2015)     GROUP BY sic.Singer_ID     HAVING COUNT(DISTINCT YEAR(c.concert_ID)) = 2 ) 
SELECT s.Stadium_ID, st.Location FROM stadium s JOIN concert c1 ON s.Stadium_ID = c1.Stadium_ID JOIN concert c2 ON s.Stadium_ID = c2.Stadium_ID AND YEAR(c2.Date) = 2015 WHERE YEAR(c1.Date) = 2014 GROUP BY s.Stadium_ID, st.Location HAVING COUNT(DISTINCT c1.concert_ID) > 0 AND COUNT(DISTINCT c2.concert_ID) > 0; 
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM stadium                       ORDER BY Stadium_ID DESC                       LIMIT 1); 
SELECT COUNT(*) AS num_concerts FROM concert WHERE Stadium_ID = (SELECT MAX(Stadium_ID) FROM stadium); 
SELECT COUNT(*) FROM `Pets` WHERE PetID IN (SELECT `PetID` FROM `Has_Pet` WHERE `StuID` IN (SELECT `StuID` FROM `Student`)); 
SELECT COUNT(*) FROM `Pets` WHERE `PetID` IN (SELECT `PetID` FROM `Has_Pet` JOIN `Student` ON `Has_Pet.StuID` = `Student.StuID`) AND `PetID` IN (SELECT `PetID` FROM `Pets` WHERE `weight` > 10); 
SELECT p.Weight FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetID = (SELECT PetID FROM Pets ORDER BY Weight ASC LIMIT 1); 
SELECT MIN(weight) AS YoungestDogWeight FROM Pets; 
SELECT p.PetID, MAX(wt.Weight) AS MaxWeight FROM Pets p JOIN Weight wt ON p.PetID = wt.PetID GROUP BY p.PetID; 
SELECT P.PetID, P.Type, MAX(P.Weight) FROM Pets P GROUP BY P.Type; 
SELECT COUNT(`PetID`)  FROM `Has_Pet` WHERE `StuID` IN (SELECT `StuID` FROM `Student` WHERE `StuID` > 20); 
SELECT COUNT(DISTINCT HP.PetID) AS NumberOfPets FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID WHERE S.StuID IS NOT NULL; 
SELECT COUNT(*)  FROM `Student` AS s JOIN `Has_Pet` AS hp ON s.`StuID` = hp.`StuID` JOIN `Pets` AS p ON hp.`PetID` = p.`PetID` WHERE s.`StuID` IN (SELECT `StuID` FROM `Student` WHERE `sex` = 'F') AND p.`PetID` IN (SELECT `PetID` FROM `Pets` WHERE `type` = 'dog'); 
SELECT COUNT(*)  FROM `Student` s JOIN `Has_Pet` hp ON s.StuID = hp.StuID JOIN `Pets` p ON hp.PetID = p.PetID WHERE s.StuID IS NOT NULL AND p.PetID = 2002; 
SELECT COUNT(DISTINCT PetID) AS NumberOfDistinctPets FROM `Pets`; 
SELECT COUNT(DISTINCT PetID) FROM Pets; 
SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetID IN (2001, 2002); 
SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetID IN (2001, 2002); 
SELECT DISTINCT s.StuID FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Has_Pet hp2 ON s.StuID = hp2.StuID AND hp1.PetID = 2001 AND hp2.PetID = 2002 WHERE EXISTS (     SELECT 1     FROM Has_Pet hp     WHERE hp.StuID = s.StuID AND hp.PetID = 2003 ); 
SELECT DISTINCT S.StuID FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID AND HP1.PetID IN (SELECT PetID FROM Pets WHERE PetName = 'Cat') JOIN Has_Pet HP2 ON S.StuID = HP2.StuID AND HP2.PetID IN (SELECT PetID FROM Pets WHERE PetName = 'Dog'); 
SELECT `Student.StuID`, `Student.Major`, `Student.Age` FROM `Student` LEFT JOIN `Has_Pet` ON `Student.StuID` = `Has_Pet.StuID` LEFT JOIN `Pets` ON `Has_Pet.PetID` = `Pets.PetID` WHERE `Pets.PetID` NOT IN (SELECT `PetID` FROM `Pets` WHERE `PetType` = 'cat') AND `Student.StuID` IS NOT NULL; 
SELECT `Student.StuID`, `Student.Major`, `Student.Age` FROM `Student` LEFT JOIN `Has_Pet` ON `Student.StuID` = `Has_Pet.StuID` LEFT JOIN `Pets` ON `Has_Pet.PetID` = `Pets.PetID` WHERE `Pets.PetID` NOT IN (SELECT `PetID` FROM `Pets` WHERE `PetName` = 'Cat') AND `Student.StuID` IS NOT NULL; 
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetID = 2001)); 
SELECT `Student`.`StuID` FROM `Student` WHERE `StuID` NOT IN (     SELECT `StuID`     FROM `Has_Pet`     JOIN `Pets` ON `Has_Pet`.`PetID` = `Pets`.`PetID`     WHERE `Pets`.`PetID` = 2001 ); 
SELECT s.StuID, s.FirstName, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetName = 'Dog' AND s.StuID NOT IN (     SELECT hp.StuID     FROM Has_Pet hp     JOIN Pets p ON hp.PetID = p.PetID     WHERE p.PetName = 'Cat' ); 
SELECT DISTINCT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetID IN (2001) AND s.StuID NOT IN (     SELECT hp.StuID     FROM Has_Pet hp     JOIN Pets p ON hp.PetID = p.PetID     WHERE p.PetID = 2002 ); 
SELECT P.PetType, P.Weight FROM Pets P JOIN (     SELECT MIN(PetID) as MinPetID     FROM Pets ) as MinPet ON P.PetID = MinPet.MinPetID; 
SELECT P.PetType, P.Weight FROM Pets P JOIN Has_Pet HP ON P.PetID = HP.PetID JOIN Student S ON HP.StuID = S.StuID ORDER BY P.Weight ASC LIMIT 1; 
SELECT PetID, Weight FROM Pets WHERE Age > 1; 
SELECT PetID, PetWeight  FROM Pets  WHERE PetAge > 1; 
SELECT P.PetID, AVG(S.Age) AS AverageAge, MAX(S.Age) AS MaxAge FROM Pets P JOIN Has_Pet HP ON P.PetID = HP.PetID JOIN Student S ON HP.StuID = S.StuID GROUP BY P.PetID; 
SELECT p.PetID, AVG(s.Age) AS AverageAge, MAX(s.Age) AS MaxAge FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID GROUP BY p.PetID; 
SELECT PetID, AVG(weight) AS average_weight FROM Pets GROUP BY PetID; 
SELECT p.PetID, AVG(p.Weight) AS AverageWeight FROM Pets p GROUP BY p.PetID; 
SELECT `Student`.`FirstName`, `Student`.`Age` FROM `Student` JOIN `Has_Pet` ON `Student`.`StuID` = `Has_Pet`.`StuID`; 
SELECT DISTINCT S.StuID, S.StuName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID; 
SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.StuID IN (SELECT StuID FROM Student WHERE last_name = 'Smith'); 
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.StuID = (SELECT StuID FROM Student WHERE `LastName` = 'Smith'); 
SELECT `Student`.`StuID`, COUNT(`Has_Pet`.`PetID`) AS `NumberOfPets` FROM `Student` JOIN `Has_Pet` ON `Student`.`StuID` = `Has_Pet`.`StuID` GROUP BY `Student`.`StuID`; 
SELECT StuID, COUNT(PetID) AS NumberOfPets FROM Has_Pet GROUP BY StuID; 
SELECT s.StuID, s.FirstName, s.Gender FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID, s.FirstName, s.Gender HAVING COUNT(hp.PetID) > 1; 
SELECT s.StuID, s.FirstName, s.Gender FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1; 
SELECT s.StuID, s.StuName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' AND p.Age = 3; 
SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetID = 2003; 
SELECT AVG(StuID) AS average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT AVG(StuID)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet); 
SELECT COUNT(*) FROM continents; 
SELECT COUNT(*) FROM continents; 
SELECT      continents.ContId,      COUNT(countries.CountryId) AS NumberOfCountries FROM      continents LEFT JOIN      countries ON continents.ContId = countries.Continent GROUP BY      continents.ContId; 
SELECT continents.ContId, continents.ContId AS name, COUNT(countries.CountryId) AS country_count FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId; 
SELECT COUNT(*) FROM countries; 
SELECT COUNT(*) FROM countries; 
SELECT cm.Id AS MakerId, cm.Country AS Maker, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Country; 
SELECT car_makers.Id, car_makers.Country, (SELECT COUNT(*) FROM model_list WHERE model_list.Maker = car_makers.Id) AS ModelsCount FROM car_makers; 
SELECT ml.Model  FROM `car_names` cn JOIN `model_list` ml ON cn.Model = ml.Model JOIN `car_makers` cm ON ml.Maker = cm.Id JOIN `countries` co ON cm.Country = co.CountryId JOIN `continents` ct ON co.Continent = ct.ContId WHERE ct.ContId = 2 -- Assuming we are looking for the model with the minimum horsepower from the second continent ORDER BY ml.Model LIMIT 1; 
SELECT ml.Model FROM `car_names` AS cn JOIN `model_list` AS ml ON cn.Model = ml.Model JOIN `car_makers` AS cm ON ml.Maker = cm.Id JOIN `countries` AS c ON cm.Country = c.CountryId JOIN `continents` AS co ON c.Continent = co.ContId JOIN `cars_data` AS cd ON cn.MakeId = cd.Id JOIN (     SELECT `ModelId`, MIN(`Model`) AS Model, MIN(`MakeId`) AS MakeId     FROM `model_list`     GROUP BY `ModelId` ) AS min_hp_model ON ml.ModelId = min_hp_model.ModelId ORDER BY min_hp_model.Model LIMIT 1; 
SELECT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE ml.Model NOT IN (     SELECT ml.Model     FROM model_list ml     JOIN car_names cn ON ml.Model = cn.Model     JOIN cars_data cd ON cn.MakeId = cd.Id     JOIN (         SELECT AVG(weight) AS avg_weight FROM cars_data     ) AS avg_weights     WHERE cd.Id = avg_weights.Id ) 
SELECT ml.Model FROM `model_list` ml JOIN `car_names` cn ON ml.Maker = cn.Model JOIN `cars_data` cd ON cn.MakeId = cd.Id WHERE cd.Id IN (     SELECT Id     FROM `cars_data`     WHERE Id < (SELECT AVG(Id) FROM `cars_data`) ); 
SELECT cm.Country  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  JOIN car_names cn ON ml.Model = cn.Model  WHERE cn.Model LIKE 'chevrolet%' OR cn.Model LIKE 'buick%' OR cn.Model LIKE 'plymouth%' OR cn.Model LIKE 'amc%' OR cn.Model LIKE 'ford%'; 
SELECT DISTINCT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE YEAR('1970-01-01') BETWEEN YEAR(cn.Model) AND YEAR('1970-12-31'); 
SELECT cl.Model, c.Model FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS co ON cm.Country = co.CountryId JOIN continents AS ct ON co.Continent = ct.ContId WHERE ct.ContId = (SELECT MIN(ContId) FROM continents) ORDER BY ml.Model; 
SELECT c.Country, ml.Model FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS co ON cm.Country = co.CountryId JOIN continents AS ct ON co.Continent = ct.ContId WHERE cn.MakeId = 1 ORDER BY cn.ModelId LIMIT 1; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model WHERE ml.Id NOT IN (     SELECT cd.Id     FROM cars_data cd     WHERE cd.Id IS NULL ); 
SELECT DISTINCT `Model` FROM `car_names` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId` WHERE `model_list.Model` NOT IN (     SELECT `Model`     FROM `model_list`     JOIN `car_names` ON `model_list.Model` = `car_names.Model`     JOIN `cars_data` ON `car_names.MakeId` = `cars_data.Id`     WHERE YEAR(`cars_data.Id`) <= 1980 ); 
SELECT      continents.ContId,     COUNT(countries.CountryId) AS MakerCount FROM      continents LEFT JOIN      countries ON continents.ContId = countries.Continent GROUP BY      continents.ContId; 
SELECT continents.ContId, continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.ContId, continents.Continent; 
SELECT c.CountryId, COUNT(*) AS MakerCount FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId ORDER BY MakerCount DESC LIMIT 1; 
SELECT c.CountryId, COUNT(cm.Id) AS MakerCount FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId ORDER BY MakerCount DESC LIMIT 1; 
SELECT car_makers.Country, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Country; 
SELECT cm.Id AS MakerId, cm.Country, COUNT(ml.ModelId) AS NumberOfModels, CONCAT(cm.Country, ' ', cn.Model) AS MakerFullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Country, cn.Model; 
SELECT `cars_data.Id` FROM `car_names` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId` WHERE `car_names.Model` = 'amc hornet sportabout (sw)'; 
SELECT c.Id FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS co ON cm.Country = co.CountryId JOIN continents AS ct ON co.Continent = ct.ContId WHERE cn.Model = 'amc hornet sportabout (sw)'; 
SELECT COUNT(*)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE continents.ContId = (SELECT ContId FROM continents WHERE 'France' = Continent); 
SELECT COUNT(DISTINCT car_makers.Id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.ContId = (SELECT ContId FROM continents WHERE name = 'France'); 
SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE continents.ContId = 1; 
SELECT COUNT(DISTINCT ml.Model) AS ModelCount FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId WHERE co.ContId = 1; 
SELECT AVG(mpg) AS avg_mpg FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE model_list.Model LIKE '%4 cyl%' 
SELECT AVG(mpg) AS avg_mpg FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE model_list.Model LIKE '%4 cyl%'; 
SELECT MIN(weight) AS SmallestWeight FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId JOIN continents AS co ON c.Continent = co.ContId WHERE ml.ModelId = 8 AND YEAR = 1974; 
SELECT MIN(weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE car_names.Model LIKE '1974%' AND model_list.Model LIKE '%8 cyl%' 
SELECT `car_makers`.`Country`, `model_list`.`Model` FROM `car_makers` JOIN `model_list` ON `car_makers`.`Id` = `model_list`.`Maker`; 
SELECT car_makers.Country, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker; 
SELECT c.CountryId, c.Country FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.Country HAVING COUNT(cm.Id) >= 1; 
SELECT c.CountryId, c.Country FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.Country HAVING COUNT(cm.Id) > 0; 
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE CAST(model_list.Model AS INTEGER) > 150; 
SELECT COUNT(*) FROM cars_data WHERE NOT EXISTS (     SELECT 1     FROM car_names     JOIN model_list ON car_names.Model = model_list.Model     JOIN car_makers ON model_list.Maker = car_makers.Id     JOIN countries ON car_makers.Country = countries.CountryId     JOIN continents ON countries.Continent = continents.ContId     WHERE continents.ContId = 1 AND car_names.Model = 'ford' ); 
SELECT car_names.Model, AVG(cars_data.Id) AS AverageWeight FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY car_names.Model; 
SELECT      c.Year,      AVG(cd.Year) AS AverageWeight,      AVG(cd.Year) AS AverageYear FROM      cars_data cd JOIN      car_names cn ON cd.Id = cn.MakeId JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id JOIN      countries co ON cm.Country = co.CountryId JOIN      continents ct ON co.Continent = ct.ContId GROUP BY      c.Year; 
SELECT c.CountryId, COUNT(cm.Id) AS MakerCount FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN continents co ON c.Continent = co.ContId WHERE co.ContId = 2 GROUP BY c.CountryId HAVING COUNT(cm.Id) >= 3; 
SELECT c.CountryId, co.Continent FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.ContId = 2 GROUP BY c.CountryId HAVING COUNT(cm.Id) >= 3; 
SELECT ml.Model, cn.Model AS CarMake, MAX(cars_data.Id) AS MaxHorsepower FROM `model_list` ml JOIN `car_makers` cm ON ml.Maker = cm.Id JOIN `car_names` cn ON ml.Model = cn.Model JOIN `cars_data` cd ON cn.MakeId = cd.Id WHERE ml.Model LIKE '%3 cyl%' GROUP BY ml.Model, cn.Model ORDER BY MaxHorsepower DESC LIMIT 1; 
SELECT ml.Model, c Maker FROM model_list ml JOIN car_makers c ON ml.Maker = c.Id JOIN car_names cn ON ml.Model = cn.Model WHERE ml.Model = 'amc' AND cn.Model = 'chevrolet' ORDER BY ml.ModelId DESC LIMIT 1; 
SELECT ml.Model, MAX(mlg.MPG) AS MaxMPG FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId JOIN (     SELECT Model, AVG(MPG) AS MPG     FROM car_names     GROUP BY Model ) AS mlg ON ml.Model = mlg.Model GROUP BY ml.Model ORDER BY MaxMPG DESC LIMIT 1; 
SELECT ml.Model FROM `model_list` ml JOIN `car_names` cn ON ml.Model = cn.Model JOIN `cars_data` cd ON cn.MakeId = cd.Id JOIN `car_makers` cm ON ml.Maker = cm.Id JOIN `countries` c ON cm.Country = c.CountryId JOIN `continents` co ON c.Continent = co.ContId JOIN (     SELECT `Model`     FROM `model_list`     JOIN `car_names` cn ON `model_list`.Model = cn.Model     JOIN `cars_data` cd ON cn.MakeId = cd.Id     JOIN `car_makers` cm ON `model_list`.Maker = cm.Id     JOIN `countries` c ON cm.Country = c.CountryId     JOIN `continents` co ON c.Continent = co.ContId     ORDER BY ml.Model ) AS mpg_models ON ml.Model = mpg_models.Model WHERE mpg_models.Model = (     SELECT Model     FROM `model_list`     JOIN `car_names` cn ON `model_list`.Model = cn.Model     JOIN `cars_data` cd ON cn.MakeId = cd.Id     JOIN `car_makers` cm ON `model_list`.Maker = cm.Id     JOIN `countries` c ON cm.Country = c.CountryId     JOIN `continents` co ON c.Continent = co.ContId     ORDER BY `model_list`.mpg DESC     LIMIT 1 ); 
SELECT AVG(Horsepower) AS AverageHorsepower FROM car_specs WHERE Year < 1980; 
SELECT AVG(horsepower)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE YEAR(model_list.Model) < 1980; 
SELECT AVG(edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Model = 'volvo'; 
SELECT AVG(edispl)  FROM `model_list`  JOIN `car_makers` ON `model_list`.`Maker` = `car_makers`.`Id`  JOIN `countries` ON `car_makers`.`Country` = `countries`.`CountryId`  JOIN `continents` ON `countries`.`Continent` = `continents`.`ContId`  WHERE `model_list`.`Model` = 'volvo'; 
SELECT      cylinder_count,     MAX(Accelerate) AS Max_Accelerate FROM (     SELECT          car_names.Model,         car_names.MakeId,         car_makers.Country,         countries.Continent,         COUNT(cars_data.Id) AS cylinder_count,         MAX(model_list.Accelerate) AS Accelerate     FROM          car_names     JOIN          model_list ON car_names.Model = model_list.Model     JOIN          car_makers ON model_list.Maker = car_makers.Id     JOIN          countries ON car_makers.Country = countries.CountryId     JOIN          cars_data ON car_names.MakeId = cars_data.Id     GROUP BY          cylinder_count ) AS cylinder_data GROUP BY      cylinder_count; 
SELECT MAX(`Accelerate`)  FROM `cars_data` JOIN `car_names` ON `cars_data.Id` = `car_names.MakeId` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId`; 
SELECT ml.Model, COUNT(*) AS ModelVersionCount FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model GROUP BY ml.Model ORDER BY ModelVersionCount DESC LIMIT 1; 
SELECT `model_list.Model`, COUNT(`model_list.ModelId`) AS version_count FROM `model_list` GROUP BY `model_list.Model` ORDER BY version_count DESC LIMIT 1; 
SELECT COUNT(*)  FROM cars_data  WHERE (SELECT cylinder_count FROM car_names JOIN model_list ON car_names.Model = model_list.Model        JOIN car_makers ON model_list.Maker = car_makers.Id        JOIN countries ON car_makers.Country = countries.CountryId        JOIN continents ON countries.Continent = continents.ContId) > 4; 
SELECT COUNT(*)  FROM `cars_data`  JOIN `car_names` ON `cars_data.Id` = `car_names.MakeId` JOIN `model_list` ON `car_names.Model` = `model_list.Model` WHERE `model_list.Model` IN ('chevrolet', 'buick', 'plymouth', 'amc', 'ford') AND (SELECT COUNT(`cylinder`) FROM `model_list` WHERE `Model` = `model_list.Model` AND `cylinder` > 4) > 0; 
SELECT COUNT(*)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE continents.ContId = 1; 
SELECT COUNT(*) FROM `cars_data` JOIN `car_names` ON `cars_data.Id` = `car_names.MakeId` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId` WHERE `continents.ContId` = 2 AND `car_makers.Country` = '2' AND `model_list.Maker` = 2; 
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.Model  WHERE car_makers.Country = '1' AND car_names.Model = 'amc'; 
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Country = '1' AND model_list.Model = 'amc'; 
SELECT c.Id, c.Model FROM `car_makers` cm JOIN `model_list` ml ON cm.Id = ml.Maker JOIN `car_names` cn ON ml.Model = cn.Model GROUP BY cm.Id, c.Model HAVING COUNT(*) > 3; 
SELECT `car_makers.Id`, `car_makers.Country` FROM `car_makers` JOIN `model_list` ON `car_makers.Id` = `model_list.Maker` GROUP BY `car_makers.Id` HAVING COUNT(`model_list.Model`) > 3; 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN continents ct ON c.Continent = ct.ContId WHERE cm.Country = '2' -- Assuming '2' corresponds to the full name 'General Motors' OR ml.ModelId IN (     SELECT MakeId     FROM car_names     WHERE LENGTH(car_names.Model) > 3500 ); 
SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Country = '2' OR ml.ModelId IN (     SELECT ModelId FROM model_list WHERE Maker IN (         SELECT Id FROM car_makers WHERE Country = '1'     ) AND EXISTS (         SELECT 1 FROM cars_data WHERE Id = ml.ModelId AND EXISTS (             SELECT 1 FROM car_names WHERE MakeId = ml.ModelId AND Model LIKE '%3500%'         )     ) ); 
SELECT cars_data.Id FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE EXISTS (     SELECT 1     FROM car_data     WHERE car_data.Id = cars_data.Id     AND car_data.weight >= 3000 AND car_data.weight <= 4000 ); 
SELECT DISTINCT year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE weight < 4000 OR weight > 3000; 
SELECT MAX(hp) AS max_horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN continents ON car_makers.Country = continents.ContId; 
SELECT c.Model, m.Horsepower FROM car_names AS cn JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS co ON cm.Country = co.CountryId JOIN continents AS ct ON co.Continent = ct.ContId JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data); 
SELECT      c.Model,      MIN(a.Accelerate) as MinAccelerate FROM      car_names cn JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id JOIN      countries co ON cm.Country = co.CountryId JOIN      continents ct ON co.Continent = ct.ContId JOIN      cars_data cd ON cn.MakeId = cd.Id JOIN      (SELECT Model, Accelerate FROM cars_data WHERE Model = 'volvo') a ON a.Model = 'volvo' GROUP BY      c.Model ORDER BY      MinAccelerate LIMIT 1; 
SELECT MIN(`cylinders`) AS MinCylinders FROM `car_names` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId` WHERE `car_names.Model` LIKE 'volvo'; 
SELECT COUNT(*) FROM `cars_data` WHERE `Id` IN (     SELECT `MakeId`     FROM `car_names`     WHERE `Model` = (         SELECT `Model`         FROM `car_names`         WHERE `MakeId` = (             SELECT `MakeId`             FROM `model_list`             WHERE `Model` = (                 SELECT `Model`                 FROM `car_names`                 WHERE `MakeId` = (                     SELECT MAX(`MakeId`)                     FROM `car_names`                 )             )         )     ) ) AND `Id` > (     SELECT `MakeId`     FROM `car_names`     WHERE `Model` = (         SELECT `Model`         FROM `car_names`         WHERE `MakeId` = (             SELECT `MakeId`             FROM `model_list`             WHERE `Model` = (                 SELECT `Model`                 FROM `car_names`                 WHERE `MakeId` = (                     SELECT MAX(`MakeId`)                     FROM `car_names`                 )             )         )     ) ); 
SELECT COUNT(*) FROM `cars_data` WHERE `Id` NOT IN (     SELECT `MakeId`     FROM `car_names`     JOIN `model_list` ON `car_names.Model` = `model_list.Model`     JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id`     JOIN `countries` ON `car_makers.Country` = `countries.CountryId`     JOIN `continents` ON `countries.Continent` = `continents.ContId`     WHERE `model_list.Model` = (         SELECT `Model`         FROM `model_list`         JOIN `car_names` ON `model_list.Model` = `car_names.Model`         ORDER BY CAST(SUBSTRING(`Model`, 2) AS UNSIGNED) DESC         LIMIT 1     ) ) 
SELECT COUNT(*)  FROM (     SELECT Country      FROM countries      GROUP BY Country      HAVING COUNT(DISTINCT Maker) > 2 ) AS countries_with_many_makers; 
SELECT COUNT(*)  FROM countries  WHERE CountryId IN (     SELECT Country      FROM car_makers      GROUP BY Country      HAVING COUNT(*) > 2 ); 
SELECT COUNT(*) FROM `cars_data` WHERE (SELECT `CylinderCount` FROM `car_names` JOIN `model_list` ON `car_names.Model` = `model_list.Model` JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id` JOIN `countries` ON `car_makers.Country` = `countries.CountryId` JOIN `continents` ON `countries.Continent` = `continents.ContId`) > 6; 
SELECT COUNT(*) FROM `cars_data` JOIN `car_names` ON `car_names`.`MakeId` = `cars_data`.`Id` JOIN `model_list` ON `model_list`.`ModelId` = `car_names`.`Model` JOIN `car_makers` ON `car_makers`.`Id` = `model_list`.`Maker` JOIN `countries` ON `countries`.`CountryId` = `car_makers`.`Country` JOIN `continents` ON `continents`.`ContId` = `countries`.`Continent` WHERE `model_list`.`Model` IN (     SELECT `Model`     FROM `model_list`     JOIN `car_makers` ON `car_makers`.`Id` = `model_list`.`Maker`     JOIN `countries` ON `countries`.`CountryId` = `car_makers`.`Country`     JOIN `continents` ON `continents`.`ContId` = `countries`.`Continent`     WHERE `model_list`.`Model` LIKE '%6 cyl%' ); 
SELECT ml.Model, ml.Maker, MAX(ml.Horsepower) AS MaxHorsepower FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON cm.Id = CAST(ml.Maker AS INTEGER) JOIN continents co ON co.ContId = cm.Continent WHERE ml.Horsepower = 4 AND co.ContId = 2 GROUP BY ml.Model, ml.Maker ORDER BY MaxHorsepower DESC LIMIT 1; 
SELECT ml.Model, SUM(cd.Id) AS horsepower_count FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE ml.Model LIKE '4 cylinder%' GROUP BY ml.Model ORDER BY horsepower_count DESC LIMIT 1; 
SELECT      c.Model,     cn.Model  FROM      cars_data cd JOIN      car_names cn ON cd.Id = cn.MakeId JOIN      model_list ml ON cn.Model = ml.Model JOIN      car_makers cm ON ml.Maker = cm.Id JOIN      countries co ON cm.Country = co.CountryId JOIN      continents ct ON co.Continent = ct.ContId WHERE      ml.Model IN (         SELECT              Model          FROM              model_list          WHERE              Horsepower > (                 SELECT                      MIN(Horsepower)                  FROM                      model_list             )     )     AND ml.Cylinders <= 3; 
SELECT c.`MakeId`, cn.Model FROM `car_names` cn JOIN `model_list` ml ON cn.Model = ml.Model JOIN `car_makers` cm ON ml.Maker = cm.Id WHERE cm.Country NOT IN (     SELECT cm.Country     FROM `car_makers` cm     JOIN `model_list` ml ON cm.Id = ml.Maker     JOIN `car_names` cn ON ml.Model = cn.Model     JOIN `cars_data` cd ON cn.MakeId = cd.Id     JOIN (         SELECT MIN(hp) as MinHorsepower         FROM `cars_data`         JOIN `car_names` ON `cars_data.Id` = `car_names.MakeId`         JOIN `model_list` ON `car_names.Model` = `model_list.Model`         JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id`         WHERE `car_makers.Country` = (             SELECT `Country`             FROM `car_makers`             JOIN `model_list` ON `car_makers.Id` = `model_list.Maker`             JOIN `car_names` ON `model_list.Model` = `car_names.Model`             JOIN `cars_data` ON `car_names.MakeId` = `cars_data.Id`             GROUP BY `car_makers.Country`             ORDER BY MIN(`cars_data.hp`) ASC             LIMIT 1         )     )     AND `car_names.Model` NOT IN (         SELECT `Model`         FROM `model_list`         JOIN `car_makers` ON `model_list.Maker` = `car_makers.Id`         JOIN `cars_data` ON `model_list.Model` = `car_names.Model`         GROUP BY `Model`         HAVING COUNT(`Model`) < 4     ) ) 
SELECT MAX(mpg) AS MaxMPG FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE model_list.Model LIKE '%8 cyl%' AND car_names.Model LIKE '%<1980%'; 
SELECT MAX(mpg) AS MaxMPG FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE (mpg IS NOT NULL AND mpg <= 8) OR year < 1980; 
SELECT ml.Model FROM model_list ml LEFT JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Model NOT IN (     SELECT cn.Model     FROM car_names cn     JOIN car_makers cm ON cn.MakeId = cm.Id     WHERE cm.Country = 'Ford Motor Company' ) AND ml.ModelId IN (     SELECT cd.Id     FROM cars_data cd     JOIN car_names cn ON cd.Id = cn.MakeId     JOIN model_list ml ON cn.Model = ml.Model     WHERE ml.ModelId IN (         SELECT ModelId         FROM model_list         WHERE CAST(ml.Model AS UNSIGNED) < 3500     ) ); 
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN car_makers cm ON ml.Maker = cm.Id LEFT JOIN countries co ON cm.Country = co.CountryId LEFT JOIN continents ct ON co.Continent = ct.ContId WHERE ml.ModelId NOT IN (     SELECT ml.ModelId     FROM model_list ml     JOIN car_makers cm ON ml.Maker = cm.Id     JOIN car_names cn ON ml.Model = cn.Model     WHERE cn.Model LIKE 'ford' ) AND ml.ModelId NOT IN (     SELECT cnd.Id     FROM cars_data cnd     JOIN car_names cn ON cnd.Id = cn.MakeId     JOIN model_list ml ON cn.Model = ml.Model     WHERE ml.ModelId NOT IN (         SELECT ml.ModelId         FROM model_list ml         JOIN car_names cn ON ml.Model = cn.Model         JOIN cars_data cnd ON cn.MakeId = cnd.Id         WHERE cnd.Id NOT IN (             SELECT cd.Id             FROM cars_data cd             JOIN car_names cn ON cd.Id = cn.MakeId             JOIN model_list ml ON cn.Model = ml.Model             JOIN car_makers cm ON ml.Maker = cm.Id             JOIN countries co ON cm.Country = co.CountryId             JOIN continents ct ON co.Continent = ct.ContId             WHERE ct.ContId = (                 SELECT ct.ContId                 FROM car_names cn                 JOIN model_list ml ON cn.Model = ml.Model                 JOIN car_makers cm ON ml.Maker = cm.Id                 JOIN countries co ON cm.Country = co.CountryId                 JOIN continents ct ON co.Continent = ct.ContId                 WHERE cn.Model LIKE 'ford'             )         )     ) ) AND ml.ModelId NOT IN (     SELECT cnd.Id     FROM cars_data cnd     JOIN car_names cn ON cnd.Id = cn.MakeId     JOIN model_list ml ON cn.Model = ml.Model     WHERE ml.ModelId NOT IN (         SELECT ml.ModelId         FROM model_list ml         JOIN car_names cn ON ml.Model = cn.Model         JOIN cars_data cnd ON cn.MakeId = cnd.Id         WHERE cnd.Id NOT IN (             SELECT cd.Id             FROM cars_data cd             JOIN car_names cn ON cd.Id = cn.MakeId             JOIN model_list ml ON cn.Model =
SELECT c.CountryId, co.Name FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country LEFT JOIN continents co ON c.Continent = co.ContId WHERE cm.Country IS NULL; 
SELECT c.CountryId, c.Continent FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL; 
SELECT c.Id, c.Country FROM car_makers c JOIN (     SELECT Maker     FROM model_list     GROUP BY Maker     HAVING COUNT(*) >= 2 ) AS models_count ON c.Id = models_count.Maker WHERE c.Country IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 3 ); 
SELECT cm.Id, cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.Id, cm.Country HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cd.Id) > 3; 
SELECT c.CountryId, c.Country FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IN (     SELECT Country FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 3 ) OR c.Country IN (     SELECT Country FROM car_makers cm     JOIN model_list ml ON cm.Country = ml.Maker     JOIN car_names cn ON ml.Model = cn.Model     WHERE cn.Model = 'fiat'     GROUP BY cm.Country ); 
SELECT c.CountryId, c.Country FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country = 'fiat' OR (     SELECT COUNT(*)     FROM car_makers cm2     WHERE cm2.Country = c.Country ) > 3; 
SELECT Country FROM airlines JOIN airline_countries ON airlines.uid = airline_countries.uid WHERE airlines.Name = 'JetBlue Airways'; 
SELECT `country` FROM airlines WHERE `name` = 'Jetblue'; 
SELECT uid  FROM airlines  WHERE uid = (SELECT Airline FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE uid = (SELECT uid FROM airlines WHERE `Name` = 'JetBlue Airways'))); 
SELECT `Airline` FROM `flights` WHERE `Airline` NOT IN (SELECT `uid` FROM `airlines` WHERE `uid` = 1) 
SELECT airlines.uid, airports.AirportCode FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode WHERE airports.AirportCode LIKE 'A%' 
SELECT a.uid, a.AirlineName FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.Country = 'USA' OR dest.Country = 'USA'; 
SELECT `airports`.`AirportCode`, `airports`.`AirportName` FROM `airports` WHERE `airports`.`City` = 'Anthony'; 
SELECT `airports.AirportCode`, `airports.AirportCode` FROM `airports` WHERE `airports.AirportCode` = 'Anthony'; 
SELECT COUNT(*) FROM airlines; 
SELECT COUNT(*) AS TotalAirlines FROM airlines; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM airports; 
SELECT COUNT(*) FROM flights; 
SELECT COUNT(*) FROM flights; 
SELECT `uid` FROM `airlines` WHERE `uid` = (SELECT `Airline` FROM `flights` WHERE `Airline` = (SELECT `uid` FROM `airlines` WHERE `uid` = (SELECT `uid` FROM `airlines` WHERE `uid` = (SELECT `uid` FROM `airlines` WHERE `AirportCode` = 'UAL')))); 
SELECT `uid` FROM `airlines` WHERE `uid` = (SELECT `Airline` FROM `flights` WHERE `FlightNo` = 1); 
SELECT COUNT(DISTINCT `Airline`) FROM `flights` WHERE `SourceAirport` IN (SELECT `AirportCode` FROM `airports` WHERE `Country` = 'USA') OR `DestAirport` IN (SELECT `AirportCode` FROM `airports` WHERE `Country` = 'USA'); 
SELECT COUNT(DISTINCT `Airline`)  FROM `flights`  WHERE `SourceAirport` IN (SELECT `AirportCode` FROM `airports` WHERE `AirportCode` LIKE 'A%')  OR `DestAirport` IN (SELECT `AirportCode` FROM `airports` WHERE `AirportCode` LIKE 'A%'); 
CREATE TABLE `airport_details`  ( 	`AirportCode` TEXT PRIMARY KEY, 	`City` TEXT, 	`Country` TEXT );  INSERT INTO `airport_details` VALUES ('AAF', 'Alton', 'CountryX'); INSERT INTO `airport_details` VALUES ('ABI', 'CityB', 'CountryY'); -- Additional airport details would go here 
SELECT City, Country FROM airports WHERE AirportCode = 'Alton'; 
SELECT `AirportCode` FROM `airports` WHERE `AirportCode` = 'AKO'; 
SELECT `AirportCode`  FROM `airports` WHERE `AirportCode` = 'AKO'; 
SELECT `AirportCode` FROM `airports` WHERE `AirportCode` IN ('AAF', 'ABI', 'ABL', 'ABQ', 'ABR'); 
SELECT `AirportCode`  FROM `airports`  WHERE `AirportCode` IN ('ABQ', 'ABR'); 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT COUNT(*) FROM flights WHERE `DestAirport` = 'ATO'; 
SELECT COUNT(*)  FROM flights  WHERE `DestAirport` = 'ATO'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABQ'; 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABQ'; 
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABQ'; 
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ABQ'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABQ' AND DestAirport = 'ABL'; 
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASY'; 
SELECT COUNT(*) FROM flights WHERE Airline = 1; 
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE 'Jetblue Airways' = (SELECT Name FROM airlines WHERE uid = Airline)); 
SELECT COUNT(*)  FROM flights  WHERE `Airline` = 1 AND `DestAirport` = 'ASY'; 
SELECT COUNT(*)  FROM flights  WHERE `Airline` = 1 AND `DestAirport` = 'ASY'; 
SELECT COUNT(*) FROM flights WHERE Airline = 1 AND SourceAirport = 'AHD'; 
SELECT COUNT(*)  FROM flights  WHERE Airline = 1 AND SourceAirport = 'AHD'; 
SELECT COUNT(*)  FROM flights  WHERE `Airline` = 2  AND `DestAirport` = 'ABQ'; 
SELECT COUNT(*) FROM flights WHERE `Airline` = 1 AND `DestAirport` = 'ABQ'; 
SELECT `airports`.`AirportCode`, COUNT(`flights`.`FlightNo`) AS `ArrivalCount` FROM `flights` JOIN `airports` ON `flights`.`DestAirport` = `airports`.`AirportCode` GROUP BY `flights`.`DestAirport` ORDER BY `ArrivalCount` DESC LIMIT 1; 
SELECT `DestAirport`, COUNT(*) AS Frequency FROM `flights` GROUP BY `DestAirport` ORDER BY Frequency DESC LIMIT 1; 
SELECT `airports`.`AirportCode`, COUNT(`flights`.`FlightNo`) AS `num_flights` FROM `flights` JOIN `airports` ON `flights`.`SourceAirport` = `airports`.`AirportCode` GROUP BY `airports`.`AirportCode` ORDER BY `num_flights` DESC LIMIT 1; 
SELECT `SourceAirport`, COUNT(*) as frequency FROM `flights` GROUP BY `SourceAirport` ORDER BY frequency DESC LIMIT 1; 
SELECT `airports`.`AirportCode` FROM `airports` JOIN `flights` ON `airports`.`AirportCode` = `flights`.`SourceAirport` OR `airports`.`AirportCode` = `flights`.`DestAirport` GROUP BY `airports`.`AirportCode` ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT `SourceAirport`, `DestAirport`, COUNT(*) as TotalFlights FROM `flights` GROUP BY `SourceAirport`, `DestAirport` ORDER BY TotalFlights DESC LIMIT 1; 
SELECT `Airports.AirportCode` FROM `Airports` LEFT JOIN `flights` ON `Airports.AirportCode` = `flights.SourceAirport` OR `Airports.AirportCode` = `flights.DestAirport` GROUP BY `Airports.AirportCode` ORDER BY COUNT(`flights.FlightNo`) ASC LIMIT 1; 
SELECT `SourceAirport`, `DestAirport`, COUNT(*) as `FlightCount` FROM `flights` GROUP BY `SourceAirport`, `DestAirport` ORDER BY `FlightCount` ASC LIMIT 1; 
SELECT `Airline`, COUNT(`FlightNo`) AS `TotalFlights` FROM `flights` GROUP BY `Airline` ORDER BY `TotalFlights` DESC LIMIT 1; 
SELECT `Airline`, COUNT(`FlightNo`) AS `TotalFlights` FROM `flights` GROUP BY `Airline` ORDER BY `TotalFlights` DESC LIMIT 1; 
SELECT a.uid, a.AirportCode FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid, a.AirportCode ORDER BY COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT      a.uid,      a.AirportCode,      (SELECT Country FROM airports WHERE AirportCode = a.AirportCode) AS Country FROM      flights f JOIN      airlines a ON f.Airline = a.uid GROUP BY      f.Airline ORDER BY      COUNT(f.FlightNo) ASC LIMIT 1; 
SELECT DISTINCT `Airline` FROM `flights` WHERE `SourceAirport` = 'AHD'; 
SELECT DISTINCT `Airline` FROM `flights` WHERE `SourceAirport` = 'AHD'; 
SELECT `Airline` FROM `flights` WHERE `DestAirport` = 'AHD'; 
SELECT `Airline` FROM `flights` WHERE `DestAirport` = 'AHD'; 
SELECT DISTINCT f.Airline FROM flights f WHERE f.SourceAirport = 'APG' OR f.DestAirport = 'APG' AND f.SourceAirport = 'CVO' OR f.DestAirport = 'CVO' GROUP BY f.Airline HAVING COUNT(DISTINCT f.SourceAirport) >= 2 AND COUNT(DISTINCT f.DestAirport) >= 2; 
SELECT `Airline` FROM `flights` WHERE `SourceAirport` = 'APG' OR `SourceAirport` = 'CVO' GROUP BY `Airline` HAVING COUNT(DISTINCT `SourceAirport`) = 2; 
SELECT DISTINCT `Airline` FROM `flights` WHERE `SourceAirport` = 'CVO' AND `Airline` NOT IN (     SELECT `Airline`     FROM `flights`     WHERE `SourceAirport` = 'APG' ); 
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG'); 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(*) >= 10; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(`FlightNo`) >= 10; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(`FlightNo`) < 200; 
SELECT `Airline` FROM `flights` GROUP BY `Airline` HAVING COUNT(`FlightNo`) < 200; 
SELECT FlightNo FROM flights WHERE Airline = 1; 
SELECT `FlightNo` FROM `flights` WHERE `Airline` = 1; 
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG'; 
SELECT `FlightNo`  FROM `flights`  WHERE `SourceAirport` = 'APG'; 
SELECT `FlightNo` FROM `flights` WHERE `DestAirport` = 'APG'; 
SELECT `FlightNo` FROM `flights` WHERE `DestAirport` = 'APG'; 
SELECT FlightNo  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'ABQ'); 
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'ABQ'; 
SELECT `FlightNo` FROM `flights` WHERE `DestAirport` = 'ABQ'; 
SELECT `FlightNo` FROM `flights` WHERE `DestAirport` = 'ABQ'; 
SELECT COUNT(*) AS TotalLandingFlights FROM flights WHERE `DestAirport` IN ('ABQ', 'ABI'); 
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABQ' OR DestAirport = 'ABI'; 
SELECT `AirportCode` FROM `airports` WHERE `AirportCode` NOT IN (     SELECT `SourceAirport` FROM `flights`     UNION     SELECT `DestAirport` FROM `flights` ); 
SELECT a.AirportCode FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.FlightNo IS NULL; 
SELECT COUNT(*) FROM employee; 
SELECT COUNT(*) FROM employee;  SELECT COUNT(*) FROM hiring; 
SELECT e.Employee_ID FROM employee e ORDER BY (SELECT TIMESTAMPDIFF(YEAR, e.Employee_ID, CURDATE()) AS Age) ASC; 
SELECT e.Employee_ID FROM employee e ORDER BY e.Employee_ID ASC; 
SELECT e.Employee_ID, COUNT(*) AS EmployeeCount FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID GROUP BY e.Employee_ID; 
SELECT COUNT(*) AS employee_count, `city` FROM `employee` GROUP BY `city`; 
SELECT `shop`.`Shop_ID`, COUNT(`employee`.`Employee_ID`) AS `Employee_Count` FROM `employee` JOIN `hiring` ON `employee`.`Employee_ID` = `hiring`.`Employee_ID` JOIN `shop` ON `hiring`.`Shop_ID` = `shop`.`Shop_ID` WHERE YEAR(CURRENT_DATE) - YEAR(`employee`.`Employee_ID`) < 30 GROUP BY `shop`.`Shop_ID` HAVING COUNT(`employee`.`Employee_ID`) > 1; 
SELECT s.Shop_ID FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM employee WHERE age(e.Employee_ID) > 30) GROUP BY s.Shop_ID HAVING COUNT(DISTINCT e.Employee_ID) > 1; 
SELECT Shop_ID, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Shop_ID; 
SELECT `Shop_ID`, COUNT(*) AS `Number_of_Shops` FROM `shop` GROUP BY `Shop_ID`; 
SELECT s.ManagerName, s.District FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID WHERE e.Employee_ID = (     SELECT h1.Employee_ID     FROM hiring h1     GROUP BY h1.Employee_ID     ORDER BY COUNT(h1.Shop_ID) DESC     LIMIT 1 ); 
SELECT s.ManagerName, s.District FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID JOIN (     SELECT Shop_ID, COUNT(*) AS ProductCount     FROM product_sales     GROUP BY Shop_ID     ORDER BY ProductCount DESC     LIMIT 1 ) ps ON s.Shop_ID = ps.Shop_ID; 
SELECT MIN(Shop_ID), MAX(Shop_ID) FROM shop; 
SELECT MIN(Shop_ID), MAX(Shop_ID) FROM shop; 
SELECT s.Shop_ID, s.Location, s.District, 0 AS Products FROM shop s ORDER BY Products DESC; 
SELECT s.Shop_ID, s.Location, s.District FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC; 
SELECT Shop_ID  FROM hiring  GROUP BY Shop_ID  HAVING COUNT(Shop_ID) > (SELECT AVG(Count) FROM (SELECT COUNT(*) AS Count FROM hiring GROUP BY Shop_ID) AS AvgCounts); 
SELECT s.Shop_ID, (SELECT COUNT(*) FROM hiring WHERE Shop_ID = s.Shop_ID) AS ProductCount FROM shop s WHERE (SELECT COUNT(*) FROM hiring) > (SELECT AVG(Count) FROM (SELECT COUNT(*) AS Count FROM hiring GROUP BY Shop_ID) AS AvgCount); 
SELECT `Employee_ID` FROM `evaluation` GROUP BY `Employee_ID` ORDER BY COUNT(`Year_awarded`) DESC LIMIT 1; 
SELECT `employee.Employee_ID`, COUNT(`evaluation.Year_awarded`) AS AwardCount FROM `employee` JOIN `evaluation` ON `employee.Employee_ID` = `evaluation.Employee_ID` GROUP BY `employee.Employee_ID` ORDER BY AwardCount DESC LIMIT 1; 
SELECT `employee.Employee_ID`, `employee_name`  FROM `employee` JOIN `evaluation` ON `employee.Employee_ID` = `evaluation.Employee_ID` WHERE `evaluation.Year_awarded` = (SELECT MAX(`Year_awarded`) FROM `evaluation`) AND `employee.Employee_ID` IN (SELECT `Employee_ID` FROM `hiring`) ORDER BY `evaluation.Year_awarded` DESC LIMIT 1; 
SELECT e.Employee_ID  FROM employee e  JOIN hiring h ON e.Employee_ID = h.Employee_ID  JOIN shop s ON h.Shop_ID = s.Shop_ID WHERE s.Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY COUNT(*) DESC  LIMIT 1; 
SELECT e.Employee_ID FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT e.Employee_ID FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL; 
SELECT s.Shop_ID, COUNT(h.Employee_ID) AS EmployeeCount FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY EmployeeCount DESC LIMIT 1; 
SELECT `shop`.`Shop_ID`, COUNT(`hiring`.`Employee_ID`) AS `employee_count` FROM `hiring` JOIN `shop` ON `hiring`.`Shop_ID` = `shop`.`Shop_ID` GROUP BY `hiring`.`Shop_ID` ORDER BY `employee_count` DESC LIMIT 1; 
SELECT s.Shop_ID FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Shop_ID FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL; 
SELECT s.Shop_ID, COUNT(h.Employee_ID) AS NumEmployeesHired FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Shop_ID; 
SELECT s.Shop_ID, COUNT(h.Employee_ID) AS Employee_Count, s.Shop_Name FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name; 
SELECT SUM(bonus) AS Total_Bonus_Given FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID; 
SELECT SUM(bonus) AS total_bonus FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID JOIN hiring ON hiring.Employee_ID = employee.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID WHERE shop.Shop_ID = 1; 
SELECT * FROM hiring; 
SELECT * FROM hiring; 
SELECT Shop_ID FROM shop WHERE Shop_ID IN (     SELECT Shop_ID     FROM (         SELECT Shop_ID, COUNT(*) AS product_count         FROM products         GROUP BY Shop_ID     ) AS shop_product_counts     WHERE product_count < 3000 OR product_count > 10000 ) 
SELECT Shop_ID  FROM shop  WHERE Shop_ID IN (     SELECT Shop_ID      FROM hiring      GROUP BY Shop_ID      HAVING COUNT(*) < 3000 )  INTERSECT SELECT Shop_ID  FROM shop  WHERE Shop_ID IN (     SELECT Shop_ID      FROM hiring      GROUP BY Shop_ID      HAVING COUNT(*) > 10000 ); 
SELECT COUNT(DISTINCT Shop_ID) AS DifferentStoreLocations FROM shop; 
SELECT COUNT(DISTINCT Shop_ID) AS DistinctStoreCount FROM shop; 
SELECT COUNT(*) FROM Documents; 
SELECT COUNT(*) FROM Documents; 
SELECT d.Document_ID, d.Document_Description FROM Documents d LEFT JOIN Templates t ON d.Template_ID = t.Template_ID LEFT JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code; 
SELECT d.Document_ID, t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID; 
SELECT d.Document_ID, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_ID IN (     SELECT Paragraph_ID     FROM Paragraphs     JOIN Documents d ON Paragraphs.Document_ID = d.Document_ID     WHERE d.Document_ID = p.Document_ID     AND EXISTS (         SELECT 1         FROM Documents d2         JOIN Paragraphs p2 ON d2.Document_ID = p2.Document_ID         WHERE p2.Paragraph_ID = p.Paragraph_ID         AND p2.Paragraph_ID IN (             SELECT Paragraph_ID             FROM Paragraphs             WHERE CHAR_LENGTH(Paragraph_ID) - CHAR_LENGTH(REPLACE(Paragraph_ID, 'w', '')) > 0         )     ) ); 
SELECT d.Document_ID, rt.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Description LIKE '%w%'; 
SELECT d.Document_ID, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code = 'CV' AND d.Document_ID = 0; 
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'CV' AND d.Document_Description = 'Robbin CV'; 
SELECT COUNT(DISTINCT Template_ID)  FROM Documents; 
SELECT COUNT(DISTINCT Template_ID) AS UniqueTemplates FROM Templates; 
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT' AND Templates.Template_ID IN (SELECT Template_ID FROM Documents); 
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID; 
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Templates WHERE Template_ID IS NOT NULL GROUP BY Template_ID; 
SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT T.Template_ID, R.Template_Type_Code FROM Templates T JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code GROUP BY T.Template_ID, R.Template_Type_Code ORDER BY COUNT(T.Document_ID) DESC LIMIT 1; 
SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(*) > 1; 
SELECT Template_ID FROM Templates WHERE Template_ID IN (     SELECT Template_ID     FROM Documents     GROUP BY Template_ID     HAVING COUNT(*) > 1 ); 
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents); 
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL; 
SELECT COUNT(*) FROM Templates; 
SELECT COUNT(*) FROM Templates; 
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code; 
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code; 
SELECT DISTINCT Template_Type_Code FROM Templates; 
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types; 
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT'); 
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV'); 
SELECT T.Version_Number, RT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE T.Version_Number > 5; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5; 
SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code; 
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code; 
SELECT `Ref_Template_Types`.`Template_Type_Code`, COUNT(`Templates`.`Template_ID`) AS `Template_Count` FROM `Ref_Template_Types` JOIN `Templates` ON `Ref_Template_Types`.`Template_Type_Code` = `Templates`.`Template_Type_Code` GROUP BY `Ref_Template_Types`.`Template_Type_Code` ORDER BY `Template_Count` DESC LIMIT 1; 
SELECT `Template_Type_Code` FROM `Templates` GROUP BY `Template_Type_Code` ORDER BY COUNT(`Template_Type_Code`) DESC LIMIT 1; 
SELECT Template_Type_Code  FROM Templates  GROUP BY Template_Type_Code  HAVING COUNT(Template_ID) < 3; 
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3; 
SELECT MIN(Version_Number), Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY MIN(Version_Number) LIMIT 1; 
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY Templates.Version_Number ASC LIMIT 1; 
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Database'; 
SELECT T2.Template_Type_Code FROM Documents AS D JOIN Templates AS T1 ON D.Template_ID = T1.Template_ID JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE EXISTS (SELECT 1 FROM Paragraphs AS P WHERE P.Document_ID = D.Document_ID AND P.Paragraph_ID = 2394); 
SELECT d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code = 'BK'; 
SELECT d.Document_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT `Template_Type_Code`, COUNT(`Document_ID`) AS `Document_Count` FROM `Templates` JOIN `Ref_Template_Types` ON `Templates`.`Template_Type_Code` = `Ref_Template_Types`.`Template_Type_Code` GROUP BY `Template_Type_Code`; 
SELECT Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code; 
SELECT `Template_Type_Code`, COUNT(*) as Document_Count FROM `Templates` WHERE `Template_Type_Code` IN (SELECT `Template_Type_Code` FROM `Documents`) GROUP BY `Template_Type_Code` ORDER BY Document_Count DESC LIMIT 1; 
SELECT Templates.Template_Type_Code FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates     WHERE Template_ID IN (         SELECT Template_ID         FROM Documents     ) ); 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates     WHERE Template_ID IN (         SELECT Template_ID         FROM Documents     ) ); 
SELECT `Template_Type_Code`, `Template_Type_Description` FROM `Ref_Template_Types`; 
SELECT `Template_Type_Code`, `Template_Type_Description`  FROM `Ref_Template_Types`; 
SELECT `Template_Type_Description` FROM `Ref_Template_Types` WHERE `Template_Type_Code` = 'AD'; 
SELECT `Template_Type_Description`  FROM `Ref_Template_Types`  WHERE `Template_Type_Code` = 'AD';  SELECT `Template_Type_Description`  FROM `Ref_Template_Types`  WHERE `Template_Type_Code` = 'AD'; 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'; 
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'; 
SELECT DISTINCT RTT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID); 
SELECT DISTINCT TTD.Template_Type_Description FROM Templates T JOIN Ref_Template_Types TTD ON T.Template_Type_Code = TTD.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID; 
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'; 
SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs; 
SELECT COUNT(*) FROM Paragraphs; 
SELECT COUNT(p.Paragraph_ID) AS ParagraphCount FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = 'PPT') AND d.Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')); 
SELECT COUNT(p.Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'AD')); 
SELECT p.Paragraph_ID, p.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE tt.Template_Type_Code = 'AD' OR tt.Template_Type_Code = 'BK' OR tt.Template_Type_Code = 'CV' OR tt.Template_Type_Code = 'PP' OR tt.Template_Type_Code = 'PPT'; 
SELECT p.Paragraph_ID, p.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE p.Paragraph_ID = (     SELECT Paragraph_ID     FROM Paragraphs     WHERE Document_ID = (         SELECT Document_ID         FROM Documents         WHERE Template_ID = (             SELECT Template_ID             FROM Templates             WHERE Template_Type_Code = (                 SELECT Template_Type_Code                 FROM Ref_Template_Types                 WHERE Template_Type_Code = 'BK'             )         )     ) ) AND p.Paragraph_ID IN (     SELECT Paragraph_ID     FROM Paragraphs     WHERE Document_ID IN (         SELECT Document_ID         FROM Documents         WHERE Template_ID IN (             SELECT Template_ID             FROM Templates             WHERE Template_Type_Code = 'AD'         )     ) ) AND EXISTS (     SELECT 1     FROM Paragraphs p2     WHERE p2.Paragraph_ID = p.Paragraph_ID     AND p2.Paragraph_ID IN (         SELECT Paragraph_ID         FROM Paragraphs         WHERE Document_ID IN (             SELECT Document_ID             FROM Documents             WHERE Template_ID IN (                 SELECT Template_ID                 FROM Templates                 WHERE Template_Type_Code = 'CV'             )         )     ) ); 
SELECT p.Paragraph_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'; 
SELECT p.Paragraph_ID, p.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'AD'); 
SELECT p.Paragraph_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'AD')); 
SELECT p.Paragraph_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'AD'; 
SELECT      D.Document_ID,      COUNT(P.Paragraph_ID) AS Paragraph_Count FROM      Documents D LEFT JOIN      Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY      D.Document_ID ORDER BY      D.Document_ID; 
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID; 
SELECT d.Document_ID, t.Template_Type_Code, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Templates t ON d.Template_ID = t.Template_ID LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, t.Template_Type_Code; 
SELECT      d.Document_ID,      (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) AS Num_Paragraphs FROM      Documents d; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2; 
SELECT d.Document_ID, t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN (     SELECT Document_ID, COUNT(*) as Paragraph_Count     FROM Paragraphs     GROUP BY Document_ID     ORDER BY Paragraph_Count DESC     LIMIT 1 ) p ON d.Document_ID = p.Document_ID; 
SELECT d.Document_ID, (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) AS ParagraphCount FROM Documents d ORDER BY ParagraphCount DESC LIMIT 1; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1; 
SELECT Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) LIMIT 1; 
SELECT `Document_ID` FROM `Paragraphs` GROUP BY `Document_ID` HAVING COUNT(`Paragraph_ID`) BETWEEN 1 AND 2; 
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2; 
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Document_ID IN (     SELECT Document_ID     FROM Paragraphs     WHERE Document_ID IN (         SELECT Document_ID         FROM Paragraphs         WHERE Document_ID IN (             SELECT Document_ID             FROM Paragraphs             WHERE Paragraph_ID = (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID = (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')))))         )     )     AND Document_ID IN (         SELECT Document_ID         FROM Paragraphs         WHERE Document_ID IN (             SELECT Document_ID             FROM Paragraphs             WHERE Paragraph_ID = (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'CV'))))         )     ) ) AND (p.Paragraph_ID = (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK'))) AND p.Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK'))) OR (p.Paragraph_ID = (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'CV')) AND Document_ID = (SELECT Document_ID FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'CV'))); 
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code JOIN (     SELECT Document_ID     FROM Paragraphs     WHERE Document_ID IN (         SELECT Document_ID         FROM Paragraphs         WHERE ParagraphText = 'Brazil'     )     AND Document_ID IN (         SELECT Document_ID         FROM Paragraphs         WHERE ParagraphText = 'Ireland'     ) ) AS common_docs ON d.Document_ID = common_docs.Document_ID; 
SELECT COUNT(*) FROM `teacher`; 
SELECT COUNT(*) AS Total_Teachers FROM `teacher`; 
SELECT `Teacher_ID`, `Name` FROM `teacher` ORDER BY `Age` ASC; 
SELECT t.Teacher_ID FROM teacher t ORDER BY t.Teacher_ID ASC; 
SELECT t.Age, t.Hometown FROM teacher t; 
SELECT t.Age, t.Hometown FROM teacher t; 
SELECT `Teacher_ID`, `Name` FROM `teacher` WHERE `Hometown` <> 'Little Lever Urban District'; 
SELECT t.Teacher_ID FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course_ID = 4 AND ca.Grade = 7); 
SELECT `name` FROM `teacher` WHERE `age` IN (32, 33); 
SELECT t.Teacher_ID FROM teacher t JOIN (     SELECT Teacher_ID     FROM teacher     WHERE age = 32 OR age = 33 ) AS aged_teachers ON t.Teacher_ID = aged_teachers.Teacher_ID; 
SELECT hometown FROM teacher ORDER BY Teacher_ID ASC LIMIT 1; 
SELECT t.Teacher_ID, t.Name, t.Location FROM teacher t JOIN (     SELECT MIN(YEAR(CURRENT_DATE) - YEAR(Birth_Date)) AS Age     FROM teacher ) AS YoungestTeacher ON t.Age = YoungestTeacher.Age JOIN `course_arrange` ca ON t.Teacher_ID = ca.Teacher_ID; 
SELECT hometown, COUNT(*) AS teacher_count FROM teacher GROUP BY hometown; 
SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown; 
SELECT `hometown`, COUNT(*) AS `Count` FROM `teacher` GROUP BY `hometown` ORDER BY `Count` DESC LIMIT 1; 
SELECT hometown, COUNT(*) as frequency FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1; 
SELECT hometown FROM teacher WHERE hometown IN (     SELECT hometown     FROM teacher     GROUP BY hometown     HAVING COUNT(*) > 1 ); 
SELECT T1.Town FROM teacher T1 JOIN teacher T2 ON T1.Town = T2.Town GROUP BY T1.Town HAVING COUNT(T1.Teacher_ID) >= 2; 
SELECT t.Teacher_ID, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Teacher_ID, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID; 
SELECT t.Teacher_ID, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Teacher_ID, c.Course_ID; 
SELECT t.Teacher_ID, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Teacher_ID, c.Course_ID; 
SELECT t.Name  FROM course_arrange ca  JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course_ID = 3; 
SELECT t.Teacher_ID FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID WHERE ca.Grade = 5; 
SELECT t.Teacher_ID, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID; 
SELECT t.Teacher_ID, COUNT(ca.Course_ID) AS Courses_Taught FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID; 
SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2; 
SELECT t.Teacher_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2; 
SELECT t.Teacher_ID FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL; 
SELECT t.Teacher_ID FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL; 
SELECT COUNT(*)  FROM visitor  WHERE ID IN (SELECT visitor_ID FROM visit) AND ID NOT IN (SELECT visitor_ID FROM visitor WHERE age < 30); 
SELECT visitor.ID, visitor.name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.membership_level > 4 ORDER BY visitor.membership_level DESC; 
SELECT AVG(age)  FROM visitor  WHERE membership_level <= 4; 
SELECT v.ID, v.membership_level FROM visitor v WHERE v.membership_level > 4 ORDER BY v.age ASC; 
SELECT m.Museum_ID, m.Museum_Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Museum_Name ORDER BY COUNT(v.visitor_ID) DESC LIMIT 1; 
SELECT AVG(staff_count)  FROM (     SELECT COUNT(*) AS staff_count      FROM museum      JOIN visit ON museum.Museum_ID = visit.Museum_ID      WHERE博物馆_open_date < '2009-01-01' ) AS subquery; 
SELECT `opening_year`, `staff_number` FROM `museum` WHERE `name` = 'Plaza Museum'; 
SELECT Museum_ID  FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit WHERE visitor_ID = (SELECT MIN(visitor_ID) FROM visit)) GROUP BY Museum_ID HAVING COUNT(visitor_ID) > (SELECT MIN(COUNT(visitor_ID)) FROM visit GROUP BY Museum_ID); 
SELECT v.ID, v.name, v.age FROM visitor v JOIN (     SELECT visitor_ID, COUNT(*) AS visit_count     FROM visit     GROUP BY visitor_ID     HAVING COUNT(*) > 1 ) as multiple_visits ON v.ID = multiple_visits.visitor_ID; 
SELECT v.ID, v.name, v.membership_level FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN (     SELECT visitor_ID, SUM(ticket_price) AS total_spent     FROM visit     JOIN (         SELECT Museum_ID, ticket_price         FROM ticket -- Assuming there is a `ticket` table with `Museum_ID` and `ticket_price`     ) t ON vi.Museum_ID = t.Museum_ID     GROUP BY visitor_ID ) AS visitor_spending ON v.ID = visitor_spending.visitor_ID ORDER BY visitor_spending.total_spent DESC LIMIT 1; 
SELECT Museum_ID, COUNT(*) AS VisitCount FROM visit GROUP BY Museum_ID ORDER BY VisitCount DESC LIMIT 1; 
SELECT m.Museum_ID  FROM museum m  LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID  WHERE v.visitor_ID IS NULL; 
SELECT v.ID AS Visitor_ID, v.Name, v.Age FROM visitor v JOIN visit v2 ON v.ID = v2.visitor_ID GROUP BY v.ID, v.Name, v.Age ORDER BY COUNT(v2.visitor_ID) DESC LIMIT 1; 
SELECT AVG(MAX_TICKETS) AS average_tickets, MAX(MAX_TICKETS) AS max_tickets FROM (     SELECT COUNT(*) AS MAX_TICKETS     FROM visit     JOIN museum ON visit.Museum_ID = museum.Museum_ID     GROUP BY visit.Museum_ID ) AS ticket_counts; 
SELECT SUM(ticket_expense) AS total_ticket_expense FROM visit v JOIN visitor visitor_table ON v.visitor_ID = visitor_table.ID JOIN membership m ON visitor_table.membership_level = m.level WHERE m.level = 1; 
SELECT v.ID FROM visitor v JOIN visit mv ON v.ID = mv.visitor_ID JOIN museum m ON mv.Museum_ID = m.Museum_ID WHERE m.Museum_ID IN (     SELECT Museum_ID     FROM museum     WHERE Museum_ID IN (1, 2) ) AND m.Museum_ID IN (     SELECT Museum_ID     FROM museum     WHERE Museum_ID IN (3, 4, 5) ); 
SELECT COUNT(DISTINCT visitor.ID) AS unvisited_visitors FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Museum_ID IS NULL; 
SELECT COUNT(*) FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit); 
SELECT COUNT(*) AS total_players FROM players; 
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) FROM matches; 
SELECT COUNT(*) AS total_matches FROM matches; 
SELECT p.first_name, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.country_code = 'USA'; 
SELECT p.first_name, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.country = 'USA'; 
SELECT AVG(a.player_age) AS average_loser_age, AVG(b.player_age) AS average_winner_age FROM players a JOIN matches m ON a.player_id = m.loser_id JOIN players b ON b.player_id = m.winner_id; 
SELECT AVG(a.age) AS average_loser_age, AVG(b.age) AS average_winner_age FROM players AS a JOIN matches AS m ON a.player_id = m.loser_id JOIN players AS b ON b.player_id = m.winner_id; 
SELECT AVG(p.player_id) AS average_rank FROM players p JOIN matches m ON p.player_id = m.winner_id; 
SELECT AVG(r.rank) AS average_rank FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id; 
SELECT MAX(winner_id) AS highest_rank_of_losers FROM matches; 
SELECT MAX(r.rank) AS best_losers_rank FROM rankings r JOIN matches m ON r.player_id = m.loser_id WHERE r.rank = (     SELECT MAX(rank)     FROM rankings     WHERE player_id IN (SELECT loser_id FROM matches) ); 
SELECT COUNT(DISTINCT player_id) AS distinct_country_codes FROM players; 
SELECT COUNT(DISTINCT country) AS distinct_countries FROM players; 
SELECT COUNT(DISTINCT loser_id) FROM matches; 
SELECT COUNT(DISTINCT loser_id) FROM matches; 
SELECT `matches`.`tourney_id`  FROM `matches` GROUP BY `matches`.`tourney_id` HAVING COUNT(*) > 10; 
SELECT `matches`.`tournament_name` FROM `matches` GROUP BY `matches`.`tournament_name` HAVING COUNT(*) > 10; 
SELECT winner_id FROM matches WHERE winner_id IN (     SELECT winner_id     FROM matches     WHERE year = 2013 ) AND winner_id IN (     SELECT winner_id     FROM matches     WHERE year = 2016 ); 
SELECT DISTINCT p1.player_id FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.winner_id AND m1.match_id < m2.match_id WHERE YEAR(m1.match_date) = 2013 AND YEAR(m2.match_date) = 2016; 
SELECT COUNT(*) FROM matches WHERE YEAR(`match_id`) = 2013 OR YEAR(`match_id`) = 2016; 
SELECT COUNT(*) FROM matches WHERE YEAR(date) IN (2013, 2016); 
SELECT p.country_code, p.first_name FROM players p WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE match_type = 'WTA Championships' ) AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE match_type = 'Australian Open' ); 
SELECT p.player_id, p.first_name, p.country_code FROM players p JOIN (     SELECT winner_id     FROM matches     WHERE loser_id IN (         SELECT player_id FROM rankings WHERE ranking_name = 'WTA Championships'     )     AND winner_id IN (         SELECT player_id FROM rankings WHERE ranking_name = 'Australian Open'     ) ) AS winning_players ON p.player_id = winning_players.winner_id; 
SELECT p.player_id, p.country_code FROM players p JOIN (     SELECT player_id, MIN(date_of_birth) AS oldest_birthdate     FROM players     GROUP BY player_id ) oldest ON p.player_id = oldest.player_id AND p.date_of_birth = oldest.oldest_birthdate LIMIT 1; 
SELECT p.first_name, p.country_code FROM players p JOIN (     SELECT MIN(birth_date) as oldest_birth_date     FROM players ) as m ON p.birth_date = m.oldest_birth_date; 
SELECT p.first_name, p.last_name FROM players p ORDER BY p.birth_date; 
SELECT p.player_id, p.full_name FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY p.birth_date; 
SELECT p.first_name, p.last_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.hand = 'L' ORDER BY p.birth_date; 
SELECT p.player_id, p.full_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.handedness = 'left-handed' ORDER BY p.birth_date; 
SELECT p.player_id, p.first_name, p.country_code FROM players p JOIN (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS most_tours ON p.player_id = most_tours.winner_id WHERE p.first_name IS NOT NULL AND p.country_code IS NOT NULL; 
SELECT p.first_name, p.country_code FROM players p JOIN (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS top_winner ON p.player_id = top_winner.winner_id; 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT YEAR(`matches.match_date`) AS match_year, COUNT(*) AS match_count FROM `matches` JOIN `players` ON `matches.winner_id` = `players.player_id` GROUP BY match_year ORDER BY match_count DESC LIMIT 1; 
SELECT p.player_id, r.rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.rank_points = (     SELECT MAX(rank_points) FROM rankings ) ORDER BY r.rank_points DESC LIMIT 1; 
SELECT p.player_id, COUNT(m.winner_id) AS wins, r.rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY wins DESC LIMIT 1; 
SELECT `players`.`player_id`, `players`.`player_name` FROM `players` JOIN (     SELECT `winner_id`     FROM `matches`     WHERE `winner_id` IN (SELECT `player_id` FROM `rankings`) ) AS `high_rank_winners` ON `players`.`player_id` = `high_rank_winners`.`winner_id` WHERE `players`.`player_name` = 'Australian Open' ORDER BY (     SELECT SUM(`matches`.`winner_id` IN (SELECT `player_id` FROM `rankings`))     FROM `matches`     WHERE `matches`.`winner_id` = `players`.`player_id` ) DESC LIMIT 1; 
SELECT p.player_id FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE winner_id IN (SELECT player_id FROM rankings)     AND loser_id IN (SELECT player_id FROM rankings) ) GROUP BY p.player_id ORDER BY SUM(CASE WHEN r.player_id = m.winner_id THEN 1 ELSE 0 END) DESC LIMIT 1; 
SELECT m.winner_id, m.loser_id FROM matches m JOIN (     SELECT winner_id, loser_id, SUM(minutes) as total_minutes     FROM matches     JOIN (         SELECT winner_id, loser_id, GREATEST(SUM(duration), 0) as minutes         FROM matches         GROUP BY winner_id, loser_id     ) as subq     GROUP BY winner_id, loser_id     ORDER BY total_minutes DESC     LIMIT 1 ) as top_match ON m.winner_id = top_match.winner_id AND m.loser_id = top_match.loser_id JOIN players p_w ON m.winner_id = p_w.player_id JOIN players p_l ON m.loser_id = p_l.player_id; 
SELECT m.winner_id AS winner, m.loser_id AS loser FROM matches m WHERE TIMESTAMPDIFF(SECOND, (SELECT game_time FROM matches WHERE match_id = m.match_id), (SELECT game_time FROM matches WHERE match_id = (SELECT MAX(match_id) FROM matches)) = (SELECT MAX(TIMESTAMPDIFF(SECOND, game_time, (SELECT game_time FROM matches WHERE match_id = m.match_id))) FROM matches) 
SELECT p.player_id, p.first_name, AVG(r.rank) as average_rank FROM players p LEFT JOIN (     SELECT player_id, AVG(rank) as rank     FROM rankings     GROUP BY player_id ) r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name; 
SELECT p.player_id, AVG(r.rank) AS average_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.player_id, p.first_name, SUM(r.rank_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name; 
SELECT p.player_id, SUM(r.points) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; 
SELECT p.country, COUNT(*) AS number_of_players FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.country; 
SELECT country, COUNT(*) AS players_count FROM players GROUP BY country; 
SELECT c.country_code, COUNT(p.player_id) as player_count FROM countries c JOIN players p ON c.country_code = p.country GROUP BY c.country_code ORDER BY player_count DESC LIMIT 1; 
SELECT `country_code` FROM countries WHERE country_code = (     SELECT `country_code`     FROM countries     GROUP BY `country_code`     ORDER BY COUNT(*) DESC     LIMIT 1 ); 
SELECT player_id FROM players GROUP BY player_id HAVING COUNT(player_id) > 50; 
SELECT player_id FROM players GROUP BY player_id HAVING COUNT(*) > 50; 
SELECT      rankings.player_id,     COUNT(matches.match_id) AS total_tours FROM      rankings LEFT JOIN      matches ON rankings.player_id = matches.winner_id OR rankings.player_id = matches.loser_id GROUP BY      rankings.player_id; 
SELECT      r.player_id,      COUNT(m.winner_id) AS total_tours FROM      rankings r LEFT JOIN      matches m ON r.player_id = m.winner_id GROUP BY      r.player_id; 
SELECT YEAR(`matches.match_date`) AS match_year, COUNT(*) AS number_of_matches FROM `matches` GROUP BY match_year; 
SELECT YEAR(match_date) AS match_year, COUNT(*) AS total_matches FROM matches GROUP BY match_year; 
SELECT p.player_id, r.rank FROM players p JOIN (     SELECT winner_id, MIN(player_id) as min_player_id     FROM matches     JOIN players ON winner_id = player_id     GROUP BY winner_id ) AS min_winners ON p.player_id = min_winners.min_player_id JOIN rankings r ON p.player_id = r.player_id ORDER BY p.player_id LIMIT 3; 
SELECT p.player_id, r.rank FROM players p JOIN (     SELECT winner_id, RANK() OVER (ORDER BY (SELECT NULL) DESC) as rank     FROM matches ) m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE p.player_id IS NOT NULL ORDER BY rank LIMIT 3; 
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_id IN (SELECT player_id FROM rankings)  AND winner_id IN (SELECT player_id FROM players WHERE hand = 'left-handed'); 
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.player_id IN (SELECT player_id FROM rankings) AND p.player_id IN (SELECT player_id FROM players WHERE `left_hand` = 'left'); 
SELECT p.player_id, p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(CASE WHEN r.rank_points IS NULL THEN 0 ELSE 1 END) AS rank_points     FROM matches     LEFT JOIN rankings r ON matches.winner_id = r.player_id     GROUP BY winner_id     ORDER BY rank_points DESC, winner_id ) AS ranked_winners ON p.player_id = ranked_winners.winner_id WHERE ranked_winners.rank_points = (     SELECT MAX(rank_points)     FROM (         SELECT winner_id, SUM(CASE WHEN r.rank_points IS NULL THEN 0 ELSE 1 END) AS rank_points         FROM matches         LEFT JOIN rankings r ON matches.winner_id = r.player_id         GROUP BY winner_id     ) AS subquery ) LIMIT 1; 
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 ); 
SELECT hand, COUNT(*) as player_count FROM players GROUP BY hand; 
SELECT hand_type, COUNT(*) AS player_count FROM players GROUP BY hand_type; 
SELECT COUNT(DISTINCT s.id)  FROM ship s  LEFT JOIN death d ON s.id = d.caused_by_ship_id  WHERE s.lost_in_battle IS NOT NULL AND d.id IS NULL; 
SELECT s.name, s.tonnage FROM ship s JOIN battle b ON s.lost_in_battle = b.id ORDER BY s.name DESC; 
SELECT b.id, b.date, b.result FROM battle b;  SELECT b.id, b.date, b.result FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle LEFT JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.date, b.result; 
SELECT   `battle_id`,   MAX(`death_count`) AS `max_death_toll`,   MIN(`death_count`) AS `min_death_toll` FROM (   SELECT     `b`.`id` AS `battle_id`,     COUNT(`d`.`id`) AS `death_count`   FROM     `battle` AS `b`   LEFT JOIN     `death` AS `d` ON `b`.`id` = `d`.`caused_by_ship_id`   GROUP BY     `b`.`id` ) AS `toll` GROUP BY   `battle_id` ORDER BY   `max_death_toll` DESC; 
SELECT AVG(death_count) AS average_injuries_per_battle FROM (     SELECT b.id AS battle_id, COUNT(d.id) AS death_count     FROM battle b     LEFT JOIN death d ON b.id = d.caused_by_ship_id     LEFT JOIN ship s ON d.caused_by_ship_id = s.id     WHERE s.lost_in_battle IS NOT NULL     GROUP BY b.id ) AS battle_deaths; 
SELECT d.id AS death_id, d.caused_by_ship_id FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.lost_in_battle = (SELECT id FROM battle WHERE id = t); 
SELECT b.id AS battle_id, b.id AS battle_result FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle LEFT JOIN death d ON s.id = d.caused_by_ship_id WHERE NOT EXISTS (     SELECT 1     FROM ship     JOIN death ON ship.id = death.caused_by_ship_id     JOIN battle ON ship.lost_in_battle = battle.id     JOIN battle_commander bc ON battle.id = bc.battle_id     WHERE bc.commander_name = 'Boril' ) 
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id JOIN (     SELECT id FROM ship WHERE lost_in_battle = (SELECT id FROM battle WHERE name = 'Brig') ) as subq ON s.id = subq.id; 
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING COUNT(d.id) > 10; 
SELECT      s.id AS ShipID,      s.lost_in_battle AS BattleID FROM      ship s JOIN      death d ON s.id = d.caused_by_ship_id GROUP BY      s.id, s.lost_in_battle ORDER BY      COUNT(d.id) DESC LIMIT 1; 
 To answer the question about the distinct battle names between the Bulgarian commander 'Kaloyan' and the Latin commander 'Baldwin I', we need to consider that the given schema does not include any information about the commanders or their battles. Therefore, it's not possible to directly answer this question based on the provided schema and data.  However, if we were to assume that there is additional information in the schema or additional tables that could connect commanders to battles, we would need that schema or tables to proceed. Since we don't have that information, we can't provide a SQL query for this question.  If you have a different schema or additional information that includes the commanders' names and their associated battles, please provide that, and I can help you write the SQL query accordingly.
SELECT COUNT(DISTINCT lost_in_battle) FROM `battle`; 
SELECT COUNT(*) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE NOT EXISTS (     SELECT 1     FROM ship     WHERE s.id = id AND tonnage = 225 ); 
SELECT b.id AS battle_id, b.id AS battle_date FROM `battle` b JOIN `ship` s ON b.id = s.lost_in_battle WHERE s.id IN (     SELECT id     FROM `ship`     JOIN `death` d ON s.id = d.caused_by_ship_id     WHERE s.id IN (         SELECT id         FROM `ship`         WHERE `name` = 'Lettice'     ) OR     SELECT id     FROM `ship`     WHERE `name` = 'HMS Atalanta' ); 
SELECT b.id AS battle_id, b.result, b.bulgarian_commander FROM `battle` b WHERE NOT EXISTS (     SELECT 1     FROM `ship` s     WHERE s.lost_in_battle = b.id       AND EXISTS (         SELECT 1         FROM `battle` b2         WHERE b2.name = 'English Channel'           AND b2.id = s.lost_in_battle       ) ) 
SELECT d.id, d.caused_by_ship_id FROM death d JOIN ship s ON d.caused_by_ship_id = s.id JOIN battle b ON s.lost_in_battle = b.id WHERE b.id IN (     SELECT id FROM battle WHERE id LIKE '%East%' ); 
SELECT a1.address_id, a1.address_id AS address_id_2 FROM Addresses a1 UNION ALL SELECT a2.address_id, a2.address_id AS address_id_2 FROM Addresses a2 WHERE a2.address_id NOT IN (SELECT a1.address_id FROM Addresses a1); 
SELECT * FROM Addresses LIMIT 2;  SELECT * FROM Addresses ORDER BY address_id DESC LIMIT 2; 
SELECT COUNT(*) FROM Courses; 
SELECT COUNT(*) FROM Courses; 
SELECT `Courses`.`course_id`, `Courses`.`description` FROM `Courses` WHERE `Courses`.`course_id` = 1; 
SELECT c.course_id, c.description FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Degree_Programs dp ON s.course_id = dp.course_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_id = (SELECT department_id FROM Departments WHERE description = 'Mathematics'); 
SELECT `zip_code` FROM `Addresses` WHERE `city` = 'Port Chelsea'; 
SELECT zip_code  FROM Addresses  WHERE address_name = 'Port Chelsea'; 
SELECT d.department_id, d.name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1; 
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs; 
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs; 
SELECT COUNT(DISTINCT d.department_id)  FROM Degree_Programs dp  JOIN Departments d ON dp.department_id = d.department_id; 
SELECT COUNT(DISTINCT degree_program_id) AS different_degrees_offered FROM Degree_Programs; 
SELECT COUNT(*)  FROM Degree_Programs dp  JOIN Departments d ON dp.department_id = d.department_id  WHERE d.department_id = 1; 
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_id = 1; 
SELECT s.section_id, c.course_id FROM Sections s JOIN Courses c ON s.course_id = c.course_id; 
SELECT s.section_id, c.course_id, c.course_description FROM Sections s JOIN Courses c ON s.course_id = c.course_id; 
SELECT `Courses`.`course_id`, `Courses`.`course_id` AS `name` FROM `Courses` JOIN `Sections` ON `Courses`.`course_id` = `Sections`.`course_id` GROUP BY `Courses`.`course_id` HAVING COUNT(`Sections`.`section_id`) <= 2; 
SELECT `Courses`.`course_id`, `Courses`.`course_id` AS `course_name` FROM `Courses` LEFT JOIN `Sections` ON `Courses`.`course_id` = `Sections`.`course_id` GROUP BY `Courses`.`course_id` HAVING COUNT(`Sections`.`section_id`) < 2; 
SELECT `section_name` FROM `Sections` ORDER BY `section_name` DESC; 
SELECT section_id  FROM Sections  ORDER BY section_id DESC; 
SELECT S.semester_id, S.semester_name FROM Semesters S JOIN (     SELECT semester_id, COUNT(*) AS total_students     FROM Student_Enrolment     GROUP BY semester_id     ORDER BY total_students DESC     LIMIT 1 ) AS SemestersCount ON S.semester_id = SemestersCount.semester_id; 
SELECT      Semesters.semester_id,     Semesters.semester_name FROM      Semesters JOIN      Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY      Semesters.semester_id, Semesters.semester_name ORDER BY      COUNT(Student_Enrolment.student_id) DESC LIMIT 1; 
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id WHERE d.department_name LIKE '%computer%'; 
SELECT department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.name LIKE '%computer%'; 
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id HAVING COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name  FROM      Students s  JOIN      Student_Enrolment se ON s.student_id = se.student_id  JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  JOIN      Semesters sm ON se.semester_id = sm.semester_id  GROUP BY      s.student_id  HAVING      COUNT(DISTINCT dp.degree_program_id) = 2; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.department_id IN (SELECT department_id FROM Departments WHERE department_id = 1); 
SELECT DISTINCT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE department_id = 2); 
SELECT dp.degree_program_id, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY student_count DESC LIMIT 1; 
SELECT      DP.degree_program_id,      COUNT(SE.student_id) AS num_students FROM      Degree_Programs DP JOIN      Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY      DP.degree_program_id ORDER BY      num_students DESC LIMIT 1; 
SELECT      `Degree_Programs.degree_program_id`,      `Degree_Programs.department_id` FROM      `Degree_Programs` JOIN      `Student_Enrolment` ON `Degree_Programs.degree_program_id` = `Student_Enrolment.degree_program_id` GROUP BY      `Degree_Programs.degree_program_id`,      `Degree_Programs.department_id` ORDER BY      COUNT(`Student_Enrolment.student_id`) DESC LIMIT 1; 
SELECT dp.degree_program_id, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY student_count DESC LIMIT 1; 
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_enrolment_id) AS number_of_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id,      s.first_name,      s.middle_name,      s.last_name ORDER BY      number_of_enrollments DESC LIMIT 1; 
SELECT      S.student_id,      S.first_name,      S.middle_name,      S.last_name,      COUNT(SE.student_id) AS number_of_enrollments FROM      Students S JOIN      Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY      S.student_id ORDER BY      number_of_enrollments DESC LIMIT 1; 
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment); 
SELECT `Semesters.semester_id`, `Semesters.semester_name` FROM `Semesters` LEFT JOIN `Student_Enrolment` ON `Semesters.semester_id` = `Student_Enrolment.semester_id` WHERE `Student_Enrolment.semester_id` IS NULL; 
SELECT DISTINCT c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT DISTINCT c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id; 
SELECT Courses.course_id, COUNT(Student_Enrolment_Courses.student_course_id) AS enrollment_count FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY enrollment_count DESC LIMIT 1; 
SELECT `Courses`.`course_id`, `Courses`.`course_name` FROM `Courses` JOIN `Student_Enrolment_Courses` ON `Courses`.`course_id` = `Student_Enrolment_Courses`.`course_id` GROUP BY `Courses`.`course_id`, `Courses`.`course_name` ORDER BY COUNT(`Student_Enrolment_Courses`.`student_course_id`) DESC LIMIT 1; 
SELECT s.student_id FROM Students s WHERE s.current_address_id NOT IN (SELECT address_id FROM Addresses WHERE address_state = 'North Carolina') AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment); 
SELECT s.last_name  FROM Students s  JOIN Addresses a ON s.current_address_id = a.address_id  WHERE a.address_id NOT IN (SELECT department_id FROM Departments) AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment); 
SELECT t.transcript_id, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2; 
SELECT t.transcript_id, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2; 
SELECT phone_number  FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE first_name = 'Timmothy' AND last_name = 'Ward'; 
SELECT mobile_number FROM Students WHERE `name` = 'Timmothy Ward'; 
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Student_Enrolment_Courses SEC ON SE.student_enrolment_id = SEC.student_enrolment_id JOIN Transcripts T ON SEC.student_course_id = T.transcript_id ORDER BY T.transcript_id ASC LIMIT 1; 
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN (     SELECT MIN(student_enrolment_id) AS first_enrolment_id     FROM Student_Enrolment ) AS first_enrolment ON se.student_enrolment_id = first_enrolment.first_enrolment_id; 
SELECT      s.first_name,      s.middle_name,      s.last_name FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id JOIN      Semesters sm ON se.semester_id = sm.semester_id JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE      sm.semester_id = (SELECT MIN(semester_id) FROM Semesters) ORDER BY      dp.degree_program_id,      s.student_id LIMIT 1; 
SELECT      s.first_name,      s.middle_name,      s.last_name  FROM      Students s  JOIN      Student_Enrolment se ON s.student_id = se.student_id  JOIN      Semesters sm ON se.semester_id = sm.semester_id  JOIN      Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  JOIN      Departments d ON dp.department_id = d.department_id  JOIN      (SELECT           MIN(sm.semester_id) AS min_semester       FROM           Semesters sm       JOIN           Student_Enrolment se ON sm.semester_id = se.semester_id       JOIN           Degree_Programs dp ON se.degree_program_id = dp.degree_program_id       JOIN           Departments d ON dp.department_id = d.department_id       WHERE           d.department_id = (SELECT department_id FROM Degree_Programs WHERE degree_program_id =              (SELECT degree_program_id FROM Student_Enrolment WHERE student_id =                 (SELECT student_id FROM Student_Enrolment_Courses WHERE student_course_id =                    (SELECT student_course_id FROM Transcript_Contents WHERE transcript_id =                       (SELECT MIN(transcript_id) FROM Transcripts)))))) AS earliest_graduation  ON      sm.semester_id = earliest_graduation.min_semester  WHERE      s.student_id =          (SELECT student_id FROM Student_Enrolment           WHERE degree_program_id =              (SELECT degree_program_id FROM Degree_Programs WHERE department_id =                 (SELECT department_id FROM Departments WHERE department_id =                    (SELECT department_id FROM Degree_Programs WHERE degree_program_id =                       (SELECT degree_program_id FROM Student_Enrolment WHERE student_id =                          (SELECT student_id FROM Student_Enrolment_Courses WHERE student_course_id =                             (SELECT student_course_id FROM Transcript_Contents WHERE transcript_id =                                (SELECT MIN(transcript_id) FROM Transcripts))))))); 
SELECT s.first_name FROM Students s WHERE s.permanent_address_id != s.current_address_id; 
SELECT S.student_id, S.first_name FROM Students S WHERE S.permanent_address_id <> S.current_address_id ORDER BY S.student_id LIMIT 1; 
SELECT a.address_id, a.zip_postcode, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT a.address_id, MAX(students_count) AS students_count FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id ORDER BY students_count DESC LIMIT 1; 
SELECT AVG(transcripts.transcript_id) AS average_transcript_date FROM transcripts; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT t.transcript_id, t.transcript_id AS 'Transcript ID', tc.student_course_id AS 'Student Course ID' FROM `Transcripts` t JOIN `Transcript_Contents` tc ON t.transcript_id = tc.transcript_id ORDER BY t.transcript_id ASC LIMIT 1; 
SELECT MIN(transcript_id) AS Earliest_Transcript, MIN(transcript_id) AS Transcript_Details FROM Transcript_Contents; 
SELECT COUNT(*) AS total_transcripts_released FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts; 
SELECT MAX(transcript_id) AS last_transcript_id FROM Transcripts; 
SELECT MAX(transcript_id) FROM Transcripts; 
SELECT sc.student_course_id, COUNT(*) as transcript_count FROM Student_Enrolment_Courses sc JOIN Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.student_course_id ORDER BY transcript_count DESC LIMIT 1; 
SELECT      sc.student_course_id,      COUNT(*) as frequency FROM      Student_Enrolment_Courses sc JOIN      Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY      sc.student_course_id ORDER BY      frequency DESC LIMIT 1; 
SELECT transcript_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY transcript_id ORDER BY count ASC LIMIT 1; 
SELECT t.transcript_id, t.transcript_id FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1; 
SELECT DISTINCT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE `degree_program_id` BETWEEN 1 AND 5 ) AND SE.semester_id IN (     SELECT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE `degree_program_id` BETWEEN 6 AND 10     ) 
SELECT DISTINCT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.department_id IN (     SELECT department_id     FROM Degree_Programs     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_program_id BETWEEN 1 AND 4 -- Assuming 1-4 are Masters and 5-8 are Bachelors     ) ) AND se.semester_id IN (     SELECT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_program_id BETWEEN 5 AND 8 -- Assuming 5-8 are Bachelors and 1-4 are Masters     ) ); 
SELECT COUNT(DISTINCT `current_address_id`) AS `DistinctCurrentAddresses` FROM `Students`; 
SELECT DISTINCT a.address_id FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id; 
SELECT *  FROM Students  ORDER BY student_id DESC; 
SELECT * FROM Students ORDER BY student_id DESC; 
-- Describe the section h SELECT * FROM Sections WHERE section_id = 5;  -- Get the number of students enrolled in each department SELECT d.department_id, COUNT(se.student_id) AS student_count FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY d.department_id;  -- List all students and their degree programs SELECT s.student_id, dp.degree_program_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id;  -- Find the total number of transcripts created SELECT COUNT(*) AS total_transcripts FROM Transcripts;  -- Retrieve the average grade for each course SELECT sc.course_id, AVG(tc.grade) AS average_grade FROM Student_Enrolment_Courses sc JOIN Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.course_id;  -- List the students who have not yet graduated SELECT s.student_id FROM Students s LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id LEFT JOIN Degree_Programs dp ON se.degree_program_id = dp.department_id WHERE dp.degree_program_id IS NULL;  -- Update the address of a student UPDATE Students SET current_address_id = 20 WHERE student_id = 5;  -- Delete a course from the database DELETE FROM Courses WHERE course_id = 5;  -- Insert a new course into the database INSERT INTO Courses (course_id) VALUES (6);  -- Select all students who are enrolled in the 'Science' department SELECT s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Science'; 
SELECT section_id  FROM Sections  WHERE course_id = (SELECT course_id FROM Courses WHERE course_id = (SELECT course_id FROM Sections WHERE section_id = (SELECT section_id FROM Sections WHERE section_id = (SELECT section_id FROM Sections WHERE section_id = 4)))); 
SELECT DISTINCT s.student_id, s.first_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')    OR s.phone_number = '09700166582'; 
SELECT DISTINCT S.student_id FROM Students S JOIN Addresses A ON S.permanent_address_id = A.address_id WHERE A.address_id = 9 OR S.student_id IN (     SELECT student_id     FROM Students     WHERE student_id = 1 ); 
SELECT id FROM `Cartoon` ORDER BY id ASC; 
SELECT c.id FROM `Cartoon` c JOIN `TV_Channel` t ON c.Channel = t.id ORDER BY c.id ASC; 
SELECT c.id FROM `Cartoon` c JOIN `TV_Channel` tc ON c.Channel = tc.id WHERE tc.id IN ('700', '701', '703', '704', '705') AND c.Channel IN ('700', '701', '703', '704', '705') AND c.Channel = '700' AND tc.id = '700'; 
SELECT Cartoon.id FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.id NOT IN (SELECT Channel FROM TV_series) 
SELECT COUNT(*)  FROM Cartoon  WHERE Channel IN (SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM TV_series)); 
SELECT COUNT(*)  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.id = (SELECT id FROM TV_Channel WHERE id = '703'); 
SELECT c.id, c.Channel FROM `Cartoon` c JOIN `TV_Channel` tc ON c.Channel = tc.id ORDER BY c.id; 
SELECT      C.id AS CartoonID,      C.Channel,      T.id AS ChannelID  FROM      Cartoon C  JOIN      TV_Channel T  ON      C.Channel = T.id  ORDER BY      C.id; 
SELECT `Cartoon`.`id`  FROM `Cartoon` JOIN `TV_Channel` ON `Cartoon.Channel` = `TV_Channel.id` WHERE `TV_Channel.id` IN (     SELECT `id`      FROM `TV_Channel`     JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel`     WHERE `TV_series.id` IN (         SELECT `id`          FROM `TV_series`          WHERE `TV_series.Channel` IN ('700', '701', '703', '704', '705')     ) ) AND (`TV_Channel.id` IN ('700', '701', '703', '704', '705')) 
SELECT Cartoon.id  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.id IN (SELECT id FROM TV_Channel WHERE Channel = 'Ben Jones' OR Channel = 'Brandon Vietti'); 
SELECT Country, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC LIMIT 1; 
SELECT TV_Channel.id AS country, COUNT(TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY TV_Channel.id ORDER BY num_channels DESC LIMIT 1; 
SELECT COUNT(DISTINCT `id`) FROM `TV_Channel`; SELECT COUNT(DISTINCT `Channel`) FROM `TV_series` UNION SELECT COUNT(DISTINCT `Channel`) FROM `Cartoon`; 
SELECT COUNT(DISTINCT `Channel`) AS DifferentChannels,         (SELECT COUNT(*) FROM `TV_series`) AS DifferentSeries,        (SELECT COUNT(*) FROM `Cartoon`) AS DifferentContents FROM `TV_Channel`; 
SELECT TC.id  FROM TV_Channel TC  JOIN TV_series TS ON TC.id = TS.Channel  WHERE TS.id = 3.0; 
SELECT id FROM TV_series WHERE Channel = '703'; 
SELECT `TV_Channel.id` AS ChannelID FROM `TV_Channel` JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel` WHERE `TV_series.id` = (SELECT `id` FROM `TV_series` WHERE `Channel` = 'Sky Radio'); 
SELECT TC.id FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel WHERE TS.id = (SELECT id FROM TV_series WHERE Channel = '700'); 
SELECT COUNT(*)  FROM TV_Channel  WHERE id IN (SELECT Channel FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE id LIKE '7%') AND Channel IN (SELECT id FROM TV_Channel WHERE id LIKE '7%')); 
SELECT COUNT(DISTINCT `TV_Channel.id`)  FROM `TV_Channel`  JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel` JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel`; 
SELECT `Channel`, COUNT(*) AS `Count` FROM `TV_Channel` WHERE `id` NOT IN (SELECT `Channel` FROM `TV_series` UNION SELECT `Channel` FROM `Cartoon`) GROUP BY `Channel` ORDER BY `Count` ASC LIMIT 1; 
SELECT `TV_Channel.id`, COUNT(`TV_Channel.id`) as `Channel_Count` FROM `TV_Channel` JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel` GROUP BY `TV_Channel.id` HAVING COUNT(`TV_Channel.id`) = (     SELECT MIN(Channel_Count)     FROM (         SELECT COUNT(`TV_Channel.id`) as Channel_Count         FROM `TV_Channel`         JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel`         GROUP BY `TV_Channel.id`     ) as MinChannels ) UNION SELECT `TV_Channel.id`, COUNT(`TV_Channel.id`) as `Channel_Count` FROM `TV_Channel` JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel` GROUP BY `TV_Channel.id` HAVING COUNT(`TV_Channel.id`) = (     SELECT MIN(Channel_Count)     FROM (         SELECT COUNT(`TV_Channel.id`) as Channel_Count         FROM `TV_Channel`         JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel`         GROUP BY `TV_Channel.id`     ) as MinChannels ); 
SELECT `TV_Channel.id`, COUNT(`TV_Channel.id`) AS `Number_of_Channels` FROM `TV_Channel` LEFT JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel` LEFT JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel` GROUP BY `TV_Channel.id`; 
SELECT `TV_Channel.id`, COUNT(`TV_Channel.id`) AS `Number_of_Channels` FROM `TV_Channel` JOIN `TV_series` ON `TV_Channel.id` = `TV_series.Channel` GROUP BY `TV_Channel.id` UNION ALL SELECT `TV_Channel.id`, COUNT(`TV_Channel.id`) AS `Number_of_Channels` FROM `TV_Channel` JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel` GROUP BY `TV_Channel.id` ORDER BY `Number_of_Channels` DESC; 
SELECT TV_Channel.id, TV_Channel.id AS ChannelID, TV_series.id AS SeriesID, TV_series.Channel AS SeriesChannel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.Channel = Cartoon.Channel WHERE Cartoon.id = 5.0; 
SELECT TS.id FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel JOIN Cartoon C ON TC.id = C.Channel WHERE C.id = 5.0 AND TC.id = (SELECT Channel FROM TV_series WHERE id = 3.0) 
SELECT Cartoon.id FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Channel = '700'; 
SELECT c.id FROM Cartoon AS c JOIN TV_Channel AS tc ON c.Channel = tc.id JOIN TV_series AS ts ON tc.id = ts.Channel WHERE ts.Channel = (SELECT id FROM TV_Channel WHERE id = '703') AND c.id = (SELECT id FROM Cartoon WHERE Channel = '703'); 
SELECT `id`, `Channel` FROM `TV_series` ORDER BY `id`; 
SELECT *  FROM TV_series  JOIN Cartoon ON TV_series.Channel = Cartoon.Channel  ORDER BY Cartoon.id; 
SELECT id AS Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3; 
SELECT `TV_series.id`, `TV_series.Channel`, `TV_series.id` AS Rating FROM `TV_series` JOIN `TV_Channel` ON `TV_series.Channel` = `TV_Channel.id` ORDER BY `TV_series.id` DESC LIMIT 3; 
SELECT MIN(`id`), MAX(`id`) FROM `TV_series`; 
SELECT MAX(`share`), MIN(`share`) FROM `TV_series`; 
SELECT air_date FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.id = (SELECT id FROM TV_series WHERE id = (SELECT id FROM TV_Channel WHERE id = '701')); 
SELECT air_date  FROM TV_series  WHERE id = (SELECT id FROM Cartoon WHERE id = (SELECT id FROM TV_series WHERE Channel = '703')) 
SELECT Channel,         (SELECT COUNT(*)          FROM TV_series AS ts1          WHERE ts1.Channel = TV_Channel.id          AND ts1.id > TV_series.id) + 1 AS Weekly_Rank FROM TV_series WHERE id = (SELECT id FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE `id` = '704')); 
SELECT     Channel,     ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS weekly_rank FROM     TV_series WHERE     id = 3.0 
SELECT TC.id AS ChannelID, TC.id AS ChannelName FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel WHERE TS.id = (SELECT id FROM TV_series WHERE Channel = '700' AND id = 2.0); 
SELECT `TV_series.id`, `TV_series.Channel` FROM `TV_series` JOIN `TV_Channel` ON `TV_series.Channel` = `TV_Channel.id` WHERE `TV_Channel.id` IN ('700', '701', '703', '704', '705') AND `TV_series.id` = (SELECT `id` FROM `TV_series` WHERE `id` = (SELECT `id` FROM `Cartoon` WHERE `id` = (SELECT `id` FROM `TV_Channel` WHERE `id` = '707'))); 
SELECT `TV_series.id` AS Episode FROM `TV_series` JOIN `TV_Channel` ON `TV_series.Channel` = `TV_Channel.id` WHERE `TV_Channel.id` = '700' AND `TV_series.id` = 1.0; 
SELECT id FROM TV_series WHERE Channel = '701'; 
SELECT Director, COUNT(*) AS NumberOfCartoons FROM Cartoon GROUP BY Director; 
SELECT      `director`,      COUNT(`id`) AS `number_of_cartoons` FROM      `Cartoon` GROUP BY      `director`; 
SELECT c.id, c.Channel  FROM `Cartoon` c  JOIN `TV_Channel` tc ON c.Channel = tc.id  ORDER BY c.id DESC  LIMIT 1; 
SELECT `Cartoon`.`id` AS `ProductionCode`, `TV_Channel`.`id` AS `Channel` FROM `Cartoon` JOIN `TV_Channel` ON `Cartoon.Channel` = `TV_Channel.id` ORDER BY `Cartoon.id` DESC LIMIT 1; 
SELECT      TC.id AS ChannelID,      TC.id AS PackageChoice,      TVS.id AS SeriesID,      TVS.id AS SeriesName FROM      TV_Channel TC JOIN      TV_series TVS ON TC.id = TVS.Channel JOIN      Cartoon CART ON TC.id = CART.Channel WHERE      TC.id IN ('703', '704', '705'); 
SELECT TV_Channel.id AS ChannelID, TV_Channel.id AS PackageOption, TV_series.id AS SeriesID, TV_series.Channel AS SeriesChannel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.id IN ('701', '703', '704', '705') 
SELECT DISTINCT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN TV_series ON Cartoon.Channel = TV_series.Channel WHERE TV_series.id = (SELECT id FROM TV_series WHERE Channel = TV_Channel.id AND '700' = (SELECT Channel FROM TV_series WHERE id = 1.0)); 
SELECT DISTINCT c.Country FROM Cartoon AS ct JOIN TV_Channel AS tc ON ct.Channel = tc.id JOIN TV_series AS ts ON tc.id = ts.Channel JOIN Writers AS wr ON ts.id = wr.Series_id WHERE wr.Name = 'Todd Casey'; 
SELECT TC.id FROM TV_Channel TC WHERE TC.id NOT IN (     SELECT C.Channel     FROM Cartoon C     JOIN TV_Channel TC ON C.Channel = TC.id     JOIN TV_series TS ON TC.id = TS.Channel     WHERE TS.id = (         SELECT id FROM TV_series WHERE Channel = '701'     ) ); 
SELECT `TV_Channel.id`, `TV_Channel.id` AS Channel_ID FROM `TV_Channel` LEFT JOIN `Cartoon` ON `TV_Channel.id` = `Cartoon.Channel` WHERE `Cartoon.id` NOT IN (SELECT `id` FROM `Cartoon` WHERE `id` = 1.0 OR `id` = 2.0 OR `id` = 3.0) 
SELECT TV_series.id, TV_Channel.id FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.director IN ('Ben Jones', 'Michael Chang'); 
SELECT TV_series.id AS Series_Name, TV_Channel.id AS Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_series.id = Cartoon.id WHERE (Cartoon.id = 1.0 OR Cartoon.id = 2.0) AND (Cartoon.Channel IN ('700', '701')); 
SELECT TC.id, TC.Channel FROM TV_Channel TC JOIN TV_series TS ON TC.id = TS.Channel JOIN Cartoon CT ON TC.id = CT.Channel WHERE TS.Channel NOT IN (SELECT Channel FROM TV_series WHERE Channel = '701') AND CT.Channel NOT IN (SELECT Channel FROM Cartoon WHERE Channel = '701') 
SELECT TV_Channel.id, TV_Channel.Country, TV_Channel.Pixel_Aspect_Ratio FROM TV_Channel WHERE TV_Channel.id IN (     SELECT TV_series.Channel     FROM TV_series     WHERE TV_series.Channel NOT IN (         SELECT TV_series.Channel         FROM TV_series         JOIN TV_Channel ON TV_series.Channel = TV_Channel.id         WHERE TV_Channel.Country = 'English'     ) ) UNION SELECT TV_Channel.id, TV_Channel.Country, TV_Channel.Pixel_Aspect_Ratio FROM TV_Channel WHERE TV_Channel.id IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Channel NOT IN (         SELECT TV_series.Channel         FROM TV_series         JOIN TV_Channel ON TV_series.Channel = TV_Channel.id         WHERE TV_Channel.Country = 'English'     ) ); 
SELECT TC.id FROM TV_Channel TC GROUP BY TC.id HAVING COUNT(*) > 2; 
SELECT `Channel` FROM `TV_Channel` GROUP BY `Channel` HAVING COUNT(*) > 2; 
SELECT TV_Channel.id  FROM TV_Channel  LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Channel IS NULL; 
SELECT DISTINCT `TV_Channel.id` FROM `TV_Channel` WHERE `TV_Channel.id` NOT IN (SELECT `Cartoon.Channel` FROM `Cartoon` JOIN `TV_Channel` ON `Cartoon.Channel` = `TV_Channel.id` WHERE `Cartoon.id` = (SELECT `id` FROM `TV_Channel` WHERE `TV_Channel.id` = (SELECT `Channel` FROM `TV_series` WHERE `TV_series.Channel` = '707'))); 
SELECT TC.id FROM TV_Channel TC WHERE TC.id NOT IN (     SELECT C.Channel     FROM Cartoon C     JOIN TV_series TS ON C.Channel = TS.Channel     WHERE TS.id = (         SELECT id         FROM TV_series         WHERE Channel = TC.id         AND id IN (             SELECT id             FROM TV_series             WHERE Channel = (                 SELECT Channel                 FROM Cartoon                 WHERE id = (                     SELECT id                     FROM Cartoon                     WHERE name = 'Ben Jones'                 )             )         )     ) ) 
SELECT TC.id, TC.Channel FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Channel IS NULL OR C.Channel NOT IN (     SELECT Channel     FROM Cartoon     WHERE id = (         SELECT id         FROM Cartoon         WHERE `Channel` = '703'     ) ) 
SELECT COUNT(*) FROM poker_player; 
SELECT COUNT(*) FROM poker_player; 
SELECT `poker_player`.`People_ID`, `people`.`People_ID` FROM `poker_player` JOIN `people` ON `poker_player`.`People_ID` = `people`.`People_ID` ORDER BY `poker_player`.`People_ID` DESC; 
SELECT pp.Poker_Player_ID, p.People_ID FROM poker_player pp LEFT JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.People_ID DESC; 
SELECT pp.Poker_Player_ID, p.People_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT pp.Poker_Player_ID, p.People_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT AVG(Earnings) AS AverageEarnings FROM poker_player; 
SELECT AVG(Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID; 
SELECT `Money_Rank`  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY `Money_Rank` DESC  LIMIT 1; 
SELECT People_ID, MAX(Earnings) AS Max_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY People_ID ORDER BY Max_Earnings DESC LIMIT 1; 
SELECT MAX(COUNT(`Poker_Player_ID`)) AS MaxFinalTables FROM `poker_player` WHERE EXISTS (     SELECT 1     FROM `people`     WHERE `poker_player.People_ID` = `people.People_ID`     AND NOT EXISTS (         SELECT 1         FROM `earnings`         WHERE `people.People_ID` = `earnings.People_ID` AND `earnings.Earnings` < 200000     ) ) GROUP BY `People_ID` 
SELECT MAX(tables) AS max_final_tables FROM (     SELECT COUNT(*) AS tables     FROM poker_player     JOIN people ON poker_player.People_ID = people.People_ID     WHERE NOT EXISTS (         SELECT 1         FROM poker_earnings         WHERE poker_player.People_ID = poker_earnings.People_ID AND poker_earnings.earnings >= 200000     ) ) AS subquery; 
SELECT p.People_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID; 
SELECT p.People_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID JOIN (     SELECT People_ID     FROM poker_player     WHERE People_ID IN (         SELECT People_ID         FROM poker_player         GROUP BY People_ID         HAVING SUM(earnings) > 300000     ) ) AS rich_players ON pp.People_ID = rich_players.People_ID; 
SELECT p.Poker_Player_ID FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID JOIN (SELECT People_ID FROM poker_player GROUP BY People_ID HAVING SUM(earnings) > 300000) AS rich_players ON pe.People_ID = rich_players.People_ID; 
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY p.Name ASC; 
SELECT p.People_ID, COUNT(*) AS Final_Tables_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY p.People_ID ORDER BY Final_Tables_Made ASC; 
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Poker_Player_ID = (     SELECT MIN(Poker_Player_ID)     FROM poker_player     JOIN people p ON poker_player.People_ID = p.People_ID     WHERE p.Earnings IS NOT NULL AND p.Earnings = (         SELECT MIN(Earnings)         FROM people         WHERE Earnings IS NOT NULL     ) ); 
SELECT p.Birth_Date  FROM poker_player AS pp  JOIN people AS p ON pp.People_ID = p.People_ID  JOIN (     SELECT Poker_Player_ID, MIN(Earnings) AS MinEarnings      FROM poker_player      JOIN earnings ON poker_player.Poker_Player_ID = earnings.Poker_Player_ID      GROUP BY Poker_Player_ID ) AS subq ON pp.Poker_Player_ID = subq.Poker_Player_ID; 
SELECT p.Poker_Player_ID, p.People_ID, (SELECT `Money` FROM `people` WHERE `People_ID` = p.People_ID) AS Money FROM `poker_player` p JOIN (     SELECT `People_ID`, `Height`     FROM `people`     ORDER BY `Height` DESC     LIMIT 1 ) AS tallest WHERE p.People_ID = tallest.People_ID; 
SELECT p.Poker_Player_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.People_ID LIMIT 1; 
SELECT AVG(p.earnings)  FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID JOIN (SELECT People_ID, height FROM people WHERE height > 200) AS tall_people ON pp.People_ID = tall_people.People_ID; 
SELECT AVG(earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  JOIN another_table ON people.People_ID = another_table.People_ID WHERE another_table.height > 200; 
SELECT p.Name  FROM poker_player AS pp  JOIN people AS p ON pp.People_ID = p.People_ID  JOIN (     SELECT People_ID, SUM(Earnings) AS TotalEarnings      FROM poker_earnings      GROUP BY People_ID ) AS pe ON pp.People_ID = pe.People_ID  ORDER BY pe.TotalEarnings DESC; 
SELECT p.People_ID FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.People_ID DESC; 
SELECT p.Nationality, COUNT(*) AS NumberOfPeople FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality; 
SELECT nationality, COUNT(*) AS total FROM people GROUP BY nationality; 
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1; 
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1; 
SELECT nationality FROM people WHERE People_ID IN (     SELECT People_ID     FROM poker_player     GROUP BY People_ID     HAVING COUNT(*) > 1 ) GROUP BY nationality HAVING COUNT(*) > 1; 
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2; 
SELECT `People_ID`, `Name`, `Birth_Date` FROM `people` ORDER BY `Name` ASC; 
SELECT p.Name, p.Birth_Date FROM people p ORDER BY p.Name ASC; 
SELECT People_ID FROM people WHERE People_ID NOT IN (SELECT Poker_Player_ID FROM poker_player) AND nationality != 'Russia'; 
SELECT p.People_ID FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.People_ID NOT IN (SELECT People_ID FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE country = 'Russia')); 
SELECT p.People_ID FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL; 
SELECT p.People_ID FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL; 
SELECT COUNT(DISTINCT nationality) AS distinct_nationalities  FROM people; 
SELECT COUNT(DISTINCT nationality) FROM people; 
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE; 
SELECT contestant_number FROM CONTESTANTS ORDER BY contestant_number DESC; 
SELECT v.vote_id, v.state FROM VOTES v JOIN AREA_CODE_STATE acs ON v.state = acs.state; 
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE; 
SELECT MAX(vote_id) AS last_vote_id FROM VOTES WHERE state = 'CA'; 
SELECT DISTINCT contestant_number  FROM contestants  WHERE contestant_number NOT IN (     SELECT contestant_number      FROM contestants      JOIN votes ON contestants.contestant_number = votes.contestant_number      WHERE contestants.contestant_number = 2 ); 
SELECT DISTINCT `state`, `vote_id` FROM `VOTES`; 
SELECT c.contestant_number FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number HAVING COUNT(v.vote_id) >= 2; 
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1; 
SELECT COUNT(*) AS num_votes FROM VOTES WHERE state IN ('NY', 'CA'); 
SELECT COUNT(*)  FROM CONTESTANTS  WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES); 
SELECT `AREA_CODE_STATE`.`area_code` FROM `AREA_CODE_STATE` JOIN `VOTES` ON `AREA_CODE_STATE`.`state` = `VOTES`.`state` GROUP BY `AREA_CODE_STATE`.`area_code` ORDER BY COUNT(`VOTES`.`vote_id`) DESC LIMIT 1; 
SELECT v.vote_id, a.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling'; 
SELECT DISTINCT acs.area_code FROM AREA_CODE_STATE acs JOIN VOTES v1 ON acs.state = v1.state AND v1.contestant_number = 2 JOIN VOTES v2 ON acs.state = v2.state AND v2.contestant_number = 5; 
SELECT contestant_number FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number     FROM VOTES     JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state     WHERE AREA_CODE_STATE.state = 'AL' ); 

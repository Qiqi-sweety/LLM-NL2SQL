 SELECT COUNT(*) FROM "singer";  Write Sql for the following question: What is the average age of singers? Answer : SELECT AVG("Age") FROM "singer";  Write Sql for the following question: What is the average age of singers who are male? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1;  Write Sql for the following question: What is the average age of singers who are female? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are male and are
 SELECT COUNT(*) FROM "singer";  Write Sql for the following question: What is the total number of concerts? Answer : SELECT COUNT(*) FROM "concert";  Write Sql for the following question: What is the total number of stadiums? Answer : SELECT COUNT(*) FROM "stadium";  Write Sql for the following question: What is the average age of singers? Answer : SELECT AVG("Age") FROM "singer";  Write Sql for the following question: What is the average age of singers who are male? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1;  Write Sql for the following question: What is the average age of singers who are female? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 0 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old? Answer : SELECT AVG("Age") FROM "singer" WHERE "Is_male" = 1 AND "Age" = 20;  Write Sql for the following question: What is the average age of singers who are female and are 
 SELECT Name, Country, Age FROM singer ORDER BY Age DESC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the oldest to the youngest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age DESC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name, country, age for all singers ordered by country and then by age from the youngest to the oldest. Answer : SELECT Name, Country, Age FROM singer ORDER BY Country, Age ASC;  Write Sql for the following question: Show name,
 SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
 SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
 SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
 SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
 SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
 SELECT DISTINCT country FROM singer WHERE age > 20;
 SELECT DISTINCT country FROM singer WHERE age > 20;
 SELECT country, COUNT(singer_id) FROM singer GROUP BY country;
 SELECT COUNT(Singer_ID), Country FROM singer GROUP BY Country;
 SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
 SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
 SELECT "Location", "Name" FROM "stadium" WHERE "Capacity" BETWEEN 5000 AND 10000;  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30;  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are male. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30 AND "Is_male" = 1;  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are female. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30 AND "Is_male" = 0;  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are male or female. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30;  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are male or female and are from the UK. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30 AND "Country" = "UK";  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are male or female and are from the UK or France. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30 AND ("Country" = "UK" OR "Country" = "France");  Write Sql for the following question: Show the name and country for all singers who are 30 years old or younger and are male or female and are from the UK or France or Germany. Answer : SELECT "Name", "Country" FROM "singer" WHERE "Age" <= 30 AND ("Country" = "UK" OR "Country" = "France"
 SELECT "Location", "Name" FROM "stadium" WHERE "Capacity" BETWEEN 5000 AND 10000;
 SELECT MAX(Capacity), AVG(Average) FROM stadium;
 SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
 SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with lowest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MIN("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with highest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with lowest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MIN("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with highest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with lowest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MIN("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with highest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with lowest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MIN("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with highest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with lowest average attendance? Answer : SELECT "Name", "Capacity" FROM
 SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MAX("Average") FROM "stadium");  Write Sql for the following question: What is the name and capacity for the stadium with the lowest average attendance? Answer : SELECT "Name", "Capacity" FROM "stadium" WHERE "Average" = (SELECT MIN("Average") FROM "stadium");  Write Sql for the following question: What is the average attendance for each stadium? Answer : SELECT "Name", "Average" FROM "stadium";  Write Sql for the following question: What is the average attendance for each stadium, sorted by average attendance? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Average";  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Capacity";  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity in descending order? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Capacity" DESC;  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity in descending order, and then by average attendance? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Capacity" DESC, "Average";  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity in descending order, and then by average attendance in descending order? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Capacity" DESC, "Average" DESC;  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity in descending order, and then by average attendance in descending order, and then by name? Answer : SELECT "Name", "Average" FROM "stadium" ORDER BY "Capacity" DESC, "Average" DESC, "Name";  Write Sql for the following question: What is the average attendance for each stadium, sorted by capacity in descending order, and then by average attendance in descending order, and then by name in ascending order? Answer : SELECT "Name", "Average" FROM "st
 SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;  Write Sql for the following question: What is the average age of singers? Answer : SELECT AVG(Age) FROM singer;  Write Sql for the following question: What is the average age of singers who are male? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1;  Write Sql for the following question: What is the average age of singers who are female? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0 AND Age >= 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older and are from the USA? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20 AND Country = 'USA';  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older and are from the USA? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0 AND Age >= 20 AND Country = 'USA';  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older and are from the USA and are from the USA? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20 AND Country = 'USA' AND Country = 'USA';  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older and are from the USA and are from the USA? Answer : SELECT AVG(Age) FROM singer WHERE Is_
 SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;  Write Sql for the following question: What is the average age of singers? Answer : SELECT AVG(Age) FROM singer;  Write Sql for the following question: What is the average age of singers who are male? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1;  Write Sql for the following question: What is the average age of singers who are female? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20;  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0 AND Age >= 20;  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older and are from the UK? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20 AND Country = 'UK';  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older and are from the UK? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 0 AND Age >= 20 AND Country = 'UK';  Write Sql for the following question: What is the average age of singers who are male and are 20 years old or older and are from the UK and are from the UK? Answer : SELECT AVG(Age) FROM singer WHERE Is_male = 1 AND Age >= 20 AND Country = 'UK' AND Country = 'UK';  Write Sql for the following question: What is the average age of singers who are female and are 20 years old or older and are from the UK and are from the UK? Answer : SELECT AVG(Age) FROM singer WHERE Is_
 SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
 SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;  Write Sql for the following question: For each stadium, what is the average age of the singers who play there? Answer : SELECT stadium.Name, AVG(singer.Age) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID LEFT JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.Name;  Write Sql for the following question: For each stadium, what is the average age of the singers who play there? Answer : SELECT stadium.Name, AVG(singer.Age) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID LEFT JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.Name;  Write Sql for the following question: For each stadium, what is the average age of the singers who play there? Answer : SELECT stadium.Name, AVG(singer.Age) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID LEFT JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.Name;  Write Sql for the following question: For each stadium, what is the average age of the singers who play there? Answer : SELECT stadium.Name, AVG(singer.Age) FROM stadium LEFT JOIN
 SELECT stadium.Name, stadium.Capacity FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
 SELECT stadium.Name, stadium.Capacity FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
 SELECT Year, COUNT(concert_ID) AS Number_of_concerts FROM concert GROUP BY Year ORDER BY Number_of_concerts DESC LIMIT 1;
 SELECT Year, COUNT(concert_ID) AS "Number of concerts" FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1;  Write Sql for the following question: What is the average age of singers? Answer : SELECT AVG(Age) AS "Average age" FROM singer;  Write Sql for the following question: What is the average age of singers who are male? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 1;  Write Sql for the following question: What is the average age of singers who are female? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 0;  Write Sql for the following question: What is the average age of singers who are male and from the USA? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 1 AND Country = 'USA';  Write Sql for the following question: What is the average age of singers who are female and from the USA? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 0 AND Country = 'USA';  Write Sql for the following question: What is the average age of singers who are male and from the UK? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 1 AND Country = 'UK';  Write Sql for the following question: What is the average age of singers who are female and from the UK? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 0 AND Country = 'UK';  Write Sql for the following question: What is the average age of singers who are male and from the UK or the USA? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 1 AND Country = 'UK' OR Country = 'USA';  Write Sql for the following question: What is the average age of singers who are female and from the UK or the USA? Answer : SELECT AVG(Age) AS "Average age" FROM singer WHERE Is_male = 0 AND Country = 'UK' OR Country = 'USA
 SELECT "Name" FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert");
 SELECT "Name" FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert");
 SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT SELECT DISTINCT country FROM singer WHERE age < 30;
 SELECT "Name" FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert" WHERE "Year" = "2014");
 SELECT "Name" FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert" WHERE "Year" = "2014");
 SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;
 SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_Name, Theme;
 SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
 SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
 SELECT singer.Name FROM singer, singer_in_concert, concert WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID AND concert.Year = 2014;
 SELECT singer.Name FROM singer, singer_in_concert, concert WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID AND concert.Year = 2014;
 SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
 SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
 SELECT stadium.Name, stadium.Location FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = '2014' OR concert.Year = '2015';
 SELECT stadium.Name, stadium.Location FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = '2014' AND concert.Year = '2015';
 SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the lowest capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MIN(Capacity) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the highest average capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the lowest average capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Average = (SELECT MIN(Average) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the highest highest capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = (SELECT MAX(Highest) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the lowest highest capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = (SELECT MIN(Highest) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the highest lowest capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Lowest = (SELECT MAX(Lowest) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the lowest lowest capacity. Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Lowest = (SELECT MIN(Lowest) FROM stadium));  Write Sql for the following question: Find the number of concerts happened in the stadium with the highest average capacity. Answer : SELECT
 SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the smallest capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MIN(Capacity) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the highest average capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the lowest average capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Average = (SELECT MIN(Average) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the highest highest capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = (SELECT MAX(Highest) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the lowest highest capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = (SELECT MIN(Highest) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the highest lowest capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Lowest = (SELECT MAX(Lowest) FROM stadium));  Write Sql for the following question: What are the number of concerts that occurred in the stadium with the lowest lowest capacity? Answer : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Lowest = (SELECT MIN(Lowest) FROM stadium));  Write Sql for the following question: What are the number of concerts
 SELECT COUNT(*) FROM Pets WHERE weight > 10;  Write Sql for the following question: Find the number of students who have pets. Answer : SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the number of students who have pets and their average pet age. Answer : SELECT COUNT(*), AVG(pet_age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the number of students who have pets and their average pet age, but only for students who have more than 2 pets. Answer : SELECT COUNT(*), AVG(pet_age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) GROUP BY StuID HAVING COUNT(*) > 2;  Write Sql for the following question: Find the number of students who have pets and their average pet age, but only for students who have more than 2 pets and whose average pet age is greater than 18. Answer : SELECT COUNT(*), AVG(pet_age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) GROUP BY StuID HAVING COUNT(*) > 2 AND AVG(pet_age) > 18;  Write Sql for the following question: Find the number of students who have pets and their average pet age, but only for students who have more than 2 pets and whose average pet age is greater than 18, and only for students who live in New York. Answer : SELECT COUNT(*), AVG(pet_age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND city_code = 'NYC' GROUP BY StuID HAVING COUNT(*) > 2 AND AVG(pet_age) > 18;  Write Sql for the following question: Find the number of students who have pets and their average pet age, but only for students who have more than 2 pets and whose average pet age is greater than 18, and only for students who live in New York, and only for students who are male. Answer : SELECT COUNT(*), AVG(pet_age) FROM Student WHERE StuID IN (SELECT Stu
 SELECT `select count(*) from Pets where weight > 10;`  Write Sql for the following question: How many students are in the city of Pittsburgh? Answer : `select count(*) from Student where city_code = 'PIT';`  Write Sql for the following question: How many students are female? Answer : `select count(*) from Student where sex = 'F';`  Write Sql for the following question: How many students are male? Answer : `select count(*) from Student where sex = 'M';`  Write Sql for the following question: How many students are in the city of Pittsburgh and are female? Answer : `select count(*) from Student where city_code = 'PIT' and sex = 'F';`  Write Sql for the following question: How many students are in the city of Pittsburgh or are female? Answer : `select count(*) from Student where city_code = 'PIT' or sex = 'F';`  Write Sql for the following question: How many students are in the city of Pittsburgh and are female or are in the city of New York? Answer : `select count(*) from Student where city_code = 'PIT' and sex = 'F' or city_code = 'NYC';`  Write Sql for the following question: How many students are in the city of Pittsburgh and are female or are in the city of New York or are male? Answer : `select count(*) from Student where city_code = 'PIT' and sex = 'F' or city_code = 'NYC' or sex = 'M';`  Write Sql for the following question: How many students are in the city of Pittsburgh and are female or are in the city of New York or are male or are in the city of Los Angeles? Answer : `select count(*) from Student where city_code = 'PIT' and sex = 'F' or city_code = 'NYC' or sex = 'M' or city_code = 'LOS';`  Write Sql for the following question: How many students are in the city of Pittsburgh and are female or are in the city of New York or are male or are in the city of Los Angeles or are in the city of
 SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;  Write Sql for the following question: Find the names of students who have pets. Answer : SELECT Fname, Lname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the names of students who have pets and their pets' names. Answer : SELECT Fname, Lname, PetType FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID;  Write Sql for the following question: Find the names of students who have pets and their pets' names and ages. Answer : SELECT Fname, Lname, PetType, pet_age FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID;  Write Sql for the following question: Find the names of students who have pets and their pets' names and ages, and the names of students who have pets and their pets' names and ages, and their pets' names and ages. Answer : SELECT Fname, Lname, PetType, pet_age FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID UNION SELECT Fname, Lname, PetType, pet_age FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID;  Write Sql for the following question: Find the names of students who have pets and their pets' names and ages, and the names of students who have pets and their pets' names and ages, and their pets' names and ages, and their pets' names and ages. Answer : SELECT Fname, Lname, PetType, pet_age FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID UNION SELECT Fname, Lname, PetType,
 SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are in the database? Answer : SELECT COUNT(*) FROM Student;  Write
 SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
 SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
 SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: Find the average age of students who own pets. Answer : SELECT AVG
 SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);  Write Sql for the following question: How many students have pets? Answer : SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: How many students have pets of type cat? Answer : SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));  Write Sql for the following question: How many students have pets of type cat and age greater than 20? Answer : SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Student WHERE Age > 20));  Write Sql for the following question: What is the average age of students with pets? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: What is the average age of students with pets of type cat? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));  Write Sql for the following question: What is the average age of students with pets of type cat and age greater than 20? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Student WHERE Age > 20));  Write Sql for the following question: What is the average weight of students with pets of type cat and age greater than 20? Answer : SELECT AVG(weight) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Student WHERE Age > 20));  Write Sql for the following
 SELECT COUNT(*) FROM Pets, Student, Has_Pet WHERE Pets.PetID = Has_Pet.PetID AND Student.StuID = Has_Pet.StuID AND Pets.PetType = 'dog' AND Student.Sex = 'F';
 SELECT COUNT(*) FROM Pets, Student WHERE Pets.PetType = 'dog' AND Student.Sex = 'F' AND Pets.PetID = Student.PetID;
 SELECT COUNT(DISTINCT PetType) FROM Pets;  Write Sql for the following question: Find the number of students who have pets. Answer : SELECT COUNT(DISTINCT StuID) FROM Has_Pet;  Write Sql for the following question: Find the number of students who have pets and their pet type. Answer : SELECT COUNT(DISTINCT StuID), PetType FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID GROUP BY PetType;  Write Sql for the following question: Find the number of students who have pets and their pet type and their city. Answer : SELECT COUNT(DISTINCT StuID), PetType, city_code FROM Has_Pet, Pets, Student WHERE Has_Pet.PetID = Pets.PetID AND Has_Pet.StuID = Student.StuID GROUP BY PetType, city_code;  Write Sql for the following question: Find the number of students who have pets and their pet type and their city and their major. Answer : SELECT COUNT(DISTINCT StuID), PetType, city_code, Major FROM Has_Pet, Pets, Student WHERE Has_Pet.PetID = Pets.PetID AND Has_Pet.StuID = Student.StuID GROUP BY PetType, city_code, Major;  Write Sql for the following question: Find the number of students who have pets and their pet type and their city and their major and their advisor. Answer : SELECT COUNT(DISTINCT StuID), PetType, city_code, Major, Advisor FROM Has_Pet, Pets, Student WHERE Has_Pet.PetID = Pets.PetID AND Has_Pet.StuID = Student.StuID GROUP BY PetType, city_code, Major, Advisor;  Write Sql for the following question: Find the number of students who have pets and their pet type and their city and their major and their advisor and their age. Answer : SELECT COUNT(DISTINCT StuID), PetType, city_code, Major, Advisor, Age FROM Has_Pet, Pets, Student WHERE Has_Pet.PetID = Pets.PetID AND Has_Pet.StuID = Student.StuID GROUP BY PetType, city_code, Major, Advisor,
 SELECT COUNT(DISTINCT PetType) FROM Pets;  Write Sql for the following question: How many students are there? Answer : SELECT COUNT(*) FROM Student;  Write Sql for the following question: How many students are there in each city? Answer : SELECT city_code, COUNT(*) FROM Student GROUP BY city_code;  Write Sql for the following question: How many students are there in each city and major? Answer : SELECT city_code, Major, COUNT(*) FROM Student GROUP BY city_code, Major;  Write Sql for the following question: How many students are there in each city and major, and what is the average age of students in each city and major? Answer : SELECT city_code, Major, COUNT(*), AVG(Age) FROM Student GROUP BY city_code, Major;  Write Sql for the following question: How many students are there in each city and major, and what is the average age of students in each city and major, and what is the average weight of students in each city and major? Answer : SELECT city_code, Major, COUNT(*), AVG(Age), AVG(weight) FROM Student GROUP BY city_code, Major;  Write Sql for the following question: How many students are there in each city and major, and what is the average age of students in each city and major, and what is the average weight of students in each city and major, and what is the average pet age of students in each city and major? Answer : SELECT city_code, Major, COUNT(*), AVG(Age), AVG(weight), AVG(pet_age) FROM Student GROUP BY city_code, Major;  Write Sql for the following question: How many students are there in each city and major, and what is the average age of students in each city and major, and what is the average weight of students in each city and major, and what is the average pet age of students in each city and major, and what is the average pet weight of students in each city and major? Answer : SELECT city_code, Major, COUNT(*), AVG(Age), AVG(weight), AVG(pet_age), AVG(weight) FROM Student GROUP BY city_code, Major;  Write Sql for the following question: How many students are there in each city and major, and what is the average age of students in
 SELECT `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and (PetType = 'cat' or PetType = 'dog');`  Write Sql for the following question: Find the first name of students who have cat pet. Answer : `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and PetType = 'cat';`  Write Sql for the following question: Find the first name of students who have cat pet and age greater than 20. Answer : `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and PetType = 'cat' and Age > 20;`  Write Sql for the following question: Find the first name of students who have cat pet and age greater than 20 and weight less than 14. Answer : `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and PetType = 'cat' and Age > 20 and weight < 14;`  Write Sql for the following question: Find the first name of students who have cat pet and age greater than 20 and weight less than 14 and city is NYC. Answer : `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and PetType = 'cat' and Age > 20 and weight < 14 and city_code = 'NYC';`  Write Sql for the following question: Find the first name of students who have cat pet and age greater than 20 and weight less than 14 and city is NYC or city is PHL. Answer : `select Fname from Student, Has_Pet, Pets where Student.StuID = Has_Pet.StuID and Pets.PetID = Has_Pet.PetID and PetType = '
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));
 SELECT Major, Age FROM Student WHERE Major IN (SELECT Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')));
 SELECT Major, Age FROM Student WHERE Major NOT IN (SELECT Major FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')));
 SELECT `select StuID from Student where StuID not in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat'));`  Write Sql for the following question: Find the id of students who have a cat pet. Answer : `select StuID from Student where StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat'));`  Write Sql for the following question: Find the id of students who have a dog pet. Answer : `select StuID from Student where StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'dog'));`  Write Sql for the following question: Find the id of students who have a cat pet and a dog pet. Answer : `select StuID from Student where StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat')) and StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'dog'));`  Write Sql for the following question: Find the id of students who have a cat pet or a dog pet. Answer : `select StuID from Student where StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat')) or StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'dog'));`  Write Sql for the following question: Find the id of students who have a cat pet and a dog pet or a cat pet. Answer : `select StuID from Student where StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat')) and StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'dog')) or StuID in (select StuID from Has_Pet where PetID in (select PetID from Pets where PetType = 'cat'));`  Write Sql for the following question: Find the
 SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);  Write Sql for the following question: Find the name of the student who has the youngest pet. Answer : SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)));  Write Sql for the following question: Find the name of the student who has the oldest pet. Answer : SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE pet_age = (SELECT MAX(pet_age) FROM Pets)));  Write Sql for the following question: Find the name of the student who has the oldest pet and is female. Answer : SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE pet_age = (SELECT MAX(pet_age) FROM Pets))) AND Sex = 'F';  Write Sql for the following question: Find the name of the student who has the oldest pet and is female and is from New York. Answer : SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE pet_age = (SELECT MAX(pet_age) FROM Pets))) AND Sex = 'F' AND city_code = 'NYC';  Write Sql for the following question: Find the name of the student who has the oldest pet and is female and is from New York and is a cat. Answer : SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE pet_age = (SELECT MAX(pet_age) FROM Pets))) AND Sex = 'F' AND city_code = 'NYC' AND PetType = 'cat';  Write Sql for the following question: Find the name of the student who has the oldest pet and is female and is from New York and is a cat and is 18 years old. Answer : SELECT Fname
 SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following question: What is the average weight of all pets? Answer : SELECT AVG(weight) FROM Pets;  Write Sql for the following
 SELECT PetID, weight FROM Pets WHERE pet_age > 1;
 SELECT PetID, weight FROM Pets WHERE pet_age > 1;
 SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;  Write Sql for the following question: Find the average and maximum age for each type of pet, and also the average and maximum weight for each type of pet. Answer : SELECT PetType, AVG(pet_age), MAX(pet_age), AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: Find the average and maximum age for each type of pet, and also the average and maximum weight for each type of pet, and also the average and maximum age for each city. Answer : SELECT PetType, AVG(pet_age), MAX(pet_age), AVG(weight), MAX(weight), city_code, AVG(pet_age), MAX(pet_age) FROM Pets, Student WHERE Pets.StuID = Student.StuID GROUP BY PetType, city_code;  Write Sql for the following question: Find the average and maximum age for each type of pet, and also the average and maximum weight for each type of pet, and also the average and maximum age for each city, and also the average and maximum age for each major. Answer : SELECT PetType, AVG(pet_age), MAX(pet_age), AVG(weight), MAX(weight), city_code, AVG(pet_age), MAX(pet_age), Major, AVG(pet_age), MAX(pet_age) FROM Pets, Student WHERE Pets.StuID = Student.StuID GROUP BY PetType, city_code, Major;  Write Sql for the following question: Find the average and maximum age for each type of pet, and also the average and maximum weight for each type of pet, and also the average and maximum age for each city, and also the average and maximum age for each major, and also the average and maximum age for each advisor. Answer : SELECT PetType, AVG(pet_age), MAX(pet_age), AVG(weight), MAX(weight), city_code, AVG(pet_age), MAX(pet_age), Major, AVG(pet_age), MAX(pet_age), Advisor, AVG(pet_age), MAX(pet_age) FROM Pets, Student WHERE P
 SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: What is the average and maximum weight for each pet type? Answer : SELECT PetType, AVG(weight), MAX(weight)
 SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs. Answer : SELECT PetType, AVG(weight) FROM Pets WHERE PetType = 'dog' GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs and cats. Answer : SELECT PetType, AVG(weight) FROM Pets WHERE PetType = 'dog' OR PetType = 'cat' GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs and cats, and only for pets that are 3 years old or younger. Answer : SELECT PetType, AVG(weight) FROM Pets WHERE PetType = 'dog' OR PetType = 'cat' AND pet_age <= 3 GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs and cats, and only for pets that are 3 years old or younger, and only for pets that weigh less than 15 pounds. Answer : SELECT PetType, AVG(weight) FROM Pets WHERE PetType = 'dog' OR PetType = 'cat' AND pet_age <= 3 AND weight < 15 GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs and cats, and only for pets that are 3 years old or younger, and only for pets that weigh less than 15 pounds, and only for pets that are 10 pounds or more. Answer : SELECT PetType, AVG(weight) FROM Pets WHERE PetType = 'dog' OR PetType = 'cat' AND pet_age <= 3 AND weight < 15 AND weight >= 10 GROUP BY PetType;  Write Sql for the following question: Find the average weight for each pet type, but only for dogs and cats, and only for pets that are 3 years old or younger, and only for pets that weigh less than 15 pounds, and only for pets that are 
 SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
 SELECT `select Fname, Age from Student where StuID in (select StuID from Has_Pet);`  Write Sql for the following question: Find the first name and age of students who have a pet and are female. Answer : `select Fname, Age from Student where StuID in (select StuID from Has_Pet) and Sex = 'F';`  Write Sql for the following question: Find the first name and age of students who have a pet and are female and major in 600. Answer : `select Fname, Age from Student where StuID in (select StuID from Has_Pet) and Sex = 'F' and Major = 600;`  Write Sql for the following question: Find the first name and age of students who have a pet and are female and major in 600 and city code is BAL. Answer : `select Fname, Age from Student where StuID in (select StuID from Has_Pet) and Sex = 'F' and Major = 600 and city_code = 'BAL';`  Write Sql for the following question: Find the first name and age of students who have a pet and are female and major in 600 and city code is BAL and age is greater than 18. Answer : `select Fname, Age from Student where StuID in (select StuID from Has_Pet) and Sex = 'F' and Major = 600 and city_code = 'BAL' and Age > 18;`  Write Sql for the following question: Find the first name and age of students who have a pet and are female and major in 600 and city code is BAL and age is greater than 18 and pet type is dog. Answer : `select Fname, Age from Student where StuID in (select StuID from Has_Pet) and Sex = 'F' and Major = 600 and city_code = 'BAL' and Age > 18 and PetType = 'dog';`  Write Sql for the following question: Find the first name and age of students who have a pet and are female and major in 600 and city code is BAL and age is greater than 18 and pet type is dog and pet age is
 SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
 SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');  Write Sql for the following question: Find the id of the pet owned by student whose last name is ‘Smith’ and whose pet type is ‘dog’. Answer : SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith') AND PetID = (SELECT PetID FROM Pets WHERE PetType = 'dog');  Write Sql for the following question: Find the id of the pet owned by student whose last name is ‘Smith’ and whose pet type is ‘dog’ and whose pet age is 1. Answer : SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith') AND PetID = (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age = 1);  Write Sql for the following question: Find the id of the pet owned by student whose last name is ‘Smith’ and whose pet type is ‘dog’ and whose pet age is 1 and whose weight is greater than 12. Answer : SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith') AND PetID = (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age = 1 AND weight > 12);  Write Sql for the following question: Find the id of the pet owned by student whose last name is ‘Smith’ and whose pet type is ‘dog’ and whose pet age is 1 and whose weight is greater than 12 and whose city code is ‘BAL’. Answer : SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith') AND PetID = (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age = 1 AND weight > 12 AND city_code = 'BAL');  Write Sql for the following question: Find the id of the pet owned by student whose last name is ‘Smith’ and whose pet type is ‘dog’ and whose pet age is 1 and whose weight is greater than 12 and whose city code is ‘BAL’ and whose advisor id
 SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
 SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
 SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
 SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(StuID) > 1);  Write Sql for the following question: Find the first name and gender of student who have more than one pet and the pet type is dog. Answer : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') GROUP BY StuID HAVING COUNT(StuID) > 1);  Write Sql for the following question: Find the first name and gender of student who have more than one pet and the pet type is dog and the pet age is greater than 1. Answer : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age > 1) GROUP BY StuID HAVING COUNT(StuID) > 1);  Write Sql for the following question: Find the first name and gender of student who have more than one pet and the pet type is dog and the pet age is greater than 1 and the pet weight is greater than 12. Answer : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age > 1 AND weight > 12) GROUP BY StuID HAVING COUNT(StuID) > 1);  Write Sql for the following question: Find the first name and gender of student who have more than one pet and the pet type is dog and the pet age is greater than 1 and the pet weight is greater than 12 and the student age is greater than 20. Answer : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' AND pet_age > 1 AND weight > 12) GROUP BY StuID HAVING COUNT(StuID) > 1) AND Age > 20;  Write Sql for the following question
 SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(StuID) > 1);
 SELECT LName FROM Student, Pets, Has_Pet WHERE Student.StuID = Has_Pet.StuID AND Pets.PetID = Has_Pet.PetID AND Pets.PetType = 'cat' AND Pets.pet_age = 3;
 SELECT LName FROM Student, Pets, Has_Pet WHERE Student.StuID = Has_Pet.StuID AND Pets.PetID = Has_Pet.PetID AND PetType = 'cat' AND pet_age = 3;
 SELECT `SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);`  Write Sql for the following question: Find the average age of students who have pets. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);`  Write Sql for the following question: Find the average age of students who have pets and major in 600. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND Major = 600;`  Write Sql for the following question: Find the average age of students who have pets and major in 600 and city code is BAL. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND Major = 600 AND city_code = 'BAL';`  Write Sql for the following question: Find the average age of students who have pets and major in 600 and city code is BAL or NYC. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND Major = 600 AND (city_code = 'BAL' OR city_code = 'NYC');`  Write Sql for the following question: Find the average age of students who have pets and major in 600 and city code is BAL or NYC or PHL. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND Major = 600 AND (city_code = 'BAL' OR city_code = 'NYC' OR city_code = 'PHL');`  Write Sql for the following question: Find the average age of students who have pets and major in 600 and city code is BAL or NYC or PHL or LOS. Answer : `SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND Major = 600 AND (city_code = 'BAL' OR city_code = 'NYC' OR city_code = 'PHL' OR city_code = '
 SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: What is the average age for all students who own pets? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);  Write Sql for the following question: What is the average age for all students who own cats? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat');  Write Sql for the following question: What is the average age for all students who own dogs? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog');  Write Sql for the following question: What is the average age for all students who own cats and dogs? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' OR PetType = 'cat');  Write Sql for the following question: What is the average age for all students who own cats and dogs and are female? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' OR PetType = 'cat') AND Sex = 'F';  Write Sql for the following question: What is the average age for all students who own cats and dogs and are male? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog' OR PetType = 'cat') AND Sex = 'M';  Write Sql for the following question: What is the average age for all students who own cats and dogs and are female and are in New York? Answer : SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID IN (SELECT
 SELECT COUNT(*) FROM continents;  Write Sql for the following question: How many countries are there? Answer : SELECT COUNT(*) FROM countries;  Write Sql for the following question: How many car makers are there? Answer : SELECT COUNT(*) FROM car_makers;  Write Sql for the following question: How many models are there? Answer : SELECT COUNT(*) FROM model_list;  Write Sql for the following question: How many car names are there? Answer : SELECT COUNT(*) FROM car_names;  Write Sql for the following question: How many cars data are there? Answer : SELECT COUNT(*) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars? Answer : SELECT AVG(MPG) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars in Asia? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 3))));  Write Sql for the following question: What is the average MPG of all cars in Europe? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 2))));  Write Sql for the following question: What is the average MPG of all cars in America? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 1))));  Write Sql for the following question: What is the average MPG of all cars in Africa? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 4)))); 
 SELECT COUNT(*) FROM continents;  Write Sql for the following question: What is the number of countries? Answer : SELECT COUNT(*) FROM countries;  Write Sql for the following question: What is the number of car makers? Answer : SELECT COUNT(*) FROM car_makers;  Write Sql for the following question: What is the number of car models? Answer : SELECT COUNT(*) FROM model_list;  Write Sql for the following question: What is the number of car names? Answer : SELECT COUNT(*) FROM car_names;  Write Sql for the following question: What is the number of cars? Answer : SELECT COUNT(*) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars? Answer : SELECT AVG(MPG) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars in the USA? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 1))));  Write Sql for the following question: What is the average MPG of all cars in the USA in 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Year = 1970;  Write Sql for the following question: What is the average MPG of all cars in the USA in 1970 with 4 cylinders? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Year = 1970 AND Cylinders = 4;  Write Sql for the following question: What is the average MPG of all cars in the USA in 1970 with 4 cylinders and an
 SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS Count FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId;
 SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS Countries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId;
 SELECT COUNT(*) FROM countries;  Write Sql for the following question: How many car makers are listed? Answer : SELECT COUNT(*) FROM car_makers;  Write Sql for the following question: How many car models are listed? Answer : SELECT COUNT(*) FROM model_list;  Write Sql for the following question: How many car names are listed? Answer : SELECT COUNT(*) FROM car_names;  Write Sql for the following question: How many cars are listed? Answer : SELECT COUNT(*) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars? Answer : SELECT AVG(MPG) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars in the USA? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1))));  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Cylinders = 4;  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders and a horsepower greater than 100? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Cylinders = 4 AND Horsepower > 100;  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders and a horsepower greater than 100 and a weight less than 3000? Answer : SELECT AVG(MP
 SELECT COUNT(*) FROM countries;  Write Sql for the following question: How many car makers exist? Answer : SELECT COUNT(*) FROM car_makers;  Write Sql for the following question: How many car models exist? Answer : SELECT COUNT(*) FROM model_list;  Write Sql for the following question: How many car names exist? Answer : SELECT COUNT(*) FROM car_names;  Write Sql for the following question: How many cars exist? Answer : SELECT COUNT(*) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars? Answer : SELECT AVG(MPG) FROM cars_data;  Write Sql for the following question: What is the average MPG of all cars in the USA? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1))));  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Cylinders = 4;  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders and a weight less than 3000? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE Continent = 1)))) AND Cylinders = 4 AND Weight < 3000;  Write Sql for the following question: What is the average MPG of all cars in the USA that have 4 cylinders and a weight less than 3000? Answer : SELECT AVG(MPG) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names
 SELECT maker.FullName, maker.Id, COUNT(model.Model) FROM car_makers maker INNER JOIN model_list model ON maker.Id = model.Maker GROUP BY maker.FullName, maker.Id;  Write Sql for the following question: What is the average MPG of each car maker? List maker full name, id and the average. Answer : SELECT maker.FullName, maker.Id, AVG(cars.MPG) FROM car_makers maker INNER JOIN model_list model ON maker.Id = model.Maker INNER JOIN car_names car ON model.Model = car.Model INNER JOIN cars_data cars ON car.MakeId = cars.Id GROUP BY maker.FullName, maker.Id;  Write Sql for the following question: What is the average MPG of each car maker for cars that have a horsepower greater than 100? List maker full name, id and the average. Answer : SELECT maker.FullName, maker.Id, AVG(cars.MPG) FROM car_makers maker INNER JOIN model_list model ON maker.Id = model.Maker INNER JOIN car_names car ON model.Model = car.Model INNER JOIN cars_data cars ON car.MakeId = cars.Id WHERE cars.Horsepower > 100 GROUP BY maker.FullName, maker.Id;  Write Sql for the following question: What is the average MPG of each car maker for cars that have a horsepower greater than 100 and a weight less than 3000? List maker full name, id and the average. Answer : SELECT maker.FullName, maker.Id, AVG(cars.MPG) FROM car_makers maker INNER JOIN model_list model ON maker.Id = model.Maker INNER JOIN car_names car ON model.Model = car.Model INNER JOIN cars_data cars ON car.MakeId = cars.Id WHERE cars.Horsepower > 100 AND cars.Weight < 3000 GROUP BY maker.FullName, maker.Id;  Write Sql for the following question: What
 SELECT car_makers.Id, car_makers.Maker, car_makers.FullName, COUNT(model_list.Model) AS "Number of Models" FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
 SELECT Model FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)));
 SELECT Model FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)));
 SELECT Model FROM model_list WHERE ModelId IN (SELECT Model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data));
 SELECT Model FROM model_list WHERE ModelId = (SELECT ModelId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data));
 SELECT DISTINCT Maker FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Year = 1970);
 SELECT DISTINCT Maker FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Year = 1970);
 SELECT Make, Year FROM car_names WHERE Year = (SELECT MIN(Year) FROM car_names);
 SELECT Make, Year FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = (SELECT MIN(Year) FROM cars_data);
 SELECT DISTINCT Model FROM model_list, cars_data WHERE model_list.ModelId = cars_data.Id AND Year > 1980;
 SELECT DISTINCT Model FROM model_list, cars_data WHERE model_list.ModelId = cars_data.Id AND Year > 1980;
 SELECT continents.Continent, COUNT(car_makers.Maker) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
 SELECT continents.Continent, COUNT(car_makers.Maker) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
 SELECT countries.CountryName, COUNT(car_makers.Maker) AS "Number of car makers" FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Maker) DESC LIMIT 1;  Write Sql for the following question: Which car makers are from the USA? List the maker name. Answer : SELECT car_makers.Maker FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'america';  Write Sql for the following question: Which car makers are from the USA and have more than 2 car models? List the maker name. Answer : SELECT car_makers.Maker FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'america' GROUP BY car_makers.Maker HAVING COUNT(car_makers.Maker) > 2;  Write Sql for the following question: Which car makers are from the USA and have more than 2 car models? List the maker name and the number of car models. Answer : SELECT car_makers.Maker, COUNT(car_makers.Maker) AS "Number of car models" FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'america' GROUP BY car_makers.Maker HAVING COUNT(car_makers.Maker) > 2;  Write Sql for the following question: Which car makers are from the USA and have more than 2 car models? List the maker name and the number of car models. Sort the result by the number of car models in descending order. Answer : SELECT car_makers.Maker, COUNT(car_makers.Maker) AS "Number of car models" FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'america' GROUP BY car_makers.Maker HAVING COUNT(car_makers.Maker) > 2 ORDER BY COUNT(car_makers.Maker) DESC;  Write
 SELECT countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Country) DESC LIMIT 1;
 SELECT maker.FullName, COUNT(model.Model) FROM car_makers maker INNER JOIN model_list model ON maker.Id = model.Maker GROUP BY maker.FullName;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id GROUP BY model.Model;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id GROUP BY model.Model;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id GROUP BY model.Model;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id GROUP BY model.Model;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id GROUP BY model.Model;  Write Sql for the following question: What is the average MPG of each car model? Only list the model and the average MPG. Answer : SELECT model.Model, AVG(cars_data.MPG) FROM model_list model INNER JOIN cars_data ON model.ModelId = cars_data.Id
 SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
 SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)');
 SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)');
 SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france');  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE
 SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france');  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))));  Write Sql for the following question: What is the average weight of cars in the USA? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE
 SELECT COUNT(Model) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'));
 SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'United States'));
 SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
 SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
 SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
 SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
 SELECT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker;
 SELECT Maker, Model FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker;
 SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;  Write Sql for the following question: What are the car makers having at least one car model? List name and id. Answer : SELECT car_makers.Maker, car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker;  Write Sql for the following question: What are the car models having at least one car name? List name and id. Answer : SELECT model_list.Model, model_list.ModelId FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model;  Write Sql for the following question: What are the car names having at least one car data? List name and id. Answer : SELECT car_names.Make, car_names.MakeId FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id;  Write Sql for the following question: What are the car data having at least one car name? List name and id. Answer : SELECT cars_data.Id, cars_data.Id FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId;
 SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;  Write Sql for the following question: What are the names and ids of all car makers with at least one car model? Answer : SELECT car_makers.Maker, car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker;  Write Sql for the following question: What are the names and ids of all car models with at least one car name? Answer : SELECT model_list.Model, model_list.ModelId FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model;  Write Sql for the following question: What are the names and ids of all car names with at least one car data? Answer : SELECT car_names.Make, car_names.MakeId FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id;  Write Sql for the following question: What are the names and ids of all car data with at least one car name? Answer : SELECT cars_data.Id, cars_data.Id FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId;
 SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
 SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
 SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
 SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
 SELECT countries.CountryName FROM countries, continents, car_makers WHERE countries.Continent = continents.ContId AND car_makers.Country = countries.CountryId AND continents.Continent = 'europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3;
 SELECT CountryName FROM countries WHERE Continent = 2 AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) >= 3);
 SELECT MAX(Horsepower), Make FROM cars_data WHERE Cylinders = 3;
 SELECT MAX(Horsepower) AS Horsepower, Make FROM cars_data WHERE Cylinders = 3 GROUP BY Make;
 SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);  Write Sql for the following question: Which model has the highest horsepower? Answer : SELECT Model FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data);  Write Sql for the following question: Which model has the highest weight? Answer : SELECT Model FROM cars_data WHERE Weight = (SELECT MAX(Weight) FROM cars_data);  Write Sql for the following question: Which model has the highest acceleration? Answer : SELECT Model FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);  Write Sql for the following question: Which model has the highest displacement? Answer : SELECT Model FROM cars_data WHERE Edispl = (SELECT MAX(Edispl) FROM cars_data);  Write Sql for the following question: Which model has the highest number of cylinders? Answer : SELECT Model FROM cars_data WHERE Cylinders = (SELECT MAX(Cylinders) FROM cars_data);  Write Sql for the following question: Which model has the highest year? Answer : SELECT Model FROM cars_data WHERE Year = (SELECT MAX(Year) FROM cars_data);  Write Sql for the following question: Which model has the lowest year? Answer : SELECT Model FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data);  Write Sql for the following question: Which model has the lowest horsepower? Answer : SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);  Write Sql for the following question: Which model has the lowest weight? Answer : SELECT Model FROM cars_data WHERE Weight = (SELECT MIN(Weight) FROM cars_data);  Write Sql for the following question: Which model has the lowest acceleration? Answer : SELECT Model FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data);  Write Sql for the following question: Which model has the lowest displacement? Answer : SELECT Model FROM cars_data WHERE Edispl = (SELECT MIN(Edispl) FROM cars_data);  Write Sql for the following question: Which model has the lowest number of cylinders? Answer : SELECT Model FROM cars_data
 SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;  Write Sql for the following question: What is the average mpg of cars in the year 1970? Answer : SELECT AVG(MPG) FROM cars_data WHERE Year = 1970;
 SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
 SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
 SELECT AVG(Edispl) FROM cars_data WHERE Model = 'volvo';
 SELECT AVG(Edispl) FROM cars_data WHERE Model = 'volvo';
 SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
 SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
 SELECT Model, COUNT(Make) AS Count FROM car_names GROUP BY Model ORDER BY Count DESC LIMIT 1;
 SELECT Model, COUNT(Model) AS Count FROM model_list GROUP BY Model ORDER BY Count DESC LIMIT 1;
 SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
 SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
 SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
 SELECT COUNT(*) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_data WHERE Year = 1980;  Write Sql for the following question: What was the average weight of cars made in 1980? Answer : SELECT AVG(Weight) FROM cars_
 SELECT COUNT(Model) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');
 SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company');  Write Sql for the following question: What is the average weight of all cars? Answer : SELECT AVG(Weight) FROM cars_data;  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')));  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')));  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')));  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')));  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')));  Write Sql for the following question: What is the average weight of all cars made by the car maker American Motor Company? Answer : SELECT AVG(Weight) FROM cars_data WHERE Id
 SELECT maker, count(model) as model_count FROM car_makers, model_list WHERE car_makers.id = model_list.maker GROUP BY maker HAVING model_count > 3;
 SELECT maker, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(maker) > 3);
 SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors' OR Weight > 3500);
 SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors') OR Weight > 3500;
 SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
 SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 UNION SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;
 SELECT MAX(Horsepower) FROM cars_data;
 SELECT MAX(Horsepower) FROM cars_data;
 SELECT Cylinders FROM cars_data WHERE Model = 'volvo' ORDER BY Accelerate ASC LIMIT 1;
 SELECT COUNT(*) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'));
 SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data);
 SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data);
 SELECT COUNT(*) FROM countries WHERE Continent IN (SELECT Continent FROM continents WHERE ContId IN (SELECT Continent FROM car_makers GROUP BY Continent HAVING COUNT(*) > 2));
 SELECT COUNT(*) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2);
 SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
 SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
 SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
 SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
 SELECT MakeId, Make FROM car_names WHERE Cylinders < (SELECT MIN(Cylinders) FROM cars_data) AND Cylinders < 3;
 SELECT MakeId, Make FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 2))) AND Cylinders < 4;
 SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
 SELECT MAX(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980;
 SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company') AND Weight < 3500;
 SELECT Model FROM model_list WHERE Maker NOT IN (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company') AND Weight < 3500;
 SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
 SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
 SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Maker FROM car_makers GROUP BY Maker HAVING COUNT(*) > 3);
 SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) >= 2) AND Id IN (SELECT MakeId FROM car_names GROUP BY MakeId HAVING COUNT(MakeId) > 3);
 SELECT countries.CountryId, countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 3 OR car_makers.Model = 'fiat';
 SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 3 OR car_makers.Maker = 'fiat';
 SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
 SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
 SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
 SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
 SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
 SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
 SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';  Write Sql for the following question: List the airport code and name in the city of Anthony. Answer : SELECT AirportCode, Air
 SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
 SELECT COUNT(*) FROM airlines;  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines';  Write Sql for the following question: What is the abbreviation for United Airlines? Answer : SELECT Abbreviation FROM airlines WHERE Airline = 'United Air
 SELECT COUNT(DISTINCT Airline) FROM airlines;
 SELECT COUNT(*) FROM airports;  Write Sql for the following question: How many airlines do we have? Answer : SELECT COUNT(*) FROM airlines;  Write Sql for the following question: How many flights do we have? Answer : SELECT COUNT(*) FROM flights;  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airport? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY SourceAirport);  Write Sql for the following question: What is the average number of flights per airport? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY DestAirport);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AVG(flights) FROM (SELECT COUNT(*) AS flights FROM flights GROUP BY Airline);  Write Sql for the following question: What is the average number of flights per airline? Answer : SELECT AV
 SELECT COUNT(AirportCode) FROM airports;  Write Sql for the following question: Return the number of airlines. Answer : SELECT COUNT(Airline) FROM airlines;  Write Sql for the following question: Return the number of flights. Answer : SELECT COUNT(FlightNo) FROM flights;  Write Sql for the following question: Return the number of flights from each airport. Answer : SELECT SourceAirport, COUNT(FlightNo) FROM flights GROUP BY SourceAirport;  Write Sql for the following question: Return the number of flights to each airport. Answer : SELECT DestAirport, COUNT(FlightNo) FROM flights GROUP BY DestAirport;  Write Sql for the following question: Return the number of flights from each airport to each airport. Answer : SELECT SourceAirport, DestAirport, COUNT(FlightNo) FROM flights GROUP BY SourceAirport, DestAirport;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist. Answer : SELECT SourceAirport, DestAirport, COUNT(FlightNo) FROM flights GROUP BY SourceAirport, DestAirport WITH ROLLUP;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist, and only show flights that have more than 1000 flights. Answer : SELECT SourceAirport, DestAirport, COUNT(FlightNo) FROM flights GROUP BY SourceAirport, DestAirport WITH ROLLUP HAVING COUNT(FlightNo) > 1000;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist, and only show flights that have more than 1000 flights, and only show flights that have more than 1000 flights from each airport to each airport. Answer : SELECT SourceAirport, DestAirport, COUNT(FlightNo) FROM flights GROUP BY SourceAirport, DestAirport WITH ROLLUP HAVING COUNT(FlightNo) > 1000 AND COUNT(FlightNo) > 1000;  Write Sql for
 SELECT COUNT(*) FROM flights;  Write Sql for the following question: What is the average flight duration? Answer : SELECT AVG(Duration) FROM flights;  Write Sql for the following question: What is the average flight duration for each airline? Answer : SELECT Airline, AVG(Duration) FROM flights GROUP BY Airline;  Write Sql for the following question: What is the average flight duration for each airline, but only for airlines that have more than 100 flights? Answer : SELECT Airline, AVG(Duration) FROM flights GROUP BY Airline HAVING COUNT(*) > 100;  Write Sql for the following question: What is the average flight duration for each airline, but only for airlines that have more than 100 flights, and only for airlines that have an average flight duration greater than 1000 minutes? Answer : SELECT Airline, AVG(Duration) FROM flights GROUP BY Airline HAVING COUNT(*) > 100 AND AVG(Duration) > 1000;  Write Sql for the following question: What is the average flight duration for each airline, but only for airlines that have more than 100 flights, and only for airlines that have an average flight duration greater than 1000 minutes, and only for airlines that have an average flight duration less than 10000 minutes? Answer : SELECT Airline, AVG(Duration) FROM flights GROUP BY Airline HAVING COUNT(*) > 100 AND AVG(Duration) > 1000 AND AVG(Duration) < 10000;  Write Sql for the following question: What is the average flight duration for each airline, but only for airlines that have more than 100 flights, and only for airlines that have an average flight duration greater than 1000 minutes, and only for airlines that have an average flight duration less than 10000 minutes, and only for airlines that have an average flight duration greater than 10000 minutes? Answer : SELECT Airline, AVG(Duration) FROM flights GROUP BY Airline HAVING COUNT(*) > 100 AND AVG(Duration) > 1000 AND
 SELECT COUNT(*) FROM flights;  Write Sql for the following question: Return the number of flights from each airport. Answer : SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;  Write Sql for the following question: Return the number of flights from each airport to each airport. Answer : SELECT SourceAirport, DestAirport, COUNT(*) FROM flights GROUP BY SourceAirport, DestAirport;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist. Answer : SELECT SourceAirport, DestAirport, COUNT(*) FROM flights GROUP BY SourceAirport, DestAirport WITH ROLLUP;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist, and only show flights that have more than 1000 flights. Answer : SELECT SourceAirport, DestAirport, COUNT(*) FROM flights GROUP BY SourceAirport, DestAirport HAVING COUNT(*) > 1000 WITH ROLLUP;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist, and only show flights that have more than 1000 flights, and only show flights that have more than 1000 flights from each airport. Answer : SELECT SourceAirport, DestAirport, COUNT(*) FROM flights GROUP BY SourceAirport, DestAirport HAVING COUNT(*) > 1000 AND SourceAirport IS NOT NULL WITH ROLLUP;  Write Sql for the following question: Return the number of flights from each airport to each airport, including flights that do not exist, and only show flights that have more than 1000 flights, and only show flights that have more than 1000 flights from each airport, and only show flights that have more than 1000 flights from each airport to each airport. Answer : SELECT SourceAirport, DestAirport, COUNT(*) FROM flights GROUP BY SourceAirport, DestAirport HAVING COUNT(*) > 1000 AND SourceAirport IS NOT NULL
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
 SELECT * FROM airlines WHERE Abbreviation = 'UAL';
 SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
 SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA';
 SELECT City, Country FROM airports WHERE AirportCode = 'ALTN';
 SELECT City, Country FROM airports WHERE AirportCode = 'ALTN';  Write Sql for the following question: Give the airline, flight number, source airport, and destination airport for all flights. Answer : SELECT Airline, FlightNo, SourceAirport, DestAirport FROM flights;  Write Sql for the following question: Give the airline, flight number, source airport, and destination airport for all flights from Alton to Boston. Answer : SELECT Airline, FlightNo, SourceAirport, DestAirport FROM flights WHERE SourceAirport = 'ALTN' AND DestAirport = 'BOS';  Write Sql for the following question: Give the airline, flight number, source airport, and destination airport for all flights from Alton to Boston or from Boston to Alton. Answer : SELECT Airline, FlightNo, SourceAirport, DestAirport FROM flights WHERE (SourceAirport = 'ALTN' AND DestAirport = 'BOS') OR (SourceAirport = 'BOS' AND DestAirport = 'ALTN');  Write Sql for the following question: Give the airline, flight number, source airport, and destination airport for all flights from Alton to Boston or from Boston to Alton, but not both. Answer : SELECT Airline, FlightNo, SourceAirport, DestAirport FROM flights WHERE (SourceAirport = 'ALTN' AND DestAirport = 'BOS') OR (SourceAirport = 'BOS' AND DestAirport = 'ALTN') AND NOT (SourceAirport = 'ALTN' AND DestAirport = 'BOS');  Write Sql for the following question: Give the airline, flight number, source airport, and destination airport for all flights from Alton to Boston or from Boston to Alton, but not both, and where the airline is American Airlines. Answer : SELECT Airline, FlightNo, SourceAirport, DestAirport FROM flights WHERE (SourceAirport = 'ALTN' AND DestAirport = 'BOS') OR (SourceAirport = 'BOS' AND DestAirport = 'ALTN') AND NOT (SourceAirport = 'ALTN' AND DestAirport = 'BOS') AND Airline = 5;  Write Sql for the following question: Give
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
 SELECT AirportName FROM airports WHERE City = 'Aberdeen';
 SELECT AirportName FROM airports WHERE City = 'Aberdeen';
 SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
 SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
 SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
 SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
 SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR';
 SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR';
 SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
 SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABR';
 SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
 SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASH';
 SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
 SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways');  Write Sql for the following question: Give the number of flights from Los Angeles to San Francisco. Answer : SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Los Angeles') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'San Francisco');  Write Sql for the following question: Give the number of flights from Los Angeles to San Francisco that are operated by United Airlines. Answer : SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Los Angeles') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'San Francisco') AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');  Write Sql for the following question: Give the number of flights from Los Angeles to San Francisco that are operated by United Airlines and have a flight number greater than 100. Answer : SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Los Angeles') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'San Francisco') AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND FlightNo > 100;  Write Sql for the following question: Give the number of flights from Los Angeles to San Francisco that are operated by United Airlines and have a flight number greater than 100 and are operated by United Airlines. Answer : SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Los Angeles') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'San Francisco') AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND FlightNo > 100 AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');  Write Sql for the following question: Give the number of flights from Los Angeles to San Francisco that are operated by United Airlines and have a flight number greater than 100 and are operated by United
 SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY';
 SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY';
 SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD';
 SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'AHD Airport');
 SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
 SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ABR';
 SELECT City, COUNT(*) AS NumOfFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY NumOfFlights DESC LIMIT 1;
 SELECT City, COUNT(DestAirport) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1;
 SELECT City, COUNT(FlightNo) AS NumFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY NumFlights DESC LIMIT 1;
 SELECT City, COUNT(SourceAirport) AS Frequency FROM airports GROUP BY City ORDER BY Frequency DESC LIMIT 1;
 SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) LIMIT 1;
 SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY SourceAirport) WHERE NumFlights = (SELECT MIN(NumFlights) FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY SourceAirport));
 SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;
 SELECT Airline, COUNT(*) AS 'Number of Flights' FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid = F.Airline GROUP BY A.Abbreviation, A.Country ORDER BY COUNT(F.Airline) LIMIT 1;
 SELECT A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid = F.Airline GROUP BY A.Abbreviation, A.Country ORDER BY COUNT(F.FlightNo) LIMIT 1;
 SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
 SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
 SELECT Airline FROM flights WHERE DestAirport = 'AHD';
 SELECT Airline FROM flights WHERE DestAirport = 'AHD';
 SELECT DISTINCT airlines.Airline FROM airlines, flights WHERE airlines.uid = flights.Airline AND flights.SourceAirport = 'APG' AND flights.DestAirport = 'CVO';
 SELECT DISTINCT airlines.Airline FROM airlines, flights WHERE airlines.uid = flights.Airline AND flights.SourceAirport IN ('APG', 'CVO');
 SELECT Airline FROM flights WHERE SourceAirport='CVO' AND DestAirport!='APG';
 SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport NOT IN (SELECT AirportCode FROM airports WHERE AirportCode = 'APG');
 SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
 SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
 SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;
 SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;
 SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
 SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
 SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
 SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
 SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
 SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
 SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
 SELECT FlightNo FROM flights WHERE SourceAirport = 'ABR';
 SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
 SELECT FlightNo FROM flights WHERE DestAirport = 'ABR';
 SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));
 SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI');
 SELECT DISTINCT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport WHERE f.SourceAirport IS NULL;  Write Sql for the following question: Find the name of airports which do not have any flight in and out. Answer : SELECT DISTINCT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport WHERE f.SourceAirport IS NULL;
 SELECT DISTINCT SourceAirport, DestAirport FROM flights WHERE SourceAirport NOT IN (SELECT DestAirport FROM flights) OR DestAirport NOT IN (SELECT SourceAirport FROM flights);
 SELECT COUNT(*) FROM employee;  Write Sql for the following question: What is the average age of employees? Answer : SELECT AVG(Age) FROM employee;  Write Sql for the following question: What is the average age of employees in Bristol? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: What is the average age of employees in Bristol and Wasps? Answer : SELECT AVG(Age) FROM employee WHERE City
 SELECT COUNT(*) FROM employee;  Write Sql for the following question: Find the names of all employees Answer : SELECT Name FROM employee;  Write Sql for the following question: Find the names of all employees who live in Bristol Answer : SELECT Name FROM employee WHERE City = "Bristol";  Write Sql for the following question: Find the names of all employees who live in Bristol or Wasps Answer : SELECT Name FROM employee WHERE City = "Bristol" OR City = "Wasps";  Write Sql for the following question: Find the names of all employees who live in Bristol and Wasps Answer : SELECT Name FROM employee WHERE City = "Bristol" AND City = "Wasps";  Write Sql for the following question: Find the names of all employees who live in Bristol and Wasps, but not in Bath Answer : SELECT Name FROM employee WHERE City = "Bristol" AND City = "Wasps" AND NOT City = "Bath";  Write Sql for the following question: Find the names of all employees who live in Bristol or Wasps, but not in Bath Answer : SELECT Name FROM employee WHERE City = "Bristol" OR City = "Wasps" AND NOT City = "Bath";  Write Sql for the following question: Find the names of all employees who live in Bristol or Wasps, but not in Bath or Bath Answer : SELECT Name FROM employee WHERE City = "Bristol" OR City = "Wasps" AND NOT City = "Bath" AND NOT City = "Bath";  Write Sql for the following question: Find the names of all employees who live in Bristol or Wasps, but not in Bath or Bath or Bristol Answer : SELECT Name FROM employee WHERE City = "Bristol" OR City = "Wasps" AND NOT City = "Bath" AND NOT City = "Bath" AND NOT City = "Bristol";  Write Sql for the following question: Find the names of all employees who live in Bristol or Wasps, but not in Bath or Bath or Bristol or Bristol Answer : SELECT Name FROM employee WHERE City = "Bristol" OR City = "Wasps" AND NOT City = "Bath" AND NOT City = "Bath" AND
 SELECT Name FROM employee ORDER BY Age ASC;
 SELECT Name FROM employee ORDER BY Age ASC;  Write Sql for the following question: List the names of employees and sort in descending order of age. Answer : SELECT Name FROM employee ORDER BY Age DESC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in descending order of name. Answer : SELECT Name FROM employee ORDER BY Age ASC, Name DESC;  Write Sql for the following question: List the names of employees and sort in descending order of age and then in ascending order of name. Answer : SELECT Name FROM employee ORDER BY Age DESC, Name ASC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in ascending order of name. Answer : SELECT Name FROM employee ORDER BY Age ASC, Name ASC;  Write Sql for the following question: List the names of employees and sort in descending order of age and then in descending order of name. Answer : SELECT Name FROM employee ORDER BY Age DESC, Name DESC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in descending order of name. Answer : SELECT Name FROM employee ORDER BY Age ASC, Name DESC;  Write Sql for the following question: List the names of employees and sort in descending order of age and then in ascending order of name. Answer : SELECT Name FROM employee ORDER BY Age DESC, Name ASC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in ascending order of name. Answer : SELECT Name FROM employee ORDER BY Age ASC, Name ASC;  Write Sql for the following question: List the names of employees and sort in descending order of age and then in descending order of name. Answer : SELECT Name FROM employee ORDER BY Age DESC, Name DESC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in descending order of name. Answer : SELECT Name FROM employee ORDER BY Age ASC, Name DESC;  Write Sql for the following question: List the names of employees and sort in descending order of age and then in ascending order of name. Answer : SELECT Name FROM employee ORDER BY Age DESC, Name ASC;  Write Sql for the following question: List the names of employees and sort in ascending order of age and then in ascending order of name.
 SELECT City, COUNT(*) FROM employee GROUP BY City;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities, and what is the total number of employees? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities, and what is the total number of employees, and what is the total number of employees? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities, and what is the total number of employees, and what is the total number of employees, and what is the total number of employees? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities, and what is the total number of employees, and what is the total number of employees, and what is the total number of employees, and what is the total number of employees? Answer : SELECT City, COUNT(*) FROM employee GROUP BY City WITH ROLLUP;  Write Sql for the following question: What is the number of employees from each city, and what is the total number of employees, and what is the total number of employees from all cities, and what is the total number of employees, and what is the total number of employees, and what is the total number of employees, and what
 SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City;  Write Sql for the following question: Find the number of employees who are younger than 30. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30;  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND City = "Bristol";  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol or Bath. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath");  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol or Bath or Wasps. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps");  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps" OR City = "Bath");  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath or Bristol. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps" OR City = "Bath" OR City = "Bristol");  Write Sql for the following question: Find the number of employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath or Bristol or Bath. Answer : SELECT COUNT(Employee_ID) FROM employee WHERE Age < 30 AND (City =
 SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
 SELECT City FROM employee GROUP BY City HAVING COUNT(Employee_ID) > 1 AND MIN(Age) > 30;
 SELECT Location, COUNT(Location) FROM shop GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location. Answer : SELECT Location, COUNT(Location) FROM employee GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location who are hired in the same location. Answer : SELECT Location, COUNT(Location) FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location) GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location who are hired in the same location and are full time. Answer : SELECT Location, COUNT(Location) FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location AND Is_full_time = 1) GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location who are hired in the same location and are full time and have a bonus. Answer : SELECT Location, COUNT(Location) FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location AND Is_full_time = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation) GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location who are hired in the same location and are full time and have a bonus and are younger than 30. Answer : SELECT Location, COUNT(Location) FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location AND Is_full_time = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation) AND Age < 30 GROUP BY Location;  Write Sql for the following question: Find the number of employees in each location who are hired in the same location and are full time and have a bonus and are younger than 30 and have a shop in the same location. Answer : SELECT Location, COUNT(Location) FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location AND Is_full_time = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation) AND Age < 30 AND Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Location = Location) GROUP BY Location;  Write Sql for the
 SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID) FROM employee GROUP BY Location;  Write Sql for the following question: How many employees are there in each location? Answer : SELECT Location, COUNT(Employee_ID
 SELECT Manager_name,District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
 SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
 SELECT MIN(Number_products), MAX(Number_products) FROM shop;  Write Sql for the following question: find the number of employees who have been hired in each shop. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: find the number of employees who have been hired in each shop and the number of employees who have been hired in each shop who are full time. Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question:
 SELECT MIN(Number_products), MAX(Number_products) FROM shop;  Write Sql for the following question: What are the names of the shops that have more than 2 products? Answer : SELECT Name FROM shop WHERE Number_products > 2;  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located in Bristol? Answer : SELECT Name FROM shop WHERE Number_products > 2 AND Location = "Bristol";  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located in Bristol or Bath? Answer : SELECT Name FROM shop WHERE Number_products > 2 AND (Location = "Bristol" OR Location = "Bath");  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located in Bristol or Bath, and have a manager named George Chuter? Answer : SELECT Name FROM shop WHERE Number_products > 2 AND (Location = "Bristol" OR Location = "Bath") AND Manager_name = "George Chuter";  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located in Bristol or Bath, and have a manager named George Chuter or Lee Mears? Answer : SELECT Name FROM shop WHERE Number_products > 2 AND (Location = "Bristol" OR Location = "Bath") AND (Manager_name = "George Chuter" OR Manager_name = "Lee Mears");  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located in Bristol or Bath, and have a manager named George Chuter or Lee Mears, and have more than 2 employees? Answer : SELECT Name FROM shop WHERE Number_products > 2 AND (Location = "Bristol" OR Location = "Bath") AND (Manager_name = "George Chuter" OR Manager_name = "Lee Mears") AND Number_employees > 2;  Write Sql for the following question: What are the names of the shops that have more than 2 products and are located
 SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30;  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30 AND City = "Bristol";  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol or Bath. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath");  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol or Bath or Wasps. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps");  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps" OR City = "Bath");  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath or Bristol. Answer : SELECT Name, Age, City FROM employee WHERE Age < 30 AND (City = "Bristol" OR City = "Bath" OR City = "Wasps" OR City = "Bath" OR City = "Bristol");  Write Sql for the following question: Return the name, age and city of all employees who are younger than 30 and live in Bristol or Bath or Wasps or Bath or
 SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
 SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
 SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
 SELECT employee.Name, COUNT(evaluation.Employee_ID) AS "Number of awards" FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1;
 SELECT employee.Name FROM employee, evaluation WHERE employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1;
 SELECT employee.Name FROM employee, evaluation WHERE employee.Employee_ID = evaluation.Employee_ID AND evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation);
 SELECT employee.Name FROM employee, evaluation WHERE employee.Employee_ID = evaluation.Employee_ID AND evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation);
 SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
 SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
 SELECT shop.Name FROM shop, hiring WHERE shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
 SELECT shop.Name FROM shop, hiring WHERE shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
 SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring);  Write Sql for the following question: Find the name of the shops that hire all employees. Answer : SELECT shop.Name FROM shop WHERE shop.Shop_ID IN (SELECT hiring.Shop_ID FROM hiring GROUP BY hiring.Shop_ID HAVING COUNT(hiring.Employee_ID) = (SELECT COUNT(Employee_ID) FROM employee));  Write Sql for the following question: Find the name of the shops that hire all employees from Bristol. Answer : SELECT shop.Name FROM shop WHERE shop.Shop_ID IN (SELECT hiring.Shop_ID FROM hiring WHERE hiring.Employee_ID IN (SELECT employee.Employee_ID FROM employee WHERE employee.City = "Bristol") GROUP BY hiring.Shop_ID HAVING COUNT(hiring.Employee_ID) = (SELECT COUNT(Employee_ID) FROM employee WHERE employee.City = "Bristol"));  Write Sql for the following question: Find the name of the shops that hire all employees from Bristol or Wasps. Answer : SELECT shop.Name FROM shop WHERE shop.Shop_ID IN (SELECT hiring.Shop_ID FROM hiring WHERE hiring.Employee_ID IN (SELECT employee.Employee_ID FROM employee WHERE employee.City = "Bristol" OR employee.City = "Wasps") GROUP BY hiring.Shop_ID HAVING COUNT(hiring.Employee_ID) = (SELECT COUNT(Employee_ID) FROM employee WHERE employee.City = "Bristol" OR employee.City = "Wasps"));  Write Sql for the following question: Find the name of the shops that hire all employees from Bristol or Wasps and have more than 2 employees. Answer : SELECT shop.Name FROM shop WHERE shop.Shop_ID IN (SELECT hiring.Shop_ID FROM hiring WHERE hiring.Employee_ID IN (SELECT employee.Employee_ID FROM employee WHERE employee.City = "Bristol" OR employee.City = "Wasps") GROUP BY hiring.Shop_ID HAVING COUNT(hiring.Employee_ID) > 2);  Write Sql for the following question: Find the name of the shops that hire
 SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring);  Write Sql for the following question: Which employees have no shop? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT hiring.Employee_ID FROM hiring);  Write Sql for the following question: Which employees have no evaluation? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation);  Write Sql for the following question: Which employees have no evaluation in 2019? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation WHERE evaluation.Year_awarded = "2019");  Write Sql for the following question: Which employees have no evaluation in 2019 or 2020? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation WHERE evaluation.Year_awarded = "2019" OR evaluation.Year_awarded = "2020");  Write Sql for the following question: Which employees have no evaluation in 2019 or 2020 or 2021? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation WHERE evaluation.Year_awarded = "2019" OR evaluation.Year_awarded = "2020" OR evaluation.Year_awarded = "2021");  Write Sql for the following question: Which employees have no evaluation in 2019 or 2020 or 2021 or 2022? Find the employee names Answer : SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation WHERE evaluation.Year_awarded = "2019" OR evaluation.Year_awarded = "2020" OR evaluation.Year_awarded = "2021" OR evaluation.Year_awarded = "2022");  Write Sql for the following question: Which employees have
 SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_employees_hired FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
 SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_employees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
 SELECT SUM(Bonus) FROM evaluation;
 SELECT SUM(Bonus) FROM evaluation;
 SELECT * FROM hiring;
 SELECT * FROM hiring;
 SELECT DISTINCT district FROM shop WHERE (number_products < 3000 AND number_products > 10000) OR (number_products > 3000 AND number_products < 10000);
 SELECT DISTINCT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT district FROM shop WHERE Number_products > 10000;
 SELECT COUNT(DISTINCT Location) FROM shop;  Write Sql for the following question: How many different districts are there? Answer : SELECT COUNT(DISTINCT District) FROM shop;  Write Sql for the following question: How many different managers are there? Answer : SELECT COUNT(DISTINCT Manager_name) FROM shop;  Write Sql for the following question: How many different products are there? Answer : SELECT COUNT(DISTINCT Number_products) FROM shop;  Write Sql for the following question: How many different employees are there? Answer : SELECT COUNT(DISTINCT Employee_ID) FROM hiring;  Write Sql for the following question: How many different years are there? Answer : SELECT COUNT(DISTINCT Year_awarded) FROM evaluation;  Write Sql for the following question: How many different bonus amounts are there? Answer : SELECT COUNT(DISTINCT Bonus) FROM evaluation;  Write Sql for the following question: How many different shops are there? Answer : SELECT COUNT(DISTINCT Shop_ID) FROM hiring;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;  Write Sql for the following question: How many different employees are there in each shop? Answer : SELECT Shop_ID, COUNT(Employee
 SELECT COUNT(DISTINCT Location) FROM shop;  Write Sql for the following question: Find the names of all employees who work in the shop with ID 1. Answer : SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Shop_ID = 1);  Write Sql for the following question: Find the names of all employees who work in the shop with ID 1 and have a bonus of more than 1000. Answer : SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Shop_ID = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus > 1000);  Write Sql for the following question: Find the names of all employees who work in the shop with ID 1 and have a bonus of more than 1000, and whose name starts with the letter 'J'. Answer : SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Shop_ID = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus > 1000) AND Name LIKE 'J%';  Write Sql for the following question: Find the names of all employees who work in the shop with ID 1 and have a bonus of more than 1000, and whose name starts with the letter 'J', and whose name ends with the letter 'n'. Answer : SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Shop_ID = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus > 1000) AND Name LIKE 'J%' AND Name LIKE '%n';  Write Sql for the following question: Find the names of all employees who work in the shop with ID 1 and have a bonus of more than 1000, and whose name starts with the letter 'J', and whose name ends with the letter 'n', and whose name contains the letter 'a'. Answer : SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM hiring WHERE Shop_ID = 1) AND Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus > 1000) AND Name LIKE 'J%' AND Name LIKE '%n' AND Name LIKE '%a%';  Write Sql
 SELECT COUNT(*) FROM Documents;
 SELECT COUNT(Document_ID) FROM Documents;
 SELECT Document_ID, Document_Name, Document_Description FROM Documents;
 SELECT Document_ID, Document_Name, Document_Description FROM Documents;
 SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
 SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
 SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
 SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'CV' AND Documents.Document_Name = 'Robbin CV';
 SELECT COUNT(DISTINCT Template_ID) FROM Documents;
 SELECT COUNT(DISTINCT Template_ID) FROM Documents;
 SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');
 SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'PPT';
 SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
 SELECT Templates.Template_ID, COUNT(Documents.Template_ID) AS Number_Of_Times_Used FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
 SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1;
 SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(Template_ID) > 1;
 SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(Template_ID) > 1;
 SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
 SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
 SELECT COUNT(*) FROM Templates;
 SELECT COUNT(*) FROM Templates;
 SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
 SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
 SELECT DISTINCT Template_Type_Code FROM Templates;
 SELECT Template_Type_Code FROM Ref_Template_Types;
 SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
 SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
 SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
 SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
 SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
 SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
 SELECT Template_Type_Code, COUNT(Template_ID) AS Number_Of_Templates FROM Templates GROUP BY Template_Type_Code;
 SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
 SELECT Template_Type_Code, COUNT(*) AS 'Number of Templates' FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_Type_Code) < 3);
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_Type_Code) < 3);
 SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
 SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
 SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base');
 SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
 SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
 SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
 SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
 SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
 SELECT Template_Type_Code, COUNT(*) AS Number_of_Documents FROM Templates GROUP BY Template_Type_Code ORDER BY Number_of_Documents DESC LIMIT 1;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates);
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates);
 SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
 SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
 SELECT DISTINCT Template_Type_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
 SELECT DISTINCT Template_Type_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT';
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT';
 SELECT COUNT(*) FROM Paragraphs;
 SELECT COUNT(*) FROM Paragraphs;
 SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
 SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
 SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
 SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
 SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
 SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
 SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
 SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
 SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
 SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
 SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID;
 SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID;
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
 SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Number_of_Paragraphs DESC LIMIT 1;
 SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC LIMIT 1;
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1;
 SELECT Document_ID FROM Documents WHERE Document_ID = (SELECT MIN(Document_ID) FROM Documents);
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID BETWEEN 1 AND 2;
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland';
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland';
 SELECT COUNT(*) FROM teacher;  Write Sql for the following question: How many courses are there? Answer : SELECT COUNT(*) FROM course;  Write Sql for the following question: How many courses are there in the language arts? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts";  Write Sql for the following question: How many courses are there in the language arts and math? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math";  Write Sql for the following question: How many courses are there in the language arts and math and science? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course = "Science";  Write Sql for the following question: How many courses are there in the language arts and math and science and history? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course = "Science" OR course = "History";  Write Sql for the following question: How many courses are there in the language arts and math and science and history and bible? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course = "Science" OR course = "History" OR course = "Bible";  Write Sql for the following question: How many courses are there in the language arts and math and science and history and bible and english? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course = "Science" OR course = "History" OR course = "Bible" OR course = "English";  Write Sql for the following question: How many courses are there in the language arts and math and science and history and bible and english and art? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course = "Science" OR course = "History" OR course = "Bible" OR course = "English" OR course = "Art";  Write Sql for the following question: How many courses are there in the language arts and math and science and history and bible and english and art and music? Answer : SELECT COUNT(*) FROM course WHERE course = "Language Arts" OR course = "Math" OR course
 SELECT COUNT(*) FROM teacher;  Write Sql for the following question: What is the total count of courses? Answer : SELECT COUNT(*) FROM course;  Write Sql for the following question: What is the total count of teachers who have taught at least one course? Answer : SELECT COUNT(*) FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course? Answer : SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM course_arrange);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course and have a grade of 10? Answer : SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM course_arrange WHERE grade = 10);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course and have a grade of 10 or 11? Answer : SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM course_arrange WHERE grade = 10 OR grade = 11);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course and have a grade of 10 or 11 or 12? Answer : SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM course_arrange WHERE grade = 10 OR grade = 11 OR grade = 12);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course and have a grade of 10 or 11 or 12 or 13? Answer : SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM course_arrange WHERE grade = 10 OR grade = 11 OR grade = 12 OR grade = 13);  Write Sql for the following question: What is the total count of courses taught by teachers who have taught at least one course and have a grade of 10 or 11 or 12 or 13 or
 SELECT Name FROM teacher ORDER BY Age ASC;  Write Sql for the following question: List the names of teachers in descending order of age. Answer : SELECT Name FROM teacher ORDER BY Age DESC;  Write Sql for the following question: List the names of teachers in ascending order of hometown. Answer : SELECT Name FROM teacher ORDER BY Hometown ASC;  Write Sql for the following question: List the names of teachers in descending order of hometown. Answer : SELECT Name FROM teacher ORDER BY Hometown DESC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then by hometown. Answer : SELECT Name FROM teacher ORDER BY Age ASC, Hometown ASC;  Write Sql for the following question: List the names of teachers in ascending order of age and then
 SELECT Name FROM teacher ORDER BY Age ASC;
 SELECT teacher.Age, teacher.Hometown FROM teacher;
 SELECT teacher.Name, teacher.Age, teacher.Hometown FROM teacher;
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District";
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District";
 SELECT Name FROM teacher WHERE Age = 32 OR Age = 33;
 SELECT Name FROM teacher WHERE Age = 32 OR Age = 33;
 SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
 SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
 SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) > 1;  Write Sql for the following question: Show the number of teachers from each hometown and the number of courses they teach. Answer : SELECT
 SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown;  Write Sql for the following question: For each course, how many teachers are there? Answer : SELECT Course, COUNT(Teacher_ID) FROM teacher GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course, how many students are there? Answer : SELECT Course, COUNT(Student_ID) FROM student GROUP BY Course;  Write Sql for the following question: For each course,
 SELECT Hometown, COUNT(Hometown) AS "Count" FROM teacher GROUP BY Hometown ORDER BY "Count" DESC;
 SELECT Hometown, COUNT(*) AS "Number of teachers" FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) >= 2;
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) >= 2;
 SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;
 SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;
 SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
 SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
 SELECT teacher.Name FROM teacher,course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course_arrange.Course_ID = 2;
 SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = "Math"));
 SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;  Write Sql for the following question: Show names of teachers and the number of courses they teach. Answer : SELECT teacher.Name, COUNT(course
 SELECT teacher.Name, COUNT(course_arrange.Teacher_ID) FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
 SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Teacher_ID)>=2);  Write Sql for the following question: Show names of teachers that teach at least two courses and have a grade of 10. Answer : SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Grade=10 GROUP BY Teacher_ID HAVING COUNT(Teacher_ID)>=2);  Write Sql for the following question: Show names of teachers that teach at least two courses and have a grade of 10 or 9. Answer : SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Grade IN (10,9) GROUP BY Teacher_ID HAVING COUNT(Teacher_ID)>=2);  Write Sql for the following question: Show names of teachers that teach at least two courses and have a grade of 10 or 9 and have a hometown of 'London'. Answer : SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Grade IN (10,9) AND Hometown='London' GROUP BY Teacher_ID HAVING COUNT(Teacher_ID)>=2);  Write Sql for the following question: Show names of teachers that teach at least two courses and have a grade of 10 or 9 and have a hometown of 'London' or 'Paris'. Answer : SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Grade IN (10,9) AND Hometown IN ('London','Paris') GROUP BY Teacher_ID HAVING COUNT(Teacher_ID)>=2);  Write Sql for the following question: Show names of teachers that teach at least two courses and have a grade of 10 or 9 and have a hometown of 'London' or 'Paris' or 'Rome'. Answer : SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Grade IN (10,9) AND Hometown IN ('London','Paris','Rome') GROUP BY Teacher_
 SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Teacher_ID) >= 2);
 SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange);
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
 SELECT COUNT(*) FROM visitor WHERE Age < 30;  Write Sql for the following question: What is the average age of visitors? Answer : SELECT AVG(Age) FROM visitor;  Write Sql for the following question: What is the total number of visitors? Answer : SELECT COUNT(*) FROM visitor;  Write Sql for the following question: What is the total number of visitors who have visited more than 1 museum? Answer : SELECT COUNT(*) FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1);  Write Sql for the following question: What is the total number of visitors who have visited more than 1 museum and have spent more than $100? Answer : SELECT COUNT(*) FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1) AND ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) > 100);  Write Sql for the following question: What is the total number of visitors who have visited more than 1 museum and have spent more than $100, and what is the average age of these visitors? Answer : SELECT COUNT(*) FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1) AND ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) > 100);  Write Sql for the following question: What is the total number of visitors who have visited more than 1 museum and have spent more than $100, and what is the average age of these visitors? Answer : SELECT COUNT(*) FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1) AND ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) > 100);  Write Sql for the following question: What is the total number of visitors who have visited more than 1 museum and have spent more than $100, and what is the average age of these visitors? Answer : SELECT COUNT(*) FROM visitor WHERE ID IN (SELECT visitor_ID
 SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
 SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
 SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
 SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);  Write Sql for the following question: Find the id and name of the museum that has the most staff members? Answer : SELECT Museum_ID, Name
 SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
 SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = "Plaza Museum";
 SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. Answer : SELECT Name FROM museum WHERE Num_of_Staff > ALL (SELECT Num_of_Staff FROM museum WHERE Open_Year > 2010);  Write Sql for the following question: find the names of m
 SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor, visit WHERE visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(visit.Museum_ID) > 1;
 SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) = (SELECT MAX(SUM(Total_spent)) FROM visit GROUP BY visitor_ID));
 SELECT museum.Museum_ID, museum.Name, COUNT(visit.Museum_ID) AS "Number of visits" FROM museum INNER JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY COUNT(visit.Museum_ID) DESC LIMIT 1;
 SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN (SELECT visit.Museum_ID FROM visit);
 SELECT visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name, visitor.Age ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;
 SELECT SUM(Total_spent) FROM visit WHERE Level_of_membership = 1;
 SELECT visitor.Name FROM visitor,visit WHERE visitor.ID = visit.visitor_ID AND visit.Museum_ID IN (SELECT Museum_ID FROM visit WHERE visit.Museum_ID IN (SELECT Museum_ID FROM museum WHERE museum.Open_Year < 2009) INTERSECT SELECT Museum_ID FROM visit WHERE visit.Museum_ID IN (SELECT Museum_ID FROM museum WHERE museum.Open_Year > 2011));
 SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010));
 SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;  Write Sql for the following question: How many museums were opened between 2000 and 2010? Answer : SELECT COUNT(*) FROM museum WHERE Open_Year BETWEEN 2000 AND 2010;  Write Sql for the following question: What is the average age of visitors? Answer : SELECT AVG(Age) FROM visitor;  Write Sql for the following question: What is the average age of visitors who are members? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 1;  Write Sql for the following question: What is the average age of visitors who are not members? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 0;  Write Sql for the following question: What is the average age of visitors who are members and have spent more than $100? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 1 AND Total_spent > 100;  Write Sql for the following question: What is the average age of visitors who are not members and have spent more than $100? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 0 AND Total_spent > 100;  Write Sql for the following question: What is the average age of visitors who are members and have spent more than $100 and are 25 years old or older? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 1 AND Total_spent > 100 AND Age >= 25;  Write Sql for the following question: What is the average age of visitors who are not members and have spent more than $100 and are 25 years old or older? Answer : SELECT AVG(Age) FROM visitor WHERE Level_of_membership = 0 AND Total_spent > 100 AND Age >= 25;  Write Sql for the following question: What is the average age of visitors who are members and have spent more than $100 and are 25 years old or older and are from
 SELECT COUNT(player_id) FROM players;  Write Sql for the following question: Find the number of players from each country. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code;  Write Sql for the following question: Find the number of players from each country who have played more than 2 matches. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 2;  Write Sql for the following question: Find the number of players from each country who have played more than 2 matches and have won more than 2 matches. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 2 AND COUNT(player_id) > 2;  Write Sql for the following question: Find the number of players from each country who have played more than 2 matches and have won more than 2 matches, and sort the result by the number of matches played. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 2 AND COUNT(player_id) > 2 ORDER BY COUNT(player_id);  Write Sql for the following question: Find the number of players from each country who have played more than 2 matches and have won more than 2 matches, and sort the result by the number of matches played in descending order. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 2 AND COUNT(player_id) > 2 ORDER BY COUNT(player_id) DESC;  Write Sql for the following question: Find the number of players from each country who have played more than 2 matches and have won more than 2 matches, and sort the result by the number of matches played in descending order and then by country code in ascending order. Answer : SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 2 AND COUNT(player_id) > 2 ORDER BY COUNT(player_id) DESC, country_code ASC;  Write Sql for the following question: Find the number of
 SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there in each country? Answer : SELECT country_code, COUNT(*) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players? Answer : SELECT AVG(winner_ht) FROM matches;  Write Sql for the following question: What is the average height of players in each country? Answer : SELECT country_code, AVG(winner_ht) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY country_code;  Write Sql for the following question: What is the average height of players in each country, excluding players with less than 100 matches played? Answer : SELECT country_code, AVG(winner_ht) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY country_code HAVING COUNT(*) > 100;  Write Sql for the following question: What is the average height of players in each country, excluding players with less than 100 matches played and excluding players with average height less than 170? Answer : SELECT country_code, AVG(winner_ht) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY country_code HAVING COUNT(*) > 100 AND AVG(winner_ht) > 170;  Write Sql for the following question: What is the average height of players in each country, excluding players with less than 100 matches played and excluding players with average height less than 170, and excluding players with average height greater than 180? Answer : SELECT country_code, AVG(winner_ht) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY country_code HAVING COUNT(*) > 100 AND AVG(winner_ht) > 170 AND AVG(winner_ht) < 180;  Write Sql for the following question: What is the average height of players in each country, excluding players with less than 100 matches played and excluding players with average height less than 170, and excluding players with average height greater than 180, and excluding players with average height less than 185
 SELECT COUNT(*) FROM matches;  Write Sql for the following question: Find the total number of players. Answer : SELECT COUNT(*) FROM players;  Write Sql for the following question: Find the total number of players who have played more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Find the total number of players who have played more than 10 matches in the year 2010. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2010 UNION SELECT loser_id FROM matches WHERE year = 2010);  Write Sql for the following question: Find the total number of players who have played more than 10 matches in the year 2010 and have won more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2010 UNION SELECT loser_id FROM matches WHERE year = 2010) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2010);  Write Sql for the following question: Find the total number of players who have played more than 10 matches in the year 2010 and have won more than 10 matches in the year 2010. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2010 UNION SELECT loser_id FROM matches WHERE year = 2010) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2010 AND winner_rank > 0);  Write Sql for the following question: Find the total number of players who have played more than 10 matches in the year 2010 and have won more than 10 matches in the year 2010 and have played more than 10 matches in the year 2010. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2010 UNION SELECT loser_id FROM matches WHERE year = 2010) AND player_id IN (
 SELECT COUNT(*) FROM matches;  Write Sql for the following question: Count the number of players. Answer : SELECT COUNT(*) FROM players;  Write Sql for the following question: Count the number of players who have played more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Count the number of players who have played more than 10 matches and have won more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Count the number of players who have played more than 10 matches and have won more than 10 matches, and have played more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Count the number of players who have played more than 10 matches and have won more than 10 matches, and have played more than 10 matches, and have won more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Count the number of players who have played more than 10 matches and have won more than 10 matches, and have played more than 10 matches, and have won more than 10 matches, and have played more than 10 matches. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser
 SELECT first_name, birth_date FROM players WHERE country_code = 'USA';  Write Sql for the following question: List the first name and birth date of all players from the country with code USA who are Rock players. Answer : SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND hand = 'R';  Write Sql for the following question: List the first name and birth date of all players from the country with code USA who are Rock players and born after 1980. Answer : SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800000;  Write Sql for the following question: List the first name and birth date of all players from the country with code USA who are Rock players and born after 1980 and have a ranking of 100 or more. Answer : SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800000 AND ranking >= 100;  Write Sql for the following question: List the first name and birth date of all players from the country with code USA who are Rock players and born after 1980 and have a ranking of 100 or more and have played in at least 10 tournaments. Answer : SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800000 AND ranking >= 100 AND tours >= 10;  Write Sql for the following question: List the first name and birth date of all players from the country with code USA who are Rock players and born after 1980 and have a ranking of 100 or more and have played in at least 10 tournaments and have a ranking of 100 or more in at least 10 tournaments. Answer : SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800000 AND ranking >= 100 AND tours >= 10 AND ranking >= 
 SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
 SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;  Write Sql for the following question: Find the average age of losers and winners of all matches where the winner is older than the loser. Answer : SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age > loser_age;  Write Sql for the following question: Find the average age of losers and winners of all matches where the winner is older than the loser and the winner is 20 years older than the loser. Answer : SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age > loser_age AND winner_age - loser_age = 20;  Write Sql for the following question: Find the average age of losers and winners of all matches where the winner is older than the loser and the winner is 20 years older than the loser and the winner is a male. Answer : SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age > loser_age AND winner_age - loser_age = 20 AND winner_entry = 'M';  Write Sql for the following question: Find the average age of losers and winners of all matches where the winner is older than the loser and the winner is 20 years older than the loser and the winner is a male and the winner is a player from the USA. Answer : SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age > loser_age AND winner_age - loser_age = 20 AND winner_entry = 'M' AND winner_ioc = 'USA';  Write Sql for the following question: Find the average age of losers and winners of all matches where the winner is older than the loser and the winner is 20 years older than the loser and the winner is a male
 SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;  Write Sql for the following question: What is the average age of losers and winners across matches for each year? Answer : SELECT year, AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches GROUP BY year;  Write Sql for the following question: What is the average age of losers and winners across matches for each year, excluding matches where the winner is older than the loser? Answer : SELECT year, AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age < loser_age GROUP BY year;  Write Sql for the following question: What is the average age of losers and winners across matches for each year, excluding matches where the winner is older than the loser and the winner is younger than 25? Answer : SELECT year, AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age < loser_age AND winner_age < 25 GROUP BY year;  Write Sql for the following question: What is the average age of losers and winners across matches for each year, excluding matches where the winner is older than the loser and the winner is younger than 25 and the winner is older than 30? Answer : SELECT year, AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_age < loser_age AND winner_age < 25 AND winner_age < 30 GROUP BY year;  Write Sql for the following question: What is the average age of losers and winners across matches for each year, excluding matches where the winner is older than the loser and the winner is younger than 25 and the winner is older than 30 and the winner is younger than 35? Answer : SELECT year, AVG(loser_age) AS avg_loser_age, AVG
 SELECT AVG(winner_rank) FROM matches;  Write Sql for the following question: Find the average rank of losers in all matches. Answer : SELECT AVG(loser_rank) FROM matches;  Write Sql for the following question: Find the average rank of winners in all matches where the winner is a male. Answer : SELECT AVG(winner_rank) FROM matches WHERE winner_entry = 'M';  Write Sql for the following question: Find the average rank of losers in all matches where the loser is a male. Answer : SELECT AVG(loser_rank) FROM matches WHERE loser_entry = 'M';  Write Sql for the following question: Find the average rank of winners in all matches where the winner is a male and the winner is ranked 1st. Answer : SELECT AVG(winner_rank) FROM matches WHERE winner_entry = 'M' AND winner_rank = 1;  Write Sql for the following question: Find the average rank of losers in all matches where the loser is a male and the loser is ranked 1st. Answer : SELECT AVG(loser_rank) FROM matches WHERE loser_entry = 'M' AND loser_rank = 1;  Write Sql for the following question: Find the average rank of winners in all matches where the winner is a male and the winner is ranked 1st and the winner is ranked 1st in the tournament. Answer : SELECT AVG(winner_rank) FROM matches WHERE winner_entry = 'M' AND winner_rank = 1 AND winner_rank_points = 1;  Write Sql for the following question: Find the average rank of losers in all matches where the loser is a male and the loser is ranked 1st and the loser is ranked 1st in the tournament. Answer : SELECT AVG(loser_rank) FROM matches WHERE loser_entry = 'M' AND loser_rank = 1 AND loser_rank_points = 1;  Write Sql for the following question: Find the average rank of winners in all matches where the winner is a male and the winner is ranked 1st and the winner is ranked 1st in the tournament and the tournament is a Grand Slam. Answer :
 SELECT AVG(winner_rank) FROM matches;
 SELECT MAX(loser_rank) FROM matches;  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male. Answer : SELECT MAX(loser_rank) FROM matches WHERE winner_entry = 'M';  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male and the loser is a male. Answer : SELECT MAX(loser_rank) FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M';  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male and the loser is a male and the winner is a 2000s player. Answer : SELECT MAX(loser_rank) FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ht BETWEEN 1990 AND 1999;  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male and the loser is a male and the winner is a 2000s player and the winner is ranked 1st. Answer : SELECT MAX(loser_rank) FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ht BETWEEN 1990 AND 1999 AND winner_rank = 1;  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male and the loser is a male and the winner is a 2000s player and the winner is ranked 1st and the winner has more than 1000 ranking points. Answer : SELECT MAX(loser_rank) FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ht BETWEEN 1990 AND 1999 AND winner_rank = 1 AND winner_rank_points > 1000;  Write Sql for the following question: Find the highest rank of losers in all matches where the winner is a male and the loser is a male and the winner is a 2000s player and the winner is ranked 1st and the winner has more
 SELECT MAX(loser_rank) FROM matches;  Write Sql for the following question: What is the average ranking points of winners across all matches? Answer : SELECT AVG(winner_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_points) FROM matches;  Write Sql for the following question: What is the average ranking points of losers across all matches? Answer : SELECT AVG(loser_rank_
 SELECT COUNT(DISTINCT country_code) FROM players;  Write Sql for the following question: find the number of distinct country codes of all players who have played at least 10 matches. Answer : SELECT COUNT(DISTINCT country_code) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: find the number of distinct country codes of all players who have played at least 10 matches and have won at least 10 matches. Answer : SELECT COUNT(DISTINCT country_code) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(winner_id) >= 10);  Write Sql for the following question: find the number of distinct country codes of all players who have played at least 10 matches and have won at least 10 matches, and have played at least 10 matches. Answer : SELECT COUNT(DISTINCT country_code) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(winner_id) >= 10) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(winner_id) >= 10);  Write Sql for the following question: find the number of distinct country codes of all players who have played at least 10 matches and have won at least 10 matches, and have played at least 10 matches, and have won at least 10 matches. Answer : SELECT COUNT(DISTINCT country_code) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(winner_id) >= 10) AND player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT
 SELECT COUNT(DISTINCT country_code) FROM players;  Write Sql for the following question: How many players are there in the database? Answer : SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there in the database from the USA? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA';  Write Sql for the following question: How many players are there in the database from the USA and have a hand of right-handed? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA' AND hand = 'R';  Write Sql for the following question: How many players are there in the database from the USA and have a hand of right-handed and are over 30 years old? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800930;  Write Sql for the following question: How many players are there in the database from the USA and have a hand of right-handed and are over 30 years old and have a ranking of 1000 or more? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800930 AND ranking >= 1000;  Write Sql for the following question: How many players are there in the database from the USA and have a hand of right-handed and are over 30 years old and have a ranking of 1000 or more and have played in at least 10 tournaments? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 19800930 AND ranking >= 1000 AND tours >= 10;  Write Sql for the following question: How many players are there in the database from the USA and have a hand of right-handed and are over 30 years old and have a ranking of 1000 or more and have played in at least 10 tournaments and have a ranking of 1000 or more? Answer : SELECT COUNT(*) FROM players WHERE country_code = 'USA' AND hand = 'R' AND birth_date > 
 SELECT COUNT(DISTINCT loser_name) FROM matches;  Write Sql for the following question: Find the number of distinct name of winners. Answer : SELECT COUNT(DISTINCT winner_name) FROM matches;  Write Sql for the following question: Find the number of distinct name of losers who have won more than 100 matches. Answer : SELECT COUNT(DISTINCT loser_name) FROM matches WHERE winner_name IN (SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 100);  Write Sql for the following question: Find the number of distinct name of losers who have won more than 100 matches and have played in the same tournament. Answer : SELECT COUNT(DISTINCT loser_name) FROM matches WHERE winner_name IN (SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 100) AND tourney_name = (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) = 1);  Write Sql for the following question: Find the number of distinct name of losers who have won more than 100 matches and have played in the same tournament and have played in the same surface. Answer : SELECT COUNT(DISTINCT loser_name) FROM matches WHERE winner_name IN (SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 100) AND tourney_name = (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) = 1) AND surface = (SELECT surface FROM matches GROUP BY surface HAVING COUNT(surface) = 1);  Write Sql for the following question: Find the number of distinct name of losers who have won more than 100 matches and have played in the same tournament and have played in the same surface and have played in the same year. Answer : SELECT COUNT(DISTINCT loser_name) FROM matches WHERE winner_name IN (SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 100) AND tourney_name = (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name
 SELECT COUNT(DISTINCT loser_name) FROM matches;  Write Sql for the following question: What is the average number of minutes played per match? Answer : SELECT AVG(minutes) FROM matches;  Write Sql for the following question: What is the average number of minutes played per match for each surface? Answer : SELECT surface, AVG(minutes) FROM matches GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay and hard? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' AND surface!= 'HARD' GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay, hard, and grass? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' AND surface!= 'HARD' AND surface!= 'GRASS' GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay, hard, grass, and carpet? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' AND surface!= 'HARD' AND surface!= 'GRASS' AND surface!= 'CARPET' GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay, hard, grass, carpet, and hard court? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' AND surface!= 'HARD' AND surface!= 'GRASS' AND surface!= 'CARPET' AND surface!= 'HARD COURT' GROUP BY surface;  Write Sql for the following question: What is the average number of minutes played per match for each surface, excluding clay, hard, grass, carpet, hard court, and clay court? Answer : SELECT surface, AVG(minutes) FROM matches WHERE surface!= 'CL' AND surface!= 'HARD' AND surface!= 'GRASS' AND surface!= 'CAR
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10;  Write Sql for the following question: Find the name of players who have played more than 10 matches. Answer : SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 10;  Write Sql for the following question: Find the name of players who have played more than 10 matches and have won more than 10 matches. Answer : SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 10 AND COUNT(winner_name) > 10;  Write Sql for the following question: Find the name of players who have played more than 10 matches and have won more than 10 matches and have ranked more than 10 times. Answer : SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10;  Write Sql for the following question: Find the name of players who have played more than 10 matches and have won more than 10 matches and have ranked more than 10 times and have played in more than 10 tournaments. Answer : SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10;  Write Sql for the following question: Find the name of players who have played more than 10 matches and have won more than 10 matches and have ranked more than 10 times and have played in more than 10 tournaments and have ranked more than 10 times. Answer : SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10 AND COUNT(winner_name) > 10;  Write Sql for the following question: Find the name of players who have
 SELECT DISTINCT tourney_name FROM matches WHERE tourney_name IN (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10);
 SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament but not in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 EXCEPT SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament and in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 UNION SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament or in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 UNION ALL SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament but not in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 EXCEPT SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament and in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 UNION SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament or in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 UNION ALL SELECT winner_name FROM matches WHERE year = 2016;  Write Sql for the following question: List the names of all players who played in the 2013 tournament but not in the 2016 tournament. Answer : SELECT winner_name FROM matches WHERE year = 2013 EXCEPT SELECT winner_name FROM matches WHERE year = 2016;
 SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;
 SELECT COUNT(*) FROM matches WHERE year IN (2013,2016);  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who won. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND winner_rank IS NOT NULL;  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who lost. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND loser_rank IS NOT NULL;  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who won and who lost. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND winner_rank IS NOT NULL AND loser_rank IS NOT NULL;  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who won and who lost and who played in the first round. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND winner_rank IS NOT NULL AND loser_rank IS NOT NULL AND round = 'F';  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who won and who lost and who played in the first round and who played in the first round of the tournament. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND winner_rank IS NOT NULL AND loser_rank IS NOT NULL AND round = 'F' AND tourney_level = 'G';  Write Sql for the following question: List the number of all matches who played in years of 2013 or 2016 and who won and who lost and who played in the first round and who played in the first round of the tournament and who played in the first round of the tournament. Answer : SELECT COUNT(*) FROM matches WHERE year IN (2013,2016) AND winner_rank
 SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;  Write Sql for the following question: How many matches were played in 2013 or 2016 and won by a player from Slovenia? Answer : SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016 AND winner_ioc = 'SLO';  Write Sql for the following question: How many matches were played in 2013 or 2016 and won by a player from Slovenia or Australia? Answer : SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016 AND winner_ioc = 'SLO' OR winner_ioc = 'AUS';  Write Sql for the following question: How many matches were played in 2013 or 2016 and won by a player from Slovenia or Australia and were played in the first round? Answer : SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016 AND winner_ioc = 'SLO' OR winner_ioc = 'AUS' AND round = 'F';  Write Sql for the following question: How many matches were played in 2013 or 2016 and won by a player from Slovenia or Australia and were played in the first round and were played in a tournament with a draw size of 32? Answer : SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016 AND winner_ioc = 'SLO' OR winner_ioc = 'AUS' AND round = 'F' AND draw_size = 32;  Write Sql for the following question: How many matches were played in 2013 or 2016 and won by a player from Slovenia or Australia and were played in the first round and were played in a tournament with a draw size of 32 and were played in a tournament with a best of 5? Answer : SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016 AND winner_ioc = 'SLO' OR winner_ioc = 'AUS' AND round = 'F' AND draw_size
 SELECT winner_ioc, winner_name FROM matches WHERE tourney_name = 'WTA Championships' AND winner_ioc = 'AUS' UNION SELECT winner_ioc, winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_ioc = 'AUS';
 SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open');
 SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);  Write Sql for the following question: Find the first name and country code of the youngest player. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);  Write Sql for the following question: Find the first name and country code of the oldest player who is a male. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players WHERE hand = 'L');  Write Sql for the following question: Find the first name and country code of the youngest player who is a male. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players WHERE hand = 'L');  Write Sql for the following question: Find the first name and country code of the oldest player who is a female. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players WHERE hand = 'R');  Write Sql for the following question: Find the first name and country code of the youngest player who is a female. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players WHERE hand = 'R');  Write Sql for the following question: Find the first name and country code of the oldest male player. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players WHERE hand = 'L');  Write Sql for the following question: Find the first name and country code of the youngest male player. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players WHERE hand = 'L');  Write Sql for the following question: Find the first name and country code of the oldest female player. Answer : SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players WHERE hand = 'R');  Write Sql for the following question: Find the first name and country code of the youngest female player.
 SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
 SELECT first_name, last_name FROM players ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date, but only for players born after 1990. Answer : SELECT first_name, last_name FROM players WHERE birth_date > 1990 ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date, but only for players born after 1990 and born before 1995. Answer : SELECT first_name, last_name FROM players WHERE birth_date > 1990 AND birth_date < 1995 ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date, but only for players born after 1990 and born before 1995, and only for players who are male. Answer : SELECT first_name, last_name FROM players WHERE birth_date > 1990 AND birth_date < 1995 AND hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date, but only for players born after 1990 and born before 1995, and only for players who are male or female. Answer : SELECT first_name, last_name FROM players WHERE birth_date > 1990 AND birth_date < 1995 AND hand IN ('L', 'R') ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date, but only for players born after 1990 and born before 1995, and only for players who are male or female, and only for players who are from the USA. Answer : SELECT first_name, last_name FROM players WHERE birth_date > 1990 AND birth_date < 1995 AND hand IN ('L', 'R') AND country_code = 'USA' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players in the order of birth date
 SELECT first_name ||'' || last_name AS full_name FROM players ORDER BY birth_date;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by birth date, and what is the birth date of the oldest player? Answer : SELECT first_name ||'' || last_name AS full_name, birth_date FROM players ORDER BY birth_date LIMIT 1;  Write Sql for the following question: What are the full names of all players, sorted by
 SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;  Write Sql for the following question: List the first and last name of all players who are left / L hand in the order of birth date. Answer : SELECT first_name, last_name
 SELECT first_name ||'' || last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
 SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(player_id) DESC LIMIT 1);
 SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings));
 SELECT year, COUNT(year) AS num_of_matches FROM matches GROUP BY year ORDER BY num_of_matches DESC LIMIT 1;  Write Sql for the following question: Find the year that has the most number of matches where the winner is a male player. Answer : SELECT year, COUNT(year) AS num_of_matches FROM matches WHERE winner_entry = 'M' GROUP BY year ORDER BY num_of_matches DESC LIMIT 1;  Write Sql for the following question: Find the year that has the most number of matches where the winner is a male player and the loser is a male player. Answer : SELECT year, COUNT(year) AS num_of_matches FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' GROUP BY year ORDER BY num_of_matches DESC LIMIT 1;  Write Sql for the following question: Find the year that has the most number of matches where the winner is a male player and the loser is a male player and the winner is a player from the USA. Answer : SELECT year, COUNT(year) AS num_of_matches FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ioc = 'USA' GROUP BY year ORDER BY num_of_matches DESC LIMIT 1;  Write Sql for the following question: Find the year that has the most number of matches where the winner is a male player and the loser is a male player and the winner is a player from the USA and the winner is a player from the USA. Answer : SELECT year, COUNT(year) AS num_of_matches FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ioc = 'USA' AND winner_ioc = 'USA' GROUP BY year ORDER BY num_of_matches DESC LIMIT 1;  Write Sql for the following question: Find the year that has the most number of matches where the winner is a male player and the loser is a male player and the winner is a player from the USA and the winner is a player from the USA and the winner is a player from the USA. Answer : SELECT year, COUNT(year) AS num_of_matches FROM matches WHERE winner_entry = 'M' AND loser_entry = 'M' AND winner_ioc = 'USA' AND winner_
 SELECT year, COUNT(year) AS total_matches FROM matches GROUP BY year ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches? Answer : SELECT winner_name, COUNT(winner_name) AS total_matches FROM matches GROUP BY winner_name ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches in the last 5 years? Answer : SELECT winner_name, COUNT(winner_name) AS total_matches FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 GROUP BY winner_name ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches in the last 5 years and has played in the top 100? Answer : SELECT winner_name, COUNT(winner_name) AS total_matches FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 AND winner_rank <= 100 GROUP BY winner_name ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches in the last 5 years and has played in the top 100 and has won the most matches? Answer : SELECT winner_name, COUNT(winner_name) AS total_matches FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 AND winner_rank <= 100 GROUP BY winner_name ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches in the last 5 years and has played in the top 100 and has won the most matches in the last 5 years? Answer : SELECT winner_name, COUNT(winner_name) AS total_matches FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 AND winner_rank <= 100 GROUP BY winner_name ORDER BY total_matches DESC LIMIT 1;  Write Sql for the following question: Which player has won the most matches in the last 5 years and has played in the top 100 and has won the most matches in the last 5 years and has played in the top 100? Answer : SELECT winner_name, COUNT(winner_
 SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Find the name and rank points of the winner who won the most matches. Answer : SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Find the name and rank points of the winner who won the most matches in the last 5 years. Answer : SELECT winner_name, winner_rank_points FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Find the name and rank points of the winner who won the most matches in the last 5 years, but only for players who have won at least 10 matches in the last 5 years. Answer : SELECT winner_name, winner_rank_points FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 GROUP BY winner_name, winner_rank_points HAVING COUNT(*) >= 10 ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Find the name and rank points of the winner who won the most matches in the last 5 years, but only for players who have won at least 10 matches in the last 5 years and have ranked at least 2000 points. Answer : SELECT winner_name, winner_rank_points FROM matches WHERE year >= (SELECT MAX(year) FROM matches) - 5 GROUP BY winner_name, winner_rank_points HAVING COUNT(*) >= 10 AND winner_rank_points >= 2000 ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Find the name and rank points of the winner who won the most matches in the last 5 years, but only for players who have won at least 10 matches in the last 5 years and have ranked at least 2000 points, and who have played in at least 10 tournaments. Answer : SELECT winner_name, winner_rank_points FROM matches WHERE year >= (SELECT MAX(year)
 SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE winner_ioc = 'AUS');
 SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' ORDER BY winner_rank_points DESC LIMIT 1;
 SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);  Write Sql for the following question: find the names of players who played in the match with greatest number of minutes. Answer : SELECT winner
 SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write Sql for the following question: What are the names of the winner and loser who played in the longest match in the 2016 Wimbledon? Answer : SELECT winner_name, loser_name FROM matches WHERE tourney_id = 'WIM' ORDER BY minutes DESC LIMIT 1;  Write
 SELECT AVG(ranking) AS avg_ranking, first_name FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
 SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
 SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
 SELECT first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
 SELECT country_code, COUNT(country_code) AS num_of_players FROM players GROUP BY country_code;
 SELECT country_code, COUNT(country_code) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country? Answer : SELECT country_code, AVG(winner_ht) FROM players GROUP BY country_code;  Write Sql for the following question: What is the average height of players from each country?
 SELECT country_code, COUNT(country_code) AS nb_players FROM players GROUP BY country_code ORDER BY nb_players DESC LIMIT 1;
 SELECT country_code, COUNT(country_code) AS count FROM players GROUP BY country_code ORDER BY count DESC LIMIT 1;
 SELECT country_code FROM players GROUP BY country_code HAVING COUNT(country_code) > 50;
 SELECT country_code FROM players GROUP BY country_code HAVING COUNT(country_code) > 50;
 SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;
 SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
 SELECT year, COUNT(year) AS matches_count FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches won by each player. Answer : SELECT year, COUNT(year) AS matches_count, SUM(winner_rank) AS matches_won FROM matches GROUP BY year;  Write Sql for the following question: Find the number of matches happened in each year and the number of matches
 SELECT year, COUNT(match_num) AS matches_played FROM matches GROUP BY year;  Write Sql for the following question: How many matches were played in each year and what was the average number of matches played per year? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY year;  Write Sql for the following question: What was the average number of matches played per year and what was the year with the highest average number of matches played? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY year ORDER BY avg_matches_played DESC LIMIT 1;  Write Sql for the following question: What was the average number of matches played per year and what was the year with the lowest average number of matches played? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY year ORDER BY avg_matches_played ASC LIMIT 1;  Write Sql for the following question: What was the average number of matches played per year and what was the year with the highest average number of matches played? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY year ORDER BY avg_matches_played DESC LIMIT 1;  Write Sql for the following question: What was the average number of matches played per year and what was the year with the lowest average number of matches played? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY year ORDER BY avg_matches_played ASC LIMIT 1;  Write Sql for the following question: What was the average number of matches played per year and what was the year with the highest average number of matches played? Answer : SELECT year, COUNT(match_num) AS matches_played, AVG(COUNT(match_num)) OVER() AS avg_matches_played FROM matches GROUP BY
 SELECT winner_name, winner_rank FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_age = (SELECT MIN(winner_age) FROM matches));  Write Sql for the following question: Find the name and rank of the 3 oldest winners across all matches. Answer : SELECT winner_name, winner_rank FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_age = (SELECT MAX(winner_age) FROM matches));  Write Sql for the following question: Find the name and rank of the 3 youngest losers across all matches. Answer : SELECT loser_name, loser_rank FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE loser_age = (SELECT MIN(loser_age) FROM matches));  Write Sql for the following question: Find the name and rank of the 3 oldest losers across all matches. Answer : SELECT loser_name, loser_rank FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE loser_age = (SELECT MAX(loser_age) FROM matches));  Write Sql for the following question: Find the name and rank of the 3 oldest winners in the 2010 Wimbledon final. Answer : SELECT winner_name, winner_rank FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_id = 'WIM' AND year = 2010 AND winner_age = (SELECT MAX(winner_age) FROM matches WHERE tourney_id = 'WIM' AND year = 2010));  Write Sql for the following question: Find the name and rank of the 3 oldest losers in the 2010 Wimbledon final. Answer : SELECT loser_name, loser_rank FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE tourney_id = 'WIM' AND year = 2010 AND loser_age = (SELECT MAX(loser_age) FROM matches WHERE tourney_id = 'WIM' AND year = 2010));  Write Sql for the following question: Find the name and rank of the 3 youngest winners in the 2010 Wimbledon
 SELECT winner_name, winner_rank FROM matches WHERE winner_age = (SELECT MIN(winner_age) FROM matches);  Write Sql for the following question: What are the names and ranks of the three oldest winners across all matches? Answer : SELECT winner_name, winner_rank FROM matches WHERE winner_age = (SELECT MAX(winner_age) FROM matches);  Write Sql for the following question: What are the names and ranks of the three youngest losers across all matches? Answer : SELECT loser_name, loser_rank FROM matches WHERE loser_age = (SELECT MIN(loser_age) FROM matches);  Write Sql for the following question: What are the names and ranks of the three oldest losers across all matches? Answer : SELECT loser_name, loser_rank FROM matches WHERE loser_age = (SELECT MAX(loser_age) FROM matches);  Write Sql for the following question: What are the names and ranks of the three oldest winners in the 2016 Wimbledon final? Answer : SELECT winner_name, winner_rank FROM matches WHERE tourney_name = 'Wimbledon' AND year = 2016 AND winner_age = (SELECT MAX(winner_age) FROM matches WHERE tourney_name = 'Wimbledon' AND year = 2016);  Write Sql for the following question: What are the names and ranks of the three oldest losers in the 2016 Wimbledon final? Answer : SELECT loser_name, loser_rank FROM matches WHERE tourney_name = 'Wimbledon' AND year = 2016 AND loser_age = (SELECT MAX(loser_age) FROM matches WHERE tourney_name = 'Wimbledon' AND year = 2016);  Write Sql for the following question: What are the names and ranks of the three youngest winners in the 2016 Wimbledon final? Answer : SELECT winner_name, winner_rank FROM matches WHERE tourney_name = 'Wimbledon' AND year = 2016 AND winner_age = (SELECT MIN(winner_age) FROM matches WHERE tourney_name = 'Wimbledon
 SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
 SELECT COUNT(*) FROM players WHERE hand = 'L' AND player_id IN (SELECT winner_id FROM matches WHERE winner_hand = 'L');  Write Sql for the following question: Find the number of players who have played in all the WTA Championships. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);  Write Sql for the following question: Find the number of players who have played in all the WTA Championships and have won a match. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches);  Write Sql for the following question: Find the number of players who have played in all the WTA Championships and have won a match in the first round. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches WHERE round = 'F');  Write Sql for the following question: Find the number of players who have played in all the WTA Championships and have won a match in the first round and have a ranking of 1000 or more. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches WHERE round = 'F') AND player_id IN (SELECT player_id FROM rankings WHERE ranking >= 1000);  Write Sql for the following question: Find the number of players who have played in all the WTA Championships and have won a match in the first round and have a ranking of 1000 or more and are left handed. Answer : SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AND player_id IN (SELECT winner_id FROM matches WHERE round = 'F') AND player_id IN (SELECT player_id FROM rankings WHERE ranking >= 1000) AND hand = 'L';  Write Sql for the following question: Find the number of players who have played in all the WTA Ch
 SELECT winner_name, winner_ioc, winner_birth_date FROM (SELECT winner_name, winner_ioc, winner_birth_date, MAX(winner_rank_points) AS max_rank_points FROM matches GROUP BY winner_name, winner_ioc, winner_birth_date) AS winner_rank_points_table WHERE winner_rank_points_table.max_rank_points = winner_rank_points_table.winner_rank_points;
 SELECT `SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1);`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches? Answer : `SELECT AVG(minutes) FROM matches WHERE minutes > 100;`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches and have won more than 100 matches? Answer : `SELECT AVG(minutes) FROM matches WHERE minutes > 100 AND winner_rank_points > 100;`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches and have won more than 100 matches, grouped by country code? Answer : `SELECT country_code, AVG(minutes) FROM matches WHERE minutes > 100 AND winner_rank_points > 100 GROUP BY country_code;`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches and have won more than 100 matches, grouped by country code and sorted in descending order of average minutes? Answer : `SELECT country_code, AVG(minutes) FROM matches WHERE minutes > 100 AND winner_rank_points > 100 GROUP BY country_code ORDER BY AVG(minutes) DESC;`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches and have won more than 100 matches, grouped by country code and sorted in descending order of average minutes, and only show the top 5 results? Answer : `SELECT country_code, AVG(minutes) FROM matches WHERE minutes > 100 AND winner_rank_points > 100 GROUP BY country_code ORDER BY AVG(minutes) DESC LIMIT 5;`  Write Sql for the following question: What is the average number of minutes played by players who have played more than 100 matches and have won more than 100 matches, grouped by country code and sorted in descending order of average
 SELECT hand, COUNT(*) FROM players GROUP BY hand;  Write Sql for the following question: Find the number of players for each hand type, including players who have not played any matches. Answer : SELECT hand, COUNT(*) FROM players LEFT JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY hand;  Write Sql for the following question: Find the number of players for each hand type, including players who have not played any matches, and sort the results by the number of players in descending order. Answer : SELECT hand, COUNT(*) FROM players LEFT JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY hand ORDER BY COUNT(*) DESC;  Write Sql for the following question: Find the number of players for each hand type, including players who have not played any matches, and sort the results by the number of players in descending order, and only show the results where the number of players is greater than 100. Answer : SELECT hand, COUNT(*) FROM players LEFT JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY hand HAVING COUNT(*) > 100 ORDER BY COUNT(*) DESC;  Write Sql for the following question: Find the number of players for each hand type, including players who have not played any matches, and sort the results by the number of players in descending order, and only show the results where the number of players is greater than 100 and the hand type is right-handed. Answer : SELECT hand, COUNT(*) FROM players LEFT JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY hand HAVING COUNT(*) > 100 AND hand = 'R' ORDER BY COUNT(*) DESC;  Write Sql for the following question: Find the number of players for each hand type, including players who have not played any matches, and sort the results by the number of players in descending order, and only show the results where the number of players is greater than 100 and the hand type is right-handed, and show the hand type as 'Right-handed' instead of 'R'. Answer : SELECT CASE WHEN hand = 'R'
 SELECT hand, COUNT(*) FROM players GROUP BY hand;  Write Sql for the following question: How many players are there for each country? Answer : SELECT country_code, COUNT(*) FROM players GROUP BY country_code;  Write Sql for the following question: How many players are there for each country and hand type? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players, including those who have not played any matches? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players, including those who have not played any matches? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players, including those who have not played any matches? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players, including those who have not played any matches? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what is the total number of players, including those who have not played any matches? Answer : SELECT country_code, hand, COUNT(*) FROM players GROUP BY country_code, hand; SELECT COUNT(*) FROM players;  Write Sql for the following question: How many players are there for each country and hand type, and what
 SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE lost_in_battle IS NOT NULL;  Write Sql for the following question: How many ships were lost in battle? Answer : SELECT COUNT(*) FROM ship WHERE
 SELECT name, tonnage FROM ship ORDER BY name DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship ORDER BY tonnage DESC;  Write Sql for the following question: List the name and tonnage ordered by in descending numerical order for the tonnage. Answer : SELECT name, tonnage FROM ship
 SELECT name, date, result FROM battle;  Write Sql for the following question: List the name and tonnage of each ship. Answer : SELECT name, tonnage FROM ship;  Write Sql for the following question: List the name and location of each ship. Answer : SELECT name, location FROM ship;  Write Sql for the following question: List the name and disposition of each ship. Answer : SELECT name, disposition_of_ship FROM ship;  Write Sql for the following question: List the name and note of each death. Answer : SELECT name, note FROM death;  Write Sql for the following question: List the name and killed of each death. Answer : SELECT name, killed FROM death;  Write Sql for the following question: List the name and injured of each death. Answer : SELECT name, injured FROM death;  Write Sql for the following question: List the name, tonnage and ship_type of each ship. Answer : SELECT name, tonnage, ship_type FROM ship;  Write Sql for the following question: List the name, location and disposition of each ship. Answer : SELECT name, location, disposition_of_ship FROM ship;  Write Sql for the following question: List the name, note and killed of each death. Answer : SELECT name, note, killed FROM death;  Write Sql for the following question: List the name, note and injured of each death. Answer : SELECT name, note, injured FROM death;  Write Sql for the following question: List the name, tonnage, ship_type and location of each ship. Answer : SELECT name, tonnage, ship_type, location FROM ship;  Write Sql for the following question: List the name, tonnage, ship_type, location and disposition of each ship. Answer : SELECT name, tonnage, ship_type, location, disposition_of_ship FROM ship;  Write Sql for the following question: List the name, note, killed and injured of each death. Answer : SELECT name, note, killed, injured FROM death;  Write Sql for the following question: List the name, note, killed, injured and caused_by_ship_id of each death. Answer : SELECT name, note, killed, injured
 SELECT MAX(killed) AS max_death, MIN(killed) AS min_death FROM death;  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of_ship = "lost";  Write Sql for the following question: What is the average tonnage of ships that were lost in battle? Answer : SELECT AVG(tonnage) AS avg_tonnage FROM ship WHERE disposition_of
 SELECT AVG(injured) FROM death;  Write Sql for the following question: How many ships were lost in each battle? Answer : SELECT lost_in_battle, COUNT(*) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AVG(tonnage) FROM ship GROUP BY lost_in_battle;  Write Sql for the following question: What is the average tonnage of ships that were lost in each battle? Answer : SELECT lost_in_battle, AV
 SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');
 SELECT name, result FROM battle WHERE bulgarian_commander!= 'Boril';  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople? Answer : SELECT name FROM ship WHERE lost_in_battle = 1;  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople and have a tonnage greater than 100000? Answer : SELECT name FROM ship WHERE lost_in_battle = 1 AND tonnage > 100000;  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople and have a tonnage greater than 100000 and were of type 'Cruiser'? Answer : SELECT name FROM ship WHERE lost_in_battle = 1 AND tonnage > 100000 AND ship_type = 'Cruiser';  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople and have a tonnage greater than 100000 and were of type 'Cruiser' and were located in the 'Black Sea'? Answer : SELECT name FROM ship WHERE lost_in_battle = 1 AND tonnage > 100000 AND ship_type = 'Cruiser' AND location = 'Black Sea';  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople and have a tonnage greater than 100000 and were of type 'Cruiser' and were located in the 'Black Sea' and were destroyed? Answer : SELECT name FROM ship WHERE lost_in_battle = 1 AND tonnage > 100000 AND ship_type = 'Cruiser' AND location = 'Black Sea' AND disposition_of_ship = 'Destroyed';  Write Sql for the following question: What are the names of the ships that were lost in the battle of Adrianople and have a tonnage greater than 100000 and were of type 'Cruiser' and were located in the '
 SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');  Write Sql for the following question: What are the different ids and names of the battles that lost any 'Brig' type shipes? Answer : SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle
 SELECT battle.id, battle.name FROM battle, death WHERE battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(killed) > 10;  Write Sql for the following question: What are the ids and names of the battles that led to more than 10 people killed in total and more than 5 people injured in total. Answer : SELECT battle.id, battle.name FROM battle, death WHERE battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(killed) > 10 AND SUM(injured) > 5;  Write Sql for the following question: What are the ids and names of the battles that led to more than 10 people killed in total and more than 5 people injured in total and where the bulgarian commander was not Kaloyan. Answer : SELECT battle.id, battle.name FROM battle, death WHERE battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(killed) > 10 AND SUM(injured) > 5 AND battle.bulgarian_commander!= "Kaloyan";  Write Sql for the following question: What are the ids and names of the battles that led to more than 10 people killed in total and more than 5 people injured in total and where the bulgarian commander was not Kaloyan and the latin commander was not Balwin I. Answer : SELECT battle.id, battle.name FROM battle, death WHERE battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(killed) > 10 AND SUM(injured) > 5 AND battle.bulgarian_commander!= "Kaloyan" AND battle.latin_commander!= "Baldwin I";  Write Sql for the following question: What are the ids and names of the battles that led to more than 10 people killed in total and more than 5 people injured in total and where the bulgarian commander was not Kaloyan and the latin commander was not Balwin I and the result was not Bulgarian victory. Answer : SELECT battle.id, battle.name FROM
 SELECT ship.id, ship.name, SUM(death.injured) AS total_injuries FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY total_injuries DESC LIMIT 1;  Write Sql for the following question: What is the ship id and name that caused most total deaths? Answer : SELECT ship.id, ship.name, SUM(death.killed) AS total_deaths FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY total_deaths DESC LIMIT 1;  Write Sql for the following question: What is the ship id and name that caused most total deaths and injuries? Answer : SELECT ship.id, ship.name, SUM(death.killed) AS total_deaths, SUM(death.injured) AS total_injuries FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY total_deaths + total_injuries DESC LIMIT 1;  Write Sql for the following question: What is the ship id and name that caused most total deaths and injuries, but only if the total deaths is greater than 100? Answer : SELECT ship.id, ship.name, SUM(death.killed) AS total_deaths, SUM(death.injured) AS total_injuries FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id HAVING total_deaths > 100 ORDER BY total_deaths + total_injuries DESC LIMIT 1;  Write Sql for the following question: What is the ship id and name that caused most total deaths and injuries, but only if the total deaths is greater than 100 and the total injuries is greater than 100? Answer : SELECT ship.id, ship.name, SUM(death.killed) AS total_deaths, SUM(death.injured) AS total_injuries FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id HAVING total_deaths > 100 AND total_injuries > 100 ORDER BY
 SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';  Write Sql for the following question: What are the names of the ships which were lost in battle 1? Answer : SELECT ship.name FROM ship WHERE ship.lost_in_battle = 1;  Write Sql for the following question: What are the names of the ships which were lost in battle 1 and have a tonnage greater than 10000? Answer : SELECT ship.name FROM ship WHERE ship.lost_in_battle = 1 AND ship.tonnage > 10000;  Write Sql for the following question: What are the names of the ships which were lost in battle 1 and have a tonnage greater than 10000 and are of type 'Cruiser'? Answer : SELECT ship.name FROM ship WHERE ship.lost_in_battle = 1 AND ship.tonnage > 10000 AND ship.ship_type = 'Cruiser';  Write Sql for the following question: What are the names of the ships which were lost in battle 1 and have a tonnage greater than 10000 and are of type 'Cruiser' and are located in 'Bulgaria'? Answer : SELECT ship.name FROM ship WHERE ship.lost_in_battle = 1 AND ship.tonnage > 10000 AND ship.ship_type = 'Cruiser' AND ship.location = 'Bulgaria';  Write Sql for the following question: What are the names of the ships which were lost in battle 1 and have a tonnage greater than 10000 and are of type 'Cruiser' and are located in 'Bulgaria' and have a disposition of 'Captured'? Answer : SELECT ship.name FROM ship WHERE ship.lost_in_battle = 1 AND ship.tonnage > 10000 AND ship.ship_type = 'Cruiser' AND ship.location = 'Bulgaria' AND ship.disposition_of_ship = 'Captured';  Write Sql for the following question: What are the names of the sh
 SELECT COUNT(DISTINCT result) FROM battle;  Write Sql for the following question: How many different ship types are there? Answer : SELECT COUNT(DISTINCT ship_type) FROM ship;  Write Sql for the following question: How many different locations are there? Answer : SELECT COUNT(DISTINCT location) FROM ship;  Write Sql for the following question: How many different dispositions are there? Answer : SELECT COUNT(DISTINCT disposition_of_ship) FROM ship;  Write Sql for the following question: How many different causes of death are there? Answer : SELECT COUNT(DISTINCT note) FROM death;  Write Sql for the following question: How many different names are there for the ships? Answer : SELECT COUNT(DISTINCT name) FROM ship;  Write Sql for the following question: How many different names are there for the battles? Answer : SELECT COUNT(DISTINCT name) FROM battle;  Write Sql for the following question: How many different names are there for the deaths? Answer : SELECT COUNT(DISTINCT note) FROM death;  Write Sql for the following question: How many different bulgarian commanders are there? Answer : SELECT COUNT(DISTINCT bulgarian_commander) FROM battle;  Write Sql for the following question: How many different latin commanders are there? Answer : SELECT COUNT(DISTINCT latin_commander) FROM battle;  Write Sql for the following question: How many different notes are there for the deaths? Answer : SELECT COUNT(DISTINCT note) FROM death;  Write Sql for the following question: How many different tonnages are there for the ships? Answer : SELECT COUNT(DISTINCT tonnage) FROM ship;  Write Sql for the following question: How many different dates are there for the battles? Answer : SELECT COUNT(DISTINCT date) FROM battle;  Write Sql for the following question: How many different ship types are there for the ships? Answer : SELECT COUNT(DISTINCT ship_type) FROM ship;  Write Sql for the following question: How many different locations are there for the ships? Answer : SELECT COUNT(DISTINCT location) FROM ship;  Write Sql for the following question: How many different dispositions are there for the ships? Answer : SELECT COUNT(DISTINCT dis
 SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' and '300'? Answer : SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage IN ('225','300'));  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' or '300'? Answer : SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225' OR tonnage = '300');  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' or '300' and '400'? Answer : SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage IN ('225','300','400'));  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' or '300' and '400' or '500'? Answer : SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage IN ('225','300','400','500'));  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' or '300' and '400' or '500' or '600'? Answer : SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage IN ('225','300','400','500','600'));  Write Sql for the following question: How many battles did not lose any ship with tonnage '225' or '300' and '400' or '500' or '600' or '700'? Answer : SELECT COUNT(*) FROM battle WHERE
 SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' Answer : SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' Answer : SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' Answer : SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' Answer : SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' Answer : SELECT battle.name, battle.date FROM battle, ship WHERE battle.id = ship.lost_in_battle AND (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta');  Write Sql for the following question: List the name and date of the battle that has lost
 SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship);  Write Sql for the following question: Show names, tonnages and locations of the ships that were lost in the battle of Adrianople. Answer : SELECT ship.name, ship.tonnage, ship.location FROM ship WHERE ship.lost_in_battle = 1;  Write Sql for the following question: Show names, tonnages and locations of the ships that were lost in the battle of Adrianople or Serres. Answer : SELECT ship.name, ship.tonnage, ship.location FROM ship WHERE ship.lost_in_battle = 1 OR ship.lost_in_battle = 2;  Write Sql for the following question: Show names, tonnages and locations of the ships that were lost in the battle of Adrianople or Serres and were of type 'Brig'. Answer : SELECT ship.name, ship.tonnage, ship.location FROM ship WHERE ship.lost_in_battle = 1 OR ship.lost_in_battle = 2 AND ship.ship_type = 'Brig';  Write Sql for the following question: Show names, tonnages and locations of the ships that were lost in the battle of Adrianople or Serres and were of type 'Brig' or 'Galley'. Answer : SELECT ship.name, ship.tonnage, ship.location FROM ship WHERE ship.lost_in_battle = 1 OR ship.lost_in_battle = 2 AND (ship.ship_type = 'Brig' OR ship.ship_type = 'Galley');  Write Sql for the following question: Show names, tonnages and locations of the ships that were lost in the battle of Adrianople or Serres and were of type 'Brig' or 'Galley' and were dispositioned 'Captured'. Answer : SELECT ship.name, ship.tonnage, ship.location FROM ship WHERE ship.lost_in_battle = 1 OR ship.lost_in_battle = 2 AND (ship.ship_type = 'Brig' OR ship.ship_type = 'Galley') AND ship.disposition_of_ship =
 SELECT note FROM death WHERE note LIKE '%East%';  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000? Answer : SELECT name FROM ship WHERE tonnage > 100000;  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000 and are of type 'Cruiser'? Answer : SELECT name FROM ship WHERE tonnage > 100000 AND ship_type = 'Cruiser';  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000 and are of type 'Cruiser' and are located in 'Bulgaria'? Answer : SELECT name FROM ship WHERE tonnage > 100000 AND ship_type = 'Cruiser' AND location = 'Bulgaria';  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000 and are of type 'Cruiser' and are located in 'Bulgaria' and are dispositioned as 'Captured'? Answer : SELECT name FROM ship WHERE tonnage > 100000 AND ship_type = 'Cruiser' AND location = 'Bulgaria' AND disposition_of_ship = 'Captured';  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000 and are of type 'Cruiser' and are located in 'Bulgaria' and are dispositioned as 'Captured' and are not in the battle of Adrianople? Answer : SELECT name FROM ship WHERE tonnage > 100000 AND ship_type = 'Cruiser' AND location = 'Bulgaria' AND disposition_of_ship = 'Captured' AND NOT id IN (SELECT lost_in_battle FROM ship WHERE lost_in_battle = 1);  Write Sql for the following question: What are the names of the ships which have tonnage greater than 100000 and are of type 'Cruiser' and
 SELECT line_1, line_2 FROM Addresses;
 SELECT line_1, line_2 FROM Addresses;
 SELECT COUNT(*) FROM Courses;  Write Sql for the following question: How many courses are offered in the degree program 'Computer Science'? Answer : SELECT COUNT(*) FROM Courses WHERE course_id IN (SELECT course_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science'? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL;  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript with a grade of 'A' or higher? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL AND transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_date IS NOT NULL);  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript with a grade of 'A' or higher and a grade of 'B' or higher? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL AND transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_date IS NOT NULL) AND transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_date IS NOT NULL);  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript with a grade of 'A' or higher and a grade of 'B' or higher and a grade of 'C' or higher? Answer : SELECT
 SELECT COUNT(*) FROM Courses;  Write Sql for the following question: How many students are there? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id = Degree_Programs.degree_program_id GROUP BY department_name;  Write Sql for the following question: How many students are there in each department? Answer : SELECT department_name, COUNT(*) FROM Students, Degree_Programs WHERE Students.degree_program_id =
 SELECT course_description FROM Courses WHERE course_name = 'Math';
 SELECT course_description FROM Courses WHERE course_name LIKE '%Math%';
 SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
 SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
 SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT department_name, COUNT(degree_program_id) AS degree_count FROM Degree_Programs GROUP BY department_id ORDER BY degree_count DESC LIMIT 1;
 SELECT COUNT(department_id) FROM Degree_Programs;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many students are enrolled in a degree program? Answer : SELECT COUNT(student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following
 SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;  Write Sql for the following question: How many different courses are offered? Answer : SELECT COUNT(DISTINCT course_id) FROM Courses;  Write Sql for the following question: How many different sections are offered? Answer : SELECT COUNT(DISTINCT section_id) FROM Sections;  Write Sql for the following question: How many different semesters are offered? Answer : SELECT COUNT(DISTINCT semester_id) FROM Semesters;  Write Sql for the following question: How many different students are enrolled? Answer : SELECT COUNT(DISTINCT student_id) FROM Student_Enrolment;  Write Sql for the following question: How many different degree programs are offered? Answer : SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;  Write Sql for the following question: How many different transcripts are created? Answer : SELECT COUNT(DISTINCT transcript_id) FROM Transcripts;  Write Sql for the following question: How many different addresses are created? Answer : SELECT COUNT(DISTINCT address_id) FROM Addresses;  Write Sql for the following question: How many different students are enrolled in a degree program? Answer : SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment;  Write Sql for the following question: How many different courses are enrolled in a degree program? Answer : SELECT COUNT(DISTINCT student_course_id) FROM Student_Enrolment_Courses;  Write Sql for the following question: How many different courses are enrolled in a transcript? Answer : SELECT COUNT(DISTINCT student_course_id) FROM Transcript_Contents;  Write Sql for the following question: How many different transcripts are created for a student? Answer : SELECT COUNT(DISTINCT transcript_id) FROM Transcript_Contents;  Write Sql for the following question: How many different addresses are created for a student? Answer : SELECT COUNT(DISTINCT address_id) FROM Addresses;  Write Sql for the following question: How many different addresses are created for a student? Answer : SELECT COUNT(DISTINCT address_id) FROM Addresses;  Write Sql for the following question: How many different addresses are created for a student? Answer : SELECT
 SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;  Write Sql for the following question: How many different courses are offered? Answer : SELECT COUNT(DISTINCT course_name) FROM Courses;  Write Sql for the following question: How many different departments are offered? Answer : SELECT COUNT(DISTINCT department_name) FROM Departments;  Write Sql for the following question: How many different sections are offered? Answer : SELECT COUNT(DISTINCT section_name) FROM Sections;  Write Sql for the following question: How many different semesters are offered? Answer : SELECT COUNT(DISTINCT semester_name) FROM Semesters;  Write Sql for the following question: How many different students are enrolled? Answer : SELECT COUNT(DISTINCT student_id) FROM Student_Enrolment;  Write Sql for the following question: How many different transcripts are created? Answer : SELECT COUNT(DISTINCT transcript_id) FROM Transcripts;  Write Sql for the following question: How many different addresses are created? Answer : SELECT COUNT(DISTINCT address_id) FROM Addresses;  Write Sql for the following question: How many different students are enrolled in a given degree program? Answer : SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment WHERE degree_program_id = 1;  Write Sql for the following question: How many different students are enrolled in a given course? Answer : SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment_Courses WHERE course_id = 1;  Write Sql for the following question: How many different students are enrolled in a given section? Answer : SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment_Courses WHERE student_course_id = 1;  Write Sql for the following question: How many different students are enrolled in a given semester? Answer : SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment WHERE semester_id = 1;  Write Sql for the following question: How many different students are enrolled in a given transcript? Answer : SELECT COUNT(DISTINCT student_course_id) FROM Transcript_Contents WHERE transcript_id =
 SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science'? Answer : SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript? Answer : SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL;  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript and have a transcript date of 2019-01-01? Answer : SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL AND transcript_date = '2019-01-01';  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript and have a transcript date of 2019-01-01 and have a transcript with a grade of 'A'? Answer : SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Computer Science') AND transcript_id IS NOT NULL AND transcript_date = '2019-01-01' AND transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_contents LIKE '%A%');  Write Sql for the following question: How many students are enrolled in the degree program 'Computer Science' and have a transcript and have a transcript date of 2019-01-01 and have a transcript with a grade of 'A' and a grade of 'B'? Answer : SELECT COUNT(student_id) FROM Student_Enrolment WHERE
 SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science'? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript and are enrolled in the course 'Database Systems'? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science') AND course_id = (SELECT course_id FROM Courses WHERE course_name = 'Database Systems');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript and are enrolled in the course 'Database Systems' and have a transcript date of 2019-01-01? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science') AND course_id = (SELECT course_
 SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science'? Answer : SELECT COUNT(*) FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript and are enrolled in the course 'Database Systems'? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science') AND course_id = (SELECT course_id FROM Courses WHERE course_name = 'Database Systems');  Write Sql for the following question: How many students are enrolled in the degree program 'Bachelor of Science in Computer Science' and have a transcript and are enrolled in the course 'Database Systems' and have a transcript date of 2019-01-01? Answer : SELECT COUNT(*) FROM Student_Enrolment_Courses INNER JOIN Transcripts ON Student_Enrolment_Courses.student_enrolment_id = Transcripts.transcript_id WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Science in Computer Science') AND course_id = (SELECT course_
 SELECT section_name, section_description FROM Sections;
 SELECT section_name, section_description FROM Sections;
 SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(course_id) <= 2);
 SELECT course_name, course_id FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(course_id) < 2);
 SELECT section_name FROM Sections ORDER BY section_name DESC;
 SELECT section_name FROM Sections ORDER BY section_name DESC;
 SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters INNER JOIN Student_Enrolment ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;
 SELECT semester_id, semester_name, COUNT(student_id) AS student_count FROM Semesters JOIN Student_Enrolment ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY semester_id ORDER BY student_count DESC LIMIT 1;
 SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
 SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
 SELECT Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.student_enrolment_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id INNER JOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcripts.transcript_id INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id INNER JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id INNER JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id INNER JOIN Degree_Programs ON Courses.course_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_program_id = 2 AND Student_Enrolment.semester_id = 1;
 SELECT Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.student_enrolment_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id INNER JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id INNER JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id WHERE Degree_Programs.degree_program_id IN (1,2) AND Semesters.semester_id = 1;
 SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'));
 SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'));
 SELECT degree_summary_name, COUNT(degree_summary_name) AS 'Number of Students' FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(degree_summary_name) DESC LIMIT 1;
 SELECT degree_summary_name, COUNT(degree_summary_name) AS 'Number of Students' FROM Student_Enrolment_Courses INNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(degree_summary_name) DESC LIMIT 1;
 SELECT degree_program_id, degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1;
 SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1);
 SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.student_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;  Write Sql for the following question: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. Answer : SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.student_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;  Write Sql for the following question: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. Answer : SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.student_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;  Write Sql for the following question: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. Answer : SELECT Students.student_id, Students.first_name, Students
 SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS Number_of_Enrollments FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY Number_of_Enrollments DESC LIMIT 1;
 SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
 SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
 SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
 SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
 SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment);
 SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment);
 SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(transcript_id) >= 2);
 SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(transcript_id) >= 2);
 SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
 SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';  Write Sql for the following question: What is the name of the course that the student named <NAME> is enrolled in? Answer : SELECT course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id INNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id INNER JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE first_name = 'Timmothy' AND last_name = 'Ward';  Write Sql for the following question: What is the name of the department that the student named <NAME> is enrolled in? Answer : SELECT department_name FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id INNER JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE first_name = 'Timmothy' AND last_name = 'Ward';  Write Sql for the following question: What is the name of the degree program that the student named <NAME> is enrolled in? Answer : SELECT degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id INNER JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE first_name = 'Timmothy' AND last_name = 'Ward';  Write Sql for the following question: What is the name of the section that the student named <NAME> is enrolled in? Answer : SELECT section_name FROM Sections INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.section_id INNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.
 SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
 SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
 SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
 SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NULL ORDER BY date_first_registered ASC LIMIT 1;
 SELECT first_name FROM Students WHERE permanent_address_id!= current_address_id;
 SELECT first_name FROM Students WHERE permanent_address_id!= current_address_id;
 SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details FROM Addresses INNER JOIN Students ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id ORDER BY COUNT(Students.student_id) DESC LIMIT 1;
 SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT AVG(transcript_date) FROM Transcripts;
 SELECT AVG(transcript_date) FROM Transcripts;
 SELECT transcript_date, other_details FROM Transcripts WHERE transcript_id = (SELECT MIN(transcript_id) FROM Transcripts);
 SELECT MIN(transcript_date) AS earliest_date FROM Transcripts;
 SELECT COUNT(*) FROM Transcripts;
 SELECT COUNT(*) FROM Transcripts;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for the following question: How many students are listed? Answer : SELECT COUNT(*) FROM Students;  Write Sql for
 SELECT MAX(transcript_date) FROM Transcripts;
 SELECT MAX(transcript_date) FROM Transcripts;
 SELECT COUNT(DISTINCT student_course_id), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(DISTINCT student_course_id) DESC LIMIT 1;
 SELECT transcript_id, course_id, COUNT(*) AS max_count FROM Transcript_Contents GROUP BY transcript_id, course_id ORDER BY max_count DESC LIMIT 1;
 SELECT transcript_date, COUNT(transcript_date) AS 'Number of results' FROM Transcripts GROUP BY transcript_date ORDER BY COUNT(transcript_date) ASC LIMIT 1;
 SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id));
 SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Students WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master'))) AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Students WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor')));
 SELECT semester_id FROM Semesters WHERE semester_name = 'Masters' AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Bachelors')));
 SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students currently live? Answer : SELECT COUNT(DISTINCT current_address_id) FROM Students;  Write Sql for the following question: How many different addresses do the students
 SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses INNER JOIN Students ON Students.current_address_id = Addresses.address_id;
 SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
 SELECT * FROM Students ORDER BY last_name DESC;
 SELECT * FROM Sections WHERE section_id = 1;
 SELECT section_description FROM Sections WHERE section_name = 'h';
 SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
 SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
 SELECT Title FROM Cartoon ORDER BY Title;
 SELECT Title FROM Cartoon ORDER BY Title;
 SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
 SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
 SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';  Write Sql for the following question: What is the average rating of the cartoons? Answer : SELECT AVG(Rating) FROM Cartoon;  Write Sql for the following question: What is the average rating of the cartoons that were directed by "Joseph Kuhr"? Answer : SELECT AVG(Rating) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr';  Write Sql for the following question: What is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or higher? Answer : SELECT AVG(Rating) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr' AND Rating >= 10;  Write Sql for the following question: What is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or higher, and what is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or lower? Answer : SELECT AVG(Rating) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr' AND Rating >= 10; SELECT AVG(Rating) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr' AND Rating <= 10;  Write Sql for the following question: What is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or higher, and what is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or lower, and what is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10? Answer : SELECT AVG(Rating) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr' AND Rating = 10;  Write Sql for the following question: What is the average rating of the cartoons that were directed by "Joseph Kuhr" and have a rating of 10 or
 SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
 SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
 SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
 SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
 SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
 SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;  Write Sql for the following question: Which country has the most of TV Channels? List the country and number of TV Channels it has. Answer : SELECT Country, COUNT(*) AS Number_
 SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
 SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
 SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in the TV Channel table? Answer : SELECT COUNT(DISTINCT series_name) FROM TV_Channel;  Write Sql for the following question: How many different series and contents are listed in
 SELECT * FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT Content FROM TV_Channel WHERE id = 700;
 SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';  Write Sql for the following question: How many TV Channel using language Italian? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Italian';  Write Sql for the following question: How many TV Channel using language French? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'French';  Write Sql for the following question: How many TV Channel using language Spanish? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Spanish';  Write Sql for the following question: How many TV Channel using language German? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'German';  Write Sql for the following question: How many TV Channel using language Portuguese? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Portuguese';  Write Sql for the following question: How many TV Channel using language Japanese? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Japanese';  Write Sql for the following question: How many TV Channel using language Korean? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Korean';  Write Sql for the following question: How many TV Channel using language Chinese? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Chinese';  Write Sql for the following question: How many TV Channel using language Russian? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Russian';  Write Sql for the following question: How many TV Channel using language Arabic? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Arabic';  Write Sql for the following question: How many TV Channel using language Hindi? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Hindi';  Write Sql for the following question: How many TV Channel using language Turkish? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Turkish';  Write Sql for the following question: How many TV Channel using language Thai? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Thai';  Write Sql for the following question: How many TV Channel using language Vietnamese? Answer : SELECT COUNT(*) FROM TV_Channel WHERE Language = 'Vietnamese';  Write Sql
 SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';  Write Sql for the following question: What is the average rating of the TV series? Answer : SELECT AVG(Rating) FROM TV_series;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 700;  Write Sql for the following question: What is the average rating of the TV series that airs on the channel with id 700? Answer : SELECT AVG(Rating) FROM TV_series WHERE Channel = 70
 SELECT Language, COUNT(Language) AS Number_of_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channel ASC;  Write Sql for the following question: List the country with the highest number of TV Channel. List country and number of TV Channel. Answer : SELECT Country, COUNT(Country) AS Number_of_TV_Channel FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channel DESC;  Write Sql for the following question: List the TV Channel with the highest number of TV series. List TV Channel and number of TV series. Answer : SELECT Channel, COUNT(Channel) AS Number_of_TV_series FROM TV_series GROUP BY Channel ORDER BY Number_of_TV_series DESC;  Write Sql for the following question: List the TV Channel with the highest number of Cartoon. List TV Channel and number of Cartoon. Answer : SELECT Channel, COUNT(Channel) AS Number_of_Cartoon FROM Cartoon GROUP BY Channel ORDER BY Number_of_Cartoon DESC;  Write Sql for the following question: List the TV Channel with the highest number of TV series and Cartoon. List TV Channel and number of TV series and Cartoon. Answer : SELECT Channel, COUNT(Channel) AS Number_of_TV_series_and_Cartoon FROM TV_series, Cartoon WHERE TV_series.Channel = Cartoon.Channel GROUP BY Channel ORDER BY Number_of_TV_series_and_Cartoon DESC;  Write Sql for the following question: List the TV Channel with the highest number of TV series and Cartoon. List TV Channel and number of TV series and Cartoon. Answer : SELECT Channel, COUNT(Channel) AS Number_of_TV_series_and_Cartoon FROM TV_series, Cartoon WHERE TV_series.Channel = Cartoon.Channel GROUP BY Channel ORDER BY Number_of_TV_series_and_Cartoon DESC;  Write Sql for the following question: List the TV Channel with the highest number of TV series and Cartoon. List TV Channel and number of TV series and Cartoon. Answer : SELECT Channel, COUNT(Channel) AS Number_of_TV_series_and_Cartoon FROM TV_series, Cartoon WHERE TV_series.Channel =
 SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_Channels ASC LIMIT 1;
 SELECT Language, COUNT(Language) FROM TV_Channel GROUP BY Language;  Write Sql for the following question: List each country and the number of TV Channels using it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: List each Content and the number of TV Channels using it. Answer : SELECT Content, COUNT(Content) FROM TV_Channel GROUP BY Content;  Write Sql for the following question: List each Pixel aspect ratio PAR and the number of TV Channels using it. Answer : SELECT Pixel_aspect_ratio_PAR, COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel GROUP BY Pixel_aspect_ratio_PAR;  Write Sql for the following question: List each Hight definition TV and the number of TV Channels using it. Answer : SELECT Hight_definition_TV, COUNT(Hight_definition_TV) FROM TV_Channel GROUP BY Hight_definition_TV;  Write Sql for the following question: List each Pay per view PPV and the number of TV Channels using it. Answer : SELECT Pay_per_view_PPV, COUNT(Pay_per_view_PPV) FROM TV_Channel GROUP BY Pay_per_view_PPV;  Write Sql for the following question: List each Package Option and the number of TV Channels using it. Answer : SELECT Package_Option, COUNT(Package_Option) FROM TV_Channel GROUP BY Package_Option;  Write Sql for the following question: List each series name and the number of TV Channels using it. Answer : SELECT series_name, COUNT(series_name) FROM TV_Channel GROUP BY series_name;  Write Sql for the following question: List each series name and the number of TV Channels using it. Answer : SELECT series_name, COUNT(series_name) FROM TV_Channel GROUP BY series_name;  Write Sql for the following question: List each series name and the number of TV Channels using it. Answer : SELECT series_name, COUNT(series_name) FROM TV_Channel GROUP BY series_name;  Write Sql for the following question: List each series name and the number of TV Channels using it. Answer : SELECT series_name, COUNT(series_name) FROM TV_Channel GROUP BY series_name;  Write Sql for the following question
 SELECT Language, COUNT(Language) FROM TV_Channel GROUP BY Language;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for the following question: For each country, list the number of TV Channels that use it. Answer : SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country;  Write Sql for
 SELECT TV_Channel.series_name FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle!';
 SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle');
 SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
 SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
 SELECT Episode FROM TV_series ORDER BY Rating;  Write Sql for the following question: List the Episode of all TV series sorted by rating in descending order. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share. Answer : SELECT Episode FROM TV_series ORDER BY Rating, Share;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC, Episode;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode in ascending order. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC, Episode ASC;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode in ascending order and then by air date. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC, Episode ASC, Air_Date;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode in ascending order and then by air date in descending order. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC, Episode ASC, Air_Date DESC;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode in ascending order and then by air date in descending order and then by channel. Answer : SELECT Episode FROM TV_series ORDER BY Rating DESC, Share DESC, Episode ASC, Air_Date DESC, Channel;  Write Sql for the following question: List the Episode of all TV series sorted by rating and then by share in descending order and then by episode in ascending order and then by air date in descending order and then by channel in ascending order. Answer :
 SELECT * FROM TV_series ORDER BY Rating;
 SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  Cartoon. List the Cartoon's Title and Rating. Answer : SELECT Title, Rating FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Answer : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  Cartoon. List the Cartoon's Title and Rating. Answer : SELECT Title, Rating FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Answer : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  Cartoon. List the Cartoon's Title and Rating. Answer : SELECT Title, Rating FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Answer : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  Cartoon. List the Cartoon's Title and Rating. Answer : SELECT Title, Rating FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Answer : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  Cartoon. List the Cartoon's Title and Rating. Answer : SELECT Title, Rating FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Answer : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for
 SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are 3 most highly rated episodes in the Cartoon table and what were those ratings? Answer : SELECT * FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the TV series table and what were those ratings? Answer : SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the Cartoon table and what were those ratings? Answer : SELECT * FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the TV series table and what were those ratings? Answer : SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the Cartoon table and what were those ratings? Answer : SELECT * FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the TV series table and what were those ratings? Answer : SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the Cartoon table and what were those ratings? Answer : SELECT * FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the TV series table and what were those ratings? Answer : SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the Cartoon table and what were those ratings? Answer : SELECT * FROM Cartoon ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3 most highly rated episodes in the TV series table and what were those ratings? Answer : SELECT * FROM TV_series ORDER BY Rating DESC LIMIT 3;  Write Sql for the following question: What are the 3
 SELECT MIN(Share), MAX(Share) FROM TV_series;
 SELECT MAX(Share), MIN(Share) FROM TV_series;
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
 SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
 SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT TV_Channel.series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.Channel AND TV_series.Episode = 'A Love of a Lifetime';
 SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime');
 SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
 SELECT Episode FROM TV_series WHERE Channel = '700';
 SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
 SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
 SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
 SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
 SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
 SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
 SELECT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
 SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey';
 SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
 SELECT DISTINCT Country FROM Cartoon WHERE Written_by!= 'Todd Casey';
 SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Directed_by = 'Michael Chang');
 SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' INTERSECT SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang');
 SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language!= 'English';
 SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language!= 'English';
 SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2;
 SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2;
 SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');
 SELECT * FROM TV_Channel WHERE Package_Option NOT IN (SELECT Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT COUNT(*) FROM poker_player;  Write Sql for the following question: What is the average earnings of poker players? Answer : SELECT AVG(Earnings) FROM poker_player;  Write Sql for the following question: What is the average earnings of poker players who have made a final table? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1;  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1;  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish and are from Russia? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia";  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish and are from Russia and have a money rank greater than 1000? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank > 1000;  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish and are from Russia and have a money rank greater than 1000 and have a height greater than 190? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank > 1000 AND Height > 190;  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish and are from Russia and have a money rank greater than 10
 SELECT COUNT(*) FROM poker_player;  Write Sql for the following question: Find the average earnings of poker players. Answer : SELECT AVG(Earnings) FROM poker_player;  Write Sql for the following question: Find the average earnings of poker players who have made a final table. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1;  Write Sql for the following question: Find the average earnings of poker players who have made a final table and have a best finish. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1;  Write Sql for the following question: Find the average earnings of poker players who have made a final table, have a best finish, and are from Russia. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia";  Write Sql for the following question: Find the average earnings of poker players who have made a final table, have a best finish, are from Russia, and have a money rank of 1. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1;  Write Sql for the following question: Find the average earnings of poker players who have made a final table, have a best finish, are from Russia, have a money rank of 1, and have a height greater than 180. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1 AND Height > 180;  Write Sql for the following question: Find the average earnings of poker players who have made a final table, have a best finish, are from Russia, have a money rank of 1, and have a height greater than 180. Sort the results in descending order. 
 SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;  Write Sql for the following question: List the nationalities of people who have played poker. Answer : SELECT DISTINCT "Nationality" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: List the names of people who have played poker. Answer : SELECT DISTINCT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: List the names of people who have played poker and are from Russia. Answer : SELECT DISTINCT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID" WHERE "Nationality" = "Russia";  Write Sql for the following question: List the names of people who have played poker and are from Russia or Bulgaria. Answer : SELECT DISTINCT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID" WHERE "Nationality" = "Russia" OR "Nationality" = "Bulgaria";  Write Sql for the following question: List the names of people who have played poker and are from Russia or Bulgaria and have a height greater than 180. Answer : SELECT DISTINCT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID" WHERE "Nationality" = "Russia" OR "Nationality" = "Bulgaria" AND "Height" > 180;  Write Sql for the following question: List the names of people who have played poker and are from Russia or Bulgaria and have a height greater than 180 and less than 190. Answer : SELECT DISTINCT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID" WHERE "Nationality" = "Russia" OR "Nationality"
 SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;
 SELECT "Poker_Player_ID", "Final_Table_Made", "Best_Finish" FROM "poker_player";  Write Sql for the following question: List the nationalities of the poker players. Answer : SELECT "Nationality" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the names of the poker players. Answer : SELECT "Name" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the birth dates of the poker players. Answer : SELECT "Birth_Date" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the heights of the poker players. Answer : SELECT "Height" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the earnings of the poker players. Answer : SELECT "Earnings" FROM "poker_player";  Write Sql for the following question: List the nationalities of the poker players and the earnings of the poker players. Answer : SELECT "Nationality", "Earnings" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the names of the poker players and the earnings of the poker players. Answer : SELECT "Name", "Earnings" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the birth dates of the poker players and the earnings of the poker players. Answer : SELECT "Birth_Date", "Earnings" FROM "people" WHERE "People_ID" IN (SELECT "People_ID" FROM "poker_player");  Write Sql for the following question: List the heights of the poker players and the earnings of the poker players. Answer : SELECT "Height", "Earnings" FROM "people" WHERE "People_ID" IN
 SELECT "Poker_Player_ID", "Final_Table_Made", "Best_Finish" FROM "poker_player";  Write Sql for the following question: What are the nationalities of all poker players? Answer : SELECT "Nationality" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the names of all poker players? Answer : SELECT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the birth dates of all poker players? Answer : SELECT "Birth_Date" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the heights of all poker players? Answer : SELECT "Height" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the nationalities of all poker players? Answer : SELECT "Nationality" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the names of all poker players? Answer : SELECT "Name" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the birth dates of all poker players? Answer : SELECT "Birth_Date" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the heights of all poker players? Answer : SELECT "Height" FROM "people" INNER JOIN "poker_player" ON "people"."People_ID" = "poker_player"."People_ID";  Write Sql for the following question: What are the nationalities of all poker players? Answer : SELECT "Nationality" FROM "people" INNER JOIN
 SELECT AVG(Earnings) FROM poker_player;  Write Sql for the following question: What is the average earnings of poker players who have made a final table? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1;  Write Sql for the following question: What is the average earnings of poker players who have made a final table and have a best finish? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1;  Write Sql for the following question: What is the average earnings of poker players who have made a final table, have a best finish, and are from Russia? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia";  Write Sql for the following question: What is the average earnings of poker players who have made a final table, have a best finish, are from Russia, and have a money rank of 1? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1;  Write Sql for the following question: What is the average earnings of poker players who have made a final table, have a best finish, are from Russia, have a money rank of 1, and have a height greater than 180? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1 AND Height > 180;  Write Sql for the following question: What is the average earnings of poker players who have made a final table, have a best finish, are from Russia, have a money rank of 1, have a height greater than 180, and have a birth date before 1990? Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made =
 SELECT AVG(Earnings) FROM poker_player;  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1;  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table and have a best finish. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1;  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table, have a best finish, and are in the top 10% of earnings. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Money_Rank <= 0.1;  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table, have a best finish, are in the top 10% of earnings, and are from Russia. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Money_Rank <= 0.1 AND Nationality = "Russia";  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table, have a best finish, are in the top 10% of earnings, are from Russia, and have a height greater than 190. Answer : SELECT AVG(Earnings) FROM poker_player WHERE Final_Table_Made = 1 AND Best_Finish = 1 AND Money_Rank <= 0.1 AND Nationality = "Russia" AND Height > 190;  Write Sql for the following question: Return the average earnings across all poker players, but only for those who have made a final table, have a best finish, are in the top 10%
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;  Write Sql for the following question: Return the nationality of the player with the highest earnings. Answer : SELECT Nationality FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC LIMIT 1;  Write Sql for the following question: Return the nationality of the player with the highest earnings who has made a final table. Answer : SELECT Nationality FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Final_Table_Made = 1 ORDER BY Earnings DESC LIMIT 1;  Write Sql for the following question: Return the nationality of the player with the highest earnings who has made a final table and has the highest money rank. Answer : SELECT Nationality FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Final_Table_Made = 1 AND Money_Rank = (SELECT MAX(Money_Rank) FROM poker_player) ORDER BY Earnings DESC LIMIT 1;  Write Sql for the following question: Return the nationality of the player with the highest earnings who has made a final table and has the highest money rank and has the highest best finish. Answer : SELECT Nationality FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Final_Table_Made = 1 AND Money_Rank = (SELECT MAX(Money_Rank) FROM poker_player) AND Best_Finish = (SELECT MAX(Best_Finish) FROM poker_player) ORDER BY Earnings DESC LIMIT 1;  Write Sql for the following question: Return the nationality of the player with the highest earnings who has made a final table and has the highest money rank and has the highest best finish and has the highest final table made. Answer : SELECT Nationality FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player) AND Money_Rank = (SELECT MAX(Money_Rank) FROM poker_player) AND Best_Finish = (
 SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
 SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
 SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID;
 SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID;  Write Sql for the following question: Return the names of all the poker players who have made a final table. Answer : SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND Final_Table_Made = 1;  Write Sql for the following question: Return the names of all the poker players who have made a final table and have a best finish. Answer : SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND Final_Table_Made = 1 AND Best_Finish = 1;  Write Sql for the following question: Return the names of all the poker players who have made a final table and have a best finish and are from Russia. Answer : SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia";  Write Sql for the following question: Return the names of all the poker players who have made a final table and have a best finish and are from Russia and have a money rank of 1. Answer : SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1;  Write Sql for the following question: Return the names of all the poker players who have made a final table and have a best finish and are from Russia and have a money rank of 1 and earn more than 100000. Answer : SELECT Name FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND Final_Table_Made = 1 AND Best_Finish = 1 AND Nationality = "Russia" AND Money_Rank = 1 AND Earnings > 100000;  Write Sql for the following question: Return the names of all the poker players who have made a final table and have a best finish and are from Russia and have
 SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000);
 SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000);
 SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC;
 SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC;
 SELECT people.Birth_Date FROM people,poker_player WHERE people.People_ID = poker_player.People_ID AND poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player);
 SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);  Write Sql for the following question: Return the nationality of the poker player with the highest earnings. Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1);  Write Sql for the following question: Return the nationality of the poker player with the highest earnings and the nationality of the poker player with the lowest earnings. Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1) UNION SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);  Write Sql for the following question: Return the nationality of the poker player with the highest earnings and the nationality of the poker player with the lowest earnings. Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1) UNION SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);  Write Sql for the following question: Return the nationality of the poker player with the highest earnings and the nationality of the poker player with the lowest earnings. Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1) UNION SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);  Write Sql for the following question: Return the nationality of the poker player with the highest earnings and the nationality of the poker player with the lowest earnings. Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1) UNION SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);  Write Sql for the
 SELECT Money_Rank FROM poker_player WHERE Height = (SELECT MAX(Height) FROM people);  Write Sql for the following question: What is the nationality of the player with the highest earnings? Answer : SELECT Nationality FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player));  Write Sql for the following question: What is the average earnings of the players who have made more than 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 SELECT Money_Rank FROM poker_player WHERE Height = (SELECT MAX(Height) FROM people);  Write Sql for the following question: Return the nationality of the poker player with the smallest height. Answer : SELECT Nationality FROM people WHERE Height = (SELECT MIN(Height) FROM people);  Write Sql for the following question: Return the nationality of the poker player with the smallest height and the nationality of the poker player with the largest height. Answer : SELECT Nationality FROM people WHERE Height = (SELECT MIN(Height) FROM people) UNION SELECT Nationality FROM people WHERE Height = (SELECT MAX(Height) FROM people);  Write Sql for the following question: Return the nationality of the poker player with the smallest height and the nationality of the poker player with the largest height, but only if the nationality of the poker player with the smallest height is different from the nationality of the poker player with the largest height. Answer : SELECT Nationality FROM people WHERE Height = (SELECT MIN(Height) FROM people) UNION SELECT Nationality FROM people WHERE Height = (SELECT MAX(Height) FROM people) WHERE Nationality!= (SELECT Nationality FROM people WHERE Height = (SELECT MAX(Height) FROM people));  Write Sql for the following question: Return the nationality of the poker player with the smallest height and the nationality of the poker player with the largest height, but only if the nationality of the poker player with the smallest height is different from the nationality of the poker player with the largest height and the nationality of the poker player with the smallest height is different from the nationality of the poker player with the largest height. Answer : SELECT Nationality FROM people WHERE Height = (SELECT MIN(Height) FROM people) UNION SELECT Nationality FROM people WHERE Height = (SELECT MAX(Height) FROM people) WHERE Nationality!= (SELECT Nationality FROM people WHERE Height = (SELECT MAX(Height) FROM people)) AND Nationality!= (SELECT Nationality FROM people WHERE Height = (SELECT MIN(Height) FROM people));  Write Sql for the following question: Return the nationality of the poker player with the smallest height and the nationality of the poker player with the largest height, but only if the nationality of the poker player with the smallest height is different from the nationality of the poker player with the largest height and the nationality
 SELECT `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200;`  Write Sql for the following question: What is the average earnings of poker players with height higher than 200 and nationality is Russia? Answer : `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200 AND Nationality = 'Russia';`  Write Sql for the following question: What is the average earnings of poker players with height higher than 200 and nationality is Russia or Bulgaria? Answer : `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria');`  Write Sql for the following question: What is the average earnings of poker players with height higher than 200 and nationality is Russia or Bulgaria or Belarus? Answer : `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria' OR Nationality = 'Belarus');`  Write Sql for the following question: What is the average earnings of poker players with height higher than 200 and nationality is Russia or Bulgaria or Belarus or Poland? Answer : `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria' OR Nationality = 'Belarus' OR Nationality = 'Poland');`  Write Sql for the following question: What is the average earnings of poker players with height higher than 200 and nationality is Russia or Bulgaria or Belarus or Poland or Germany? Answer : `SELECT AVG(Earnings) FROM poker_player WHERE Height > 200 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria' OR Nationality = 'Belarus' OR Nationality = 'Poland' OR Nationality = 'Germany');`  Write Sql for the following question
 SELECT AVG(Earnings) FROM poker_player WHERE Height > 200;
 SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC;
 SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC;
 SELECT Nationality, COUNT(Nationality) AS Number_of_People FROM people GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation, excluding people with height less than 180? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people WHERE Height > 180 GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation, excluding people with height less than 180 and more than 190? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people WHERE Height > 180 AND Height < 190 GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation, excluding people with height less than 180 and more than 190, and including people with height more than 185? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people WHERE Height > 180 AND Height < 190 OR Height > 185 GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation, excluding people with height less than 180 and more than 190, and including people with height more than 185, and including people with height more than 195? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people WHERE Height > 180 AND Height < 190 OR Height > 185 OR Height > 195 GROUP BY Nationality;  Write Sql for the following question: What is the average height of people from each nation, excluding people with height less than 180 and more than 190, and including people with height more than 185, and including people with height more than 195, and including people with height more than 200? Answer : SELECT Nationality, AVG(Height) AS Average_Height FROM people WHERE Height > 18
 SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;  Write Sql for the following question: What is the average height of people? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of people of each nationality? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality;  Write Sql for the following question: What is the average height of people of each nationality, excluding those with average height less than 180? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING AVG(Height) > 180;  Write Sql for the following question: What is the average height of people of each nationality, excluding those with average height less than 180 and more than 190? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING AVG(Height) > 180 AND AVG(Height) < 190;  Write Sql for the following question: What is the average height of people of each nationality, excluding those with average height less than 180 and more than 190, and excluding those with nationality equal to "Russia"? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING AVG(Height) > 180 AND AVG(Height) < 190 AND Nationality!= "Russia";  Write Sql for the following question: What is the average height of people of each nationality, excluding those with average height less than 180 and more than 190, and excluding those with nationality equal to "Russia" or "Bulgaria"? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING AVG(Height) > 180 AND AVG(Height) < 190 AND (Nationality!= "Russia" OR Nationality!= "Bulgaria");  Write Sql for the following question: What is the average height of people of each nationality, excluding those with average height less than 180 and more than 190, and excluding those with nationality equal to "Russia" or "Bulgaria
 SELECT Nationality, COUNT(*) AS "Count" FROM people GROUP BY Nationality ORDER BY "Count" DESC LIMIT 1;  Write Sql for the following question: What is the average height of people? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of people who are Russians? Answer : SELECT AVG(Height) FROM people WHERE Nationality = "Russia";  Write Sql for the following question: What is the average height of people who are Russians and Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE Nationality IN ("Russia", "Bulgaria");  Write Sql for the following question: What is the average height of people who are Russians or Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE Nationality = "Russia" OR Nationality = "Bulgaria";  Write Sql for the following question: What is the average height of people who are not Russians? Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia";  Write Sql for the following question: What is the average height of people who are not Russians or Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!= "Bulgaria";  Write Sql for the following question: What is the average height of people who are not Russians and not Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" OR Nationality!= "Bulgaria";  Write Sql for the following question: What is the average height of people who are not Russians and not Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE NOT Nationality = "Russia" AND NOT Nationality = "Bulgaria";  Write Sql for the following question: What is the average height of people who are not Russians and not Bulgarians? Answer : SELECT AVG(Height) FROM people WHERE NOT (Nationality = "Russia" OR Nationality = "Bulgaria");  Write Sql for the following question: What is the average height of people who are not Rus
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;  Write Sql for the following question: Give the average height of all people. Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: Give the average height of all people who are Russians. Answer : SELECT AVG(Height) FROM people WHERE Nationality = 'Russia';  Write Sql for the following question: Give the average height of all people who are Russians and Bulgarians. Answer : SELECT AVG(Height) FROM people WHERE Nationality IN ('Russia', 'Bulgaria');  Write Sql for the following question: Give the average height of all people who are Russians or Bulgarians. Answer : SELECT AVG(Height) FROM people WHERE Nationality = 'Russia' OR Nationality = 'Bulgaria';  Write Sql for the following question: Give the average height of all people who are not Russians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= 'Russia';  Write Sql for the following question: Give the average height of all people who are not Russians or Bulgarians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= 'Russia' AND Nationality!= 'Bulgaria';  Write Sql for the following question: Give the average height of all people who are not Russians and not Bulgarians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= 'Russia' OR Nationality!= 'Bulgaria';  Write Sql for the following question: Give the average height of all people who are not Russians and not Bulgarians and not Americans. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= 'Russia' AND Nationality!= 'Bulgaria' AND Nationality!= 'American';  Write Sql for the following question: Give the average height of all people who are not Russians and not Bulgarians and not Americans and not Canadians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= 'Russia' AND Nationality!= 'Bulgaria' AND Nationality!= 'American' AND Nationality!=
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;  Write Sql for the following question: What are the nationalities that are shared by at least two people and have a height greater than 180? Answer : SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 AND Height > 180;  Write Sql for the following question: What are the nationalities that are shared by at least two people and have a height greater than 180, and what is the average height of those people? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 AND Height > 180;  Write Sql for the following question: What are the nationalities that are shared by at least two people and have a height greater than 180, and what is the average height of those people, and what is the average height of people with the same nationality? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 AND Height > 180 UNION SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality;  Write Sql for the following question: What are the nationalities that are shared by at least two people and have a height greater than 180, and what is the average height of those people, and what is the average height of people with the same nationality, and what is the average height of people with the same nationality and height greater than 180? Answer : SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 AND Height > 180 UNION SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality UNION SELECT Nationality, AVG(Height) FROM people GROUP BY Nationality HAVING Height > 180;  Write Sql for the following question: What are the nationalities that are shared by at least two people and have a height greater than 180, and what is the average height of those people, and what is the average height of people with the same nationality, and what is the average height of people with the same nationality and height greater than 180, and what is the average height of people with the same nationality and height greater
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;  Write Sql for the following question: Return the names of people who have a height greater than 180. Answer : SELECT Name FROM people WHERE Height > 180;  Write Sql for the following question: Return the names of people who have a height greater than 180 and a nationality of Russia. Answer : SELECT Name FROM people WHERE Height > 180 AND Nationality = 'Russia';  Write Sql for the following question: Return the names of people who have a height greater than 180 or a nationality of Russia. Answer : SELECT Name FROM people WHERE Height > 180 OR Nationality = 'Russia';  Write Sql for the following question: Return the names of people who have a height greater than 180 and a nationality of Russia or a nationality of Bulgaria. Answer : SELECT Name FROM people WHERE Height > 180 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria');  Write Sql for the following question: Return the names of people who have a height greater than 180 and a nationality of Russia or a nationality of Bulgaria and a height less than 190. Answer : SELECT Name FROM people WHERE Height > 180 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria') AND Height < 190;  Write Sql for the following question: Return the names of people who have a height greater than 180 and a nationality of Russia or a nationality of Bulgaria and a height less than 190 or a height greater than 195. Answer : SELECT Name FROM people WHERE Height > 180 AND (Nationality = 'Russia' OR Nationality = 'Bulgaria') AND (Height < 190 OR Height > 195);  Write Sql for the following question: Return the names of people who have a height greater than 180 and a nationality of Russia or a nationality of Bulgaria and a height less than 190 or a height greater than 195 and a nationality of Russ
 SELECT Name, Birth_Date FROM people ORDER BY Name ASC;  Write Sql for the following question: List the names and birth dates of people in descending alphabetical order of name. Answer : SELECT Name, Birth_Date FROM people ORDER BY Name DESC;  Write Sql for the following question: List the names and birth dates of people in ascending order of birth date. Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date ASC;  Write Sql for the following question: List the names and birth dates of people in descending order of birth date. Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date DESC;  Write Sql for the following question: List the names and birth dates of people in ascending order of height. Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC;  Write Sql for the following question: List the names and birth dates of people in descending order of height. Answer : SELECT Name, Birth_Date FROM people ORDER BY Height DESC;  Write Sql for the following question: List the names and birth dates of people in ascending order of nationality. Answer : SELECT Name, Birth_Date FROM people ORDER BY Nationality ASC;  Write Sql for the following question: List the names and birth dates of people in descending order of nationality. Answer : SELECT Name, Birth_Date FROM people ORDER BY Nationality DESC;  Write Sql for the following question: List the names and birth dates of people in ascending order of height and then by name. Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC, Name ASC;  Write Sql for the following question: List the names and birth dates of people in ascending order of height and then by birth date. Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC, Birth_Date ASC;  Write Sql for the following question: List the names and birth dates of people in ascending order of height and then by birth date and then by name. Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC, Birth_Date ASC, Name ASC;  Write Sql for the following question: List the names and birth dates of people in ascending order of height and then by birth date and then by name and then by nationality. Answer : SELECT Name, Birth_Date FROM
 SELECT Name, Birth_Date FROM people ORDER BY Name;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in descending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date DESC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in ascending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date ASC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in ascending order and then by their names in alphabetical order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date ASC, Name;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in ascending order and then by their names in descending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date ASC, Name DESC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in descending order and then by their names in descending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date DESC, Name DESC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their birth dates in descending order and then by their names in ascending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Birth_Date DESC, Name ASC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their height in ascending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their height in descending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Height DESC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their height in ascending order and then by their names in ascending order? Answer : SELECT Name, Birth_Date FROM people ORDER BY Height ASC, Name ASC;  Write Sql for the following question: What are the names and birth dates of people, ordered by their height in
 SELECT Name FROM people WHERE Nationality!= "Russia";  Write Sql for the following question: Show names of people whose nationality is not "Russia" and height is greater than 180. Answer : SELECT Name FROM people WHERE Nationality!= "Russia" AND Height > 180;  Write Sql for the following question: Show names of people whose nationality is not "Russia" or height is greater than 180. Answer : SELECT Name FROM people WHERE Nationality!= "Russia" OR Height > 180;  Write Sql for the following question: Show names of people whose nationality is not "Russia" or height is greater than 180 and height is less than 190. Answer : SELECT Name FROM people WHERE Nationality!= "Russia" OR Height > 180 AND Height < 190;  Write Sql for the following question: Show names of people whose nationality is not "Russia" or height is greater than 180 and height is less than 190 or nationality is "Bulgaria". Answer : SELECT Name FROM people WHERE Nationality!= "Russia" OR Height > 180 AND Height < 190 OR Nationality = "Bulgaria";  Write Sql for the following question: Show names of people whose nationality is not "Russia" or height is greater than 180 and height is less than 190 or nationality is "Bulgaria" and height is less than 190. Answer : SELECT Name FROM people WHERE Nationality!= "Russia" OR Height > 180 AND Height < 190 OR Nationality = "Bulgaria" AND Height < 190;  Write Sql for the following question: Show names of people whose nationality is not "Russia" or height is greater than 180 and height is less than 190 or nationality is "Bulgaria" and height is less than 190 or nationality is "Russia". Answer : SELECT Name FROM people WHERE Nationality!= "Russia" OR Height > 180 AND Height < 190 OR Nationality = "Bulgaria" AND Height < 190 OR National
 SELECT Name FROM people WHERE Nationality!= 'Russia';  Write Sql for the following question: What are the names of people who are from Russia and have a height greater than 180? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' AND Height > 180;  Write Sql for the following question: What are the names of people who are from Russia or have a height greater than 180? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' OR Height > 180;  Write Sql for the following question: What are the names of people who are from Russia and have a height greater than 180, but not from Bulgaria? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' AND Height > 180 AND Nationality!= 'Bulgaria';  Write Sql for the following question: What are the names of people who are from Russia and have a height greater than 180, but not from Bulgaria or have a height greater than 190? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' AND Height > 180 AND (Nationality!= 'Bulgaria' OR Height > 190);  Write Sql for the following question: What are the names of people who are from Russia and have a height greater than 180, but not from Bulgaria or have a height greater than 190, and are not from Russia? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' AND Height > 180 AND (Nationality!= 'Bulgaria' OR Height > 190) AND Nationality!= 'Russia';  Write Sql for the following question: What are the names of people who are from Russia and have a height greater than 180, but not from Bulgaria or have a height greater than 190, and are not from Russia or have a height greater than 190? Answer : SELECT Name FROM people WHERE Nationality = 'Russia' AND Height > 180 AND (Nationality!= 'Bulgaria' OR Height > 190) AND (Nationality!= 'R
 SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);  Write Sql for the following question: List the names of people that are poker players. Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);  Write Sql for the following question: List the names of people that are not poker players and have a height greater than 180. Answer : SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) AND Height > 180;  Write Sql for the following question: List the names of people that are poker players and have a height greater than 180. Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Height > 180;  Write Sql for the following question: List the names of people that are poker players and have a height greater than 180 and a nationality of Russia. Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Height > 180 AND Nationality = 'Russia';  Write Sql for the following question: List the names of people that are poker players and have a height greater than 180 and a nationality of Russia or Bulgaria. Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Height > 180 AND Nationality = 'Russia' OR Nationality = 'Bulgaria';  Write Sql for the following question: List the names of people that are poker players and have a height greater than 180 and a nationality of Russia or Bulgaria or Germany. Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Height > 180 AND Nationality = 'Russia' OR Nationality = 'Bulgaria' OR Nationality = 'Germany';  Write Sql for the following question: List the names of people that are poker players and have a height greater than 180 and a nationality of Russia or Bulgaria or Germany or France. Answer : SELECT Name FROM people WHERE
 SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);  Write Sql for the following question: What are the names of people who play poker? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);  Write Sql for the following question: What are the names of people who play poker and have a nationality of Russia? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Nationality = 'Russia';  Write Sql for the following question: What are the names of people who play poker and have a nationality of Bulgaria? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Nationality = 'Bulgaria';  Write Sql for the following question: What are the names of people who play poker and have a nationality of Russia or Bulgaria? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Nationality = 'Russia' OR Nationality = 'Bulgaria';  Write Sql for the following question: What are the names of people who play poker and have a nationality of Russia and Bulgaria? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND Nationality = 'Russia' AND Nationality = 'Bulgaria';  Write Sql for the following question: What are the names of people who play poker and have a nationality of Russia or Bulgaria and have a height greater than 180? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND (Nationality = 'Russia' OR Nationality = 'Bulgaria') AND Height > 180;  Write Sql for the following question: What are the names of people who play poker and have a nationality of Russia or Bulgaria and have a height greater than 180 and less than 190? Answer : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player) AND (Nationality = 'R
 SELECT COUNT(DISTINCT Nationality) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: What is the average height of the players? Answer :
 SELECT COUNT(DISTINCT Nationality) FROM people;  Write Sql for the following question: Find the average height of all people. Answer : SELECT AVG(Height) FROM people;  Write Sql for the following question: Find the average height of all people who are not Russians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia";  Write Sql for the following question: Find the average height of all people who are not Russians and are not Bulgarians. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!= "Bulgaria";  Write Sql for the following question: Find the average height of all people who are not Russians and are not Bulgarians and are not from Russia. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!= "Bulgaria" AND Nationality!= "Russia";  Write Sql for the following question: Find the average height of all people who are not Russians and are not Bulgarians and are not from Russia and are not from Bulgaria. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!= "Bulgaria" AND Nationality!= "Russia" AND Nationality!= "Bulgaria";  Write Sql for the following question: Find the average height of all people who are not Russians and are not Bulgarians and are not from Russia and are not from Bulgaria and are not from Russia. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!= "Bulgaria" AND Nationality!= "Russia" AND Nationality!= "Bulgaria" AND Nationality!= "Russia";  Write Sql for the following question: Find the average height of all people who are not Russians and are not Bulgarians and are not from Russia and are not from Bulgaria and are not from Russia and are not from Bulgaria. Answer : SELECT AVG(Height) FROM people WHERE Nationality!= "Russia" AND Nationality!=
 SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
 SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant name ascending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name ASC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number ascending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number ASC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number descending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number DESC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number ascending, then contestant name ascending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number ASC, contestant_name ASC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number ascending, then contestant name descending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number ASC, contestant_name DESC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number descending, then contestant name ascending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number DESC, contestant_name ASC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number descending, then contestant name descending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number DESC, contestant_name DESC;  Write Sql for the following question: List the contestant numbers and names, ordered by contestant number ascending, then contestant name ascending, then contestant number ascending. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_number ASC, contestant_name ASC, contestant_number ASC;  Write Sql for the following question: List the contestant numbers and names,
 SELECT vote_id, phone_number, state FROM VOTES;  Write Sql for the following question: List the contestant numbers and names of all contestants. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS;  Write Sql for the following question: List the contestant numbers and names of all contestants who have voted. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES);  Write Sql for the following question: List the contestant numbers and names of all contestants who have not voted. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);  Write Sql for the following question: List the contestant numbers and names of all contestants who have voted in New Jersey. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES WHERE state = 'NJ');  Write Sql for the following question: List the contestant numbers and names of all contestants who have voted in New Jersey or New York. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES WHERE state = 'NJ' OR state = 'NY');  Write Sql for the following question: List the contestant numbers and names of all contestants who have voted in New Jersey and New York. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES WHERE state = 'NJ' AND state = 'NY');  Write Sql for the following question: List the contestant numbers and names of all contestants who have voted in New Jersey or New York and have not voted in Connecticut. Answer : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES WHERE state = 'NJ' OR state = 'NY') AND contestant_number NOT IN (SELECT contestant_number FROM VOTES WHERE state = 'CT');
 SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
 SELECT MAX(created) FROM VOTES WHERE state = 'CA';
 SELECT contestant_name FROM CONTESTANTS WHERE contestant_name!= 'Jessie Alloway';
 SELECT DISTINCT state, created FROM VOTES;
 SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2);
 SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM VOTES GROUP BY contestant_number));
 SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
 SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
 SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling');
 SELECT DISTINCT v1.phone_number, v1.state FROM VOTES v1, VOTES v2 WHERE v1.contestant_number = 1 AND v2.contestant_number = 2 AND v1.phone_number = v2.phone_number;
 SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
 SELECT Name FROM country WHERE IndepYear > 1950;
 SELECT Name FROM country WHERE IndepYear > 1950;  Write Sql for the following question: Give the names of the cities that have a population greater than 100000. Answer : SELECT Name FROM city WHERE Population > 100000;  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California. Answer : SELECT Name FROM city WHERE Population > 100000 AND District = 'California';  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California or New York. Answer : SELECT Name FROM city WHERE Population > 100000 AND (District = 'California' OR District = 'New York');  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California or New York or Texas. Answer : SELECT Name FROM city WHERE Population > 100000 AND (District = 'California' OR District = 'New York' OR District = 'Texas');  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California or New York or Texas or Florida. Answer : SELECT Name FROM city WHERE Population > 100000 AND (District = 'California' OR District = 'New York' OR District = 'Texas' OR District = 'Florida');  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California or New York or Texas or Florida or Illinois. Answer : SELECT Name FROM city WHERE Population > 100000 AND (District = 'California' OR District = 'New York' OR District = 'Texas' OR District = 'Florida' OR District = 'Illinois');  Write Sql for the following question: Give the names of the cities that have a population greater than 100000 and are in the district of California or New York or Texas or Florida or
 SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';  Write Sql for the following question: How many countries have a population of more than 100 million? Answer : SELECT COUNT(*) FROM country WHERE Population > 100000000;  Write Sql for the following question: How many cities have a population of more than 100 million? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000;  Write Sql for the following question: How many cities have a population of more than 100 million and a country code of AFG? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND CountryCode = 'AFG';  Write Sql for the following question: How many cities have a population of more than 100 million and a country code of AFG or BRA? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND CountryCode = 'AFG' OR CountryCode = 'BRA';  Write Sql for the following question: How many cities have a population of more than 100 million and a country code of AFG or BRA or CAN? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND CountryCode = 'AFG' OR CountryCode = 'BRA' OR CountryCode = 'CAN';  Write Sql for the following question: How many cities have a population of more than 100 million and a country code of AFG or BRA or CAN or IND? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND CountryCode = 'AFG' OR CountryCode = 'BRA' OR CountryCode = 'CAN' OR CountryCode = 'IND';  Write Sql for the following question: How many cities have a population of more than 100 million and a country code of AFG or BRA or CAN or IND or USA? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND CountryCode = 'AFG' OR CountryCode = 'BRA' OR CountryCode = 'CAN' OR CountryCode = 'IND' OR CountryCode = 'USA'; 
 SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';  Write Sql for the following question: How many countries have a population of more than 100 million? Answer : SELECT COUNT(*) FROM country WHERE Population > 100000000;  Write Sql for the following question: How many cities have a population of more than 100 million? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000;  Write Sql for the following question: How many cities have a population of more than 100 million and a population of less than 1 billion? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND Population < 1000000000;  Write Sql for the following question: How many cities have a population of more than 100 million and a population of less than 1 billion and a population of more than 100 thousand? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND Population < 1000000000 AND Population > 100000;  Write Sql for the following question: How many cities have a population of more than 100 million and a population of less than 1 billion and a population of more than 100 thousand and a population of less than 1 million? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND Population < 1000000000 AND Population > 100000 AND Population < 1000000;  Write Sql for the following question: How many cities have a population of more than 100 million and a population of less than 1 billion and a population of more than 100 thousand and a population of less than 1 million and a population of more than 10 thousand? Answer : SELECT COUNT(*) FROM city WHERE Population > 100000000 AND Population < 1000000000 AND Population > 100000 AND Population < 10
 SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the total population of the cities in the United States? Answer : SELECT SUM(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities in the United States? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'USA';  Write Sql for the following question: What is the average population of the cities
 SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average life expectancy of the countries in the Carribean? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average population of the countries in the Carribean? Answer : SELECT AVG(Population) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the average GNP of the countries in the Carribean? Answer : SELECT AVG(GNP) FROM country WHERE Region = 'Caribbean';  Write Sql for the following question: What is the
 SELECT Continent FROM country WHERE Name = 'Anguilla';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question:
 SELECT Continent FROM country WHERE Name = 'Anguilla';  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: What is the name of the country with the highest population in the continent of Europe? Answer : SELECT Name FROM country WHERE Continent = 'Europe' AND Population = (SELECT MAX(Population) FROM country WHERE Continent = 'Europe');  Write Sql for the following question: What is the name of the country with the highest population in the region of South America? Answer : SELECT Name FROM country WHERE Region = 'South America' AND Population = (SELECT MAX(Population) FROM country WHERE Region = 'South America');  Write Sql for the following question: What is the name of the country with the highest population in the region of South America and the continent of Europe? Answer : SELECT Name FROM country WHERE Region = 'South America' AND Continent = 'Europe' AND Population = (SELECT MAX(Population) FROM country WHERE Region = 'South America' AND Continent = 'Europe');  Write Sql for the following question: What is the name of the country with the highest population in the region of South America and the continent of Europe and the surface area is greater than 5000000? Answer : SELECT Name FROM country WHERE Region = 'South America' AND Continent = 'Europe' AND SurfaceArea > 5000000 AND Population = (SELECT MAX(Population) FROM country WHERE Region = 'South America' AND Continent = 'Europe' AND SurfaceArea > 5000000);  Write Sql for the following question: What is the name of the country with the highest population in the region of South America and the continent of Europe and the surface area is greater than 5000000 and the life expectancy is greater than 70? Answer : SELECT Name FROM country WHERE Region = 'South America' AND Continent = 'Europe' AND SurfaceArea > 5000000 AND LifeExpectancy > 70 AND Population = (SELECT MAX(Population) FROM country WHERE Region = 'South America' AND Continent = 'Europe' AND SurfaceArea > 5000000
 SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');
 SELECT Region FROM country WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of Kabul? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the largest population? Answer : SELECT MAX(Population) FROM city;  Write Sql for the following question: What is the population of the city with the smallest population? Answer : SELECT MIN(Population) FROM city;  Write Sql for the following question: What is the population of the city with the largest population in the country with the smallest population? Answer : SELECT MAX(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MIN(Population) FROM country));  Write Sql for the following question: What is the population of the city with the smallest population in the country with the largest population? Answer : SELECT MIN(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MAX(Population) FROM country));  Write Sql for the following question: What is the population of the city with the largest population in the country with the largest population? Answer : SELECT MAX(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MAX(Population) FROM country));  Write Sql for the following question: What is the population of the city with the smallest population in the country with the smallest population? Answer : SELECT MIN(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MIN(Population) FROM country));  Write Sql for the following question: What is the population of the city with the largest population in the country with the smallest population? Answer : SELECT MAX(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MIN(Population) FROM country));  Write Sql for the following question: What is the population of the city with the smallest population in the country with the largest population? Answer : SELECT MIN(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Population = (SELECT MAX(Population) FROM country));  Write Sql for the following question: What is the population of the city with the largest population in the country with the smallest population? Answer : SELECT MAX(Population) FROM city WHERE CountryCode =
 SELECT Language, COUNT(*) AS Count FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language ORDER BY Count DESC LIMIT 1;
 SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1;
 SELECT population, lifeExpectancy FROM country WHERE name = 'Brazil';  Write Sql for the following question: What are the names of the countries in the continent 'Africa'? Answer : SELECT name FROM country WHERE continent = 'Africa';  Write Sql for the following question: What are the names of the countries in the region 'South America'? Answer : SELECT name FROM country WHERE region = 'South America';  Write Sql for the following question: What are the names of the cities in the country 'Brazil'? Answer : SELECT name FROM city WHERE countrycode = 'BRA';  Write Sql for the following question: What are the names of the cities in the district 'California'? Answer : SELECT name FROM city WHERE district = 'California';  Write Sql for the following question: What are the names of the cities in the district 'California' and the country 'Brazil'? Answer : SELECT name FROM city WHERE district = 'California' AND countrycode = 'BRA';  Write Sql for the following question: What are the names of the cities in the district 'California' or the country 'Brazil'? Answer : SELECT name FROM city WHERE district = 'California' OR countrycode = 'BRA';  Write Sql for the following question: What are the names of the cities in the district 'California' and the country 'Brazil' or the district 'Texas'? Answer : SELECT name FROM city WHERE (district = 'California' AND countrycode = 'BRA') OR district = 'Texas';  Write Sql for the following question: What are the names of the cities in the district 'California' and the country 'Brazil' or the district 'Texas' and the country 'Brazil'? Answer : SELECT name FROM city WHERE (district = 'California' AND countrycode = 'BRA') OR (district = 'Texas' AND countrycode = 'BRA');  Write Sql for the following question: What are the names of the cities in the district 'California' and the country 'Brazil' or the district 'Texas' and the country 'Brazil' or the district 'California' and the country 'Brazil'? Answer : SELECT name FROM city WHERE (district = 'California' AND countrycode = 'BRA') OR (district = 'Texas' AND countrycode = 'BRA
 SELECT population, lifeExpectancy FROM country WHERE name = 'Brazil';  Write Sql for the following question: Give me the name and population of the countries in Europe. Answer : SELECT name, population FROM country WHERE continent = 'Europe';  Write Sql for the following question: Give me the name and population of the countries in Asia. Answer : SELECT name, population FROM country WHERE continent = 'Asia';  Write Sql for the following question: Give me the name and population of the countries in Africa. Answer : SELECT name, population FROM country WHERE continent = 'Africa';  Write Sql for the following question: Give me the name and population of the countries in Oceania. Answer : SELECT name, population FROM country WHERE continent = 'Oceania';  Write Sql for the following question: Give me the name and population of the countries in South America. Answer : SELECT name, population FROM country WHERE continent = 'South America';  Write Sql for the following question: Give me the name and population of the countries in North America. Answer : SELECT name, population FROM country WHERE continent = 'North America';  Write Sql for the following question: Give me the name and population of the countries in Antarctica. Answer : SELECT name, population FROM country WHERE continent = 'Antarctica';  Write Sql for the following question: Give me the name and population of the countries in Australia. Answer : SELECT name, population FROM country WHERE continent = 'Australia';  Write Sql for the following question: Give me the name and population of the countries in South America. Answer : SELECT name, population FROM country WHERE continent = 'South America';  Write Sql for the following question: Give me the name and population of the countries in North America. Answer : SELECT name, population FROM country WHERE continent = 'North America';  Write Sql for the following question: Give me the name and population of the countries in Antarctica. Answer : SELECT name, population FROM country WHERE continent = 'Antarctica';  Write Sql for the following question: Give me the name and population of the countries in Australia. Answer : SELECT name, population FROM country WHERE continent = 'Australia';  Write Sql for the following question: Give me the name and population of the countries in South America. 
 SELECT Region, Population FROM country WHERE Name = 'Angola';
 SELECT Region, Population FROM country WHERE Name = 'Angola';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question: What is the population of the city of Cairo? Answer : SELECT Population FROM city WHERE Name = 'Cairo';  Write Sql for the following question
 SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
 SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of the world? Answer : SELECT
 SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia');  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MAX(Population / SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MIN(Population / SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MAX(GNP) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MIN(GNP) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP per capita? Answer : SELECT Name FROM country WHERE GNP / Population = (SELECT MAX(GNP / Population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP per capita? Answer : SELECT Name FROM country WHERE GNP / Population = (SELECT MIN(GNP / Population) FROM country);  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MAX(Population / SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MIN(Population / SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the
 SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia');  Write Sql for the following question: Give the name of the country in Europe with the highest life expectancy. Answer : SELECT Name FROM country WHERE Continent = 'Europe' AND LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Give the name of the country in Africa with the lowest GNP. Answer : SELECT Name FROM country WHERE Continent = 'Africa' AND GNP = (SELECT MIN(GNP) FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Give the name of the country in Oceania with the highest GNP. Answer : SELECT Name FROM country WHERE Continent = 'Oceania' AND GNP = (SELECT MAX(GNP) FROM country WHERE Continent = 'Oceania');  Write Sql for the following question: Give the name of the country in South America with the lowest population. Answer : SELECT Name FROM country WHERE Continent = 'South America' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'South America');  Write Sql for the following question: Give the name of the country in North America with the highest population. Answer : SELECT Name FROM country WHERE Continent = 'North America' AND Population = (SELECT MAX(Population) FROM country WHERE Continent = 'North America');  Write Sql for the following question: Give the name of the country in Africa with the highest GNP. Answer : SELECT Name FROM country WHERE Continent = 'Africa' AND GNP = (SELECT MAX(GNP) FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Give the name of the country in Asia with the lowest GNP. Answer : SELECT Name FROM country WHERE Continent = 'Asia' AND GNP = (SELECT MIN(GNP) FROM country WHERE Continent = 'Asia');  Write Sql for the following question: Give the name of the country in Europe with the lowest GNP. Answer : SELECT Name FROM country WHERE Continent = 'Europe' AND GNP = (SELECT MIN(GNP) FROM country WHERE Continent = 'Europe');  Write Sql for the
 SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia';
 SELECT COUNT(Name) AS 'Number of People in Asia', MAX(GNP) AS 'Largest GNP' FROM country WHERE Continent = 'Asia';  Write Sql for the following question: What is the average life expectancy in the world? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy' FROM country;  Write Sql for the following question: What is the average life expectancy in Asia? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Asia' FROM country WHERE Continent = 'Asia';  Write Sql for the following question: What is the average life expectancy in Europe? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Europe' FROM country WHERE Continent = 'Europe';  Write Sql for the following question: What is the average life expectancy in Africa? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Africa' FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average life expectancy in North America? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in North America' FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average life expectancy in South America? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in South America' FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average life expectancy in Oceania? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Oceania' FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: What is the average life expectancy in Antarctica? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Antarctica' FROM country WHERE Continent = 'Antarctica';  Write Sql for the following question: What is the average life expectancy in Australia? Answer : SELECT AVG(LifeExpectancy) AS 'Average Life Expectancy in Australia' FROM country WHERE Continent = 'Australia';  Write Sql for the following question: What is the average life expectancy in the world? Answer : SELECT AVG
 SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
 SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
 SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: What is the total population of the countries in Europe? Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: What is the average population of the countries in Asia? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Asia';  Write Sql for the following question: What is the average population of the countries in Europe? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: What is the average population of the countries in Africa? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average population of the countries in Oceania? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: What is the average population of the countries in South America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average population of the countries in North America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average population of the countries in Antarctica? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Antarctica';  Write Sql for the following question: What is the average population of the countries in Australia? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Australia';  Write Sql for the following question: What is the average population of the countries in South America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average population of the countries in North America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average population of the countries in Antarctica? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Antarctica';  Write Sql for the following
 SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the following question: Give the total population of countries in Asia or Europe. Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';  Write Sql for the
 SELECT COUNT(*) FROM city WHERE District = 'Gelderland';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the following question: What is the population of the city with the name 'Kabul'? Answer : SELECT Population FROM city WHERE Name = 'Kabul';  Write Sql for the
 SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
 SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory';
 SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'Asia' AND GovernmentForm = 'US Territory';
 SELECT COUNT(DISTINCT Language) FROM countrylanguage;  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: What is the name of the country with the highest life expectancy? Answer : SELECT Name FROM country WHERE LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the lowest life expectancy? Answer : SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MAX(GNP) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MIN(GNP) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP per capita? Answer : SELECT Name FROM country WHERE GNP/Population = (SELECT MAX(GNP/Population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP per capita? Answer : SELECT Name FROM country WHERE GNP/Population = (SELECT MIN(GNP/Population) FROM country);  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE Population/SurfaceArea = (SELECT MAX(Population/SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE Population/SurfaceArea = (SELECT MIN(Population/SurfaceArea) FROM country);  Write Sql for the following question: What is the name of the country with the highest number of cities? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);  
 SELECT COUNT(DISTINCT Language) FROM countrylanguage;
 SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average life expectancy in the world? Answer : SELECT AVG(LifeExpectancy) FROM country;  Write Sql for the following question: What is the average life expectancy in the continent of Africa? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average life expectancy in the continent of Asia? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia';  Write Sql for the following question: What is the average life expectancy in the continent of Europe? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: What is the average life expectancy in the continent of North America? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average life expectancy in the continent of South America? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average life expectancy in the continent of Oceania? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: What is the average life expectancy in the continent of Antarctica? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Antarctica';  Write Sql for the following question: What is the average life expectancy in the continent of Australia? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Australia';  Write Sql for the following question: What is the average life expectancy in the continent of Africa? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average life expectancy in the continent of North America? Answer : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'North America';  Write Sql for the following question
 SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the total population of the world? Answer : SELECT SUM(Population) FROM country;  Write Sql for the following question: What is the total population of Africa? Answer : SELECT SUM(Population) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the total population of each continent? Answer : SELECT Continent, SUM(Population) FROM country GROUP BY Continent;  Write Sql for the following question: What is the total population of each region? Answer : SELECT Region, SUM(Population) FROM country GROUP BY Region;  Write Sql for the following question: What is the total population of each country? Answer : SELECT Name, SUM(Population) FROM country GROUP BY Name;  Write Sql for the following question: What is the total population of each country in Europe? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'Europe' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in Asia? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'Asia' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in Africa? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'Africa' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in Oceania? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'Oceania' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in South America? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'South America' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in North America? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'North America' GROUP BY Name;  Write Sql for the following question: What is the total population of each country in Antarctica? Answer : SELECT Name, SUM(Population) FROM country WHERE Continent = 'Antarctica' GROUP BY Name;  Write Sql for the following
 SELECT COUNT(DISTINCT(Language)) FROM countrylanguage WHERE CountryCode = 'ABW';  Write Sql for the following question: What is the total population of cities in India? Answer : SELECT SUM(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';  Write Sql for the following question: What is the average population of cities in India? Answer : SELECT AVG(Population) FROM city WHERE CountryCode = 'IND';
 SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: What is the average population of the countries in Europe? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: What is the average population of the countries in Asia? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Asia';  Write Sql for the following question: What is the average population of the countries in Africa? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: What is the average population of the countries in Oceania? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: What is the average population of the countries in South America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average population of the countries in North America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average population of the countries in Antarctica? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Antarctica';  Write Sql for the following question: What is the average population of the countries in Australia? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Australia';  Write Sql for the following question: What is the average population of the countries in South America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'South America';  Write Sql for the following question: What is the average population of the countries in North America? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'North America';  Write Sql for the following question: What is the average population of the countries in Antarctica? Answer : SELECT AVG(Population) FROM country WHERE Continent = 'Antarctica';  Write Sql for the following question:
 SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE population = (SELECT MAX(population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population? Answer : SELECT Name FROM country WHERE population = (SELECT MIN(population) FROM country);  Write Sql for the following question: What is the name of the country with the highest life expectancy? Answer : SELECT Name FROM country WHERE lifeexpectancy = (SELECT MAX(lifeexpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the lowest life expectancy? Answer : SELECT Name FROM country WHERE lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP? Answer : SELECT Name FROM country WHERE gnp = (SELECT MAX(gnp) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP? Answer : SELECT Name FROM country WHERE gnp = (SELECT MIN(gnp) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP per capita? Answer : SELECT Name FROM country WHERE gnpold = (SELECT MAX(gnpold) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP per capita? Answer : SELECT Name FROM country WHERE gnpold = (SELECT MIN(gnpold) FROM country);  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE population / surfacearea = (SELECT MAX(population / surfacearea) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE population / surfacearea = (SELECT MIN(population / surfacearea) FROM country);  Write Sql for the following question: What is the name of the country with the highest number of cities? Answer : SELECT Name FROM country WHERE population = (SELECT MAX(population) FROM country); 
 SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE population = (SELECT MAX(population) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population? Answer : SELECT Name FROM country WHERE population = (SELECT MIN(population) FROM country);  Write Sql for the following question: What is the name of the country with the highest life expectancy? Answer : SELECT Name FROM country WHERE lifeexpectancy = (SELECT MAX(lifeexpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the lowest life expectancy? Answer : SELECT Name FROM country WHERE lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP? Answer : SELECT Name FROM country WHERE gnp = (SELECT MAX(gnp) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP? Answer : SELECT Name FROM country WHERE gnp = (SELECT MIN(gnp) FROM country);  Write Sql for the following question: What is the name of the country with the highest GNP per capita? Answer : SELECT Name FROM country WHERE gnpold = (SELECT MAX(gnpold) FROM country);  Write Sql for the following question: What is the name of the country with the lowest GNP per capita? Answer : SELECT Name FROM country WHERE gnpold = (SELECT MIN(gnpold) FROM country);  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE population / surfacearea = (SELECT MAX(population / surfacearea) FROM country);  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE population / surfacearea = (SELECT MIN(population / surfacearea) FROM country);  Write Sql for the following question: What is the name of the country with the highest number of cities? Answer : SELECT Name FROM country WHERE population = (SELECT MAX(population) FROM country); 
 SELECT country.Name, COUNT(countrylanguage.CountryCode) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Languages DESC LIMIT 1;
 SELECT country.Name, MAX(countrylanguage.Percentage) AS Percentage FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Percentage DESC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the least amount of languages. Answer : SELECT country.Name, MIN(countrylanguage.Percentage) AS Percentage FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Percentage ASC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the most languages. Answer : SELECT country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Languages DESC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the least languages. Answer : SELECT country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Languages ASC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the most official languages. Answer : SELECT country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' GROUP BY country.Name ORDER BY Languages DESC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the least official languages. Answer : SELECT country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' GROUP BY country.Name ORDER BY Languages ASC LIMIT 1;  Write Sql for the following question: Give the name of the nation that uses the most languages and the percentage of the population that speaks these languages. Answer : SELECT country.Name, COUNT(countrylanguage.Language) AS Languages, SUM(countrylanguage.Percentage) AS Per
 SELECT Continent, COUNT(DISTINCT(Language)) AS Languages FROM countrylanguage GROUP BY Continent ORDER BY Languages DESC LIMIT 1;
 SELECT Continent, COUNT(Language) AS Languages FROM countrylanguage GROUP BY Continent ORDER BY Languages DESC LIMIT 1;  Write Sql for the following question: Which country has the highest population? Answer : SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 1;  Write Sql for the following question: Which country has the highest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY PopulationDensity DESC LIMIT 1;  Write Sql for the following question: Which country has the lowest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY PopulationDensity ASC LIMIT 1;  Write Sql for the following question: Which country has the highest GNP? Answer : SELECT Name, GNP FROM country ORDER BY GNP DESC LIMIT 1;  Write Sql for the following question: Which country has the lowest GNP? Answer : SELECT Name, GNP FROM country ORDER BY GNP ASC LIMIT 1;  Write Sql for the following question: Which country has the highest life expectancy? Answer : SELECT Name, LifeExpectancy FROM country ORDER BY LifeExpectancy DESC LIMIT 1;  Write Sql for the following question: Which country has the lowest life expectancy? Answer : SELECT Name, LifeExpectancy FROM country ORDER BY LifeExpectancy ASC LIMIT 1;  Write Sql for the following question: Which country has the highest number of cities? Answer : SELECT Name, COUNT(Name) AS Cities FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY Cities DESC LIMIT 1;  Write Sql for the following question: Which country has the lowest number of cities? Answer : SELECT Name, COUNT(Name) AS Cities FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY Cities ASC LIMIT 1;  Write Sql for the following question: Which country has the highest number of people living in cities? Answer : SELECT Name, Population/COUNT(Name) AS PeopleLivingInCities FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY PeopleLivingInCities DESC LIMIT 1;  Write Sql for the following question: Which country has the lowest number of people living in cities? Answer : SELECT Name, Population/COUNT(Name) AS
 SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe')  Write Sql for the following question: What is the name of the country with the highest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country)  Write Sql for the following question: What is the name of the country with the lowest population? Answer : SELECT Name FROM country WHERE Population = (SELECT MIN(Population) FROM country)  Write Sql for the following question: What is the name of the country with the highest life expectancy? Answer : SELECT Name FROM country WHERE LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM country)  Write Sql for the following question: What is the name of the country with the lowest life expectancy? Answer : SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country)  Write Sql for the following question: What is the name of the country with the highest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MAX(GNP) FROM country)  Write Sql for the following question: What is the name of the country with the lowest GNP? Answer : SELECT Name FROM country WHERE GNP = (SELECT MIN(GNP) FROM country)  Write Sql for the following question: What is the name of the country with the highest GNP per capita? Answer : SELECT Name FROM country WHERE GNP / Population = (SELECT MAX(GNP / Population) FROM country)  Write Sql for the following question: What is the name of the country with the lowest GNP per capita? Answer : SELECT Name FROM country WHERE GNP / Population = (SELECT MIN(GNP / Population) FROM country)  Write Sql for the following question: What is the name of the country with the highest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MAX(Population / SurfaceArea) FROM country)  Write Sql for the following question: What is the name of the country with the lowest population density? Answer : SELECT Name FROM country WHERE Population / SurfaceArea = (SELECT MIN(Population / SurfaceArea) FROM country)  Write Sql for the following question: What is the name of the country with
 SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch';  Write Sql for the following question: What is the number of cities in each country? Answer : SELECT country.Name, COUNT(city.ID) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY country.Name;  Write Sql for the following question: What is the number of cities in each country where the population is greater than 1000000? Answer : SELECT country.Name, COUNT(city.ID) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population > 1000000 GROUP BY country.Name;  Write Sql for the following question: What is the number of cities in each country where the population is greater than 1000000 and the country code is 'USA'? Answer : SELECT country.Name, COUNT(city.ID) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population > 1000000 AND country.Code = 'USA' GROUP BY country.Name;  Write Sql for the following question: What is the number of cities in each country where the population is greater than 1000000 and the country code is 'USA' or 'IND'? Answer : SELECT country.Name, COUNT(city.ID) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population > 1000000 AND country.Code = 'USA' OR country.Code = 'IND' GROUP BY country.Name;  Write Sql for the following question: What is the number of cities in each country where the population is greater than 1000000 and the country code is 'USA' or 'IND' or 'JPN'? Answer : SELECT country.Name, COUNT(city.ID) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population > 1000000 AND country.Code = 'USA' OR country.Code = 'IND' OR country.Code = 'JPN' GROUP BY country.Name;  Write Sql for the following question: What is the number of cities in each country where the population is greater than 1000000 and the country code is 'USA' or 'IND'
 SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' AND country.Code IN (SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
 SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' AND country.Code IN (SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
 SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.CountryCode IN (SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
 SELECT country.Name, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'French';
 SELECT COUNT(DISTINCT Continent) FROM countrylanguage WHERE Language = 'Chinese';  Write Sql for the following question: What is the number of countries where English is spoken, but not Chinese? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');  Write Sql for the following question: What is the number of countries where Spanish is spoken, but not English? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');  Write Sql for the following question: What is the number of countries where Chinese is spoken, but not Spanish? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Chinese' AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish');  Write Sql for the following question: What is the number of countries where English is spoken, Chinese is spoken, and Spanish is spoken? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Chinese', 'Spanish');  Write Sql for the following question: What is the number of countries where English is spoken, Chinese is spoken, and Spanish is spoken, and the percentage of Spanish speakers is greater than 50%? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Chinese', 'Spanish') AND Percentage > 50;  Write Sql for the following question: What is the number of countries where English is spoken, Chinese is spoken, and Spanish is spoken, and the percentage of Spanish speakers is greater than 50%? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Chinese', 'Spanish') AND Percentage > 50;  Write Sql for the following question: What is the number of countries where English is spoken, Chinese is spoken, and Spanish is spoken, and the percentage of Spanish speakers is greater than 50%? Answer : SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Chinese', 'Spanish') AND Percentage > 50;  Write Sql for the following question: What is the number of countries where English is spoken, Chinese is spoken
 SELECT COUNT(DISTINCT(countrylanguage.CountryCode)) FROM countrylanguage WHERE countrylanguage.Language = 'Chinese';  Write Sql for the following question: How many countries have a population of at least 10000000? Answer : SELECT COUNT(country.Code) FROM country WHERE country.Population >= 10000000;  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.Continent = 'South America';  Write Sql for the following question: What is the average population of the countries of the continent 'South America'? Answer : SELECT AVG(country.Population) FROM country WHERE country.
 SELECT DISTINCT Region FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch';  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000? Answer : SELECT Name FROM country WHERE Population > 50000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000? Answer : SELECT Name FROM country WHERE Population > 50000000 AND SurfaceArea > 1000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000? Answer : SELECT Name FROM country WHERE Population > 50000000 AND SurfaceArea > 1000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000? Answer : SELECT Name FROM country WHERE Population > 50000000 AND SurfaceArea > 1000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000? Answer : SELECT Name FROM country WHERE Population > 50000000 AND SurfaceArea > 1000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000? Answer : SELECT Name FROM country WHERE Population > 50000000 AND SurfaceArea > 1000000;  Write Sql for the following question: What are the names of the countries that have a population greater than 50000000 and a surface area greater than 1000000
 SELECT Region, Language FROM countrylanguage WHERE Language = 'Dutch' OR Language = 'English';  Write Sql for the following question: Which countries have a population greater than 50000000? Answer : SELECT Name, Population FROM country WHERE Population > 50000000;  Write Sql for the following question: Which countries have a population greater than 50000000 and a life expectancy greater than 75? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Population > 50000000 AND LifeExpectancy > 75;  Write Sql for the following question: Which countries have a population greater than 50000000 and a life expectancy greater than 75 and a GNP greater than 100000? Answer : SELECT Name, Population, LifeExpectancy, GNP FROM country WHERE Population > 50000000 AND LifeExpectancy > 75 AND GNP > 100000;  Write Sql for the following question: Which countries have a population greater than 50000000 and a life expectancy greater than 75 and a GNP greater than 100000 and a local name containing the word 'United'? Answer : SELECT Name, Population, LifeExpectancy, GNP, LocalName FROM country WHERE Population > 50000000 AND LifeExpectancy > 75 AND GNP > 100000 AND LocalName LIKE '%United%';  Write Sql for the following question: Which countries have a population greater than 50000000 and a life expectancy greater than 75 and a GNP greater than 100000 and a local name containing the word 'United' and a government form containing the word 'Republic'? Answer : SELECT Name, Population, LifeExpectancy, GNP, LocalName, GovernmentForm FROM country WHERE Population > 50000000 AND LifeExpectancy > 75 AND GNP > 100000 AND LocalName LIKE '%United%' AND GovernmentForm LIKE '%Republic%';  Write Sql for the following question: Which countries
 SELECT country.Name, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch';
 SELECT country.Name, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch';
 SELECT Language, COUNT(Language) AS Count FROM countrylanguage WHERE Continent = 'Asia' GROUP BY Language ORDER BY Count DESC LIMIT 1;
 SELECT Language, COUNT(CountryCode) AS Count FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY Count DESC LIMIT 1;
 SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage = 100 AND Count(CountryCode) = 1;
 SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50 GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;
 SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'United Kingdom' AND city.Population = (SELECT MAX(city.Population) FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'United Kingdom' AND city.Language = 'English');
 SELECT city.Name, country.Name, city.Population FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'United Kingdom' AND city.Population > 100000 AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1;
 SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia');
 SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea >= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Asia' AND SurfaceArea > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the largest Asian country by population? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND Population >= ALL (SELECT Population FROM country WHERE Continent = 'Asia' AND Population > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the smallest Asian country by land? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea <= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Asia' AND SurfaceArea > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the smallest Asian country by population? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND Population <= ALL (SELECT Population FROM country WHERE Continent = 'Asia' AND Population > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the largest European country by land? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Europe' AND SurfaceArea >= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe' AND SurfaceArea > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the largest European country by population? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Europe' AND Population >= ALL (SELECT Population FROM country WHERE Continent = 'Europe' AND Population > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the smallest European country by land? Answer : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Europe' AND SurfaceArea <= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe' AND SurfaceArea > 0);  Write Sql for the following question: What are the name, population, and life expectancy of the
 SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
 SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
 SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT Code FROM countrylanguage WHERE Language = 'English');
 SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT DISTINCT(CountryCode) FROM countrylanguage WHERE Language = 'English');
 SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
 SELECT countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = 'Beatrix';
 SELECT COUNT(DISTINCT(Language)) FROM countrylanguage WHERE IsOfficial = 'T' AND IndepYear < 1930;
 SELECT COUNT(DISTINCT(Language)) FROM countrylanguage WHERE IsOfficial = 'T' AND IndepYear < 1930;
 SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT SurfaceArea FROM country WHERE Continent = 'Europe' LIMIT 1);
 SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Which countries have a population greater than that of any country in Asia? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Asia');  Write Sql for the following question: Which countries have a population greater than that of any country in Africa? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Which countries have a population greater than that of any country in Oceania? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Oceania');  Write Sql for the following question: Which countries have a population greater than that of any country in South America? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'South America');  Write Sql for the following question: Which countries have a population greater than that of any country in North America? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'North America');  Write Sql for the following question: Which countries have a population greater than that of any country in Antarctica? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Antarctica');  Write Sql for the following question: Which countries have a population greater than that of any country in Australia? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Australia');  Write Sql for the following question: Which countries have a population greater than that of any country in South America? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'South America');  Write Sql for the following question: Which countries have a population greater than that of any country in North America? Answer : SELECT Name, Population FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent
 SELECT * FROM country WHERE Continent = 'Africa' AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Asia');
 SELECT * FROM country WHERE Continent = 'Africa' AND Population < (SELECT MAX(Population) FROM country WHERE Continent = 'Asia');  Write Sql for the following question: Which African countries have a smaller population than that of any country in Asia? Answer : SELECT * FROM country WHERE Continent = 'Africa' AND Population < (SELECT MAX(Population) FROM country WHERE Continent = 'Asia');
 SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ANY (SELECT Population FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Which countries have a GNP that is greater than any country in Europe? Answer : SELECT Name FROM country WHERE GNP > ANY (SELECT GNP FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Which countries have a GNP that is less than any country in Africa? Answer : SELECT Name FROM country WHERE GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Which countries have a GNP that is less than any country in Africa and a population that is less than any country in Europe? Answer : SELECT Name FROM country WHERE GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Africa') AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Which countries have a GNP that is less than any country in Africa or a population that is less than any country in Europe? Answer : SELECT Name FROM country WHERE GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Africa') OR Population < ANY (SELECT Population FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Which countries have a GNP that is less than any country in Africa and a population that is less than any country in Europe, but not both? Answer : SELECT Name FROM country WHERE GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Africa') AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Europe') AND GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Europe') AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Which countries have a GNP that is less than any country in Africa and a population that is less than any country in Europe, but not both? Answer : SELECT Name FROM country WHERE GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Africa') AND Population < ANY (SELECT Population FROM country WHERE Continent = 'Europe') AND GNP < ANY (SELECT GNP FROM country WHERE Continent = 'Europe
 SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');  Write Sql for the following question: What are the names of the cities in Africa with a population larger than that of Rome? Answer : SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa') AND Population > (SELECT Population FROM city WHERE Name = 'Rome');  Write Sql for the following question: What is the average population of cities in each continent? Answer : SELECT Continent, AVG(Population) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of all cities in each continent, rounded down to the nearest integer? Answer : SELECT Continent, FLOOR(AVG(Population)) FROM country GROUP BY Continent;  Write Sql for the following question: What is the average population of
 SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT(CountryCode) FROM countrylanguage WHERE Language = 'English');
 SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT(CountryCode) FROM countrylanguage WHERE Language = 'English');
 SELECT DISTINCT countrycode FROM countrylanguage WHERE language!= 'English';
 SELECT DISTINCT countrycode FROM countrylanguage WHERE language!= 'English';
 SELECT Code FROM country WHERE GovernmentForm!= 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
 SELECT Code FROM country WHERE GovernmentForm!= 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
 SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Language!= 'English';
 SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND Language!= 'English';
 SELECT DISTINCT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia';
 SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') AND Language = 'Chinese';
 SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million? Answer : SELECT Name FROM country WHERE Population >= 200000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a surface area greater than or equal to 3000000? Answer : SELECT Name FROM country WHERE Population >= 200000000 AND SurfaceArea >= 3000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a surface area greater than or equal to 3000000? Answer : SELECT Name FROM country WHERE Population >= 200000000 AND SurfaceArea >= 3000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a surface area greater than or equal to 3000000? Answer : SELECT Name FROM country WHERE Population >= 200000000 AND SurfaceArea >= 3000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a surface area greater than or equal to 3000000? Answer : SELECT Name FROM country WHERE Population >= 200000000 AND SurfaceArea >= 3000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a surface area greater than or equal to 3000000? Answer : SELECT Name FROM country WHERE Population >= 200000000 AND SurfaceArea >= 3000000;  Write Sql for the following question: What are the names of the countries with a population greater than or equal to 200 million and a
 SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the largest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT Name, Population, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and area of the country with the smallest population. Answer : SELECT
 SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the largest population? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population = (SELECT MAX(country.Population) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the largest population density? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population / country.SurfaceArea = (SELECT MAX(country.Population / country.SurfaceArea) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the smallest population density? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population / country.SurfaceArea = (SELECT MIN(country.Population / country.SurfaceArea) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the smallest area? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MIN(country.SurfaceArea) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the smallest population? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population = (SELECT MIN(country.Population) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the smallest population density? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population / country.SurfaceArea = (SELECT MIN(country.Population / country.SurfaceArea) FROM country);  Write Sql for the following question: What are the population, name and leader of the country with the largest population density? Answer : SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Population / country.SurfaceArea = (SELECT MAX(country.Population / country.SurfaceArea) FROM country);  Write Sql for the following question: What are the
 SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the largest population. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population = (SELECT MAX(Population) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the largest population density. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population / SurfaceArea = (SELECT MAX(Population / SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the smallest population density. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population / SurfaceArea = (SELECT MIN(Population / SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the smallest area. Answer : SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the smallest population. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population = (SELECT MIN(Population) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the smallest population density. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population / SurfaceArea = (SELECT MIN(Population / SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the largest population density. Answer : SELECT Name, Population, HeadOfState FROM country WHERE Population / SurfaceArea = (SELECT MAX(Population / SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head of state for the country that has the largest area. Answer : SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);  Write Sql for the following question: Give the name, population, and head
 SELECT country.Name, COUNT(countrylanguage.Language) AS NumberOfLanguages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3;
 SELECT country.Name, COUNT(countrylanguage.Language) AS Languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
 SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
 SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
 SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy)>72;
 SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
 SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
 SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
 SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 largest population? Answer : SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 smallest population? Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 smallest area? Answer : SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea ASC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 largest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea DESC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 smallest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea ASC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 largest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea DESC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 smallest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea ASC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 largest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea DESC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 smallest population density? Answer : SELECT Name, Population/SurfaceArea AS PopulationDensity FROM country ORDER BY Population/SurfaceArea ASC LIMIT 5;  Write Sql for the following question: What are the names and population of countries with the top 5 largest population density? Answer : SELECT Name, Population
 SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the 5 smallest countries. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 5;  Write Sql for the following question: Return the names and population of the
 SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 3;
 SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 most populated countries in the continent 'Asia'. Answer : SELECT Name, Population FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 most populated countries in the continent 'Asia' and the 3 most populated countries in the continent 'Europe'. Answer : SELECT Name, Population FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'Europe' ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 most populated countries in the continent 'Asia' and the 3 most populated countries in the continent 'Europe' and the 3 most populated countries in the continent 'Africa'. Answer : SELECT Name, Population FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'Europe' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 most populated countries in the continent 'Asia' and the 3 most populated countries in the continent 'Europe' and the 3 most populated countries in the continent 'Africa' and the 3 most populated countries in the continent 'North America'. Answer : SELECT Name, Population FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'Europe' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 3 UNION SELECT Name, Population FROM country WHERE Continent = 'North America' ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 most populated countries in the continent 'Asia' and the 3 most populated countries in the continent 'Europe' and the 3 most populated countries in the continent 'Africa' and the 3 most
 SELECT Name FROM country WHERE Population < (SELECT MIN(Population) FROM country WHERE Population > 0) ORDER BY Population LIMIT 3;
 SELECT Name,Population FROM country ORDER BY Population ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the most people. Answer : SELECT Name,Population FROM country ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 cities with the fewest people. Answer : SELECT Name,Population FROM city ORDER BY Population ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 cities with the most people. Answer : SELECT Name,Population FROM city ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the highest GDP. Answer : SELECT Name,GDP FROM country ORDER BY GDP DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the lowest GDP. Answer : SELECT Name,GDP FROM country ORDER BY GDP ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the highest life expectancy. Answer : SELECT Name,LifeExpectancy FROM country ORDER BY LifeExpectancy DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the lowest life expectancy. Answer : SELECT Name,LifeExpectancy FROM country ORDER BY LifeExpectancy ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the highest population. Answer : SELECT Name,Population FROM country ORDER BY Population DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the lowest population. Answer : SELECT Name,Population FROM country ORDER BY Population ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the highest surface area. Answer : SELECT Name,SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the lowest surface area. Answer : SELECT Name,SurfaceArea FROM country ORDER BY SurfaceArea ASC LIMIT 3;  Write Sql for the following question: Return the names of the 3 countries with the highest population density. Answer : SELECT Name,Population/SurfaceArea FROM country ORDER BY Pop
 SELECT COUNT(*) FROM country WHERE Continent = 'Asia';  Write Sql for the following question: how many countries are in Europe? Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: how many countries are in Africa? Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: how many countries are in Oceania? Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: how many countries are in South America? Answer : SELECT COUNT(*) FROM country WHERE Continent = 'South America';  Write Sql for the following question: how many countries are in North America? Answer : SELECT COUNT(*) FROM country WHERE Continent = 'North America';  Write Sql for the following question: how many cities are in Asia? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia');  Write Sql for the following question: how many cities are in Europe? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe');  Write Sql for the following question: how many cities are in Africa? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa');  Write Sql for the following question: how many cities are in Oceania? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Oceania');  Write Sql for the following question: how many cities are in South America? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'South America');  Write Sql for the following question: how many cities are in North America? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'North America');  Write Sql for the following question: how many cities are in the United Kingdom? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Name = 'United Kingdom');  Write Sql for the following question: how many cities are in the United States of America? Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Name = '
 SELECT COUNT(*) FROM country WHERE Continent = 'Asia';  Write Sql for the following question: Count the number of countries in Europe. Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Europe';  Write Sql for the following question: Count the number of countries in Africa. Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Africa';  Write Sql for the following question: Count the number of countries in Oceania. Answer : SELECT COUNT(*) FROM country WHERE Continent = 'Oceania';  Write Sql for the following question: Count the number of countries in South America. Answer : SELECT COUNT(*) FROM country WHERE Continent = 'South America';  Write Sql for the following question: Count the number of countries in North America. Answer : SELECT COUNT(*) FROM country WHERE Continent = 'North America';  Write Sql for the following question: Count the number of cities in Asia. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia');  Write Sql for the following question: Count the number of cities in Europe. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe');  Write Sql for the following question: Count the number of cities in Africa. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa');  Write Sql for the following question: Count the number of cities in Oceania. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Oceania');  Write Sql for the following question: Count the number of cities in South America. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'South America');  Write Sql for the following question: Count the number of cities in North America. Answer : SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'North America');  Write Sql for the following question: Count the number of cities in each continent. Answer : SELECT Continent, COUNT(*) FROM city GROUP BY Continent;  Write Sql for the following question: Count the number of cities in each region. Answer : SELECT Region, COUNT(*) FROM city GROUP BY Region;  Write Sql for the following
 SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
 SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
 SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
 SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
 SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
 SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
 SELECT Language, COUNT(CountryCode) AS Count FROM countrylanguage GROUP BY Language ORDER BY Count DESC LIMIT 1;
 SELECT Language, COUNT(CountryCode) AS Count FROM countrylanguage GROUP BY Language ORDER BY Count DESC LIMIT 1;  Write Sql for the following question: Give the country with the highest population. Answer : SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 1;  Write Sql for the following question: Give the country with the lowest population. Answer : SELECT Name, Population FROM country ORDER BY Population ASC LIMIT 1;  Write Sql for the following question: Give the country with the highest life expectancy. Answer : SELECT Name, LifeExpectancy FROM country ORDER BY LifeExpectancy DESC LIMIT 1;  Write Sql for the following question: Give the country with the lowest life expectancy. Answer : SELECT Name, LifeExpectancy FROM country ORDER BY LifeExpectancy ASC LIMIT 1;  Write Sql for the following question: Give the country with the highest GNP. Answer : SELECT Name, GNP FROM country ORDER BY GNP DESC LIMIT 1;  Write Sql for the following question: Give the country with the lowest GNP. Answer : SELECT Name, GNP FROM country ORDER BY GNP ASC LIMIT 1;  Write Sql for the following question: Give the country with the highest GNP per capita. Answer : SELECT Name, GNP/Population AS GNP_per_capita FROM country ORDER BY GNP_per_capita DESC LIMIT 1;  Write Sql for the following question: Give the country with the lowest GNP per capita. Answer : SELECT Name, GNP/Population AS GNP_per_capita FROM country ORDER BY GNP_per_capita ASC LIMIT 1;  Write Sql for the following question: Give the country with the highest population density. Answer : SELECT Name, Population/SurfaceArea AS Population_density FROM country ORDER BY Population_density DESC LIMIT 1;  Write Sql for the following question: Give the country with the lowest population density. Answer : SELECT Name, Population/SurfaceArea AS Population_density FROM country ORDER BY Population_density ASC LIMIT 1;  Write Sql for the following question: Give the country with the highest number of cities. Answer : SELECT Name, COUNT(CountryCode) AS Number_of_cities FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY Number_of_cities DESC LIMIT
 SELECT country.Name AS Country, countrylanguage.Language, countrylanguage.Percentage FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode);
 SELECT country.Code, countrylanguage.Language, countrylanguage.Percentage FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode);
 SELECT COUNT(country.Code) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish');
 SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  Write Sql for the following question: Find the country that has all the vowels and no spaces in its name. Answer : SELECT name FROM country WHERE name LIKE '%a%' AND name LIKE '%e%' AND name LIKE '%i%' AND name LIKE '%o%' AND name LIKE '%u%' AND name NOT LIKE '% %';  
 SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish');
 SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' GROUP BY country.Code HAVING COUNT(countrylanguage.Language) = (SELECT MAX(COUNT(countrylanguage.Language)) FROM countrylanguage WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' GROUP BY countrylanguage.CountryCode);
 SELECT COUNT(*) FROM conductor;  Write Sql for the following question: What is the average age of conductors? Answer : SELECT AVG(Age) FROM conductor;  Write Sql for the following question: What is the average age of conductors who have conducted orchestras? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the year 1990? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded = 1990);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the year 1990 and 2000? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded = 1990 OR Year_of_Founded = 2000);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the year 1990 and 2000 and have a major record format of CD? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded = 1990 OR Year_of_Founded = 2000) AND Major_Record_Format = "CD";  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the year 1990 and 2000 and have a major record format of CD or MP3? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded = 1990 OR Year_of_Founded = 2000) AND Major_Record_Format = "CD" OR Major_Record_Format = "MP3";  Write Sql for the following question: What is the average age of conductors who
 SELECT COUNT(*) FROM conductor;  Write Sql for the following question: Count the number of orchestras. Answer : SELECT COUNT(*) FROM orchestra;  Write Sql for the following question: Count the number of performances. Answer : SELECT COUNT(*) FROM performance;  Write Sql for the following question: Count the number of shows. Answer : SELECT COUNT(*) FROM show;  Write Sql for the following question: Count the number of conductors who have conducted at least one orchestra. Answer : SELECT COUNT(*) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra);  Write Sql for the following question: Count the number of orchestras that have conducted at least one performance. Answer : SELECT COUNT(*) FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance);  Write Sql for the following question: Count the number of shows that have at least one performance. Answer : SELECT COUNT(*) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance);  Write Sql for the following question: Count the number of shows that have at least one performance with a result of "A". Answer : SELECT COUNT(*) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Result = "A");  Write Sql for the following question: Count the number of shows that have at least one performance with a result of "A" and an attendance of at least 100000. Answer : SELECT COUNT(*) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Result = "A" AND Attendance >= 100000);  Write Sql for the following question: Count the number of shows that have at least one performance with a result of "A" and an attendance of at least 100000, and that have at least one performance with a result of "B" and an attendance of at least 100000. Answer : SELECT COUNT(*) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Result = "A" AND Attendance >= 100000) AND Performance_ID IN (SELECT Performance_ID FROM performance WHERE Result = "B" AND Attendance >= 100000);  Write Sql for the following question: Count the number of shows
 SELECT Name FROM conductor ORDER BY Age ASC;  Write Sql for the following question: List the names of conductors in descending order of age. Answer : SELECT Name FROM conductor ORDER BY Age DESC;  Write Sql for the following question: List the names of conductors in ascending order of year of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work ASC;  Write Sql for the following question: List the names of conductors in descending order of year of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List the names of conductors in ascending order of year of work and then by age. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work ASC, Age ASC;  Write Sql for the following question: List the names of conductors in descending order of year of work and then by age. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Age DESC;  Write Sql for the following question: List the names of conductors in ascending order of year of work and then by age, but only show the conductors who have worked for more than 10 years. Answer : SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work ASC, Age ASC;  Write Sql for the following question: List the names of conductors in descending order of year of work and then by age, but only show the conductors who have worked for more than 10 years. Answer : SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC, Age DESC;  Write Sql for the following question: List the names of conductors in ascending order of year of work and then by age, but only show the conductors who have worked for more than 10 years and are 40 years old or younger. Answer : SELECT Name FROM conductor WHERE Year_of_Work > 10 AND Age <= 40 ORDER BY Year_of_Work ASC, Age ASC;  Write Sql for the following question: List the names of conductors in descending order of year of work and then by age, but only show the conductors who have worked for more than 10 years and are 40 years old or younger.
 SELECT Name FROM conductor ORDER BY Age;
 SELECT Name FROM conductor WHERE Nationality!= "USA";
 SELECT Name FROM conductor WHERE Nationality!= "USA";
 SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
 SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
 SELECT AVG(Attendance) FROM show;
 SELECT AVG(Attendance) FROM show;
 SELECT MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final";
 SELECT MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final";
 SELECT COUNT(DISTINCT Nationality) FROM conductor;  Write Sql for the following question: What is the average age of conductors? Answer : SELECT AVG(Age) FROM conductor;  Write Sql for the following question: What is the average age of conductors who have conducted orchestras? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Record_Company = 'USA');  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA and have a major record format? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Record_Company = 'USA' AND Major_Record_Format IS NOT NULL);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA and have a major record format? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Record_Company = 'USA' AND Major_Record_Format IS NOT NULL);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA and have a major record format? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Record_Company = 'USA' AND Major_Record_Format IS NOT NULL);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA and have a major record format? Answer : SELECT AVG(Age) FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Record_Company = 'USA' AND Major_Record_Format IS NOT NULL);  Write Sql for the following question: What is the average age of conductors who have conducted orchestras in the USA and have a major record format? Answer :
 SELECT COUNT(DISTINCT Nationality) FROM conductor;  Write Sql for the following question: Find the average age of conductors. Answer : SELECT AVG(Age) FROM conductor;  Write Sql for the following question: Find the average age of conductors who have conducted more than 10 orchestras. Answer : SELECT AVG(Age) FROM conductor WHERE Year_of_Work > 10;  Write Sql for the following question: Find the average age of conductors who have conducted more than 10 orchestras and have more than 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor ORDER BY Year_of_Work DESC;  Write Sql for the following question: List names of conductors in descending order of years of work. Answer : SELECT Name FROM conductor
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
 SELECT conductor.Name, conductor.Year_of_Work FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor);  Write Sql for the following question: List the name of the conductor with the most years of work and the number of years of work. Answer : SELECT conductor.Name, conductor.Year_of_Work FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor);  Write Sql for the following question: List the name of the conductor with the most years of work and the number of years of work, but only if the number of years of work is greater than 10. Answer : SELECT conductor.Name, conductor.Year_of_Work FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) AND conductor.Year_of_Work > 10;  Write Sql for the following question: List the name of the conductor with the most years of work and the number of years of work, but only if the number of years of work is greater than 10. Sort the result by the number of years of work in descending order. Answer : SELECT conductor.Name, conductor.Year_of_Work FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) AND conductor.Year_of_Work > 10 ORDER BY conductor.Year_of_Work DESC;  Write Sql for the following question: List the name of the conductor with the most years of work and the number of years of work, but only if the number of years of work is greater than 10. Sort the result by the number of years of work in descending order. Show only the first 3 rows. Answer : SELECT conductor.Name, conductor.Year_of_Work FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) AND conductor.Year_of_Work > 10 ORDER BY conductor.Year_of_Work DESC LIMIT 3;  Write Sql for the following question:
 SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID = (SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra);  Write Sql for the following question: What is the name of the orchestra that has the most number of shows? Answer : SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra
 SELECT conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID;
 SELECT conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID AND orchestra.Year_of_Founded > 2008;
 SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID AND orchestra.Year_of_Founded > 2008;
 SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
 SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;  Write Sql for the following question: What is the average attendance of the first show of each performance? Answer : SELECT Performance_ID, AVG(Attendance) FROM show WHERE If_first_show = 1 GROUP BY Performance_ID;  Write Sql for the following question: What is the average attendance of the first show of each performance, but only for orchestras that have more than 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;
 SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
 SELECT Record_Company, COUNT(*) AS "Number of Orchestras" FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Record_Company, COUNT(*) AS "Number of Orchestras" FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
 SELECT * FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
 SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
 SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
 SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
 SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';  Write Sql for the following question: Find the average attendance of the orchestras that have CD or DVD as their record format. Answer : SELECT AVG(Attendance) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'));  Write Sql for the following question: Find the average attendance of the orchestras that have CD or DVD as their record format and have a conductor who is 40 years old or older. Answer : SELECT AVG(Attendance) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD') AND Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Age >= 40));  Write Sql for the following question: Find the average attendance of the orchestras that have CD or DVD as their record format and have a conductor who is 40 years old or older and have a performance that is not a first show. Answer : SELECT AVG(Attendance) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD') AND Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Age >= 40) AND Performance_ID NOT IN (SELECT Performance_ID FROM performance WHERE If_first_show = 1));  Write Sql for the following question: Find the average attendance of the orchestras that have CD or DVD as their record format and have a conductor who is 40 years old or older and have a performance that is not a first show and has a result of 'A'. Answer : SELECT AVG(Attendance) FROM show WHERE Performance_ID IN (SELECT Performance_ID FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra WHERE Major_Record_Format
 SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Orchestra_ID) > 1);
 SELECT orchestra.Year_of_Founded FROM orchestra WHERE orchestra.Orchestra_ID IN (SELECT orchestra.Orchestra_ID FROM orchestra GROUP BY orchestra.Orchestra_ID HAVING COUNT(orchestra.Orchestra_ID) > 1);
 SELECT COUNT(*) FROM Highschooler;  Write Sql for the following question: How many friends does each high schooler have? Answer : SELECT ID, COUNT(*) FROM Friend GROUP BY ID;  Write Sql for the following question: How many high schoolers are in each grade? Answer : SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;  Write Sql for the following question: How many high schoolers have no friends? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: How many high schoolers have more than two friends? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 2);  Write Sql for the following question: How many high schoolers have more friends than their grade? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > grade);  Write Sql for the following question: How many high schoolers have the same number of friends as their grade? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) = grade);  Write Sql for the following question: How many high schoolers have the same number of friends as the number of high schoolers in their grade? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Highschooler WHERE Highschooler.grade = Highschooler.grade));  Write Sql for the following question: How many high schoolers have at least one friend in common with another high schooler? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 1);  Write Sql for the following question: How many high schoolers have no friends in common with another high schooler? Answer : SELECT COUNT(*) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 1);  Write Sql for the following question: How many high schoolers have exactly one friend in common with another high schooler? 
 SELECT COUNT(*) FROM Highschooler;  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are also high schoolers themselves. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND ID IN (SELECT ID FROM Highschooler);  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are high schoolers themselves. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND ID IN (SELECT ID FROM Highschooler);  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are high schoolers themselves, but are not friends with anyone else. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND ID IN (SELECT ID FROM Highschooler) AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are high schoolers themselves, but are not friends with anyone else, and have liked someone named Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND ID IN (SELECT ID FROM Highschooler) AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND ID IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT
 SELECT name, grade FROM Highschooler;  Write Sql for the following question: Show the names and grades of each high schooler, as well as the names and grades of their friends. Answer : SELECT h1.name, h1.grade, h2.name, h2.grade FROM Highschooler h1, Highschooler h2, Friend f WHERE h1.ID = f.student_id AND h2.ID = f.friend_id;  Write Sql for the following question: Show the names and grades of each high schooler, as well as the names and grades of their friends, and the names and grades of their friends' friends. Answer : SELECT h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade FROM Highschooler h1, Highschooler h2, Highschooler h3, Friend f1, Friend f2 WHERE h1.ID = f1.student_id AND h2.ID = f1.friend_id AND h3.ID = f2.friend_id AND f2.student_id = f1.friend_id;  Write Sql for the following question: Show the names and grades of each high schooler, as well as the names and grades of their friends, and the names and grades of their friends' friends, and so on. Answer : SELECT h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade, h4.name, h4.grade FROM Highschooler h1, Highschooler h2, Highschooler h3, Highschooler h4, Friend f1, Friend f2, Friend f3 WHERE h1.ID = f1.student_id AND h2.ID = f1.friend_id AND h3.ID = f2.friend_id AND h4.ID = f3.friend_id AND f3.student_id = f2.friend_id AND f2.student_id = f1.friend_id;  Write Sql for the following question: Show the names and grades of each high schooler, as well as the names and grades of their friends, and the names and grades of their friends' friends, and so on,
 SELECT name, grade FROM Highschooler;  Write Sql for the following question: Who is friends with Jordan? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = 1510);  Write Sql for the following question: Who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = 1709);  Write Sql for the following question: Who likes someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id = 1709));  Write Sql for the following question: Who likes someone who likes someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id = 1709)));  Write Sql for the following question: Who likes someone who likes someone who likes someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id = 1709))));  Write Sql for the following question: Who is friends with someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id = 1709));  Write Sql for the following question: Who is friends with someone who likes someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT liked_id FROM Likes WHERE student_id = 1709)));  Write Sql for the following question: Who is friends with someone who likes someone who likes someone who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE
 SELECT grade FROM Highschooler;  Write Sql for the following question: Show all the high schoolers with grades 9 and 10. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10;  Write Sql for the following question: Show all the high schoolers with grades 9 and 10, but not 11. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 AND grade!= 11;  Write Sql for the following question: Show all the high schoolers with grades 9, 10, and 11. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11;  Write Sql for the following question: Show all the high schoolers with grades 9, 10, and 11, but not 12. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11 AND grade!= 12;  Write Sql for the following question: Show all the high schoolers with grades 9, 10, and 11, but not 12 or 13. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11 AND grade!= 12 AND grade!= 13;  Write Sql for the following question: Show all the high schoolers with grades 9, 10, and 11, but not 12 or 13 or 14. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11 AND grade!= 12 AND grade!= 13 AND grade!= 14;  Write Sql for the following question: Show all the high schoolers with grades 9, 10, and 11, but not 12 or 13 or 14 or 15. Answer : SELECT * FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11 AND grade!= 12 AND grade!= 13 AND grade!= 14 AND grade!= 15;  Write Sql for the following question
 SELECT ID, name, grade FROM Highschooler;  Write Sql for the following question: Who is friends with Cassandra? Answer : SELECT * FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra');  Write Sql for the following question: Who likes Cassandra? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra');  Write Sql for the following question: Who likes everyone? Answer : SELECT * FROM Likes;  Write Sql for the following question: Who likes everyone who likes Cassandra? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra');  Write Sql for the following question: Who likes Cassandra, but not Jordan? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') AND student_id!= (SELECT ID FROM Highschooler WHERE name = 'Jordan');  Write Sql for the following question: Who likes Cassandra or Jordan? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') OR liked_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan');  Write Sql for the following question: Who likes Cassandra and Jordan? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') AND liked_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan');  Write Sql for the following question: Who likes Cassandra and Jordan, but not Tiffany? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') AND liked_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan') AND student_id!= (SELECT ID FROM Highschooler WHERE name = 'Tiffany');  Write Sql for the following question: Who likes Cassandra or Jordan, but not Tiffany? Answer : SELECT * FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') OR liked_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan')
 SELECT grade FROM Highschooler WHERE name = 'Kyle';  Write Sql for the following question: Who is friends with Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Who likes Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Who likes Cassandra and is friends with Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Who likes Cassandra and is friends with Cassandra and is in grade 10? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND grade = 10;  Write Sql for the following question: Who likes Cassandra and is friends with Cassandra and is in grade 10 and is not friends with Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND grade = 10 AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));
 SELECT grade FROM Highschooler WHERE name = 'Kyle';  Write Sql for the following question: Return the names of all high schoolers who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high schoolers who like Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high schoolers who are friends with Cassandra and are liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high schoolers who are not friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high schoolers who are not friends with Cassandra and are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high schoolers who are not friends with Cassandra or are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names
 SELECT name FROM Highschooler WHERE grade = 10;  Write Sql for the following question: Show the names of all high schoolers who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who like Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who are friends of friends of Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')));  Write Sql for the following question: Show the names of all high schoolers who are not friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who are not friends of friends of Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')));  Write Sql for the following question: Show the names of all high schoolers who are not friends with Cassandra and are not friends of friends of Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')));  Write Sql for the following question: Show the names of all high schoolers who are not friends with Cassandra or are not friends of friends of Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_
 SELECT name FROM Highschooler WHERE grade = 10;  Write Sql for the following question: What are the names of all high schoolers who are friends with Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who like Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who are friends with Cassandra and like Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who are friends with Cassandra or like Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who are friends with Cassandra and not like Cassandra? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who are not friends with Cassandra? Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: What are the names of all high schoolers who are not
 SELECT ID FROM Highschooler WHERE name = 'Kyle';  Write Sql for the following question: Show the names of all high schoolers who are friends with high schooler 1381. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = 1381);  Write Sql for the following question: Show the names of all high schoolers who are friends with high schooler 1381, and who are also high schoolers who high schooler 1381 likes. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = 1381) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = 1381);  Write Sql for the following question: Show the names of all high schoolers who are not friends with high schooler 1381. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = 1381);  Write Sql for the following question: Show the names of all high schoolers who are not friends with high schooler 1381, and who are also high schoolers who high schooler 1381 likes. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = 1381) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = 1381);  Write Sql for the following question: Show the names of all high schoolers who are high schoolers 1381 likes, but are not high schoolers 1381's friends. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = 1381) AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = 1381);  Write Sql for the following question: Show the names of all high schoolers who are high schoolers 1381's friends, but are not high schoolers 1381 likes. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = 1381) AND ID NOT
 SELECT ID FROM Highschooler WHERE name = 'Kyle';  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 1304;  Write Sql for the following question: What is the name of the student with id 1304? Answer : SELECT name FROM Highschooler WHERE ID = 
 SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;  Write Sql for the following question: How many high schoolers are in grades 9, 10, or 11? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10 OR grade = 11;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in 9? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10 OR grade = 11 AND grade <> 9;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in 9 or 12? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10 OR grade = 11 AND grade <> 9 AND grade <> 12;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in 9, 12, or 13? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10 OR grade = 11 AND grade <> 9 AND grade <> 12 AND grade <> 13;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in 9, 12, or 13, or 14? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10 OR grade = 11 AND grade <> 9 AND grade <> 12 AND grade <> 13 AND grade <> 14;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in 9, 12, or 13, or 14, or 15? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10 OR grade = 11 AND grade <> 9 AND grade <> 12 AND grade <> 13 AND grade <> 14 AND grade <> 15;  Write Sql for the following question: How many high schoolers are in grades 10 or 11, but not in
 SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are in grades 11 or 12. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND grade = 11 OR grade = 12;  Write Sql for the following question: Find the names of all high schoolers who are friends with someone named Gabriel and are not in grades 11 or 12. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND grade!= 11 AND grade!= 12;  Write Sql for the following question: Find the names of all high schoolers who are not friends with anyone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Find the names of all high schoolers who are not friends with anyone named Gabriel and are in grades 11 or 12. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND grade = 11 OR grade = 12;  Write Sql for the following question: Find the names of all high schoolers who are not friends with anyone named Gabriel and are not in grades 11 or 12. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AND grade
 SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;  Write Sql for the following question: Show the names of all high schoolers who are friends with someone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Show the names of all high schoolers who are either friends with Cassandra or are Cassandra's friends. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who are either friends with Cassandra or are Cassandra's friends, but not both. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who are not friends with anyone named Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all high schoolers who are not friends with anyone named Cassandra and are not friends with anyone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Show the names of all high schoolers who are not friends with anyone named Cassandra or Gabriel. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name =
 SELECT grade, count(*) FROM Highschooler GROUP BY grade;  Write Sql for the following question: How many friends does each high schooler have? Answer : SELECT ID, count(*) FROM Friend GROUP BY ID;  Write Sql for the following question: How many high schoolers are there? Answer : SELECT count(*) FROM Highschooler;  Write Sql for the following question: How many high schoolers are in each grade who have more than two friends? Answer : SELECT grade, count(*) FROM Highschooler, Friend WHERE ID = student_id GROUP BY grade HAVING count(*) > 2;  Write Sql for the following question: How many high schoolers are in each grade who have more than two friends and like at least one other high schooler? Answer : SELECT grade, count(*) FROM Highschooler, Friend, Likes WHERE ID = student_id AND liked_id = friend_id GROUP BY grade HAVING count(*) > 2;  Write Sql for the following question: How many high schoolers are in each grade who have more than two friends and like at least one other high schooler, but do not like themselves? Answer : SELECT grade, count(*) FROM Highschooler, Friend, Likes WHERE ID = student_id AND liked_id = friend_id AND liked_id!= ID GROUP BY grade HAVING count(*) > 2;  Write Sql for the following question: How many high schoolers are in each grade who have more than two friends and like at least one other high schooler, but do not like themselves, and are not in the same grade as the other high schooler they like? Answer : SELECT grade, count(*) FROM Highschooler, Friend, Likes WHERE ID = student_id AND liked_id = friend_id AND liked_id!= ID AND grade!= (SELECT grade FROM Highschooler WHERE ID = liked_id) GROUP BY grade HAVING count(*) > 2;
 SELECT grade, count(*) as num FROM Highschooler GROUP BY grade ORDER BY num DESC LIMIT 1;
 SELECT grade, count(*) as num FROM Highschooler GROUP BY grade ORDER BY num DESC LIMIT 1;
 SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(grade) >= 4;
 SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
 SELECT Highschooler.ID, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;  Write Sql for the following question: Show the student IDs and names of students who do not have friends. Answer : SELECT Highschooler.ID, Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;  Write Sql for the following question: Show the student IDs and names of students who have more than two friends. Answer : SELECT Highschooler.ID, Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) > 2;  Write Sql for the following question: Show the student IDs and names of students who have exactly two friends. Answer : SELECT Highschooler.ID, Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) = 2;  Write Sql for the following question: Show the student IDs and names of students who have no friends. Answer : SELECT Highschooler.ID, Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;  Write Sql for the following question: Show the student IDs and names of students who have exactly one friend. Answer : SELECT Highschooler.ID, Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) = 1;  Write Sql for the following question: Show the student IDs and names of students who have exactly one friend, and how many friends does each have? Answer : SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler
 SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;  Write Sql for the following question: How many friends does each student have? Answer : SELECT Highschooler.name, count(Friend.friend_id) as num_friends FROM Highschooler, Friend WHERE Highschooler.ID = Friend.
 SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: Show the names of high school students who are friends with more than two other students. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id) > 2;  Write Sql for the following question: Show the names of high school students who are not friends with anyone else. Answer : SELECT name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE friend_id IS NULL;  Write Sql for the following question: Show the names of high school students who are friends with everyone else. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id) = (SELECT COUNT(ID) FROM Highschooler);  Write Sql for the following question: Show the names of high school students who are friends with exactly one other student. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id) = 1;  Write Sql for the following question: Show the names of high school students who are not friends with everyone else. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id)!= (SELECT COUNT(ID) FROM Highschooler);  Write Sql for the following question: Show the names of high school students who are not friends with exactly one other student. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id)!= 1;  Write Sql for the following question: Show the names of high school students who are friends with more than one other student, but less than all the other students. Answer : SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name HAVING COUNT(friend_id) > 1 AND COUNT(friend_id) < (SELECT COUNT(ID) FROM
 SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer : SELECT name, COUNT(friend_id) AS num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name;  Write Sql for the following question: What are the names of the high schoolers and how many friends does each have? Answer :
 SELECT name FROM Highschooler WHERE ID = (SELECT ID FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend) GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: What is the name of the high schooler who likes the most number of other high schoolers? Answer : SELECT name FROM Highschooler WHERE ID = (SELECT ID FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes) GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: What is the average grade of the students who do not have any friends? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend);  Write Sql for the following question: What is the average grade of the students who do not like anyone? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID NOT IN (SELECT liked_id FROM Likes);  Write Sql for the following question: What is the average grade of the students who have at least one friend? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend);  Write Sql for the following question: What is the average grade of the students who like at least one other student? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes);  Write Sql for the following question: What is the average grade of the students who have exactly one friend? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) = 1);  Write Sql for the following question: What is the average grade of the students who like exactly one other student? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = 1);  Write Sql for the following question: What is the average grade of the students who have exactly two friends? Answer : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) = 2);  Write Sql for the following question: What is the average grade of the students who
 SELECT name FROM Highschooler WHERE ID = (SELECT ID FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend) GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have more than one friend. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra') GROUP BY friend_id HAVING COUNT(*) > 1);  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have more than one friend, but not Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra') GROUP BY friend_id HAVING COUNT(*) > 1) AND name!= 'Cassandra';  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have more than one friend, but not Cassandra, and are not friends with anyone else. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra') GROUP BY friend_id HAVING COUNT(*) > 1) AND name!= 'Cassandra' AND ID NOT IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have more than one friend, but not Cassandra, and are not friends with anyone else, and are not friends with anyone else. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Cassandra') GROUP BY friend_id HAVING COUNT(*) > 1) AND name!= 'Cassandra' AND
 SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 3);  Write Sql for the following question: Show the names of all high schoolers who are friends with someone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Show the names of all high schoolers who are not friends with anyone named Gabriel. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel'));  Write Sql for the following question: Show the names of all high schoolers who are friends with more than one other high schooler. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 1);  Write Sql for the following question: Show the names of all high schoolers who are not friends with anyone. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: Show the names of all high schoolers who have liked more than one other high schooler. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(student_id) > 1);  Write Sql for the following question: Show the names of all high schoolers who have no friends. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: Show the names of all high schoolers who have liked everyone they are friends with. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id IN (SELECT friend_id FROM Friend WHERE student_id = ID));  Write Sql for the following question: Show the names of all high schoolers who have no one they like. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT liked_id FROM Likes);  Write Sql for the following question:
 SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 3);
 SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'));  Write Sql for the following question: Show the names of all of the high schoolers who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all of the high schoolers who are friends with Cassandra and have high school numbers divisible by 3. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID % 3 = 0;  Write Sql for the following question: Show the names of all of the high schoolers who are friends with Cassandra and have high school numbers divisible by 3, but not 15. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID % 3 = 0 AND ID!= 15;  Write Sql for the following question: Show the names of all of the high schoolers who are friends with Cassandra and have high school numbers divisible by 3, but not 15, and are high schoolers who are liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID % 3 = 0 AND ID!= 15 AND ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show the names of all of the high schoolers who are friends with Cassandra and have high school numbers divisible by 3, but not 15, and are high schoolers who are liked by Cassandra, and are high schoolers who have high school numbers divisible by 5. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name
 SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have liked Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') INTERSECT SELECT liked_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have not liked Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') EXCEPT SELECT liked_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra or have liked Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') UNION SELECT liked_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra or have not liked Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra') UNION ALL SELECT liked_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all high school students who are friends with Cassandra and have liked Cassandra, but not the other
 SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');  Write Sql for the following question: How many friends does the high school student Jordan have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan');  Write Sql for the following question: How many friends does the high school student Cassandra have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra');  Write Sql for the following question: How many friends does the high school student Haley have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Haley');  Write Sql for the following question: How many friends does the high school student Gabriel have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Gabriel');  Write Sql for the following question: How many friends does the high school student Tiffany have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Tiffany');  Write Sql for the following question: How many friends does the high school student Andrew have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Andrew');  Write Sql for the following question: How many friends does the high school student Kris have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kris');  Write Sql for the following question: How many friends does the high school student Brittany have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Brittany');  Write Sql for the following question: How many friends does the high school student Alexis have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Alexis');  Write Sql for the following question: How many friends does the high school student Austin have? Answer : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Austin');  
 SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');  Write Sql for the following question: Find the names of all students who are liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find the names of all students who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find the names of all students who are friends with Cassandra and are liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find the names of all students who are not friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find the names of all students who are not friends with Cassandra and are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find the names of all students who are not friends with Cassandra or are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Find
 SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: Show ids of all students who have more than two friends. Answer : SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 2);  Write Sql for the following question: Show ids of all students who have exactly two friends. Answer : SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 2);  Write Sql for the following question: Show ids of all students who have exactly one friend. Answer : SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1);  Write Sql for the following question: Show ids of all students who have no friends. Answer : SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: Show ids of all students who have exactly one friend, and the friend's grade is higher than the student's. Answer : SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1) AND ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1) AND friend_id IN (SELECT ID FROM Highschooler WHERE grade > grade));  Write Sql for the following question: Show ids of all students who have exactly one friend, and the friend's grade is lower than the student's. Answer : SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1) AND ID IN (SELECT friend_id FROM Friend WHERE friend_id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1) AND friend_id IN (SELECT ID FROM Highschooler WHERE grade < grade));  Write Sql for the following question: Show ids of all students who have exactly one friend, and the friend likes the student. Answer :
 SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
 SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: Show names of all high school students who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show names of all high school students who are not friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Show names of all high school students who are friends with Cassandra and have more than one friend. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 1);  Write Sql for the following question: Show names of all high school students who are not friends with Cassandra and have more than one friend. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 1);  Write Sql for the following question: Show names of all high school students who are friends with Cassandra or have more than one friend. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 1);  Write Sql for the following question: Show names of all high school students who are not friends with Cassandra or have more than one friend. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(
 SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: What are the names of students who have more than two friends? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 2);  Write Sql for the following question: What are the names of students who have exactly two friends? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 2);  Write Sql for the following question: What are the names of students who have exactly one friend? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1);  Write Sql for the following question: What are the names of students who have no friends? Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: What are the names of students who have more than two friends? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 2);  Write Sql for the following question: What are the names of students who have exactly two friends? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 2);  Write Sql for the following question: What are the names of students who have exactly one friend? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) = 1);  Write Sql for the following question: What are the names of students who have no friends? Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);  Write Sql for the following question: What are the names of students who have more than two friends? Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) > 2);  Write
 SELECT DISTINCT Highschooler.ID FROM Highschooler, Friend, Likes WHERE Highschooler.ID = Friend.student_id AND Highschooler.ID = Likes.student_id;
 SELECT DISTINCT Highschooler.ID FROM Highschooler, Friend, Likes WHERE Highschooler.ID = Friend.student_id AND Highschooler.ID = Likes.student_id;
 SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT liked_id FROM Likes))  Write Sql for the following question: Show name of all students who have no friends but are liked by someone else. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes) AND ID NOT IN (SELECT student_id FROM Friend)  Write Sql for the following question: Show name of all students who have no friends and no one likes them. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT liked_id FROM Likes)  Write Sql for the following question: Show name of all students who have some friends but no one likes them. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT liked_id FROM Likes)  Write Sql for the following question: Show name of all students who have some friends and everyone likes them. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)  Write Sql for the following question: Show name of all students who have no friends but everyone likes them. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)  Write Sql for the following question: Show name of all students who have no friends and no one likes them. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT liked_id FROM Likes)
 SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT liked_id FROM Likes))
 SELECT Highschooler.ID, COUNT(Likes.liked_id) AS likes FROM Highschooler LEFT JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
 SELECT Highschooler.ID, COUNT(Likes.liked_id) AS likes FROM Highschooler LEFT JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
 SELECT name, COUNT(liked_id) AS likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY name;
 SELECT name, COUNT(liked_id) AS likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY name;
 SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
 SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(student_id) >= 2);
 SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) >= 2);
 SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 2);
 SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(student_id) >= 2);
 SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');  Write Sql for the following question: How many friends does Cassandra have? Answer : SELECT COUNT(*) FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra');  Write Sql for the following question: How many students are in grade 12? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 12;  Write Sql for the following question: How many students are in grade 11? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 11;  Write Sql for the following question: How many students are in grade 10? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 10;  Write Sql for the following question: How many students are in grade 9? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 9;  Write Sql for the following question: How many students are in grade 8? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 8;  Write Sql for the following question: How many students are in grade 7? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 7;  Write Sql for the following question: How many students are in grade 6? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 6;  Write Sql for the following question: How many students are in grade 5? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 5;  Write Sql for the following question: How many students are in grade 4? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 4;  Write Sql for the following question: How many students are in grade 3? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 3;  Write Sql for the following question: How many students are in grade 2? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 2;  Write Sql for the following question: How many students are in grade 1? Answer : SELECT COUNT(*) FROM Highschooler WHERE grade = 1;  Write Sql for the following question: How many students are in grade 12 and have more than 2 friends? Answer :
 SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');  Write Sql for the following question: Return the names of all the high schoolers who are friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all the high schoolers who like Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all the high schoolers who are friends with Cassandra and are liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all the high schoolers who are not friends with Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all the high schoolers who are not friends with Cassandra and are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) AND ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra'));  Write Sql for the following question: Return the names of all the high schoolers who are not friends with Cassandra or are not liked by Cassandra. Answer : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Cassandra')) OR ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler
 SELECT AVG(H.grade) FROM Highschooler H, Friend F WHERE H.ID = F.student_id;
 SELECT AVG(H.grade) FROM Highschooler H, Friend F WHERE H.ID = F.student_id;
 SELECT MIN(H.grade) FROM Highschooler H WHERE NOT EXISTS (SELECT * FROM Friend F WHERE H.ID = F.student_id);
 SELECT grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
 SELECT state FROM Owners UNION SELECT state FROM Professionals GROUP BY state HAVING COUNT(state) > 1;
 SELECT DISTINCT state FROM Owners UNION SELECT DISTINCT state FROM Professionals;  Write Sql for the following question: Find the names of all professionals who live in the state of California. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California';  Write Sql for the following question: Find the names of all professionals who live in the state of California and have a cell phone number. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California' AND cell_number IS NOT NULL;  Write Sql for the following question: Find the names of all professionals who live in the state of California and have a cell phone number, and also have a home phone number. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California' AND cell_number IS NOT NULL AND home_phone IS NOT NULL;  Write Sql for the following question: Find the names of all professionals who live in the state of California and have a cell phone number, and also have a home phone number, and also have an email address. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California' AND cell_number IS NOT NULL AND home_phone IS NOT NULL AND email_address IS NOT NULL;  Write Sql for the following question: Find the names of all professionals who live in the state of California and have a cell phone number, and also have a home phone number, and also have an email address, and also have a street address. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California' AND cell_number IS NOT NULL AND home_phone IS NOT NULL AND email_address IS NOT NULL AND street IS NOT NULL;  Write Sql for the following question: Find the names of all professionals who live in the state of California and have a cell phone number, and also have a home phone number, and also have an email address, and also have a street address, and also have a city. Answer : SELECT first_name, last_name FROM Professionals WHERE state = 'California' AND cell_number IS NOT NULL AND home_phone IS NOT NULL AND email_address IS NOT NULL AND street IS NOT NULL AND city IS NOT NULL;  Write Sql for the following question: Find the names of all
 SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: What is the average weight of the dogs who have gone through any treatments? Answer : SELECT AVG(weight) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: What is the average cost of the treatments? Answer : SELECT AVG(cost_of_treatment) FROM Treatments;  Write Sql for the following question: What is the average cost of the treatments for each type of treatment? Answer : SELECT treatment_type_code, AVG(cost_of_treatment) FROM Treatments GROUP BY treatment_type_code;  Write Sql for the following question: What is the average cost of the treatments for each type of treatment and each breed of dog? Answer : SELECT breed_code, treatment_type_code, AVG(cost_of_treatment) FROM Treatments GROUP BY breed_code, treatment_type_code;  Write Sql for the following question: What is the average cost of the treatments for each type of treatment and each breed of dog, and for each size of dog? Answer : SELECT breed_code, size_code, treatment_type_code, AVG(cost_of_treatment) FROM Treatments GROUP BY breed_code, size_code, treatment_type_code;  Write Sql for the following question: What is the average cost of the treatments for each type of treatment and each breed of dog, and for each size of dog, and for each charge type? Answer : SELECT breed_code, size_code, treatment_type_code, charge_type, AVG(cost_of_treatment) FROM Treatments GROUP BY breed_code, size_code, treatment_type_code, charge_type;  Write Sql for the following question: What is the average cost of the treatments for each type of treatment and each breed of dog, and for each size of dog, and for each charge type, and for each charge amount? Answer : SELECT breed_code, size_code, treatment_type_code, charge_type, charge_amount, AVG(cost_
 SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have been abandoned. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y';  Write Sql for the following question: Find the number of dogs that have been abandoned and have been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have been abandoned and have not been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have not been abandoned and have been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'N' AND dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have not been abandoned and have not been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'N' AND dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have been abandoned and have been treated and have a weight greater than 10 pounds. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id IN (SELECT dog_id FROM Treatments) AND weight > 10;  Write Sql for the following question: Find the number of dogs that have been abandoned and have been treated and have a weight greater than 10 pounds and have been treated by a professional with a role code of 'VET'. Answer : SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id IN (SELECT dog_id FROM Treatments) AND weight > 10 AND professional_id IN (SELECT professional_id FROM Professionals WHERE role_code = 'VET');  Write Sql for the following question: Find the number of dogs that have been abandoned
 SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);
 SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);
 SELECT Dogs.name FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment < 1000;
 SELECT name FROM Dogs WHERE owner_id NOT IN (SELECT owner_id FROM Treatments WHERE cost_of_treatment > 1000);
 SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs);
 SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners EXCEPT SELECT DISTINCT name FROM Dogs;
 SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);  Write Sql for the following question: Which dogs have not been adopted? List the dog's id, name and owner's first name. Answer : SELECT dog_id, name, first_name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL);  Write Sql for the following question: Which dogs have not been adopted and are of breed Eskimo? List the dog's id, name and owner's first name. Answer : SELECT dog_id, name, first_name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND breed_code = 'ESK';  Write Sql for the following question: Which dogs have not been adopted and are of breed Eskimo and are of size Medium? List the dog's id, name and owner's first name. Answer : SELECT dog_id, name, first_name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND breed_code = 'ESK' AND size_code = 'Medium';  Write Sql for the following question: Which dogs have not been adopted and are of breed Eskimo and are of size Medium and have been arrived on or after 2019-01-01? List the dog's id, name and owner's first name. Answer : SELECT dog_id, name, first_name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND breed_code = 'ESK' AND size_code = 'Medium' AND date_arrived >= '2019-01-01';  Write Sql for the following question: Which dogs have not been adopted and are of breed Eskimo and are of size Medium and have been arrived on or after 2019-01-01 and have been departed on or before 2019-01-01? List the dog's id, name and owner's
 SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);  Write Sql for the following question: Give me the id, name and email of the owners who have dogs that are not abandoned. Answer : SELECT owner_id, first_name, email_address FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N');  Write Sql for the following question: Give me the id, name and email of the owners who have dogs that are not abandoned and are not in the city of Los Angeles. Answer : SELECT owner_id, first_name, email_address FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND city!= 'Los Angeles');  Write Sql for the following question: Give me the id, name and email of the owners who have dogs that are not abandoned and are not in the city of Los Angeles and have a cell number. Answer : SELECT owner_id, first_name, email_address FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND city!= 'Los Angeles' AND cell_number IS NOT NULL);  Write Sql for the following question: Give me the id, name and email of the owners who have dogs that are not abandoned and are not in the city of Los Angeles and have a cell number and are not in the state of California. Answer : SELECT owner_id, first_name, email_address FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND city!= 'Los Angeles' AND cell_number IS NOT NULL AND state!= 'California');  Write Sql for the following question: Give me the id, name and email of the owners who have dogs that are not abandoned and are not in the city of Los Angeles and have a cell number and are not in the state of California and are not in the state of New York. Answer : SELECT owner_id, first_name, email_address FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND city!= 'Los
 SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which dog has the highest weight? List the dog id, name and weight. Answer : SELECT dog_id, name, weight FROM Dogs WHERE weight IN (SELECT MAX(weight) FROM Dogs);  Write Sql for the following question: Which dog has the highest weight and is of the breed Eskimo? List the dog id, name and weight. Answer : SELECT dog_id, name, weight FROM Dogs WHERE weight IN (SELECT MAX(weight) FROM Dogs WHERE breed_code = 'ESK');  Write Sql for the following question: Which dog has the highest weight and is of the breed Eskimo and is not abandoned? List the dog id, name and weight. Answer : SELECT dog_id, name, weight FROM Dogs WHERE weight IN (SELECT MAX(weight) FROM Dogs WHERE breed_code = 'ESK' AND abandoned_yn = 'N');  Write Sql for the following question: Which dog has the highest weight and is of the breed Eskimo and is not abandoned and is not a male? List the dog id, name and weight. Answer : SELECT dog_id, name, weight FROM Dogs WHERE weight IN (SELECT MAX(weight) FROM Dogs WHERE breed_code = 'ESK' AND abandoned_yn = 'N' AND gender = 'F');  Write Sql for the following question: Which dog has the highest weight and is of the breed Eskimo and is not abandoned and is not a male and is not a female? List the dog id, name and weight. Answer : SELECT dog_id, name, weight FROM Dogs WHERE weight IN (SELECT MAX(weight) FROM Dogs WHERE breed_code = 'ESK' AND abandoned_yn = 'N' AND gender = 'F' AND gender = 'M');  Write Sql for the following question: Which dog has the highest weight and is of the breed Eskimo and is not abandoned and is not a male and is not a female and is not a male? List the dog id, name and weight. Answer : SELECT dog_id, name
 SELECT `SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);`  Write Sql for the following question: Return the dog id, name, age, date of birth, gender, weight, date arrived, date adopted, date departed, and the name of the owner for all dogs that have been adopted. Answer : `SELECT Dogs.dog_id, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Owners.first_name, Owners.last_name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.date_adopted IS NOT NULL;`  Write Sql for the following question: Return the dog id, name, age, date of birth, gender, weight, date arrived, date adopted, date departed, and the name of the owner for all dogs that have been adopted and are female. Answer : `SELECT Dogs.dog_id, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Owners.first_name, Owners.last_name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.date_adopted IS NOT NULL AND Dogs.gender = 'F';`  Write Sql for the following question: Return the dog id, name, age, date of birth, gender, weight, date arrived, date adopted, date departed, and the name of the owner for all dogs that have been adopted and are female and are between 10 and 15 years old. Answer : `SELECT Dogs.dog_id, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.
 SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
 SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
 SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: What is the average weight of dogs that are not abandoned? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15;  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND weight > 100;  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND weight > 100;  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer : SELECT AVG(weight) FROM Dog
 SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql for the following question: Which breed has the most dogs? Give me the breed name. Answer : SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);  Write Sql
 SELECT o.owner_id, o.last_name FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
 SELECT owner_id, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) ORDER BY SUM(cost_of_treatment) DESC LIMIT 1;
 SELECT Treatment_Types.treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
 SELECT Treatment_Types.treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
 SELECT owner_id, zip_code FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM treatments)));  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(dog_id) DESC LIMIT 1);  Write Sql for the following question: Which dog has been adopted the most times? Show the dog id and name. Answer : SELECT dog_id, name FROM dogs WHERE
 SELECT owner_id, zip_code FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(SUM(cost_of_treatment)) FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id);  Write Sql for the following question: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. Answer : SELECT owner_id, zip_code FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(SUM(cost_of_treatment)) FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id);  Write Sql for the following question: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. Answer : SELECT owner_id, zip_code FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(SUM(cost_of_treatment)) FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id);  Write Sql for the following question: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. Answer : SELECT owner_id, zip_code FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)) GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(SUM(cost_of_treatment)) FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE dog_id IN (SELECT dog_id FROM treat
 SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2);
 SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) >= 2);
 SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
 SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
 SELECT `SELECT date_of_treatment, first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id`
 SELECT date_of_treatment, first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
 SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;  Write Sql for the following question: List the names of all dogs that have been adopted. Answer : SELECT Dogs.name FROM Dogs WHERE Dogs.date_adopted IS NOT NULL;  Write Sql for the following question: List the names of all dogs that have been adopted and are of the breed Eskimo. Answer : SELECT Dogs.name FROM Dogs WHERE Dogs.date_adopted IS NOT NULL AND Dogs.breed_code = 'ESK';  Write Sql for the following question: List the names of all dogs that have been adopted and are of the breed Eskimo and are between 10 and 15 years old. Answer : SELECT Dogs.name FROM Dogs WHERE Dogs.date_adopted IS NOT NULL AND Dogs.breed_code = 'ESK' AND Dogs.age BETWEEN 10 AND 15;  Write Sql for the following question: List the names of all dogs that have been adopted and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 10 pounds. Answer : SELECT Dogs.name FROM Dogs WHERE Dogs.date_adopted IS NOT NULL AND Dogs.breed_code = 'ESK' AND Dogs.age BETWEEN 10 AND 15 AND Dogs.weight > 10;  Write Sql for the following question: List the names of all dogs that have been adopted and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 10 pounds and are not abandoned. Answer : SELECT Dogs.name FROM Dogs WHERE Dogs.date_adopted IS NOT NULL AND Dogs.breed_code = 'ESK' AND Dogs.age BETWEEN 10 AND 15 AND Dogs.weight > 10 AND Dogs.abandoned_yn = 'N';  Write Sql
 SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
 SELECT o.first_name, o.last_name, d.size_code FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name, b.breed_name, s.size_description FROM Dogs d INNER JOIN Breeds b ON d.breed_code = b.breed_code INNER JOIN Sizes s ON d.size_code = s.size_code;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name, b.breed_name, s.size_description FROM Dogs d INNER JOIN Breeds b ON d.breed_code = b.breed_code INNER JOIN Sizes s ON d.size_code = s.size_code;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name, b.breed_name, s.size_description FROM Dogs d INNER JOIN Breeds b ON d.breed_code = b.breed_code INNER JOIN Sizes s ON d.size_code = s.size_code;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name, b.breed_name, s.size_description FROM Dogs d INNER JOIN Breeds b ON d.breed_code = b.breed_code INNER JOIN Sizes s ON d.size_code = s.size_code;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name, b.breed_name, s.size_description FROM Dogs d INNER JOIN Breeds b ON d.breed_code = b.breed_code INNER JOIN Sizes s ON d.size_code = s.size_code;  Write Sql for the following question: List each dog's name, breed, and size. Answer : SELECT d.name,
 SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id;  Write Sql for the following question: What are each owner's first name, last name, and the size of their dog? Answer : SELECT O.first_name, O.last_name, D.size_code FROM Owners O
 SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: List the names of the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: List the names of the dogs that are not abandoned and are of the breed Eskimo. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: List the names of the dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15;  Write Sql for the following question: List the names of the dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have been adopted. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND date_adopted IS NOT NULL;  Write Sql for the following question: List the names of the dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have been adopted and have been adopted in the last 30 days. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND date_adopted IS NOT NULL AND date_adopted > date('now','-30 days');  Write Sql for the following question: List the names of the dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have been adopted and have been adopted in the last 30 days and have a weight greater than 10 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = '
 SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer : SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id;  Write Sql for the following question: What are each owner's first name and their dogs's name? Answer
 SELECT `SELECT name, date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(breed_name) ASC LIMIT 1);`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn = 'Y';`  Write Sql for the following question: List the names of the dogs that have been abandoned and the date they were abandoned. Answer : `SELECT name, date_departed FROM Dogs WHERE abandoned_yn
 SELECT D.name, T.date_of_treatment FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id AND D.breed_code = (SELECT B.breed_code FROM Breeds B WHERE B.breed_name = (SELECT B.breed_name FROM Breeds B, (SELECT D.breed_code, COUNT(D.dog_id) AS count FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id GROUP BY D.breed_code ORDER BY count ASC LIMIT 1) AS RarestBreed WHERE B.breed_code = RarestBreed.breed_code));  Write Sql for the following question: Which dogs are of the most recent breed? Show their names and treatment dates. Answer : SELECT D.name, T.date_of_treatment FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id AND D.breed_code = (SELECT B.breed_code FROM Breeds B WHERE B.breed_name = (SELECT B.breed_name FROM Breeds B, (SELECT D.breed_code, MAX(T.date_of_treatment) AS max_date FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id GROUP BY D.breed_code) AS MostRecentBreed WHERE B.breed_code = MostRecentBreed.breed_code));  Write Sql for the following question: Which dogs are of the oldest breed? Show their names and treatment dates. Answer : SELECT D.name, T.date_of_treatment FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id AND D.breed_code = (SELECT B.breed_code FROM Breeds B WHERE B.breed_name = (SELECT B.breed_name FROM Breeds B, (SELECT D.breed_code, MIN(T.date_of_treatment) AS min_date FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id GROUP BY D.breed_code) AS OldestBreed WHERE B.breed_code
 SELECT o.first_name, d.name FROM Owners o, Dogs d WHERE o.state = 'Virginia' AND o.owner_id = d.owner_id;
 SELECT `SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia';`  Write Sql for the following question: Find the names of dogs that are not abandoned and are between 10 and 15 years old. Answer : `SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15;`  Write Sql for the following question: Find the names of dogs that are not abandoned and are between 10 and 15 years old and are of breed Eskimo. Answer : `SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK';`  Write Sql for the following question: Find the names of dogs that are not abandoned and are between 10 and 15 years old and are of breed Eskimo and are not in the treatment table. Answer : `SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK' AND dog_id NOT IN (SELECT dog_id FROM Treatments);`  Write Sql for the following question: Find the names of dogs that are not abandoned and are between 10 and 15 years old and are of breed Eskimo and are not in the treatment table and have a weight greater than 10 pounds. Answer : `SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK' AND dog_id NOT IN (SELECT dog_id FROM Treatments) AND weight > 10;`  Write Sql for the following question: Find the names of dogs that are not abandoned and are between 10 and 15 years old and are of breed Eskimo and are not in the treatment table and have a weight greater than 10 pounds and are not in the treatment table. Answer : `SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK' AND dog_
 SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
 SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
 SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs));  Write Sql for the following question: List the last name of the owner owning the oldest dog. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs));  Write Sql for the following question: List the last name of the owner owning the oldest dog that is not abandoned. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs) AND abandoned_yn = 'N');  Write Sql for the following question: List the last name of the owner owning the youngest dog that is not abandoned. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs) AND abandoned_yn = 'N');  Write Sql for the following question: List the last name of the owner owning the oldest dog that is not abandoned and is a male. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs) AND abandoned_yn = 'N' AND gender = 'M');  Write Sql for the following question: List the last name of the owner owning the youngest dog that is not abandoned and is a male. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs) AND abandoned_yn = 'N' AND gender = 'M');  Write Sql for the following question: List the last name of the owner owning the oldest dog that is not abandoned and is a female. Answer : SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs) AND abandoned_yn = 'N' AND gender = 'F');  Write Sql for the following question: List the last name of the owner owning the youngest dog that is not aband
 SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs));  Write Sql for the following question: What is the average weight of all dogs? Answer : SELECT AVG(weight) FROM Dogs;  Write Sql for the following question: How many dogs are there in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: What is the average weight of dogs that are not abandoned? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo or Husky? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo or Husky or Bulldog? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' OR breed_code = 'BUL';  Write Sql for the following question: What is the average weight of dogs that are not abandoned and are of the breed Eskimo or Husky or Bulldog or any other breed? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' OR breed_code = 'BUL' OR breed_code <> 'ESK' AND breed_code <> 'HUS' AND breed_code <> 'BUL';  Write Sql for the following question: What is the average weight of dogs
 SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';  Write Sql for the following question: List the names of the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: List the names of the dogs that are not abandoned and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15;  Write Sql for the following question: List the names of the dogs that are not abandoned and are between 10 and 15 years old and are female. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F';  Write Sql for the following question: List the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight BETWEEN 10 AND 15;  Write Sql for the following question: List the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds and are between 10 and 15 kg. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight BETWEEN 10 AND 15 AND weight BETWEEN 10 AND 15;  Write Sql for the following question: List the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds and are between 10 and 15 kg and are between 10 and 15 lbs. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F
 SELECT professional_id, email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
 SELECT date_arrived, date_departed FROM Dogs;
 SELECT date_arrived, date_departed FROM Dogs;  Write Sql for the following question: List the names of all the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are of breed Eskimo. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are of breed Eskimo or Husky. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15;  Write Sql for the following question: List the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old and are not male. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15 AND gender <> 'M';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old and are not male and are not between 12 and 14 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15 AND gender <> 'M' AND age NOT BETWEEN 12 AND 14;
 SELECT COUNT(DISTINCT dog_id) FROM Treatments;  Write Sql for the following question: How many dogs went through any treatments in the month of January? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE date_of_treatment BETWEEN '2021-01-01' AND '2021-01-31';  Write Sql for the following question: How many dogs went through any treatments in the month of January and have a cost greater than $100? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE date_of_treatment BETWEEN '2021-01-01' AND '2021-01-31' AND cost_of_treatment > 100;  Write Sql for the following question: How many dogs went through any treatments in the month of January and have a cost greater than $100 and are of breed Eskimo? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE date_of_treatment BETWEEN '2021-01-01' AND '2021-01-31' AND cost_of_treatment > 100 AND breed_code = 'ESK';  Write Sql for the following question: How many dogs went through any treatments in the month of January and have a cost greater than $100 and are of breed Eskimo and are of size Medium? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE date_of_treatment BETWEEN '2021-01-01' AND '2021-01-31' AND cost_of_treatment > 100 AND breed_code = 'ESK' AND size_code = 'MED';  Write Sql for the following question: How many dogs went through any treatments in the month of January and have a cost greater than $100 and are of breed Eskimo and are of size Medium and are of gender Male? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE date_of_treatment BETWEEN '2021-01-01' AND
 SELECT COUNT(DISTINCT dog_id) FROM Treatments;  Write Sql for the following question: Find the names of the dogs that went through a treatment. Answer : SELECT name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;  Write Sql for the following question: Find the names of the dogs that went through a treatment and the name of the treatment type. Answer : SELECT name, treatment_type_description FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;  Write Sql for the following question: Find the names of the dogs that went through a treatment and the name of the treatment type and the name of the professional who performed the treatment. Answer : SELECT name, treatment_type_description, first_name, last_name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;  Write Sql for the following question: Find the names of the dogs that went through a treatment and the name of the treatment type and the name of the professional who performed the treatment and the name of the breed of the dog. Answer : SELECT name, treatment_type_description, first_name, last_name, breed_name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: Find the names of the dogs that went through a treatment and the name of the treatment type and the name of the professional who performed the treatment and the name of the breed of the dog and the name of the size of the dog. 
 SELECT COUNT(professional_id) FROM Treatments;  Write Sql for the following question: How many dogs have been treated by at least one professional? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments;  Write Sql for the following question: How many dogs have been treated by at least two professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 2;  Write Sql for the following question: How many dogs have been treated by at least three professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 3;  Write Sql for the following question: How many dogs have been treated by at least four professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 4;  Write Sql for the following question: How many dogs have been treated by at least five professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 5;  Write Sql for the following question: How many dogs have been treated by at least six professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 6;  Write Sql for the following question: How many dogs have been treated by at least seven professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 7;  Write Sql for the following question: How many dogs have been treated by at least eight professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments GROUP BY dog_id HAVING COUNT(DISTINCT professional_id) >= 8;  Write Sql for the following question: How many dogs have been treated by at least nine professionals? Answer : SELECT COUNT(DISTINCT dog_id) FROM Treat
 SELECT COUNT(DISTINCT professional_id) FROM Treatments;  Write Sql for the following question: Find the number of dogs that have been treated by at least one professional. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments;  Write Sql for the following question: Find the number of dogs that have been treated by at least two professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 2);  Write Sql for the following question: Find the number of dogs that have been treated by at least three professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 3);  Write Sql for the following question: Find the number of dogs that have been treated by at least four professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 4);  Write Sql for the following question: Find the number of dogs that have been treated by at least five professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 5);  Write Sql for the following question: Find the number of dogs that have been treated by at least six professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 6);  Write Sql for the following question: Find the number of dogs that have been treated by at least seven professionals. Answer : SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 7);
 SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';  Write Sql for the following question: Which dogs have been abandoned? List the dog's name, age, date of birth, gender, weight, date arrived, date adopted and date departed. Answer : SELECT name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed FROM Dogs WHERE abandoned_yn = 'Y';  Write Sql for the following question: Which dogs have been abandoned and are between 10 and 15 years old? List the dog's name, age, date of birth, gender, weight, date arrived, date adopted and date departed. Answer : SELECT name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed FROM Dogs WHERE abandoned_yn = 'Y' AND age BETWEEN 10 AND 15;  Write Sql for the following question: Which dogs have been abandoned and are between 10 and 15 years old and are female? List the dog's name, age, date of birth, gender, weight, date arrived, date adopted and date departed. Answer : SELECT name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed FROM Dogs WHERE abandoned_yn = 'Y' AND age BETWEEN 10 AND 15 AND gender = 'F';  Write Sql for the following question: Which dogs have been abandoned and are between 10 and 15 years old and are female and have a weight greater than 10 pounds? List the dog's name, age, date of birth, gender, weight, date arrived, date adopted and date departed. Answer : SELECT name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed FROM Dogs WHERE abandoned_yn = 'Y' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight > 10;  Write Sql for the following question: Which dogs have been abandoned and are between 10 and 15 years
 SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';  Write Sql for the following question: Find the names of the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15;  Write Sql for the following question: Find the names of the dogs that are not abandoned and are between 10 and 15 years old and are female. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and have a weight greater than 10 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight > 10;  Write Sql for the following question: Find the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and have a weight greater than 10 pounds and are not female. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight > 10 AND gender!= 'F';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are between 10 and 15 years old and are female and have a weight greater than 10 pounds and are not female and are not between 12 and 14 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight > 10 AND gender!= 'F' AND age NOT BETWEEN 12 AND 14;  Write Sql for the following question: Find
 SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Which owners live in the state whose name contains
 SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';  Write Sql for the following question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North' and whose email address contains the substring 'example'. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address LIKE '%example%';  Write Sql for the following question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North' and whose email address contains the substring 'example' and whose home phone number contains the substring '1'. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address LIKE '%example%' AND home_phone LIKE '%1%';  Write Sql for the following question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North' and whose email address contains the substring 'example' and whose home phone number contains the substring '1' and whose cell phone number contains the substring '2'. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address LIKE '%example%' AND home_phone LIKE '%1%' AND cell_number LIKE '%2%';  Write Sql for the following question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North' and whose email address contains the substring 'example' and whose home phone number contains the substring '1' and whose cell phone number contains the substring '2' and whose street contains the substring'street'. Answer : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address LIKE '%example%' AND home_phone LIKE '%1%' AND cell_number LIKE '%2%' AND street LIKE '%street%';  Write Sql for the following question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North' and whose email address contains the substring 'example' and whose home phone number contains the substring '1' and whose cell phone number contains the substring '2' and whose street contains the substring'street' and whose
 SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);  Write Sql for the following question: How many dogs have an age above the average? Answer : SELECT COUNT(*) FROM Dogs WHERE age > (SELECT AVG(age) FROM Dogs);  Write Sql for the following question: How many dogs have an age equal to the average? Answer : SELECT COUNT(*) FROM Dogs WHERE age = (SELECT AVG(age) FROM Dogs);  Write Sql for the following question: How many dogs have an age below the average and are of the breed Eskimo? Answer : SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) AND breed_code = 'ESK';  Write Sql for the following question: How many dogs have an age above the average and are of the breed Eskimo? Answer : SELECT COUNT(*) FROM Dogs WHERE age > (SELECT AVG(age) FROM Dogs) AND breed_code = 'ESK';  Write Sql for the following question: How many dogs have an age equal to the average and are of the breed Eskimo? Answer : SELECT COUNT(*) FROM Dogs WHERE age = (SELECT AVG(age) FROM Dogs) AND breed_code = 'ESK';  Write Sql for the following question: How many dogs have an age below the average and are of the breed Husky? Answer : SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) AND breed_code = 'HUS';  Write Sql for the following question: How many dogs have an age above the average and are of the breed Husky? Answer : SELECT COUNT(*) FROM Dogs WHERE age > (SELECT AVG(age) FROM Dogs) AND breed_code = 'HUS';  Write Sql for the following question: How many dogs have an age equal to the average and are of the breed Husky? Answer : SELECT COUNT(*) FROM Dogs WHERE age = (SELECT AVG(age) FROM Dogs) AND breed_code = 'HUS';  Write Sql for the following question: How many dogs have an age below the average and are of the breed Bulldog? Answer
 SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);  Write Sql for the following question: Find the names of the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age < 10;  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10 and are of breed Eskimo. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age < 10 AND breed_code = 'ESK';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10 and are of breed Eskimo and are of size Medium. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age < 10 AND breed_code = 'ESK' AND size_code = 'MED';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10 and are of breed Eskimo and are of size Medium and are not of gender Male. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age < 10 AND breed_code = 'ESK' AND size_code = 'MED' AND gender = 'F';  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10 and are of breed Eskimo and are of size Medium and are not of gender Male and are not of weight below 10 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age < 10 AND breed_code = 'ESK' AND size_code = 'MED' AND gender = 'F' AND weight > 10;  Write Sql for the following question: Find the names of the dogs that are not abandoned and are of age below 10 and are
 SELECT cost_of_treatment FROM Treatments ORDER BY treatment_id DESC LIMIT 1;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in
 SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;  Write Sql for the following question: Show me the cost of the most recently performed treatment for each dog. Answer : SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;  Write Sql for the following question: Show me the cost of the most recently performed treatment for each dog, along with the dog's name. Answer : SELECT cost_of_treatment, name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id ORDER BY date_of_treatment DESC LIMIT 1;  Write Sql for the following question: Show me the cost of the most recently performed treatment for each dog, along with the dog's name and the name of the professional who performed the treatment. Answer : SELECT cost_of_treatment, name, first_name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY date_of_treatment DESC LIMIT 1;  Write Sql for the following question: Show me the cost of the most recently performed treatment for each dog, along with the dog's name and the name of the professional who performed the treatment, and the name of the breed of the dog. Answer : SELECT cost_of_treatment, name, first_name, breed_name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code ORDER BY date_of_treatment DESC LIMIT 1;  Write Sql for the following question: Show me the cost of the most recently performed treatment for each dog, along with the dog's name and the name of the professional who performed the treatment, and the name of the breed of the dog, and the name of the size of the dog. Answer : SELECT cost_of_treatment, name, first_name, breed_name, size_description FROM Treatments JOIN Dogs ON Treatments.
 SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: How many dogs have gone through at least one treatment? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: How many dogs have gone through at least one treatment and are not abandoned? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N';  Write Sql for the following question: How many dogs have gone through at least one treatment and are abandoned? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'Y';  Write Sql for the following question: How many dogs have gone through at least one treatment and are not abandoned and are female? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND gender = 'F';  Write Sql for the following question: How many dogs have gone through at least one treatment and are not abandoned and are male? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND gender = 'M';  Write Sql for the following question: How many dogs have gone through at least one treatment and are not abandoned and are female and are between 10 and 15 years old? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND gender = 'F' AND age BETWEEN 10 AND 15;  Write Sql for the following question: How many dogs have gone through at least one treatment and are not abandoned and are female and are between 10 and 15 years old and are between 10 and 15 pounds? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND gender = 'F' AND age BETWEEN 10 AND 
 SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: List the names of the dogs that have not received any treatment. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: List the names of the dogs that have not received any treatment and are not abandoned. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N';  Write Sql for the following question: List the names of the dogs that have not received any treatment and are not abandoned and are of breed code HUS. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND breed_code = 'HUS';  Write Sql for the following question: List the names of the dogs that have not received any treatment and are not abandoned and are of breed code HUS and are of size code MED. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'MED';  Write Sql for the following question: List the names of the dogs that have not received any treatment and are not abandoned and are of breed code HUS and are of size code MED and are of age 10. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'MED' AND age = '10';  Write Sql for the following question: List the names of the dogs that have not received any treatment and are not abandoned and are of breed code HUS and are of size code MED and are of age 10 and are of gender F. Answer : SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = '
 SELECT COUNT(*) FROM Owners WHERE dog_id IS NULL;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the system? Answer : SELECT COUNT
 SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that are not in the system
 SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs and were not adopted? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N';  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs and were not adopted and were not departed? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND date_departed IS NULL;  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs and were not adopted and were not departed and were not arrived? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND date_departed IS NULL AND date_arrived IS NULL;  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs and were not adopted and were not departed and were not arrived and were not adoped? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn = 'N' AND date_departed IS NULL AND date_arrived IS NULL AND date_adopted IS NULL;  Write Sql for the following question: How many dogs were treated by professionals who did not operate any treatment on dogs and were not adopted and were not departed and were not arrived and were not adoped and were not abandoned? Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) AND abandoned_yn =
 SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have not been adopted. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL);  Write Sql for the following question: Find the number of dogs that have been adopted. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL);  Write Sql for the following question: Find the number of dogs that have been adopted and have been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have been adopted and have not been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have not been adopted and have been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND dog_id IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have not been adopted and have not been treated. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND dog_id NOT IN (SELECT dog_id FROM Treatments);  Write Sql for the following question: Find the number of dogs that have been adopted and have been treated by a professional who has a role of 'Veterinarian'. Answer : SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE date_adopted IS NOT NULL) AND dog_id IN (SELECT dog_id FROM Treatments)
 SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the
 SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were not abandoned? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 0;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND weight > 10;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10 and less than 20? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND weight > 10 AND weight < 20;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10 or less than 20? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND (weight > 10 OR weight < 20);  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10 or less than 20 and have an age greater than 10? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND (weight > 10 OR weight < 20) AND age > 10;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10 or less than 20 and have an age greater than 10 and less than 20? Answer : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND (weight > 10 OR weight < 20) AND age > 10 AND age < 20;  Write Sql for the following question: What are the dog name, age and weight of the dogs that were abandoned and have a weight greater than 10
 SELECT AVG(age) FROM Dogs;  Write Sql for the following question: What is the average weight of all the dogs? Answer : SELECT AVG(weight) FROM Dogs;  Write Sql for the following question: What is the average cost of all the treatments? Answer : SELECT AVG(cost_of_treatment) FROM Treatments;  Write Sql for the following question: What is the average cost of all the treatments for each dog? Answer : SELECT dog_id, AVG(cost_of_treatment) FROM Treatments GROUP BY dog_id;  Write Sql for the following question: What is the average cost of all the treatments for each dog, excluding dogs with no treatments? Answer : SELECT dog_id, AVG(cost_of_treatment) FROM Treatments GROUP BY dog_id HAVING AVG(cost_of_treatment) IS NOT NULL;  Write Sql for the following question: What is the average cost of all the treatments for each dog, excluding dogs with no treatments, and only including dogs with an average cost greater than $100? Answer : SELECT dog_id, AVG(cost_of_treatment) FROM Treatments GROUP BY dog_id HAVING AVG(cost_of_treatment) IS NOT NULL AND AVG(cost_of_treatment) > 100;  Write Sql for the following question: What is the average cost of all the treatments for each dog, excluding dogs with no treatments, and only including dogs with an average cost greater than $100, and only including dogs with an average cost less than $1000? Answer : SELECT dog_id, AVG(cost_of_treatment) FROM Treatments GROUP BY dog_id HAVING AVG(cost_of_treatment) IS NOT NULL AND AVG(cost_of_treatment) > 100 AND AVG(cost_of_treatment) < 1000;  Write Sql for the following question: What is the average cost of all the treatments for each dog, excluding dogs with no treatments, and only including dogs with an average cost greater than $100, and only including dogs with an average cost
 SELECT AVG(age) FROM Dogs;  Write Sql for the following question: Find the names of all the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: Find the names of all the dogs that are not abandoned and are of breed Eskimo. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: Find the names of all the dogs that are not abandoned and are of breed Eskimo or Husky. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS';  Write Sql for the following question: Find the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15;  Write Sql for the following question: Find the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old and have a weight greater than 10 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15 AND weight > 10;  Write Sql for the following question: Find the names of all the dogs that are not abandoned and are of breed Eskimo or Husky and are between 10 and 15 years old and have a weight greater than 10 pounds and are not male. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' OR breed_code = 'HUS' AND age BETWEEN 10 AND 15 AND weight > 10 AND gender = 'F';  
 SELECT MAX(age) FROM Dogs;  Write Sql for the following question: What is the average weight of all dogs? Answer : SELECT AVG(weight) FROM Dogs;  Write Sql for the following question: What is the average weight of all dogs that are not abandoned? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: What is the average weight of all dogs that are not abandoned and are of the breed Eskimo? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK';  Write Sql for the following question: What is the average weight of all dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15;  Write Sql for the following question: What is the average weight of all dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND weight > 100;  Write Sql for the following question: What is the average weight of all dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer : SELECT AVG(weight) FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'ESK' AND age BETWEEN 10 AND 15 AND weight > 100;  Write Sql for the following question: What is the average weight of all dogs that are not abandoned and are of the breed Eskimo and are between 10 and 15 years old and have a weight greater than 100 pounds? Answer :
 SELECT MAX(age) FROM Dogs;  Write Sql for the following question: List the names of all the dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15;  Write Sql for the following question: List the names of all the dogs that are not abandoned and are between 10 and 15 years old and are female. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F';  Write Sql for the following question: List the names of all the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight BETWEEN 10 AND 15;  Write Sql for the following question: List the names of all the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds and are between 10 and 15 kg. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight BETWEEN 10 AND 15 AND weight BETWEEN 10 AND 15;  Write Sql for the following question: List the names of all the dogs that are not abandoned and are between 10 and 15 years old and are female and are between 10 and 15 pounds and are between 10 and 15 kg and are between 10 and 15 lbs. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND gender = 'F' AND weight BETWEEN 10 AND 1
 SELECT charge_type, charge_amount FROM Charges;
 SELECT charge_type, charge_amount FROM Charges;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code;  Write Sql for the following question: List each dog's name and the breed of the dog. Answer : SELECT name, breed_name FROM Dogs INNER
 SELECT MAX(charge_amount) FROM Charges;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM Dogs;  Write Sql for the following question: How many dogs are in the database? Answer : SELECT COUNT(*) FROM
 SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
 SELECT email_address, cell_number, home_phone FROM Professionals;  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'Dog';  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are not dogs. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code!= 'Dog';  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs and have a cell phone number. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'Dog' AND cell_number IS NOT NULL;  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs and have a cell phone number or a home phone number. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'Dog' AND (cell_number IS NOT NULL OR home_phone IS NOT NULL);  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs and have a cell phone number or a home phone number and have an email address. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'Dog' AND (cell_number IS NOT NULL OR home_phone IS NOT NULL) AND email_address IS NOT NULL;  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs and have a cell phone number or a home phone number and have an email address and are not dogs. Answer : SELECT email_address, cell_number, home_phone FROM Professionals WHERE role_code!= 'Dog' AND (cell_number IS NOT NULL OR home_phone IS NOT NULL) AND email_address IS NOT NULL;  Write Sql for the following question: List the email, cell phone and home phone of all the professionals who are dogs and have a cell
 SELECT professional_id, email_address, cell_number, home_phone FROM Professionals;  Write Sql for the following question: What are the names of the dogs that are not abandoned? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: What are the names of the dogs that are not abandoned and are of breed code 'HUS'? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'HUS';  Write Sql for the following question: What are the names of the dogs that are not abandoned and are of breed code 'HUS' and are of size code 'S'? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'S';  Write Sql for the following question: What are the names of the dogs that are not abandoned and are of breed code 'HUS' and are of size code 'S' and are of age 'P'? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'S' AND age = 'P';  Write Sql for the following question: What are the names of the dogs that are not abandoned and are of breed code 'HUS' and are of size code 'S' and are of age 'P' and are of gender 'F'? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'S' AND age = 'P' AND gender = 'F';  Write Sql for the following question: What are the names of the dogs that are not abandoned and are of breed code 'HUS' and are of size code 'S' and are of age 'P' and are of gender 'F' and are of weight 'L'? Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND breed_code = 'HUS' AND size_code = 'S' AND age = 'P' AND gender = 'F' AND weight = 'L';  Write Sql for the following question:
 SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_description FROM Breeds, Sizes;  Write Sql for the following question: What are all the possible breed type and size type combinations? Answer : SELECT breed_name, size_
 SELECT DISTINCT breed_name, size_description FROM Breeds, Sizes, Dogs WHERE Dogs.breed_code = Breeds.breed_code AND Dogs.size_code = Sizes.size_code;  Write Sql for the following question: Find the names of all dogs that are not abandoned. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N';  Write Sql for the following question: Find the names of all dogs that are not abandoned and are between 10 and 15 years old. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15;  Write Sql for the following question: Find the names of all dogs that are not abandoned and are between 10 and 15 years old and are of breed type Eskimo. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK';  Write Sql for the following question: Find the names of all dogs that are not abandoned and are between 10 and 15 years old and are of breed type Eskimo and size type Medium. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK' AND size_code = 'MED';  Write Sql for the following question: Find the names of all dogs that are not abandoned and are between 10 and 15 years old and are of breed type Eskimo and size type Medium and have been adopted. Answer : SELECT name FROM Dogs WHERE abandoned_yn = 'N' AND age BETWEEN 10 AND 15 AND breed_code = 'ESK' AND size_code = 'MED' AND date_adopted IS NOT NULL;  Write Sql for the following question: Find the names of all dogs that are not abandoned and are between 10 and 15 years old and are of breed type Eskimo and size type Medium and have been adopted and have been adopted on or after January 1st, 2019. Answer : SELECT name FROM Dogs WHERE aband
 SELECT p.first_name, t.treatment_type_description FROM Professionals p INNER JOIN Treatments t ON p.professional_id = t.professional_id;
 SELECT professional_id, first_name, description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
 SELECT COUNT(*) FROM singer;  Write Sql for the following question: How many songs are there? Answer : SELECT COUNT(*) FROM song;  Write Sql for the following question: How many singers are from France? Answer : SELECT COUNT(*) FROM singer WHERE Citizenship = "France";  Write Sql for the following question: How many singers are from the United States? Answer : SELECT COUNT(*) FROM singer WHERE Citizenship = "United States";  Write Sql for the following question: How many singers are from Chile? Answer : SELECT COUNT(*) FROM singer WHERE Citizenship = "Chile";  Write Sql for the following question: What is the average net worth of singers? Answer : SELECT AVG(Net_Worth_Millions) FROM singer;  Write Sql for the following question: What is the average net worth of singers from France? Answer : SELECT AVG(Net_Worth_Millions) FROM singer WHERE Citizenship = "France";  Write Sql for the following question: What is the average net worth of singers from the United States? Answer : SELECT AVG(Net_Worth_Millions) FROM singer WHERE Citizenship = "United States";  Write Sql for the following question: What is the average net worth of singers from Chile? Answer : SELECT AVG(Net_Worth_Millions) FROM singer WHERE Citizenship = "Chile";  Write Sql for the following question: What is the average sales of songs? Answer : SELECT AVG(Sales) FROM song;  Write Sql for the following question: What is the average sales of songs by singers from France? Answer : SELECT AVG(Sales) FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Citizenship = "France");  Write Sql for the following question: What is the average sales of songs by singers from the United States? Answer : SELECT AVG(Sales) FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Citizenship = "United States");  Write Sql for the following question: What is the average sales of songs by singers from Chile? Answer : SELECT AVG(Sales
 SELECT COUNT(*) FROM singer;  Write Sql for the following question: What is the count of singers for each citizenship? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the following question: What is the count of singers for each citizenship and what is the total count of singers? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship WITH ROLLUP;  Write Sql for the
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;  Write Sql for the following question: List the name of singers in descending order of net worth. Answer : SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC;  Write Sql for the following question: List the name of singers in ascending order of birth year. Answer : SELECT Name FROM singer ORDER BY Birth_Year ASC;  Write Sql for the following question: List the name of singers in descending order of birth year. Answer : SELECT Name FROM singer ORDER BY Birth_Year DESC;  Write Sql for the following question: List the name of singers in ascending order of name. Answer : SELECT Name FROM singer ORDER BY Name ASC;  Write Sql for the following question: List the name of singers in descending order of name. Answer : SELECT Name FROM singer ORDER BY Name DESC;  Write Sql for the following question: List the name of singers in ascending order of citizenship. Answer : SELECT Name FROM singer ORDER BY Citizenship ASC;  Write Sql for the following question: List the name of singers in descending order of citizenship. Answer : SELECT Name FROM singer ORDER BY Citizenship DESC;  Write Sql for the following question: List the name of singers in ascending order of name and citizenship. Answer : SELECT Name FROM singer ORDER BY Name ASC, Citizenship ASC;  Write Sql for the following question: List the name of singers in descending order of name and citizenship. Answer : SELECT Name FROM singer ORDER BY Name DESC, Citizenship DESC;  Write Sql for the following question: List the name of singers in ascending order of birth year and citizenship. Answer : SELECT Name FROM singer ORDER BY Birth_Year ASC, Citizenship ASC;  Write Sql for the following question: List the name of singers in descending order of birth year and citizenship. Answer : SELECT Name FROM singer ORDER BY Birth_Year DESC, Citizenship DESC;  Write Sql for the following question: List the name of singers in ascending order of net worth and citizenship. Answer : SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, C
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
 SELECT Birth_Year, Citizenship FROM singer;
 SELECT Birth_Year, Citizenship FROM singer;  Write Sql for the following question: What are the titles of the songs? Answer : SELECT Title FROM song;  Write Sql for the following question: What are the titles of the songs and the names of the singers? Answer : SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;  Write Sql for the following question: What are the titles of the songs and the names of the singers, and what is the highest position of the song? Answer : SELECT Title, Name, Highest_Position FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;  Write Sql for the following question: What are the titles of the songs and the names of the singers, and what is the highest position of the song, and what is the sales of the song? Answer : SELECT Title, Name, Highest_Position, Sales FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;  Write Sql for the following question: What are the titles of the songs and the names of the singers, and what is the highest position of the song, and what is the sales of the song, and what is the birth year of the singer? Answer : SELECT Title, Name, Highest_Position, Sales, Birth_Year FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;  Write Sql for the following question: What are the titles of the songs and the names of the singers, and what is the highest position of the song, and what is the sales of the song, and what is the birth year of the singer, and what is the net worth of the singer? Answer : SELECT Title, Name, Highest_Position, Sales, Birth_Year, Net_Worth_Millions FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;  Write Sql for the following question: What are the titles of the songs and the names of the singers, and what is the highest position of the song, and what is the sales of the song, and what is the birth year of the singer, and what is the net worth of the singer, and what is
 SELECT Name FROM singer WHERE Citizenship!= "France";  Write Sql for the following question: List the name of singers whose citizenship is not "France" and whose net worth is greater than 20. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" AND Net_Worth_Millions > 20;  Write Sql for the following question: List the name of singers whose citizenship is not "France" or whose net worth is greater than 20. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" OR Net_Worth_Millions > 20;  Write Sql for the following question: List the name of singers whose citizenship is not "France" or whose net worth is greater than 20, but not both. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" XOR Net_Worth_Millions > 20;  Write Sql for the following question: List the name of singers whose citizenship is not "France" or whose net worth is greater than 20, but not both. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" AND Net_Worth_Millions <= 20 OR Citizenship!= "France" AND Net_Worth_Millions > 20;  Write Sql for the following question: List the name of singers whose citizenship is not "France" or whose net worth is greater than 20, but not both. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" AND Net_Worth_Millions <= 20 OR Citizenship!= "France" AND Net_Worth_Millions > 20;  Write Sql for the following question: List the name of singers whose citizenship is not "France" or whose net worth is greater than 20, but not both. Answer : SELECT Name FROM singer WHERE Citizenship!= "France" AND Net_Worth_Millions <= 20 OR Citizenship!= "France" AND Net_Worth_Millions > 20;  Write Sql
 SELECT Name FROM singer WHERE Citizenship!= "France";
 SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;  Write Sql for the following question: Show the name of singers whose birth year is not 1948 or 1949? Answer : SELECT Name FROM singer WHERE Birth_Year!= 1948 AND Birth_Year!= 1949;  Write Sql for the following question: Show the name of singers whose birth year is 1948 or 1949 and net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth_Millions > 20;  Write Sql for the following question: Show the name of singers whose birth year is 1948 or 1949 and net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth_Millions > 20;  Write Sql for the following question: Show the name of singers whose birth year is 1948 or 1949 and net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth_Millions > 20;  Write Sql for the following question: Show the name of singers whose birth year is 1948 or 1949 and net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth_Millions > 20;  Write Sql for the following question: Show the name of singers whose birth year is 1948 or 1949 and net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth
 SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;  Write Sql for the following question: What are the names of the singers whose birth years are between 1940 and 1950? Answer : SELECT Name FROM singer WHERE Birth_Year BETWEEN 1940 AND 1950;  Write Sql for the following question: What are the names of the singers whose birth years are not between 1940 and 1950? Answer : SELECT Name FROM singer WHERE Birth_Year NOT BETWEEN 1940 AND 1950;  Write Sql for the following question: What are the names of the singers whose birth years are either 1948 or 1949 and whose net worth is greater than 20 million? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND Net_Worth_Millions > 20;  Write Sql for the following question: What are the names of the singers whose birth years are either 1948 or 1949 and whose net worth is greater than 20 million or whose citizenship is not France? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND (Net_Worth_Millions > 20 OR Citizenship!= "France");  Write Sql for the following question: What are the names of the singers whose birth years are either 1948 or 1949 and whose net worth is greater than 20 million or whose citizenship is not France, sorted by net worth in descending order? Answer : SELECT Name FROM singer WHERE (Birth_Year = 1948 OR Birth_Year = 1949) AND (Net_Worth_Millions > 20 OR Citizenship!= "France") ORDER BY Net_Worth_Millions DESC;  Write Sql for the following question: What are the names of the singers whose birth years are either 1948 or 1949 and whose net
 SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer with the largest net worth? Answer : SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the s
 SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer who is the oldest? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MIN(Birth_Year) FROM singer);  Write Sql for the following question: What is the name of the singer who is the youngest? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MAX(Birth_Year) FROM singer);  Write Sql for the following question: What is the name of the singer who is the oldest and the youngest? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MIN(Birth_Year) FROM singer) AND Birth_Year = (SELECT MAX(Birth_Year) FROM singer);  Write Sql for the following question: What is the name of the singer who is the oldest and the most valuable? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MIN(Birth_Year) FROM singer) AND Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer who is the youngest and the most valuable? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MAX(Birth_Year) FROM singer) AND Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer who is the oldest and the most valuable? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MIN(Birth_Year) FROM singer) AND Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);  Write Sql for the following question: What is the name of the singer who is the youngest and the most valuable? Answer : SELECT Name FROM singer WHERE Birth_Year = (SELECT MAX(Birth_Year) FROM singer) AND Net_Worth_Millions = (SELECT MAX(Net_Worth
 SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;  Write Sql for the following question: Show the number of singers for each citizenship and the average net worth of singers for each citizenship. Answer : SELECT Citizenship, COUNT(*) AS Number_of_Singers, AVG(Net_Worth_Millions) AS Average_Net_Worth FROM singer GROUP BY Citizenship;  Write Sql for the following question: Show the number of singers for each citizenship and the average net worth of singers for each citizenship, but only for singers who have more than 2 singers. Answer : SELECT Citizenship, COUNT(*) AS Number_of_Singers, AVG(Net_Worth_Millions) AS Average_Net_Worth FROM singer GROUP BY Citizenship HAVING COUNT(*) > 2;  Write Sql for the following question: Show the number of singers for each citizenship and the average net worth of singers for each citizenship, but only for singers who have more than 2 singers and whose average net worth is greater than 20. Answer : SELECT Citizenship, COUNT(*) AS Number_of_Singers, AVG(Net_Worth_Millions) AS Average_Net_Worth FROM singer GROUP BY Citizenship HAVING COUNT(*) > 2 AND AVG(Net_Worth_Millions) > 20;  Write Sql for the following question: Show the number of singers for each citizenship and the average net worth of singers for each citizenship, but only for singers who have more than 2 singers and whose average net worth is greater than 20, and sort the result by the average net worth. Answer : SELECT Citizenship, COUNT(*) AS Number_of_Singers, AVG(Net_Worth_Millions) AS Average_Net_Worth FROM singer GROUP BY Citizenship HAVING COUNT(*) > 2 AND AVG(Net_Worth_Millions) > 20 ORDER BY Average_Net_Worth;  Write Sql for the following question: Show the number of singers for each citizen
 SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the average net worth of its singers? Answer : SELECT Citizenship, AVG(Net_Worth_Millions) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country? Answer : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;  Write Sql for the following question: For each country, what is the total number of singers from that country?
 SELECT Citizenship, COUNT(*) AS "Number of Singers" FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC;
 SELECT Citizenship, COUNT(*) AS "Number of Singers" FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
 SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth_Millions FROM singer GROUP BY Citizenship;
 SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;
 SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID;
 SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);  Write Sql for the following question: Show names of singers that have songs with sales more than 300000 and less than 500000. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000 AND Sales < 500000);  Write Sql for the following question: Show names of singers that have songs with sales more than 300000 and less than 500000 and have a birth year after 1940. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000 AND Sales < 500000) AND Birth_Year > 1940;  Write Sql for the following question: Show names of singers that have songs with sales more than 300000 and less than 500000 and have a birth year after 1940 and citizenship is not France. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000 AND Sales < 500000) AND Birth_Year > 1940 AND Citizenship!= "France";  Write Sql for the following question: Show names of singers that have songs with sales more than 300000 and less than 500000 and have a birth year after 1940 and citizenship is not France or United States. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000 AND Sales < 500000) AND Birth_Year > 1940 AND Citizenship!= "France" AND Citizenship!= "United States";  Write Sql for the following question: Show names of singers that have songs with sales more than 300000 and less than 500000 and
 SELECT Name FROM singer WHERE Sales > 300000;
 SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID)>1);  Write Sql for the following question: Show the names of singers that have more than one song, and how many songs do they have? Answer : SELECT Name, COUNT(Singer_ID) FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID)>1) GROUP BY Name;  Write Sql for the following question: Show the names of singers that have more than one song, and how many songs do they have? Sort the result by the number of songs in descending order. Answer : SELECT Name, COUNT(Singer_ID) FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID)>1) GROUP BY Name ORDER BY COUNT(Singer_ID) DESC;  Write Sql for the following question: Show the names of singers that have more than one song, and how many songs do they have? Sort the result by the number of songs in descending order. If two singers have the same number of songs, sort them by their names in ascending order. Answer : SELECT Name, COUNT(Singer_ID) FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID)>1) GROUP BY Name ORDER BY COUNT(Singer_ID) DESC, Name ASC;  Write Sql for the following question: Show the names of singers that have more than one song, and how many songs do they have? Sort the result by the number of songs in descending order. If two singers have the same number of songs, sort them by their names in ascending order. If two singers have the same number of songs and the same name, sort them by their birth years in ascending order. Answer : SELECT Name, COUNT(Singer_ID) FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID)>1) GROUP BY Name ORDER BY COUNT(Singer_ID) DESC, Name ASC, Birth_Year ASC;  Write Sql
 SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Singer_ID) > 1);
 SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
 SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
 SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);  Write Sql for the following question: List the name of singers that have songs with sales greater than 1000000. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000);  Write Sql for the following question: List the name of singers that have songs with sales greater than 1000000 and less than 2000000. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000 AND Sales < 2000000);  Write Sql for the following question: List the name of singers that have songs with sales greater than 1000000 or less than 2000000. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000 OR Sales < 2000000);  Write Sql for the following question: List the name of singers that have songs with sales greater than 1000000 or less than 2000000 and have a birth year greater than 1940. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000 OR Sales < 2000000) AND Birth_Year > 1940;  Write Sql for the following question: List the name of singers that have songs with sales greater than 1000000 or less than 2000000 and have a birth year greater than 1940 and less than 1950. Answer : SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000 OR Sales < 2000000) AND Birth_Year > 1940 AND Birth_Year < 1950;  Write Sql for the following question: List the
 SELECT sname FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);  Write Sql for the following question: What is the sname of every sing that has at least one song? Answer : SELECT sname FROM singer WHERE singer_id IN (SELECT singer_id FROM song);  Write Sql for the following question: What is the sname of every sing that has at least one song with a sales greater than 100? Answer : SELECT sname FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 100);  Write Sql for the following question: What is the sname of every sing that has at least one song with a sales greater than 100 and a highest position less than 10? Answer : SELECT sname FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 100 AND highest_position < 10);  Write Sql for the following question: What is the sname of every sing that has at least one song with a sales greater than 100 and a highest position less than 10, and what is the highest position of the song? Answer : SELECT sname, highest_position FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 100 AND highest_position < 10);  Write Sql for the following question: What is the sname of every sing that has at least one song with a sales greater than 100 and a highest position less than 10, and what is the highest position of the song, and what is the title of the song? Answer : SELECT sname, highest_position, title FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 100 AND highest_position < 10);  Write Sql for the following question: What is the sname of every sing that has at least one song with a sales greater than 100 and a highest position less than 10, and what is the highest position of the song, and what is the title of the song, and what is the sales of the song? Answer : SELECT sname, highest_position, title, sales FROM singer WHERE singer_id IN (SELECT s
 SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;
 SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
 SELECT COUNT(*) FROM Other_Available_Features;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question: How many properties are there in total? Answer : SELECT COUNT(*) FROM Properties;  Write Sql for the following question
 SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon';
 SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;  Write Sql for the following question: Show the property type descriptions of properties belonging to that code. Answer : SELECT Ref_Property_Types.property_type_description FROM Properties INNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code; 
 SELECT property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' AND room_count > 1;  Write Sql for the following question: What are the names of properties that are either houses or apartments with more than 1 room and have a vendor requested price greater than 100000? Answer : SELECT property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' AND room_count > 1 AND vendor_requested_price > 100000;  Write Sql for the following question: What are the names of properties that are either houses or apartments with more than 1 room and have a vendor requested price greater than 100000 and a buyer offered price less than 100000? Answer : SELECT property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' AND room_count > 1 AND vendor_requested_price > 100000 AND buyer_offered_price < 100000;  Write Sql for the following question: What are the names of properties that are either houses or apartments with more than 1 room and have a vendor requested price greater than 100000 and a buyer offered price less than 100000 and an agreed selling price greater than 100000? Answer : SELECT property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' AND room_count > 1 AND vendor_requested_price > 100000 AND buyer_offered_price < 100000 AND agreed_selling_price > 100000;  Write Sql for the following question: What are the names of properties that are either houses or apartments with more than 1 room and have a vendor requested price greater than 100000 and a buyer offered price less than 100000 and an agreed selling price greater than 100000 and a date on market greater than 2019-01-01? 

SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Singer.Name, Singer.Country, Singer.Age FROM singer ORDER BY Singer.Age DESC;
SELECT Singer.Name, Singer.Country, Singer.Age FROM singer ORDER BY Singer.Age DESC;
SELECT AVG(`Age`) AS Average_Age, MIN(`Age`) AS Minimum_Age, MAX(`Age`) AS Maximum_Age FROM `singer` WHERE `Country` = 'France';
SELECT AVG(Singer.Age) AS Average_Age, MIN(Singer.Age) AS Minimum_Age, MAX(Singer.Age) AS Maximum_Age FROM singer WHERE Singer.Country = 'France';
SELECT s.Name, sc.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT s.Name, sc.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Singer.Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) as Num_Singers FROM singer GROUP BY Country;
SELECT Singer.Country, COUNT(*) as Num_Singers FROM singer GROUP BY Singer.Country;
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Average) AS Average_Capacity FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(Average) FROM stadium);
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*)  FROM concert  WHERE Year IN ('2014', '2015');
SELECT COUNT(*)  FROM concert  WHERE Year IN ('2014', '2015');
SELECT S.Name AS Stadium_Name, COUNT(C.concert_ID) AS Number_of_Concerts FROM stadium S JOIN concert C ON S.Stadium_ID = C.Stadium_ID GROUP BY S.Stadium_ID, S.Name;
SELECT s."Stadium_ID", COUNT(c.concert_ID) AS "Number_of_Concerts" FROM "stadium" s JOIN "concert" c ON s."Stadium_ID" = c."Stadium_ID" GROUP BY s."Stadium_ID";
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT "Name" FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert");
SELECT DISTINCT s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > 40 AND (SELECT Age FROM singer WHERE Singer_ID = sic.Singer_ID) < 30;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year != '2014' AND c.Stadium_ID IS NULL;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND YEAR(c.Year) = '2014' WHERE c.concert_ID IS NULL;
SELECT concert.Name AS concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.Name, concert.Theme;
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS Number_of_Singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT Singer.Name, COUNT(*) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Singer.Name;
SELECT Singer.Name, COUNT(concert.concert_ID) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Singer_ID;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Theme LIKE '%Hey%' AND s.Is_male = true;
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Theme LIKE '%Hey%'
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT CASE WHEN c.Year = '2014' THEN concert_ID END) > 0 AND COUNT(DISTINCT CASE WHEN c.Year = '2015' THEN concert_ID END) > 0;
SELECT s.Name, st.Location FROM stadium st JOIN concert c ON st.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY st.Stadium_ID, st.Name, st.Location HAVING COUNT(DISTINCT CASE WHEN Year = '2014' THEN concert_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN Year = '2015' THEN concert_ID ELSE NULL END) > 0;
SELECT COUNT(*)  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT COUNT(*)  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT COUNT(*)  FROM Pets  WHERE weight > 10;
SELECT COUNT(*)  FROM Pets  WHERE weight > 10;
SELECT p.weight FROM Pets p WHERE p.PetType = 'dog' AND p.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT AVG(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT PetType, MAX(weight) AS MaximumWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20;
SELECT COUNT(*)  FROM Has_Pet hp  JOIN Student s ON hp.StuID = s.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND hp.StuID IN (SELECT StuID FROM Student WHERE Sex = 'F');
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID AND P1.PetType = 'cat' JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P2 ON HP2.PetID = P2.PetID AND P2.PetType = 'dog';
SELECT s.Fname FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Pets p1 ON p1.PetID = hp1.PetID JOIN Has_Pet hp2 ON s.StuID = hp2.StuID JOIN Pets p2 ON p2.PetID = hp2.PetID WHERE p1.PetType = 'cat' AND p2.PetType = 'dog';
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE Pets.PetType = 'cat');
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND NOT EXISTS (SELECT * FROM Pets C WHERE C.PetID = HP.PetID AND C.PetType = 'cat');
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND NOT EXISTS (SELECT * FROM Pets C WHERE C.StuID = S.StuID AND C.PetType = 'cat')
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType; 
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType; 
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID;
SELECT DISTINCT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID;
SELECT p.PetID FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT Student.StuID, COUNT(Has_Pet.PetID) as NumPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT StuID, COUNT(*) AS NumPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID;
SELECT Fname, Sex FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     GROUP BY StuID     HAVING COUNT(*) > 1 );
SELECT Fname, Sex FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     GROUP BY StuID     HAVING COUNT(*) > 1 );
SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = 'cat';
SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = 'cat';
SELECT AVG(Student.Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Student.Age) as Average_Age FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet );
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, continents.Continent, COUNT(c.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY c.ContId, continents.Continent;
SELECT c.ContId, continents.Continent, COUNT(c.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY c.ContId, continents.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM car_names WHERE Id IN (SELECT MakeId FROM cars_data GROUP BY MakeId HAVING AVG(Weight) > (SELECT AVG(Weight) FROM cars_data))
SELECT Model FROM car_names WHERE Id IN (   SELECT MakeId   FROM cars_data   WHERE Weight < (SELECT AVG(Weight) FROM cars_data) );
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.MakeId WHERE cars_data.Year = 1970;
SELECT DISTINCT car_makers.Maker FROM car_names JOIN car_makers ON car_names.Make = car_makers.FullName WHERE cars_data.Year = 1970;
SELECT c.Make, cd.Year FROM car_names AS c JOIN cars_data AS cd ON c.Id = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT DISTINCT Model FROM car_names WHERE Year > 1980;
SELECT DISTINCT Model FROM car_names WHERE Id IN (   SELECT MakeId   FROM cars_data   WHERE Year > 1980 );
SELECT continents.Continent, COUNT(car_makers.Country) as MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) as NumberOfMakers FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'AMC Hornet Sportabout (SW)'
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Maker = 'amc' AND Model = 'hornet sportabout (sw)' ;
SELECT COUNT(*) FROM car_makers WHERE Country = 'france';
SELECT COUNT(*) FROM car_makers WHERE Country = 'France';
SELECT COUNT(*)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.Continent = (SELECT Continent FROM continents WHERE Continent = 'america');
SELECT COUNT(*) FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id WHERE car_makers.Country = (SELECT Country FROM countries WHERE Continent = (SELECT Continent FROM continents WHERE Continent = 'america'));
SELECT AVG(cars_data.MPG)  FROM cars_data  WHERE cars_data.Cylinders = 4;
SELECT AVG(cars_data.MPG)  FROM cars_data  WHERE cars_data.Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT DISTINCT car_makers.Maker, car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId;
SELECT DISTINCT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 2 GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3 AND c.Continent = 2;
SELECT MAX(Horsepower) AS MaxHorsepower, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3;
SELECT MAX(Horsepower) AS MaxHorsepower, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3;
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Model = 'volvo';
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Model = car_makers.Id WHERE car_makers.FullName = 'Volvo';
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate) AS MaximumAccelerate FROM cars_data WHERE Cylinders IS NOT NULL;
SELECT Model, COUNT(*) as VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT Model, COUNT(DISTINCT MakeId) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980;
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980;
SELECT COUNT(*)  FROM car_names  JOIN car_makers ON car_names.Model = car_makers.Id  WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.Model) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3;
SELECT DISTINCT Model FROM car_names WHERE Make = (SELECT FullName FROM car_makers WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = (SELECT Country FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'america' AND Country IN (SELECT Country FROM car_makers WHERE FullName LIKE '%General Motors%'))))) AND Id IN (SELECT MakeId FROM cars_data WHERE Weight > 3500);
SELECT DISTINCT Model FROM car_names WHERE Make IN (   SELECT Maker   FROM car_makers   WHERE FullName = 'General Motors' ) OR Weight > 3500;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT `Horsepower` FROM `cars_data` WHERE `Accelerate` = (SELECT MAX(`Accelerate`) FROM `cars_data`)
SELECT COUNT(*) AS num_cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo' GROUP BY cars_data.Cylinders ORDER BY cars_data.Accelerate ASC LIMIT 1;
SELECT MIN(Accelerate) AS LeastAccelerateVersion, Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Make = 'Volvo'
SELECT COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*)  FROM countries  WHERE CountryId IN (SELECT DISTINCT Country                     FROM car_makers)  GROUP BY CountryId  HAVING COUNT(DISTINCT Maker) > 2;
SELECT COUNT(*)  FROM countries  WHERE CountryId IN (SELECT DISTINCT Country                     FROM car_makers);
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6;
SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cylinders < 4 AND Horsepower < (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(cars_data.MPG) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980;
SELECT MAX(cars_data.MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980;
SELECT Model FROM car_names WHERE Weight < 3500 AND Make != 'Ford Motor Company';
SELECT DISTINCT Model FROM car_names WHERE Make != 'Ford' AND Weight < 3500;
SELECT DISTINCT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker IN (     SELECT DISTINCT Maker     FROM car_makers     WHERE Maker = 'fiat' ) OR (SELECT COUNT(*) AS maker_count FROM car_makers WHERE Country = c.CountryId) > 3;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker IN (     SELECT maker     FROM model_list     WHERE Model LIKE '%fiat%' ) OR cm.Id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT maker) > 3 );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Abbreviation = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT airports.City, airports.Country FROM airports WHERE AirportCode = 'Alton';
SELECT City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABERdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASH';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABERDEEN' AND DestAirport = 'ASHLEY';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'JetBlue Airways');
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UAL')  AND DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines'  AND flights.SourceAirport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UAL')  AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'Aberdeen';
SELECT airports.City, COUNT(flights.FlightNo) AS NumArrivingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.DestAirport) AS DestinationCount FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY DestinationCount DESC LIMIT 1;
SELECT airports.City, COUNT(flights.FlightNo) AS DepartingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) AS Frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT DestAirport AS AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport, COUNT(*) AS flight_count FROM flights GROUP BY SourceAirport ORDER BY flight_count DESC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN (   SELECT SourceAirport   GROUP BY SourceAirport   ORDER BY COUNT(*) ASC   LIMIT 1 ) UNION ALL SELECT AirportCode FROM airports WHERE AirportCode IN (   SELECT DestAirport   GROUP BY DestAirport   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS FlightCount FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1;
SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;
SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid, airlines.Abbreviation, airlines.Country ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' AND flights.DestAirport = 'CVO';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.DestAirport != 'APG';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.DestAirport != 'APG';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(flights.FlightNo) >= 10;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(flights.FlightNo) < 200;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(flights.FlightNo) < 200;
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABERdeen';
SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen';
SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport IN ('ABERdeen', 'Abilene');
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABER' OR DestAirport = 'ABI';
SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT DISTINCT SourceAirport   FROM flights ) AND AirportCode NOT IN (   SELECT DISTINCT DestAirport   FROM flights );
SELECT a.AirportCode, a.AirportName, a.City, a.Country, a.CountryAbbrev FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.Airline IS NULL;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) as Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) as Employee_Count FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(*) as Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) as Number_of_Shops FROM shop GROUP BY Location;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY shop.Number_products DESC LIMIT 1;
SELECT MIN(shop.Number_products) AS Min_Products, MAX(shop.Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS Min_Number_of_Products, MAX(Number_products) AS Max_Number_of_Products FROM shop;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT s.Name FROM shop s JOIN (     SELECT Shop_ID, AVG(Number_products) AS avg_products     FROM shop     GROUP BY Shop_ID ) AS avg Shop ON s.Shop_ID = avg.Shop_ID WHERE s.Number_products > avg.avg_products; 
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT `employee.Name` FROM `employee` JOIN `evaluation` ON `employee.Employee_ID` = `evaluation.Employee_ID` GROUP BY `employee.Employee_ID` ORDER BY COUNT(*) DESC LIMIT 1;
SELECT `employee.Name` FROM `employee` JOIN `evaluation` ON `employee.Employee_ID` = `evaluation.Employee_ID` WHERE `evaluation.Year_awarded` = 'One-time' ORDER BY `evaluation.Bonus` DESC LIMIT 1;
SELECT `employee.Name` FROM `employee` JOIN `evaluation` ON `employee.Employee_ID` = `evaluation.Employee_ID` ORDER BY `evaluation.Bonus` DESC LIMIT 1;
SELECT e.Name FROM employee e LEFT JOIN evaluation eva ON e.Employee_ID = eva.Employee_ID WHERE eva.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID HAVING COUNT(h.Employee_ID) = 0;
SELECT s.Name, COUNT(h.Employee_ID) as Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Shop_ID, s.Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT District FROM shop WHERE Number_products < 3000 AND EXISTS (     SELECT 1     FROM shop s2     WHERE s2.District = shop.District AND s2.Number_products > 10000 );
SELECT DISTINCT District FROM shop WHERE Number_products < 3000 AND EXISTS (     SELECT 1     FROM shop s2     WHERE s2.Number_products > 10000 AND s2.District = shop.District );
SELECT DISTINCT Location FROM shop;
SELECT DISTINCT Location FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT T.Template_ID) AS Different_Templates FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT COUNT(DISTINCT Template_ID) FROM Templates;
SELECT COUNT(*)  FROM Documents  WHERE Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Documents WHERE Template_Type_Code = 'PPT';
SELECT Template_ID, COUNT(*) AS Number_of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Document_ID GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Templates GROUP BY Template_ID;
SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Template_ID, Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 );
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Num_Templates DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(Template_ID) >= 3 );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(Template_ID) < 3 );
SELECT MIN(Templates.Version_Number) AS Smallest_Version, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT MIN(Templates.Version_Number) AS Lowest_Version, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Document_ID WHERE d.Document_Name = 'Data Base';
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data Base';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents WHERE Template_Type_Code = 'BK';
SELECT Template_Type_Code, COUNT(*) AS Document_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) as Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Document_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Document_ID GROUP BY Template_Type_Code ORDER BY Document_Count DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   JOIN Documents ON Templates.Template_ID = Documents.Document_ID   GROUP BY Template_Type_Code   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID);
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   JOIN Documents ON Templates.Template_ID = Documents.Document_ID );
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Document_ID;
SELECT DISTINCT T2.Template_Type_Description FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID;
SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs WHERE Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs WHERE Document_Name = 'Summer Show';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT p.Paragraph_Text, d.Document_Name, d.Document_Description, d.Other_Details FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT Paragraph.Text FROM Paragraphs JOIN Documents ON Paragraph.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph.Text FROM Paragraphs JOIN Documents ON Paragraph.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Document_ID, COUNT(Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name;
SELECT Documents.Document_ID, Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Document_Name;
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) >= 2 );
SELECT Document_ID FROM Documents WHERE Document_ID IN (     SELECT Document_ID     FROM Paragraphs     GROUP BY Document_ID     HAVING COUNT(*) >= 2 );
SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Documents   GROUP BY Document_ID   HAVING COUNT(*) = (     SELECT MAX(paragraph_count)     FROM (       SELECT Document_ID, COUNT(Paragraph_ID) AS paragraph_count       FROM Paragraphs       GROUP BY Document_ID     ) AS subquery   ) );
SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(Paragraph_ID) DESC   LIMIT 1 );
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Documents   GROUP BY Document_ID   ORDER BY COUNT(Paragraph_ID) ASC   LIMIT 1 );
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Documents   GROUP BY Document_ID   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 );
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 );
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland');
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT "Name" FROM "teacher" ORDER BY "Age";
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT Teacher.Age, Teacher.Hometown FROM teacher;
SELECT T.Name FROM teacher T WHERE T.Hometown <> 'Little Lever Urban District';
SELECT T.Name FROM teacher T WHERE T.Hometown <> 'Little Lever Urban District';
SELECT T.Name FROM teacher T WHERE T.Age IN ('32', '33');
SELECT `teacher.Name` FROM `teacher` WHERE `Age` IN ('32', '33');
SELECT `teacher.Hometown` FROM `teacher` ORDER BY `Age` ASC LIMIT 1;
SELECT `teacher.Hometown` FROM `teacher` ORDER BY `Age` ASC LIMIT 1;
SELECT Hometown, COUNT(*) as Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) as TeacherCount FROM teacher GROUP BY Hometown ORDER BY TeacherCount DESC LIMIT 1;
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT T.Name FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID JOIN course C ON CA.Course_ID = C.Course_ID WHERE C.Course = 'Math';
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name, COUNT(ca.Course_ID) as Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT DISTINCT T.Name FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name HAVING COUNT(DISTINCT CA.Course_ID) >= 2;
SELECT DISTINCT T.Name FROM teacher T LEFT JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID WHERE CA.Course_ID IS NULL;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT v.Name FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC;
SELECT `Museum_ID`, Name FROM `museum` ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(`Num_of_Staff`)  FROM `museum`  WHERE `Open_Year` < '2009';
SELECT `Open_Year`, `Num_of_Staff` FROM `museum` WHERE `Name` = 'Plaza Museum';
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(DISTINCT v1.Museum_ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit v2 ON v.ID = v2.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(v2.Total_spent) DESC LIMIT 1;
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT v.Name, v.Age FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID GROUP BY v.ID ORDER BY SUM(v1.Num_of_Ticket) DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_Tickets_Bought, MAX(Num_of_Ticket) AS Maximum_Tickets_Bought FROM visit; 
SELECT SUM(Total_spent)  FROM visit  JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1;
SELECT v.Name FROM visitor v JOIN visit v1 ON v.ID = v1.visitor_ID JOIN museum m1 ON v1.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009' JOIN visit v2 ON v.ID = v2.visitor_ID JOIN museum m2 ON v2.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011' GROUP BY v.Name HAVING COUNT(DISTINCT m1.Museum_ID) = 1 AND COUNT(DISTINCT m2.Museum_ID) = 1;
SELECT COUNT(*)  FROM visitor  WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010'));
SELECT COUNT(*)  FROM museum  WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT `first_name`, `birth_date` FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_rank FROM matches WHERE winner_id IN (SELECT player_id FROM players);
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches WHERE loser_id IN (SELECT player_id FROM players);
SELECT MAX(losser_rank) AS best_loser_rank FROM matches WHERE loser_rank IS NOT NULL;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code)  FROM players;
SELECT COUNT(DISTINCT loser_name)  FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tournament_name FROM matches GROUP BY tournament_name HAVING COUNT(*) > 10;
SELECT tournament_name FROM matches GROUP BY tournament_name HAVING COUNT(*) > 10;
SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') wtc ON m1.winner_id = wtc.winner_id JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') ao ON m1.winner_id = ao.winner_id WHERE p.player_id = wtc.winner_id AND p.player_id = ao.winner_id;
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id WHERE m1.tourney_name = 'WTA Championships' AND EXISTS (   SELECT 1   FROM matches m2   WHERE m2.player_id = p.player_id   AND m2.tourney_name = 'Australian Open' ) AND m1.year = m2.year;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, country_code FROM players GROUP BY first_name, country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT first_name, country_code FROM players WHERE player_id IN (   SELECT player_id   FROM rankings   GROUP BY player_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points HAVING COUNT(*) = (   SELECT MAX(count_wins)   FROM (     SELECT winner_name, COUNT(*) AS count_wins     FROM matches     GROUP BY winner_name   ) subquery ) ORDER BY count_wins DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id HAVING COUNT(*) = (SELECT COUNT(*) FROM matches WHERE winner_id = m.winner_id) ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_rank FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name;
SELECT p.first_name, SUM(ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(*) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches WHERE winner_age = (   SELECT MIN(winner_age)   FROM matches ) ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches WHERE winner_age = (   SELECT MIN(winner_age)   FROM matches ) ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND tourney_name = 'WTA Championships';
SELECT winner.first_name, winner.country_code, winner.birth_date FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id WHERE winner.rank_points = (   SELECT MAX(rank_points)   FROM matches JOIN players ON matches.winner_id = players.player_id )
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id ORDER BY SUM(m.winner_rank_points) DESC LIMIT 1;
SELECT `hand`, COUNT(*) AS num_players FROM players GROUP BY `hand`;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured';
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
SELECT name, date, result FROM battle;
SELECT battle.name, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.name;
SELECT AVG(injured) FROM death;
SELECT d.* FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT "name" FROM "battle" WHERE "bulgarian_commander" = 'Kaloyan' AND "latin_commander" = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*)  FROM battle  WHERE id NOT IN (SELECT battle.id FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage = '225');
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s) AND b.result = 'Bulgarian victory';
SELECT `note` FROM `death` WHERE `note` LIKE '%East%';
SELECT `Addresses.line_1`, `Addresses.line_2` FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*)  FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT `Courses.course_description`  FROM `Courses`  WHERE `course_name` = 'Math';
SELECT `Courses.course_description`  FROM `Courses`  WHERE `course_name` LIKE '%Math%'
SELECT `zip_postcode` FROM `Addresses` WHERE `city` = 'Port Chelsea';
SELECT `zip_postcode` FROM `Addresses` WHERE `city` = 'Port Chelsea';
SELECT department_name, department_id FROM Degree_Programs GROUP BY department_name, department_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id IS NOT NULL;
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name)  FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT `Courses.course_name`, `Courses.course_description` FROM `Sections` JOIN `Courses` ON `Sections.course_id` = `Courses.course_id`;
SELECT `Courses.course_name`, `Courses.course_description` FROM `Courses` JOIN `Sections` ON `Courses.course_id` = `Sections.course_id`;
SELECT c.course_id, c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(DISTINCT sec.student_enrolment_id) <= 2;
SELECT `Courses.course_id`, `Courses.course_name`  FROM `Courses` LEFT JOIN `Sections` ON `Courses.course_id` = `Sections.course_id` GROUP BY `Courses.course_id`, `Courses.course_name` HAVING COUNT(`Sections.section_id`) < 2;
SELECT `section_name` FROM `Sections` ORDER BY `section_name` DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_name, Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT `Department_Description`  FROM `Departments`  WHERE `department_name` LIKE '%computer%'
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY s.student_id HAVING COUNT(DISTINCT dp.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sm ON se.semester_id = sm.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) = 2 AND COUNT(DISTINCT sm.semester_id) = 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT degree_summary_name, COUNT(*) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT `Degree_Programs.degree_summary_name` FROM `Degree_Programs` JOIN `Student_Enrolment` ON `Degree_Programs.degree_program_id` = `Student_Enrolment.degree_program_id` GROUP BY `Degree_Programs.degree_summary_name` ORDER BY COUNT(`Student_Enrolment.student_id`) DESC LIMIT 1;
SELECT `degree_program_id`, `degree_summary_name` FROM `Degree_Programs` JOIN `Student_Enrolment` ON `Degree_Programs.degree_program_id` = `Student_Enrolment.degree_program_id` GROUP BY `degree_program_id`, `degree_summary_name` ORDER BY COUNT(`Student_Enrolment.student_id`) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT `Semesters.semester_name`  FROM `Semesters` LEFT JOIN `Student_Enrolment` ON `Semesters.semester_id` = `Student_Enrolment.semester_id` WHERE `Student_Enrolment.student_id` IS NULL;
SELECT `Semesters`.`semester_name` FROM `Semesters` LEFT JOIN `Student_Enrolment` ON `Semesters`.`semester_id` = `Student_Enrolment`.`semester_id` GROUP BY `Semesters`.`semester_id` HAVING COUNT(`Student_Enrolment`.`student_id`) = 0;
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment SE ON C.course_id = SE.course_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment se ON c.course_id = se.course_id;
SELECT `Courses.course_name`  FROM `Courses` JOIN `Student_Enrolment_Courses` ON `Courses.course_id` = `Student_Enrolment_Courses.course_id` GROUP BY `Courses.course_name` ORDER BY COUNT(`Student_Enrolment_Courses.student_enrolment_id`) DESC LIMIT 1;
SELECT `Courses.course_name`  FROM `Courses` JOIN `Student_Enrolment_Courses` ON `Courses.course_id` = `Student_Enrolment_Courses.course_id` GROUP BY `Courses.course_name` ORDER BY COUNT(`Student_Enrolment_Courses.student_enrolment_id`) DESC LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT student_id     FROM Student_Enrolment     JOIN Degree_Programs dp ON Student_Enrolment.degree_program_id = dp.degree_program_id )
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment   JOIN Degree_Programs dp ON Student_Enrolment.degree_program_id = dp.degree_program_id )
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(*) >= 2;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(DISTINCT sc.course_id) >= 2;
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
SELECT S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.date_left IS NOT NULL ORDER BY S.date_left ASC LIMIT 1;
SELECT S.first_name, S.last_name FROM Students S WHERE S.current_address_id != S.permanent_address_id;
SELECT S.first_name FROM Students S WHERE S.permanent_address_id != S.current_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts; 
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT T.transcript_date, T.other_details FROM Transcripts T WHERE T.transcript_date = (   SELECT MIN(transcript_date)   FROM Transcripts )
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;
SELECT COUNT(*)  FROM `Transcripts`
SELECT COUNT(*)  FROM `Transcripts`;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;
SELECT COUNT(DISTINCT student_course_id) AS distinct_transcripts_per_enrollment, student_enrolment_id FROM Student_Enrolment_Courses GROUP BY student_enrolment_id;
SELECT COUNT(*) AS occurrence_count, sce.student_enrolment_id FROM Student_Enrolment_Courses sce GROUP BY sce.course_id ORDER BY occurrence_count DESC LIMIT 1;
SELECT MIN(transcript_date), transcript_id FROM Transcripts;
SELECT `transcript_id`, `transcript_date` FROM `Transcripts` ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY Semesters.semester_name HAVING COUNT(DISTINCT Student_Enrolment.student_id) > 1;
SELECT s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY s.semester_id HAVING COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Masters' THEN dp.degree_program_id END) > 0 AND COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Bachelors' THEN dp.degree_program_id END) > 0;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT A.* FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id JOIN Student_Enrolment SE ON S.student_id = SE.student_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT `Students.*`, `Addresses.line_1`, `Addresses.line_2`, `Addresses.line_3`, `Addresses.city`, `Addresses.zip_postcode`, `Addresses.state_province_county`, `Addresses.country`, `Addresses.other_address_details` FROM `Students` JOIN `Addresses` ON `Students.current_address_id` = `Addresses.address_id` JOIN `Addresses` AS permanent ON `Students.permanent_address_id` = permanent.address_id ORDER BY `last_name` DESC, `first_name` DESC, `middle_name` DESC;
SELECT * FROM Sections WHERE section_name = 'h'; -- Replace 'h' with the actual section name if known 
SELECT `section_description` FROM `Sections` WHERE `section_name` = 'h';
SELECT s.first_name FROM Students s WHERE s.permanent_address_id IN (   SELECT a.address_id   FROM Addresses a   WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582';
SELECT s.first_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT `Title` FROM `Cartoon` WHERE `Directed_by` IN ('Ben Jones', 'Brandon Vietti');
SELECT Country, COUNT(*) as Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT "Content" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio';
SELECT `Content` FROM `TV_Channel` WHERE `id` = 700;
SELECT `Package_Option` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*)  FROM TV_Channel  WHERE Language = 'English';
SELECT COUNT(*)  FROM TV_Channel  WHERE Language = 'English';
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_Channels ASC LIMIT 1;
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
SELECT T1.series_name FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';
SELECT T2.series_name FROM Cartoon C JOIN TV_Channel T1 ON C.Channel = T1.id WHERE C.Title = 'The Rise of the Blue Beetle';
SELECT `Cartoon`.Title FROM `Cartoon` JOIN `TV_Channel` ON `Cartoon.Channel` = `TV_Channel.id` WHERE `TV_Channel.series_name` = 'Sky Radio';
SELECT `Title` FROM `Cartoon` WHERE `Channel` = (SELECT `id` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio');
SELECT `TV_series`.`Episode` FROM `TV_series` ORDER BY `Rating`;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT T2.Episode, T2.Rating FROM TV_series T2 WHERE T2.Channel IN (SELECT id FROM TV_Channel WHERE Country = 'Italy') ORDER BY T2.Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series; 
SELECT `Air_Date` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime';
SELECT `Air_Date` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime' AND `Channel` IN (SELECT `id` FROM `TV_Channel` WHERE `series_name` LIKE '%Sky Famiglia%');
SELECT `TV_series`.`Weekly_Rank` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime';
SELECT `TV_series`.`Weekly_Rank` FROM `TV_series` JOIN `TV_Channel` ON `TV_series.Channel` = `TV_Channel.id` WHERE `TV_series.Episode` = 'A Love of a Lifetime';
SELECT T2.series_name FROM TV_series T1 JOIN TV_Channel T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT `TV_series`.`series_name` FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime';
SELECT T2.Episode FROM TV_series T2 JOIN TV_Channel T1 ON T2.Channel = T1.id WHERE T1.series_name = 'Sky Radio';
SELECT `Episode` FROM `TV_series` WHERE `Channel` = 'Sky Radio';
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by;
SELECT Director, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Director;
SELECT `Production_code`, `Channel` FROM `Cartoon` ORDER BY `Original_air_date` DESC LIMIT 1;
SELECT `Production_code`, `Channel` FROM `Cartoon` ORDER BY `Original_air_date` DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
SELECT Package_Option, TV_series.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 'yes';
SELECT DISTINCT T1.Country FROM TV_Channel T1 JOIN Cartoon C ON T1.id = C.Channel WHERE C.Written_by = 'Todd Casey';
SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey';
SELECT DISTINCT T1.Country FROM TV_Channel T1 LEFT JOIN Cartoon C ON T1.id = C.Channel WHERE C.Written_by != 'Todd Casey' AND C.Channel IS NULL;
SELECT DISTINCT T1.Country FROM TV_Channel T1 LEFT JOIN Cartoon C ON T1.id = C.Channel WHERE C.Written_by != 'Todd Casey';
SELECT T2.series_name, T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT T1.series_name, T1.Country FROM TV_Channel T1 JOIN Cartoon C ON T1.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English';
SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' AND Cartoon.id IS NULL;
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' AND Cartoon.id IS NULL;
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(`Money_Rank`) as Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(`Final_Table_Made`)  FROM `poker_player` WHERE `Earnings` < 200000;
SELECT MAX(`Final_Table_Made`)  FROM poker_player  WHERE Earnings < 200000;
SELECT `people.Name` FROM `poker_player` JOIN `people` ON `poker_player.People_ID` = `people.People_ID`;
SELECT "Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID";
SELECT "Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "poker_player"."Earnings" > 300000;
SELECT "Poker_Player_ID", "Name" FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID" WHERE "Earnings" > 300000;
SELECT p.Name FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY p.Final_Table_Made ASC;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY poker_player.Poker_Player_ID ORDER BY COUNT(poker_player.Poker_Player_ID) ASC;
SELECT `Birth_Date` FROM `people` WHERE `People_ID` IN (SELECT `People_ID` FROM `poker_player` ORDER BY `Earnings` ASC LIMIT 1);
SELECT `people.Birth_Date` FROM `poker_player` JOIN `people` ON `poker_player.People_ID` = `people.People_ID` ORDER BY `poker_player.Earnings` ASC LIMIT 1;
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people) ORDER BY Height DESC LIMIT 1;
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people) ORDER BY Height DESC LIMIT 1;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT "people.Name" FROM "poker_player" JOIN "people" ON "poker_player.People_ID" = "people.People_ID" ORDER BY "poker_player.Earnings" DESC;
SELECT Nationality, COUNT(*) as Num_People FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT `Name` FROM `people` WHERE `Nationality` != 'Russia';
SELECT `people.Name` FROM `people` WHERE `People_ID` NOT IN (SELECT `People_ID` FROM `poker_player`);
SELECT Name FROM `people` WHERE People_ID NOT IN (SELECT People_ID FROM `poker_player`)
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(*) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_created_date FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT DISTINCT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*)  FROM VOTES  WHERE state IN ('NY', 'CA');
SELECT COUNT(*)  FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1);
SELECT created, state, phone_number FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling');
SELECT DISTINCT A.area_code FROM AREA_CODE_STATE A JOIN VOTES V1 ON A.area_code = V1.state JOIN VOTES V2 ON A.area_code = V2.state WHERE V1.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND V2.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss');
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT `country.Name` FROM `country` WHERE `IndepYear` > 1950;
SELECT COUNT(*)  FROM country  WHERE GovernmentForm = 'Republic';
SELECT COUNT(*)  FROM country  WHERE GovernmentForm LIKE '%Republic%' OR HeadOfState LIKE '%President%' OR Capital IS NOT NULL;
SELECT SUM(`SurfaceArea`) AS TotalSurfaceArea FROM `country` WHERE `Region` = 'Caribbean';
SELECT SUM(C.SurfaceArea) FROM country C WHERE C.Region = 'Caribbean'; 
SELECT `Continent` FROM `country` WHERE `Code` = 'AIA';
SELECT `Continent` FROM `country` WHERE `Code` = 'AIA';
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' AND IsOfficial = 'T';
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT Region, Population FROM country WHERE Code = 'AGO';
SELECT Region, Population FROM country WHERE Code = 'AGO';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND Region = 'Central';
SELECT `country.Name` FROM `country` WHERE `Continent` = 'Asia' AND `LifeExpectancy` = (SELECT MIN(`LifeExpectancy`) FROM `country` WHERE `Continent` = 'Asia');
SELECT `Name` FROM `country` WHERE `Continent` = 'Asia' AND `LifeExpectancy` = (SELECT MIN(`LifeExpectancy`) FROM `country` WHERE `Continent` = 'Asia') LIMIT 1;
SELECT SUM(city.Population) AS TotalPopulation, MAX(country.GNP) AS MaximumGNP FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia';
SELECT SUM(city.Population) AS TotalPopulationInAsia, MAX(country.GNP) AS LargestGNP FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia';
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%Republic%'
SELECT SUM(C.SurfaceArea) AS TotalSurfaceArea FROM country C WHERE C.Continent IN ('Asia', 'Europe');
SELECT SUM(C.SurfaceArea) AS TotalSurfaceArea FROM country C WHERE C.Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(city.Population) FROM city WHERE City.District = 'Gelderland';
SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP), SUM(Population) FROM country WHERE Code = 'USA' AND Region = 'North America';
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(*) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'ABW';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = (SELECT MAX(count_languages) FROM (SELECT CountryCode, COUNT(DISTINCT Language) AS count_languages FROM countrylanguage GROUP BY CountryCode) AS language_counts);
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = (SELECT MAX(count_languages) FROM (SELECT COUNT(DISTINCT Language) AS count_languages FROM countrylanguage GROUP BY CountryCode) subquery);
SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT COUNT(*)  FROM country  WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')  AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch');
SELECT COUNT(*)  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' OR Language = 'Dutch' );
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'ENG' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'FRA' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT C.Continent) FROM country C JOIN countrylanguage CL ON C.Code = CL.CountryCode WHERE CL.Language = 'Chinese';
SELECT COUNT(*)  FROM country  WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');
SELECT DISTINCT Region FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' OR Language = 'Dutch' );
SELECT DISTINCT Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('DUT', 'ENG');
SELECT DISTINCT C.Code FROM country C JOIN countrylanguage CL1 ON C.Code = CL1.CountryCode AND CL1.Language = 'English' JOIN countrylanguage CL2 ON C.Code = CL2.CountryCode AND CL2.Language = 'Dutch' WHERE CL1.IsOfficial = 'T' OR CL2.IsOfficial = 'T';
SELECT DISTINCT C.Code FROM country C JOIN countrylanguage CL ON C.Code = CL.CountryCode WHERE CL.Language IN ('English', 'Dutch') AND CL.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE GovernmentForm = 'Republic' AND Percentage = 100;
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(*) = 1;
SELECT `city.Name` FROM `city`  JOIN `countrylanguage` ON `city.CountryCode` = `countrylanguage.CountryCode`  WHERE `countrylanguage.Language` = 'English'  AND `city.Population` = (SELECT MAX(`Population`) FROM `city`  JOIN `countrylanguage` ON `city.CountryCode` = `countrylanguage.CountryCode`  WHERE `countrylanguage.Language` = 'English')  ORDER BY `city.Population` DESC  LIMIT 1;
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, cl.Language, c.LifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, cl.Language, c.LifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') ORDER BY c.Population DESC LIMIT 1;
SELECT AVG(`LifeExpectancy`) AS AverageLifeExpectancy FROM `country` WHERE `Code` NOT IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `IsOfficial` = 'T' AND `Language` = 'English');
SELECT AVG(`LifeExpectancy`) AS MeanLifeExpectancy FROM `country` WHERE `Code` NOT IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` = 'English' AND `IsOfficial` = 'T');
SELECT SUM(city.Population) AS TotalPopulation FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';
SELECT SUM(city.Population) FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930 AND IndepYear IS NOT NULL);
SELECT c.Name FROM country c WHERE c.SurfaceArea > (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Europe' );
SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe') AND c1.Continent != 'Europe';
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < ALL (     SELECT c2.Population     FROM country AS c2     WHERE c2.Continent = 'Asia' );
SELECT c1.Code FROM country c1 JOIN city c2 ON c1.Code = c2.CountryCode WHERE c1.Continent = 'Asia' AND c1.Population > c2.Population AND c1.Code NOT IN (SELECT Code FROM country WHERE Continent = 'Africa');
SELECT c1.Name FROM country c1 JOIN city ci1 ON c1.Code = ci1.CountryCode WHERE c1.Continent = 'Asia' AND ci1.Population > ALL (     SELECT ci2.Population     FROM city ci2     JOIN country c2 ON c2.Code = ci2.CountryCode     WHERE c2.Continent = 'Africa' );
SELECT c1.Name FROM country c1 JOIN city c2 ON c1.Code = c2.CountryCode WHERE c1.Continent = 'Asia' AND c2.Population > (     SELECT MAX(Population)     FROM city     WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa') );
SELECT CountryCode FROM countrylanguage WHERE Language <> 'English';
SELECT `Code` FROM `countrylanguage` WHERE `Language` != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic';
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL AND c.GovernmentForm NOT LIKE '%Republic%'
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND co.Code2 != 'GB' AND co.Language NOT IN (SELECT Language FROM countrylanguage WHERE CountryCode = co.Code AND IsOfficial = 'T');
SELECT `city.Name` FROM `city`  JOIN `countrylanguage` ON `city.CountryCode` = `countrylanguage.CountryCode` JOIN `country` ON `city.CountryCode` = `country.Code` WHERE `country.Continent` = 'Europe' AND `countrylanguage.IsOfficial` = 'N' AND `Language` != 'English';
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT DISTINCT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'Chinese' AND T2.IsOfficial = 'T' AND T2.CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia');
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country)
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country)
SELECT c.Name AS Country_Name, c.Population, cl.HeadOfState FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country) ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT c.Name AS CountryName, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;
SELECT c.Name AS Country_Name, COUNT(cl.Language) AS Number_of_Languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) as CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT `District`, COUNT(*) AS Cities_Above_Average FROM `city` WHERE `Population` > (SELECT AVG(`Population`) FROM `city`) GROUP BY `District`;
SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT country.GovernmentForm, SUM(country.Population) AS TotalPopulation FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.LifeExpectancy > 72 GROUP BY country.GovernmentForm;
SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;
SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;
SELECT `Name`, `SurfaceArea`  FROM `country`  ORDER BY `SurfaceArea` DESC  LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT `Name` FROM `country` ORDER BY `Population` DESC LIMIT 3;
SELECT `Name` FROM `country` ORDER BY `Population` DESC LIMIT 3;
SELECT Name FROM country WHERE Population = (SELECT MIN(Population) FROM country) ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT `Name` FROM `country` WHERE `Continent` = 'Europe' AND `Population` = 80000;
SELECT SUM(Country.Population) AS TotalPopulation, AVG(Country.SurfaceArea) AS AverageArea FROM country WHERE Country.Continent = 'North America' AND Country.SurfaceArea > 3000;
SELECT SUM(city.Population) AS TotalPopulation, AVG(country.SurfaceArea) AS AverageSurfaceArea FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.Code, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code) ORDER BY c.Name;
SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = c.Code ) ORDER BY c.Code;
SELECT COUNT(*) AS TotalCountries FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' GROUP BY c.Code HAVING Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*)  FROM country  WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T');
SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' GROUP BY c.Code ORDER BY cl.Percentage DESC LIMIT 1;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';
SELECT MAX(show.Share) AS max_share, MIN(show.Share) AS min_share FROM show WHERE show.Type != 'Live final';
SELECT DISTINCT Nationality FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT `Major_Record_Format` FROM `orchestra` GROUP BY `Major_Record_Format` ORDER BY COUNT(*) ASC;
SELECT `Major_Record_Format`, COUNT(*) AS Frequency FROM `orchestra` GROUP BY `Major_Record_Format` ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2002;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003;
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (     SELECT Orchestra_ID     FROM performance     GROUP BY Orchestra_ID     HAVING COUNT(*) > 1 );
SELECT `Year_of_Founded` FROM `orchestra` WHERE `Orchestra_ID` IN (   SELECT `Orchestra_ID`   FROM `performance`   GROUP BY `Orchestra_ID`   HAVING COUNT(*) > 1 );
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE ID = 1934;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10);
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10);
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade; 
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.ID, COUNT(Friend.friend_id) as num_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT H.name, COUNT(F.friend_id) as number_of_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) = (     SELECT MAX(friend_count)     FROM (         SELECT student_id, COUNT(*) AS friend_count         FROM Friend         GROUP BY student_id     ) AS friend_counts );
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(F.friend_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(DISTINCT F.friend_id) >= 3;
SELECT name FROM Highschooler WHERE ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) >= 3 );
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.ID = 1934;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE F.friend_id IN (     SELECT ID     FROM Highschooler     WHERE name = 'Kyle' );
SELECT COUNT(*) as num_friends FROM Friend WHERE student_id = 1934;
SELECT COUNT(*) FROM Friend WHERE student_id = 1934;
SELECT student_id FROM Highschooler WHERE student_id NOT IN (     SELECT DISTINCT friend_id     FROM Friend     UNION     SELECT DISTINCT student_id     FROM Friend );
SELECT H.ID FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL;
SELECT name FROM Highschooler WHERE ID NOT IN (     SELECT student_id FROM Friend     GROUP BY student_id     HAVING COUNT(*) > 0 );
SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.student_id) = 0;
SELECT H1.ID FROM Highschooler H1 WHERE H1.ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(DISTINCT friend_id) > 1 ) AND H1.ID IN (     SELECT liked_id     FROM Likes     GROUP BY liked_id     HAVING COUNT(DISTINCT student_id) > 1 );
SELECT student_id FROM Highschooler WHERE ID IN (     SELECT student_id     FROM Friend     INTERSECT     SELECT student_id     FROM Likes );
SELECT H.name FROM Highschooler H WHERE H.ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(DISTINCT friend_id) > 0 ) AND H.ID IN (     SELECT liked_id     FROM Likes     GROUP BY liked_id     HAVING COUNT(DISTINCT student_id) > 1 );
SELECT h1.name FROM Highschooler h1 WHERE h1.ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(DISTINCT friend_id) > 0 ) AND h1.ID IN (     SELECT liked_id     FROM Likes     GROUP BY liked_id     HAVING COUNT(DISTINCT student_id) > 0 );
SELECT student_id, COUNT(liked_id) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as number_of_likes FROM Likes GROUP BY student_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT H.name, COUNT(L.liked_id) AS number_of_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT name FROM Highschooler WHERE ID IN (     SELECT student_id     FROM Likes     GROUP BY student_id     HAVING COUNT(liked_id) = (         SELECT MAX(count)         FROM (             SELECT COUNT(*) AS count             FROM Likes             GROUP BY student_id         ) AS counts     ) );
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2;
SELECT H.name FROM Highschooler H WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(Friend.student_id) >= 2;
SELECT H.name FROM Highschooler H WHERE H.grade > 5 GROUP BY H.name HAVING COUNT(Friend.student_id) >= 2;
SELECT COUNT(*) FROM Likes WHERE student_id = 1934;
SELECT COUNT(*)  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) as average_grade FROM Highschooler h WHERE h.ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(DISTINCT friend_id) > 0 );
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) = 0 );
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (     SELECT student_id FROM Friend     GROUP BY student_id     HAVING COUNT(*) > 0 );
SELECT DISTINCT state FROM Owners JOIN Professionals ON Owners.state = Professionals.state;
SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.zip_code = P.zip_code;
SELECT AVG(age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT AVG(`age`)  FROM `Dogs`  WHERE `dog_id` IN (SELECT `dog_id` FROM `Treatments`);
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' GROUP BY p.professional_id HAVING COUNT(t.treatment_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) > 2 OR p.state = 'Indiana';
SELECT `Dogs.name` FROM `Dogs` JOIN `Treatments` ON `Dogs.dog_id` = `Treatments.dog_id` WHERE `Treatments.cost_of_treatment` <= 1000;
SELECT D.name FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id JOIN Owners O ON D.owner_id = O.owner_id WHERE T.cost_of_treatment <= 1000;
SELECT DISTINCT P.first_name FROM Professionals P LEFT JOIN Owners O ON P.first_name = O.first_name LEFT JOIN Dogs D ON O.first_name = D.name WHERE D.name IS NULL AND P.first_name IS NOT NULL;
SELECT DISTINCT P.first_name FROM Professionals P LEFT JOIN Dogs D ON P.first_name = D.name WHERE D.name IS NULL UNION SELECT DISTINCT O.first_name FROM Owners O LEFT JOIN Dogs D ON O.first_name = D.name WHERE D.name IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments )
SELECT `owner_id`, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY owner_id, first_name, last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT `Owners.owner_id`, `Owners.first_name`, `Owners.last_name` FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t1 ON p.professional_id = t1.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t1.treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 );
SELECT `Breeds.breed_name`  FROM `Dogs`  JOIN `Breeds` ON `Dogs.breed_code` = `Breeds.breed_code` GROUP BY `Breeds.breed_name` ORDER BY COUNT(`Dogs.dog_id`) DESC LIMIT 1;
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Treatments t ON o.owner_id = t.professional_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Treatments t ON o.owner_id = t.owner_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT t.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY t.treatment_type_description ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1;
SELECT t.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY t.treatment_type_description ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT professional_id, cell_number FROM Professionals JOIN Treatments AS T1 ON Professionals.professional_id = T1.professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t1 ON p.professional_id = t1.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t1.treatment_type_code) >= 2;
SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (   SELECT AVG(cost_of_treatment)   FROM Treatments ) GROUP BY p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT T.treatment_type_description, T.cost_of_treatment FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code = (SELECT breed_code FROM Breeds WHERE breed_name = (SELECT MIN(breed_name) FROM Breeds)) ORDER BY T.date_of_treatment;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (SELECT breed_code FROM Breeds WHERE breed_name = (SELECT MIN(breed_name) FROM Breeds)) ORDER BY t.date_of_treatment;
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT `Owners.last_name`  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs);
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs);
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT `Dogs.date_arrived`, `Dogs.date_departed` FROM `Dogs`;
SELECT `Dogs.date_arrived`, `Dogs.date_departed` FROM Dogs;
SELECT COUNT(*)  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(*)  FROM Treatments;
SELECT COUNT(*)  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT COUNT(*)  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%';
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT MAX(`cost_of_treatment`) AS most_recent_treatment_cost FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);
SELECT MAX(`cost_of_treatment`) AS Most_Recent_Treatment_Cost FROM Treatments WHERE date_of_treatment = (   SELECT MAX(date_of_treatment)   FROM Treatments );
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*)  FROM Dogs  LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Treatments.dog_id IS NULL;
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(*)  FROM Professionals p  LEFT JOIN Treatments t ON p.professional_id = t.professional_id  WHERE t.professional_id IS NULL;
SELECT COUNT(*)  FROM Professionals  LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  WHERE Treatments.professional_id IS NULL;
SELECT `Dogs.name`, `Dogs.age`, `Dogs.weight` FROM `Dogs` WHERE `Dogs.abandoned_yn` = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(CAST(age AS REAL)) AS average_age FROM Dogs;
SELECT AVG(age) AS average_age FROM Dogs;
SELECT MAX(`age`) AS oldest_age FROM Dogs;
SELECT MAX(Dogs.age) AS oldest_age FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals;
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals;
SELECT DISTINCT T1.breed_code, T2.size_code FROM Breeds T1 JOIN Sizes T2 ON T1.breed_code = T2.size_code;
SELECT DISTINCT D.breed_code, S.size_code FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Sizes S ON D.size_code = S.size_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT "Birth_Year", "Citizenship" FROM "singer";
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT `Name` FROM `singer` ORDER BY `Net_Worth_Millions` DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Frequency FROM singer GROUP BY Citizenship ORDER BY Frequency DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Citizenship_Count FROM singer GROUP BY Citizenship ORDER BY Citizenship_Count DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Maximum_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Maximum_Net_Worth FROM singer GROUP BY Citizenship;
SELECT s.Name AS Singer_Name, t.Title FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID;
SELECT "song"."Title", "singer"."Name" FROM "song" JOIN "singer" ON "song"."Singer_ID" = "singer"."Singer_ID";
SELECT DISTINCT S.Name FROM singer S JOIN song SONG ON S.Singer_ID = SONG.Singer_ID WHERE SONG.Sales > 300000;
SELECT DISTINCT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT s.Name FROM singer s JOIN song sng ON s.Singer_ID = sng.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sng.Song_ID) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     HAVING COUNT(*) > 1 );
SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Song_ID GROUP BY s.Name;
SELECT Singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT s.Name FROM singer s LEFT JOIN song sng ON s.Singer_ID = sng.Singer_ID WHERE sng.Song_ID IS NULL;
SELECT s.Name FROM singer s LEFT JOIN song o ON s.Singer_ID = o.Singer_ID WHERE o.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
SELECT COUNT(*)  FROM Other_Available_Features;
SELECT `feature_type_name` FROM `Ref_Feature_Types` WHERE `feature_type_code` = 'AirCon';
SELECT p.property_type_description FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code; 
SELECT p.property_name FROM Properties p WHERE p.property_type_code IN ('House', 'Apartment') AND p.room_count > 1;

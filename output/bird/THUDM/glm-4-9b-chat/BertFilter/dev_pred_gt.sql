SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM `frpm` WHERE `CDSCode` IN (SELECT `CDSCode` FROM `schools` WHERE `CDSCode` LIKE '011%');	california_schools
SELECT      CDSCode,      `Percent (%) Eligible Free (Ages 5-17)` FROM      frpm WHERE      `Enrollment (Ages 5-17)` > 0 ORDER BY      `Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3;	california_schools
SELECT s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1;	california_schools
SELECT s.UnabbreviatedMailingStreetAddress FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.FRPM_Count_(K-12) = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)	california_schools
SELECT `schools`.`AdmFName1`, `schools`.`AdmLName1` FROM `schools` JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `frpm`.`Charter School (Y/N)` = 1 AND `schools`.`FundingType` = 'Directly funded' AND `schools`.`LastUpdate` > '2000-01-01';	california_schools
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Virtual = 'F' GROUP BY s.CDSCode HAVING AVG(ss.score) > 400;	california_schools
SELECT s.CDSCode FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE EXISTS (     SELECT 1     FROM frpm f     WHERE f.CDSCode = s.CDSCode AND f.`Percent (%) Eligible FRPM (K-12)` > 500 ) AND EXISTS (     SELECT 1     FROM schools m     WHERE m.CDSCode = s.CDSCode AND m.Magnet = 1 );	california_schools
SELECT s.CDSCode, s.PhoneNumber FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sats ON s.CDSCode = sats.cds WHERE sats.SATScore > 1500 GROUP BY s.CDSCode, s.PhoneNumber ORDER BY COUNT(sats.SATScore) DESC LIMIT 1;	california_schools
SELECT COUNT(s.`CDSCode`) AS SAT_Takers FROM `schools` s JOIN `frpm` f ON s.`CDSCode` = f.`CDSCode` WHERE f.`Percent (%) Eligible Free (K-12)` = (     SELECT MAX(`Percent (%) Eligible Free (K-12)`)     FROM `frpm` ) AND s.`CDSCode` IN (     SELECT `cds`     FROM `satscores` );	california_schools
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN (     SELECT CDSCode     FROM frpm     WHERE `Percent (%) Eligible FRPM (K-12)` IS NOT NULL     GROUP BY CDSCode     HAVING AVG(`Percent (%) Eligible FRPM (K-12)`) > 560 ) as high_performers ON s.CDSCode = high_performers.CDSCode JOIN frpm ON s.CDSCode = frpm.CDSCode WHERE frpm.`Percent (%) Eligible FRPM (K-12)` IS NOT NULL AND frpm.`Percent (%) Eligible FRPM (K-12)` > 90;	california_schools
SELECT frpm.CDSCode, COUNT(*) AS FRPM_Count FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.cds IN (SELECT cds FROM satscores WHERE subject = 'Reading') GROUP BY frpm.CDSCode ORDER BY AVG(satscores.score) DESC LIMIT 1;	california_schools
SELECT `CDSCode` FROM `frpm` WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;	california_schools
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`)  FROM `frpm`  WHERE `Percent (%) Eligible Free (Ages 5-17)` > 0.3  AND `CDSCode` IN (SELECT `CDSCode` FROM `satscores` WHERE `cds` IN (SELECT `CDSCode` FROM `schools`));	california_schools
SELECT s.NCESDist, s.AdmFName3, s.AdmLName3 FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumGE1500 IS NOT NULL AND sc.NumTstTakr IS NOT NULL ORDER BY (sc.NumGE1500 / sc.NumTstTakr) DESC LIMIT 3;	california_schools
SELECT s.CDSCode, COUNT(*) AS Enrollment FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode GROUP BY s.CDSCode ORDER BY Enrollment DESC LIMIT 5;	california_schools
SELECT s.CDSCode, AVG(sat.cds) AS avg_score FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.CDSCode NOT IN (SELECT CDSCode FROM frpm) GROUP BY s.CDSCode ORDER BY avg_score DESC LIMIT 1;	california_schools
SELECT COUNT(*) FROM schools WHERE CDSCode NOT IN (SELECT cds FROM satscores)	california_schools
SELECT `schools.CDSCode`, AVG(`frpm.Percent (%) Eligible Free (K-12)`) AS avg_free, AVG(`frpm.Percent (%) Eligible FRPM (K-12)`) AS avg_frpm FROM `schools` JOIN `frpm` ON `schools.CDSCode` = `frpm.CDSCode` WHERE `frpm.Percent (%) Eligible Free (K-12)` > 499 GROUP BY `schools.CDSCode` ORDER BY avg_free DESC;	california_schools
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.Percent__Eligible_FRPM_K_12 IS NOT NULL AND f.Percent__Eligible_FRPM_K_12 <= 250 AND s.CDSCode IN (SELECT CDSCode FROM schools WHERE CDSCode LIKE '0110017%')	california_schools
SELECT sd.phoneNumber FROM schools s JOIN school_details sd ON s.CDSCode = sd.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds GROUP BY s.CDSCode, sd.phoneNumber ORDER BY AVG(sc.MathScore) DESC LIMIT 1;	california_schools
SELECT COUNT(*) FROM schools WHERE `CDSCode` IN (SELECT `CDSCode` FROM frpm) AND `CDSCode` IN (SELECT `cds` FROM satscores) AND `CDSCode` LIKE '0110017%' AND (SELECT MAX(grade) FROM satscores WHERE `cds` = `schools.CDSCode`) = 12 AND (SELECT MIN(grade) FROM satscores WHERE `cds` = `schools.CDSCode`) = 9;	california_schools
SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700;	california_schools
SELECT schools.CDSCode, COUNT(satscores.cds) AS test_takers_count FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.CDSCode LIKE '0110017%' GROUP BY schools.CDSCode ORDER BY test_takers_count DESC LIMIT 1;	california_schools
SELECT s.CDSCode, s.FullStreetAddress,         (frpm.FRPM_Count_K_12 - frpm.FRPM_Count_Ages_5_17) AS EnrollmentDifference FROM schools s JOIN frpm ON s.CDSCode = frpm.CDSCode WHERE ABS(frpm.FRPM_Count_K_12 - frpm.FRPM_Count_Ages_5_17) > 30;	california_schools
SELECT s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND sa.cds IN (SELECT cds FROM satscores WHERE cds IN (SELECT cds FROM satscores GROUP BY cds HAVING SUM(test_score) >= 1500));	california_schools
SELECT s.CDSCode, f.FundingType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sat ON s.CDSCode = sat.cds GROUP BY s.CDSCode HAVING AVG(sat.AverageMathScore) > 400;	california_schools
SELECT      s.Name,      s.Street,      s.City,      s.State,      s.ZipCode FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      f.Free_Meal_Count__Ages_5_17 > 800     AND s.CDSCode IN (SELECT CDSCode FROM schools WHERE City = 'Monterey');	california_schools
SELECT      s.CDSCode,      s.SchoolName,      w.AverageWritingScore,      c.PhoneNumber FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      satscores sat ON s.CDSCode = sat.cds JOIN      (SELECT          SchoolName,          CDSCode,          AVG(WritingScore) AS AverageWritingScore      FROM          satscores      JOIN          schools ON satscores.cds = schools.CDSCode      GROUP BY          SchoolName,          CDSCode) w ON s.CDSCode = w.CDSCode LEFT JOIN      schools_communication c ON s.CDSCode = c.CDSCode WHERE      (s.OpenYear > 1991 OR s.CloseYear < 2000)	california_schools
SELECT      s.CDSCode,      s.DOCType FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.DOCType = 'Locally Funded' GROUP BY      s.CDSCode HAVING      ABS(f.`Percent (%) Eligible Free (K-12)` - f.`Percent (%) Eligible Free (Ages 5-17)`) >      (SELECT AVG(ABS(f1.`Percent (%) Eligible Free (K-12)` - f1.`Percent (%) Eligible Free (Ages 5-17)`)      FROM frpm f1      JOIN schools s1 ON f1.CDSCode = s1.CDSCode      WHERE s1.DOCType = 'Locally Funded')	california_schools
SELECT      s.CDSCode,     s.OpenDate FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      f.`Free Meal Count (K-12)` = (SELECT MAX(`Free Meal Count (K-12)`) FROM frpm)     AND s.CDSCode IN (SELECT CDSCode FROM frpm) ORDER BY      s.OpenDate LIMIT 1;	california_schools
SELECT      s.CDSCode,      f.`Enrollment (K-12)` FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode ORDER BY      f.`Enrollment (K-12)` ASC LIMIT 5;	california_schools
SELECT      Percent__Eligible_Free__K_12 FROM      frpm ORDER BY      Enrollment__K_12 DESC LIMIT 2, 1;	california_schools
SELECT     `CDSCode`,     `FRPM Count (K-12)` / `Enrollment (K-12)` AS `Eligible Free or Reduced Price Meal Rate` FROM     `frpm` WHERE     `FRPM Count (K-12)` / `Enrollment (K-12)` = (         SELECT             MAX(`FRPM Count (K-12)` / `Enrollment (K-12)`)         FROM             `frpm`         WHERE             `CDSCode` IN (                 SELECT                     `CDSCode`                 FROM                     `schools`                 WHERE                     `ownership code` = '66'             )     ) ORDER BY     `FRPM Count (K-12)` / `Enrollment (K-12)` DESC LIMIT 5;	california_schools
SELECT s.CDSCode, s.Name, fmc.Free_Meal_Count FROM schools s JOIN frpm fmc ON s.CDSCode = fmc.CDSCode WHERE fmc.Free_Meal_Count BETWEEN 1900 AND 2000;	california_schools
SELECT     frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` AS Free_Rate FROM     frpm JOIN     schools ON frpm.CDSCode = schools.CDSCode WHERE     schools.CDSCode = (SELECT CDSCode FROM schools WHERE name = 'Kacey Gibson');	california_schools
SELECT s.AdministratorEmail FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`Enrollment (K-12)` = (     SELECT MIN(`Enrollment (K-12)`)     FROM frpm     WHERE `Charter School (Y/N)` = 1 )	california_schools
SELECT a.first_name, a.last_name FROM administrators a JOIN schools s ON a.school_id = s.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds JOIN (     SELECT s.CDSCode     FROM schools s     JOIN satscores ss ON s.CDSCode = ss.cds     GROUP BY s.CDSCode     HAVING COUNT(CASE WHEN ss.NumGE1500 >= 1500 THEN 1 END) = (         SELECT MAX(COUNT(CASE WHEN ss.NumGE1500 >= 1500 THEN 1 END))         FROM schools s         JOIN satscores ss ON s.CDSCode = ss.cds         GROUP BY s.CDSCode     ) ) as highest_sats ON s.CDSCode = highest_sats.CDSCode;	california_schools
SELECT s.Street, s.City, s.State, s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN (     SELECT CDSCode, MIN(`Percent (%) Eligible FRPM (K-12)`) AS MinExcellenceRate     FROM frpm     GROUP BY CDSCode ) AS MinFRPM ON s.CDSCode = MinFRPM.CDSCode WHERE MinFRPM.MinExcellenceRate = f.`Percent (%) Eligible FRPM (K-12)`;	california_schools
SELECT schools.CDSCode, satscores.cds FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.CDSCode LIKE '011001701%' AND (     SELECT COUNT(*)     FROM satscores AS sub     WHERE sub.cds = satscores.cds ) BETWEEN 2000 AND 3000;	california_schools
SELECT AVG(COUNT(s.CDSCode)) AS average_test_takers FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE YEAR(s.CDSCode) = 1980;	california_schools
SELECT s.TelephoneNumber FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON f.CDSCode = sc.cds WHERE s.DistrictName = 'Fresno Unified' GROUP BY s.CDSCode ORDER BY AVG(sc.ReadingScore) ASC LIMIT 1;	california_schools
SELECT si.SchoolName FROM schools s JOIN school_info si ON s.CDSCode = si.CDSCode JOIN (     SELECT cds, AVG(ReadingScore) AS AvgScore     FROM satscores     GROUP BY cds     ORDER BY AvgScore DESC ) ss ON s.CDSCode = ss.cds WHERE si.Virtual = 'F' GROUP BY si.County, si.SchoolName HAVING COUNT(*) OVER (PARTITION BY si.County) <= 5 ORDER BY si.County, AvgScore DESC;	california_schools
SELECT schools.type_of_education FROM schools JOIN satscores ON schools.CDSCode = satscores.cds JOIN (     SELECT cds, AVG(math_score) AS avg_score     FROM satscores     WHERE math_score IS NOT NULL     GROUP BY cds     ORDER BY avg_score DESC     LIMIT 1 ) AS highest_avg ON schools.CDSCode = highest_avg.cds;	california_schools
SELECT s.CDSCode, s.County, AVG(f.FRPM_Count_(K_12)) AS AverageFRPM FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds GROUP BY s.CDSCode, s.County ORDER BY AverageFRPM ASC LIMIT 1;	california_schools
SELECT      s.CDSCode,      s.City,      AVG(writing_score) AS average_writing_score FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      satscores sc ON s.CDSCode = sc.cds JOIN      (SELECT          `cds`,          SUM(`Total SAT Score`) AS total_score,          COUNT(*) AS test_taker_count      FROM          satscores      GROUP BY          `cds`      HAVING          total_score >= 1500) AS high_score_students ON      sc.cds = high_score_students.cds WHERE      f.Percent_%_Eligible_FRPM_(K_12) IS NOT NULL GROUP BY      s.CDSCode,      s.City ORDER BY      high_score_students.test_taker_count DESC LIMIT 1;	california_schools
SELECT      s.CDSCode,      s.name,      AVG(ssc.score) AS avg_writing_score FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      satscores ss ON f.CDSCode = ss.cds JOIN      (SELECT           name,           CDSCode       FROM           schools       WHERE           name = 'Ricci Ulrich') ru ON s.CDSCode = ru.CDSCode JOIN      (SELECT           cds,           score       FROM           satscores       WHERE           score IS NOT NULL AND score != '') AS ss GROUP BY      s.CDSCode,      s.name;	california_schools
SELECT      s.CDSCode,      frpm.`Enrollment (K-12)` AS Enrollment FROM      frpm INNER JOIN      schools s ON frpm.CDSCode = s.CDSCode WHERE      s.CDSCode IN ('01100170000000') ORDER BY      frpm.`Enrollment (K-12)` DESC LIMIT 1;	california_schools
SELECT COUNT(*) / 12 AS MonthlyAverageSchoolsOpened FROM schools WHERE `CDSCode` IN (SELECT `CDSCode` FROM frpm) AND `CDSCode` IN (SELECT `cds` FROM satscores) AND LEFT(`CDSCode`, 6) = '011001' AND YEAR(`CDSCode`) = 1980;	california_schools
SELECT     SUM(CASE WHEN schools.DOC = 52 THEN 1 ELSE 0 END) AS ElementarySchools,     SUM(CASE WHEN schools.DOC = 54 THEN 1 ELSE 0 END) AS UnifiedSchools,     (SUM(CASE WHEN schools.DOC = 54 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN schools.DOC = 52 THEN 1 ELSE 0 END), 0)) AS Ratio FROM     schools WHERE     schools.CDSCode IN (SELECT CDSCode FROM frpm);	california_schools
SELECT schools.County, schools.Name, schools.ClosedDate FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(schools.CDSCode) DESC LIMIT 1;	california_schools
SELECT s.PostalStreet, s.SchoolName FROM schools s JOIN (     SELECT CDSCode     FROM (         SELECT CDSCode, AVG(MathScore) as AvgScore         FROM satscores         JOIN schools ON satscores.cds = schools.CDSCode         GROUP BY schools.CDSCode         ORDER BY AvgScore DESC     ) ranked     LIMIT 6, 1 ) AS top_schools ON s.CDSCode = top_schools.CDSCode;	california_schools
SELECT s.mailing_street_address, s.school_name, AVG(sc.score) as avg_score FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds GROUP BY s.CDSCode ORDER BY avg_score ASC LIMIT 1;	california_schools
SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE EXISTS (     SELECT 1     FROM frpm     WHERE frpm.CDSCode = schools.CDSCode     AND frpm."Percent (%) Eligible FRPM (K-12)" >= 0.65 ) AND EXISTS (     SELECT 1     FROM schools AS sch     JOIN satscores ON sch.CDSCode = satscores.cds     JOIN frpm ON sch.CDSCode = frpm.CDSCode     WHERE sch.CDSCode = schools.CDSCode     AND sch.MailingCity = 'Lakeport'     GROUP BY sch.CDSCode     HAVING SUM(satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500 );	california_schools
SELECT COUNT(DISTINCT frpm.CDSCode) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON frpm.CDSCode = satscores.cds WHERE schools.mailingCity = 'Fresno';	california_schools
SELECT s.CDSCode, s.ZipCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.Administrator = 'Avetik Atoian';	california_schools
SELECT      (SELECT COUNT(*) FROM schools WHERE `CDSCode` IN (SELECT `CDSCode` FROM frpm) AND `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `mailingState` = 'CA' AND `county` = 'Colusa'))     /      (SELECT COUNT(*) FROM schools WHERE `CDSCode` IN (SELECT `CDSCode` FROM frpm) AND `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `mailingState` = 'CA' AND `county` = 'Humboldt')) AS ratio;	california_schools
SELECT COUNT(DISTINCT frpm.CDSCode) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.CDSCode IN (     SELECT CDSCode FROM schools WHERE mailingState = 'CA' AND mailingCity = 'San Joaquin' );	california_schools
SELECT s.phone, s.extension FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN (     SELECT cds, AVG(writing_score) AS avg_score     FROM satscores     WHERE writing_score IS NOT NULL     GROUP BY cds     ORDER BY avg_score DESC ) AS subq ON s.CDSCode = subq.cds WHERE subq.avg_score = (     SELECT AVG(writing_score) AS avg_score     FROM satscores     WHERE writing_score IS NOT NULL     ORDER BY avg_score DESC     LIMIT 1 OFFSET 332 )	california_schools
SELECT schools.name, schools.phone_number, schools.extension_number FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON frpm.CDSCode = satscores.cds WHERE schools.zip_code = '95203-3704';	california_schools
SELECT schools.website FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN (     SELECT CDSCode     FROM frpm     WHERE schools.admin_name = 'Mike Larson' OR schools.admin_name = 'Dante Alvarez' ) AS admin_schools ON frpm.CDSCode = admin_schools.CDSCode;	california_schools
SELECT s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.CDSCode IN (     SELECT sc.CDSCode     FROM schools sc     JOIN satscores sat ON sc.CDSCode = sat.cds     WHERE sc.CDSCode LIKE '011001%'     GROUP BY sc.CDSCode     HAVING COUNT(sat.cds) < 5 );	california_schools
SELECT COUNT(*) FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1)  AND CDSCode IN (SELECT CDSCode FROM schools WHERE DOC = 52);	california_schools
SELECT COUNT(*) FROM frpm WHERE `Percent (%) Eligible Free (K-12)` < 0.18 AND `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `Charter` = 0);	california_schools
SELECT s.full_name, s.city FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.CDSCode LIKE '00D2%' JOIN schools cs ON f.CDSCode = cs.CDSCode JOIN satscores sc ON cs.CDSCode = sc.cds JOIN schools c ON sc.cds = c.CDSCode WHERE c.CDSCode LIKE '00D2%'	california_schools
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.CDSCode LIKE '00D4%' AND s.CDSCode LIKE '%Hickman%';	california_schools
SELECT      (COUNT(CASE WHEN `Percent (%) Eligible Free (K-12)` IS NOT NULL THEN `CDSCode` END) / COUNT(`CDSCode`) * 100) AS `Locally_Funded_Percentage` FROM      `frpm` WHERE      EXISTS (SELECT 1 FROM `schools` WHERE `schools.CDSCode` = `frpm.CDSCode` AND `schools.CDSCode` LIKE '011001%')	california_schools
SELECT COUNT(*) FROM schools WHERE `CDSCode` IN (SELECT `CDSCode` FROM frpm) AND `CDSCode` IN (SELECT `cds` FROM satscores) AND `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `FundingType` = 'Directly Funded') AND `CDSCode` NOT IN (SELECT `CDSCode` FROM schools WHERE `DateOpened` BETWEEN '2000-01-01' AND '2005-12-31')	california_schools
SELECT COUNT(DISTINCT f.CDSCode) AS total_schools FROM frpm f JOIN satscores s ON f.CDSCode = s.cds;	california_schools
SELECT      `schools`.`county`,      COUNT(`schools`.`CDSCode`) AS `closure_count` FROM      `schools` JOIN      `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` JOIN      `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE      `schools`.`SOC` = 11      AND `schools`.`CDSCode` IN ('01100170109835', '01100170112607', '01100170118489', '01100170123968')     AND YEAR(`schools`.`date`) BETWEEN 1980 AND 1989 GROUP BY      `schools`.`county` ORDER BY      `closure_count` DESC LIMIT 1;	california_schools
SELECT s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SOC = 31;	california_schools
SELECT COUNT(*)  FROM schools  WHERE CDSCode IN (SELECT CDSCode FROM frpm) AND        CDSCode NOT IN (SELECT CDSCode FROM satscores);	california_schools
SELECT s.CDSCode FROM schools s LEFT JOIN frpm f ON s.CDSCode = f.CDSCode LEFT JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.`Percent (%) Eligible Free (K-12)` IS NOT NULL AND f.`Percent (%) Eligible FRPM (K-12)` IS NOT NULL AND sa.cds IS NULL;	california_schools
SELECT `Enrollment (K-12)` FROM frpm WHERE `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `EdOpsCode` = 'SSS') AND `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL AND `Percent (%) Eligible Free (Ages 5-17)` > 0 AND `Percent (%) Eligible FRPM (Ages 5-17)` IS NOT NULL AND `Percent (%) Eligible FRPM (Ages 5-17)` > 0;	california_schools
SELECT frpm.`Free Meal Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN (     SELECT CDSCode     FROM schools     WHERE mailing_street_address = 'PO Box 1040' AND school_name = 'Youth Authority School' ) AS youth_school ON frpm.CDSCode = youth_school.CDSCode;	california_schools
SELECT MIN(`Grade`)  FROM `schools`  JOIN `districts` ON `schools.CDSCode` = `districts.CDSCode` WHERE `districts.NCES_DistrictID` = '0613360' AND `districts.EdOpsCode` = 'SPECON';	california_schools
SELECT s.StatusType, sch.Name FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON f.CDSCode = sc.cds JOIN (     SELECT CDSCode     FROM schools     WHERE StatusType = 'Active' AND CDSCode LIKE '37%' ) AS active_schools ON sc.cds = active_schools.CDSCode JOIN (     SELECT Name     FROM schools     WHERE CDSCode = '01100170109835' OR CDSCode = '01100170112607' OR CDSCode = '01100170118489' OR CDSCode = '01100170123968' ) AS schools_with_provision ON s.CDSCode = schools_with_provision.Name;	california_schools
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.EILCode = 'HS' AND f.Lunch_Provision = 2 AND f.Lowest_Grade = 9 AND f.Highest_Grade = 12 AND s.County = 'Merced';	california_schools
SELECT      s.CDSCode,      f.`Percent (%) Eligible Free (Ages 5-17)` FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f.`Enrollment (Ages 5-17)` IS NOT NULL AND      f.`FRPM Count (Ages 5-17)` IS NOT NULL AND      s.CDSCode IN (         SELECT              CDSCode          FROM              schools          WHERE              CDSCode LIKE '011001%'     );	california_schools
SELECT `GradeSpan`, COUNT(*) as Count FROM `schools` WHERE `City` = 'Adelanto' GROUP BY `GradeSpan` ORDER BY Count DESC LIMIT 1;	california_schools
SELECT      `schools`.`COUNTY`,      COUNT(`schools`.`CDSCode`) AS `number_of_schools` FROM      `schools` WHERE      `schools`.`CDSCode` IN (         SELECT              `frpm`.`CDSCode`         FROM              `frpm`         JOIN              `schools`         ON              `frpm`.`CDSCode` = `schools`.`CDSCode`         JOIN              `satscores`         ON              `frpm`.`CDSCode` = `satscores`.`cds`         WHERE              `schools`.`COUNTY` BETWEEN 'San Diego' AND 'Santa Barbara'             AND `schools`.`Virtual` = 'F'     ) GROUP BY      `schools`.`COUNTY` ORDER BY      `number_of_schools` DESC LIMIT 1;	california_schools
SELECT s.Name, s.Latitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds ORDER BY s.Latitude DESC LIMIT 1;	california_schools
SELECT s.CDSCode, s.school_name, s.latitude, MIN(s.latitude) as min_latitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.state = 'CA' GROUP BY s.CDSCode, s.school_name, s.latitude ORDER BY s.latitude ASC LIMIT 1;	california_schools
SELECT s.CDSCode, MAX(s.longitude) AS max_longitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sats ON s.CDSCode = sats.cds GROUP BY s.CDSCode ORDER BY max_longitude DESC LIMIT 1;	california_schools
SELECT      s.City,      COUNT(DISTINCT s.CDSCode) AS NumberOfSchools FROM      schools AS s JOIN      frpm AS f ON s.CDSCode = f.CDSCode WHERE      f.`Percent (%) Eligible FRPM (K-12)` IS NOT NULL      AND s.CDSCode IN (SELECT                            cds                        FROM                            satscores) GROUP BY      s.City HAVING      COUNT(DISTINCT s.CDSCode) > 1;	california_schools
SELECT      a.firstName,      s.districtCode,      COUNT(*) as frequency FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      administrators a ON s.CDSCode = a.CDSCode GROUP BY      a.firstName,      s.districtCode ORDER BY      frequency DESC LIMIT 2;	california_schools
SELECT      frpm.`CDSCode`,      frpm.`Percent (%) Eligible Free (K-12)` FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode JOIN      (         SELECT              CDSCode          FROM              schools          WHERE              first_name = 'Alusine'     ) AS admin_schools ON frpm.CDSCode = admin_schools.CDSCode;	california_schools
SELECT s.admin_lastname, s.district, s.county, sch.name FROM schools s JOIN frpm fr ON s.CDSCode = fr.CDSCode JOIN satscores sat ON fr.CDSCode = sat.cds WHERE s.CDSCode = '01100170109835' JOIN sch ON s.CDSCode = sch.CDSCode;	california_schools
SELECT a.admin_email FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds JOIN (     SELECT school_id, admin_email     FROM administrators     WHERE county = 'San Bernardino' AND city = 'San Bernardino City Unified' ) a ON s.CDSCode = a.school_id WHERE s.school_type IN ('62', '54') AND s.open_year BETWEEN '2009' AND '2010';	california_schools
SELECT s.admin_email, sch.Name FROM schools sch JOIN frpm fr ON sch.CDSCode = fr.CDSCode JOIN satscores sat ON fr.CDSCode = sat.cds WHERE sat.score >= 1500 GROUP BY sch.CDSCode, sch.admin_email, sch.Name ORDER BY COUNT(sat.cds) DESC LIMIT 1;	california_schools
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE d.district_id = 3 AND t.trans_id IN (     SELECT trans_id     FROM trans     JOIN order o ON trans.account_id = o.account_id     WHERE o.order_id = 29401 );	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN `order` o ON a.account_id = o.account_id JOIN `loan` l ON a.account_id = l.account_id JOIN `region` r ON d.district_id = r.district_id WHERE r.region_name = 'Prague';	financial
SELECT     CASE WHEN AVG(A12) > AVG(A13) THEN '1995'          ELSE '1996'     END AS year_with_higher_unemployment_rate,     AVG(A12) AS avg_unemployment_1995,     AVG(A13) AS avg_unemployment_1996 FROM     (SELECT A12 FROM `unemployment` WHERE `year` = 1995) AS year_1995,     (SELECT A13 FROM `unemployment` WHERE `year` = 1996) AS year_1996;	financial
SELECT COUNT(DISTINCT d.district_id) AS num_districts FROM district d JOIN employee e ON d.district_id = e.district_id WHERE e.gender = 'F' AND e.salary BETWEEN 6000 AND 10000;	financial
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND c.A11 > 8000;	financial
SELECT a.account_id, a11.AvgSalary FROM (     SELECT `client_id`, AVG(`salary`) AS AvgSalary     FROM `client`     JOIN `account` ON `client.account_id` = `account.account_id`     WHERE `client.gender` = 'F'     GROUP BY `client_id` ) AS a11 JOIN `account` a ON a11.`client_id` = a.account_id JOIN (     SELECT MAX(`salary`) AS MaxSalary, MIN(`salary`) AS MinSalary     FROM `client`     WHERE `gender` = 'F' ) AS salary_extremes ON a11.AvgSalary BETWEEN salary_extremes.MinSalary AND salary_extremes.MaxSalary ORDER BY a11.AvgSalary LIMIT 1;	financial
SELECT c.account_id FROM client c JOIN account a ON c.account_id = a.account_id JOIN (     SELECT account_id, AVG(salary) AS avg_salary     FROM employee     GROUP BY account_id ) e ON a.account_id = e.account_id WHERE c.district_id = (     SELECT district_id     FROM district     ORDER BY district_id ASC     LIMIT 1 ) ORDER BY e.avg_salary DESC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE t.trans_id = 1 AND o.order_id = 29401;	financial
SELECT c.client_id FROM `client` c JOIN `disp` d ON c.client_id = d.client_id JOIN `account` a ON d.account_id = a.account_id JOIN `trans` t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE o.order_id = 29401 AND d.client_id = c.client_id;	financial
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.loan_id) = 1997 GROUP BY a.account_id HAVING COUNT(l.loan_id) = (     SELECT MIN(loan_count)     FROM (         SELECT COUNT(l.loan_id) AS loan_count         FROM loan l         WHERE YEAR(l.loan_id) = 1997         GROUP BY a.account_id     ) AS subquery ) ORDER BY a.account_id;	financial
SELECT account_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE loan_id IN (SELECT loan_id FROM loan WHERE account_id = loan.account_id AND DATEDIFF(CURRENT_DATE, loan_date) > 365)) AND YEAR(open_date) = 1993 ORDER BY approved_amount DESC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id) AS female_customers_before_1950_sokolov FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_year < 1950 AND d.A2 = 'Sokolov';	financial
SELECT account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE YEAR(trans.trans_date) = 1995 ORDER BY trans.trans_date ASC LIMIT 1;	financial
SELECT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id GROUP BY a.account_id HAVING MIN(t.trans_id) < 1997 AND SUM(t.trans_id) > 3000;	financial
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card crd ON a.account_id = crd.account_id WHERE crd.disp_id = 9;	financial
SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id IN (     SELECT account_id FROM trans     WHERE account_id = (         SELECT account_id FROM trans         WHERE trans_id = (             SELECT trans_id FROM trans             WHERE account_id = 1 AND trans_date = '1998-10-14'         )     ) AND amount = 840 );	financial
SELECT a.district_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.loan_id = 4959 AND a.account_id IN (     SELECT account_id     FROM account     JOIN disp ON account.account_id = disp.account_id     JOIN client ON disp.client_id = client.client_id     WHERE client.district_id = (         SELECT district_id         FROM district         WHERE district_id = 18     ) )	financial
SELECT MAX(amount) AS biggest_transaction FROM `trans` JOIN `account` ON `trans.account_id` = `account.account_id` JOIN `card` ON `account.account_id` = `card.account_id` JOIN `disp` ON `card.disp_id` = `disp.disp_id` JOIN `client` ON `disp.client_id` = `client.client_id` WHERE `client.client_id` IN (     SELECT `client_id`     FROM `client`     JOIN `disp` ON `client.client_id` = `disp.client_id`     JOIN `card` ON `disp.disp_id` = `card.disp_id`     JOIN `account` ON `card.account_id` = `account.account_id`     WHERE `account.account_id` IN (         SELECT `account_id`         FROM `account`         WHERE `account_id` IN (             SELECT `account_id`             FROM `trans`         )     )     AND `disp.disp_date` = '1996-10-21' );	financial
SELECT c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN (     SELECT district_id, AVG(salary) as avg_salary     FROM employee     JOIN district ON employee.district_id = district.district_id     GROUP BY district_id ) AS avg_salary_branch ON a.district_id = avg_salary_branch.district_id JOIN (     SELECT d.client_id     FROM disp d     JOIN account a ON d.account_id = a.account_id     JOIN (         SELECT district_id, MIN(birthdate) as oldest_birthdate         FROM client         JOIN district ON client.district_id = district.district_id         GROUP BY district_id     ) AS oldest_birthdate_branch ON a.district_id = oldest_birthdate_branch.district_id     WHERE d.client_id = oldest_birthdate_branch.client_id ) AS oldest_client_in_highest_salary_branch ON c.client_id = oldest_client_in_highest_salary_branch.client_id WHERE (     SELECT AVG(salary)     FROM employee     JOIN district ON employee.district_id = district.district_id     WHERE district.district_id = a.district_id ) = (     SELECT MAX(avg_salary)     FROM (         SELECT district_id, AVG(salary) as avg_salary         FROM employee         JOIN district ON employee.district_id = district.district_id         GROUP BY district_id     ) AS avg_salaries );	financial
SELECT t.account_id, MIN(t.trans_id) as first_transaction FROM trans t JOIN account a ON t.account_id = a.account_id JOIN loan l ON t.account_id = l.account_id WHERE t.account_id IN (SELECT account_id FROM loan ORDER BY loan_id DESC LIMIT 1) ORDER BY t.trans_id ASC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE d.district_id = 18 AND c.client_id IN (     SELECT cl.client_id      FROM client cl      JOIN account a ON cl.account_id = a.account_id      WHERE a.district_id = 18 ) AND c.client_id IN (     SELECT cl.client_id      FROM client cl      JOIN account a ON cl.account_id = a.account_id      WHERE a.account_id IN (SELECT account_id FROM account WHERE district_id = 18) AND cl.client_id IN (         SELECT client_id          FROM client          WHERE gender = 'F'     ) );	financial
SELECT d.disp_id FROM `disp` d JOIN `account` a ON d.account_id = a.account_id JOIN `trans` t ON a.account_id = t.account_id WHERE t.account_id IN (     SELECT account_id     FROM `account`     JOIN `order` o ON account_id = o.account_id     WHERE o.account_id IN (         SELECT account_id         FROM `account`         JOIN `loan` l ON account_id = l.account_id         WHERE l.loan_id = 4959     )     AND t.trans_id = (         SELECT trans_id         FROM `trans`         WHERE `account_id` = 1 AND `trans_id` = 5     ) ) AND d.client_id IN (     SELECT client_id     FROM `client`     WHERE district_id = 1 );	financial
SELECT COUNT(a.account_id)  FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.district_id = (SELECT district_id FROM district WHERE district_name = 'Litomerice');	financial
SELECT d.district_id FROM client c JOIN account a ON c.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';	financial
SELECT c.client_id, cl.birthday FROM `loan` l JOIN `account` a ON l.account_id = a.account_id JOIN `client` c ON a.account_id = c.account_id JOIN `client` cl ON c.client_id = cl.client_id WHERE l.loan_id = 98832 AND l.account_id IN (SELECT account_id FROM `account` WHERE district_id = (SELECT district_id FROM `district` WHERE district_id = a.district_id))	financial
SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.account_id JOIN district d ON c.district_id = d.district_id WHERE d.district_id = (SELECT district_id FROM district WHERE district_id = 3) ORDER BY c.client_id ASC LIMIT 1;	financial
SELECT      (SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A3 = 'South Bohemia')) /      (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'South Bohemia')) * 100 AS male_client_percentage FROM      district WHERE      A3 = 'South Bohemia' ORDER BY      (SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = district.district_id) DESC LIMIT 1;	financial
SELECT      (SELECT (SUM(t.amount) - COALESCE(SUM(t2.amount), 0)) / COALESCE(SUM(t2.amount), 1) * 100       FROM `trans` t       LEFT JOIN `trans` t2 ON t.account_id = t2.account_id AND t2.trans_id < t.trans_id AND t2.trans_id >= (SELECT MIN(trans_id) FROM `trans` WHERE account_id = c.account_id AND trans_id < (SELECT MIN(trans_id) FROM `trans` WHERE account_id = c.account_id AND trans_date = '1993-07-05') AND trans_date <= '1993-03-22')      WHERE t.account_id = c.account_id AND t.trans_date <= '1993-03-22')       / (SELECT (SUM(t.amount) - COALESCE(SUM(t2.amount), 0)) / COALESCE(SUM(t2.amount), 1) * 100          FROM `trans` t          LEFT JOIN `trans` t2 ON t.account_id = t2.account_id AND t2.trans_id < t.trans_id AND t2.trans_id >= (SELECT MIN(trans_id) FROM `trans` WHERE account_id = c.account_id AND trans_date <= '1998-12-27')         WHERE t.account_id = c.account_id AND t.trans_date <= '1998-12-27') * 100 AS increase_rate FROM `client` c  WHERE c.client_id = (SELECT client_id FROM `disp` WHERE disp_id = (SELECT disp_id FROM `loan` WHERE loan_id = (SELECT MIN(loan_id) FROM `loan` WHERE loan_date = '1993-07-05')));	financial
SELECT      (SUM(CASE WHEN l.amount = (SELECT amount FROM loan WHERE loan_id = l.loan_id) THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100 AS paid_full_percentage FROM      loan l	financial
SELECT      ROUND((COUNT(CASE WHEN l.amount < 100000 THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_running_no_issue FROM      loan l WHERE      l.amount < 100000 AND     EXISTS (SELECT 1 FROM `account` a WHERE a.account_id = l.account_id AND a.account_id IN (SELECT account_id FROM `disp` WHERE `status` = 'C'));	financial
SELECT a.account_id, d.name AS district_name, d.region FROM account a JOIN district d ON a.district_id = d.district_id WHERE YEAR(a.account_id) = 1993 AND EXISTS (     SELECT 1     FROM order o     WHERE a.account_id = o.account_id       AND o.order_id = (         SELECT MAX(order_id)         FROM order         WHERE account_id = a.account_id           AND order_id > (             SELECT MAX(trans_id)             FROM trans             WHERE account_id = a.account_id           )       ) );	financial
SELECT      a.account_id,      COUNT(*) AS statement_frequency FROM      account a JOIN      district d ON a.district_id = d.district_id WHERE      d.district_id = (SELECT district_id FROM district WHERE district_name = 'east Bohemia')     AND a.account_id IN (SELECT account_id FROM `order` WHERE YEAR(order_date) BETWEEN 1995 AND 2000) GROUP BY      a.account_id;	financial
SELECT a.account_id, a.account_opening_date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.district_name = 'Prachatice';	financial
SELECT d.district_id, d.region  FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990;	financial
SELECT a.account_id, d.district_id, r.region FROM account a JOIN district d ON a.district_id = d.district_id JOIN `order` o ON a.account_id = o.account_id JOIN (     SELECT account_id, SUM(amount) AS total_amount     FROM loan     GROUP BY account_id     HAVING total_amount > 300000 ) l ON a.account_id = l.account_id JOIN region r ON d.district_id = r.district_id;	financial
SELECT l.loan_id, d.district_id, a11 FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id JOIN (     SELECT a.account_id, AVG(s.salary) AS a11     FROM account a     JOIN client c ON a.account_id = c.account_id     JOIN district d ON c.district_id = d.district_id     JOIN salary s ON d.district_id = s.district_id     GROUP BY a.account_id ) AS a11 ON l.account_id = a11.account_id WHERE l.loan_id IN (     SELECT loan_id     FROM loan     WHERE loan_id LIKE 'A3%' ) AND a11.a11 = 11;	financial
SELECT d.district_id, ((a2016 - a2015) / a2015) * 100 AS unemployment_rate_increment FROM district d JOIN client c ON d.district_id = c.district_id JOIN loan l ON c.client_id = l.account_id WHERE l.status = 'D' AND a2015 = (SELECT unemployment_rate FROM unemployment WHERE year = 2015 AND district_id = d.district_id) AND a2016 = (SELECT unemployment_rate FROM unemployment WHERE year = 2016 AND district_id = d.district_id);	financial
SELECT     (COUNT(CASE WHEN d.district_id = 18 THEN 1 END) * 100.0) / COUNT(*) FROM     account a JOIN     district d ON a.district_id = d.district_id WHERE     a.account_id IN (         SELECT             account_id         FROM             account         WHERE             year_opened = 1993     );	financial
SELECT account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans_id IN (     SELECT trans_id     FROM trans     WHERE description = 'POPLATEK MESICNE' ) GROUP BY account_id;	financial
SELECT d.district_id, COUNT(a.account_id) AS female_account_holders FROM district d JOIN account a ON d.district_id = a.district_id WHERE a.gender = 'F' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 9;	financial
SELECT d.district_name, SUM(t.amount) AS total_withdrawals FROM `trans` t JOIN `account` a ON t.account_id = a.account_id JOIN `district` d ON a.district_id = d.district_id WHERE t.amount < 0 AND t.trans_id IN (     SELECT trans_id     FROM `trans`     WHERE DATE_FORMAT(trans_date, '%Y-%m') = '1996-01' ) GROUP BY d.district_name ORDER BY total_withdrawals DESC LIMIT 10;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.district_id = (SELECT district_id FROM district WHERE district_name = 'South Bohemia') AND a.account_id NOT IN (     SELECT DISTINCT c.account_id     FROM card c     JOIN disp d ON c.disp_id = d.disp_id     JOIN account a ON d.account_id = a.account_id     WHERE d.client_id = a.account_id );	financial
SELECT d.district_id, d.district_name, COUNT(l.loan_id) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'C' OR l.status = 'D' GROUP BY d.district_id, d.district_name ORDER BY active_loan_count DESC LIMIT 1;	financial
SELECT AVG(loan_amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.account_id = client.account_id WHERE client.gender = 'M';	financial
SELECT d.district_id, d.A2, d.A13 FROM district d JOIN (     SELECT district_id, A13     FROM `data`     WHERE year = 1996 ) AS d_data ON d.district_id = d_data.district_id WHERE d_data.A13 = (     SELECT MAX(A13)     FROM `data`     WHERE year = 1996 );	financial
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  JOIN (     SELECT district_id      FROM crime      WHERE year = 1996      GROUP BY district_id      ORDER BY COUNT(A16) DESC      LIMIT 1 ) AS crime_district ON a.district_id = crime_district.district_id;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.account_id IN (     SELECT account_id     FROM trans     WHERE operation = 'VYBER KARTOU'     AND date_format(trans_date, '%Y-%m') = date_format(CURRENT_DATE, '%Y-%m') ) AND a.account_id IN (     SELECT account_id     FROM `order`     WHERE frequency = 'POPLATEK MESICNE' );	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.loan_id BETWEEN 19950000 AND 19971231 AND d.client_id IN (SELECT client_id FROM client WHERE district_id IN (SELECT district_id FROM district WHERE district_id BETWEEN 1 AND 5)) AND EXISTS (     SELECT 1     FROM `order`     WHERE `order_id` BETWEEN 19950000 AND 19971231     AND `account_id` = a.account_id     AND `order_id` IN (         SELECT `order_id`         FROM `order`         JOIN `account` ON `account`.account_id = `order`.account_id         WHERE `account`.account_id = a.account_id         AND `order_id` IN (             SELECT `order_id`             FROM `order`             WHERE `order_id` BETWEEN 19950000 AND 19971231             AND `order_id` IN (                 SELECT `order_id`                 FROM `order`                 WHERE `account_id` = a.account_id                 AND `order_id` IN (                     SELECT `order_id`                     FROM `order`                     WHERE `order_id` BETWEEN 19950000 AND 19971231                     AND `account_id` = a.account_id                     AND `order_id` IN (                         SELECT `order_id`                         FROM `order`                         WHERE `order_id` BETWEEN 19950000 AND 19971231                         AND `account_id` = a.account_id                     )                 )             )         )     ) )	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE d.client_id IN (SELECT client_id FROM client WHERE district_id = 1) AND c.district_id = 1 AND (c.status = 'C' OR c.status = 'D');	financial
SELECT COUNT(c.client_id)  FROM client c JOIN district d ON c.district_id = d.district_id JOIN (     SELECT district_id     FROM (         SELECT district_id, SUM(crime_count) AS total_crimes         FROM crime         WHERE year = 1995         GROUP BY district_id         ORDER BY total_crimes DESC         LIMIT 1 OFFSET 1     ) AS subquery ) AS second_highest ON d.district_id = second_highest.district_id WHERE c.gender = 'M';	financial
SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE c.disp_id IN (SELECT disp_id FROM disp WHERE client_id = (SELECT client_id FROM client WHERE district_id = (SELECT district_id FROM district WHERE district_id = 5))) AND d.client_id = (SELECT client_id FROM client WHERE district_id = (SELECT district_id FROM district WHERE district_id = 5)) AND EXISTS (SELECT 1 FROM district d2 WHERE d2.district_id = 5 AND d2.district_id = c.client_id);	financial
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');	financial
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.trans_id IN (     SELECT trans_id     FROM trans     WHERE account_id IN (         SELECT account_id         FROM account         WHERE district_id = d.district_id     )     AND YEAR(t.trans_id) = 1997 ) GROUP BY d.district_id HAVING SUM(t.trans_id) > 10000;	financial
SELECT DISTINCT o.account_id FROM `order` o JOIN `account` a ON o.account_id = a.account_id JOIN `disp` d ON a.account_id = d.account_id JOIN `client` c ON d.client_id = c.client_id JOIN `district` dt ON c.district_id = dt.district_id JOIN `trans` t ON o.account_id = t.account_id WHERE dt.district_id = 5 AND t.trans_id IN (     SELECT trans_id     FROM `trans`     WHERE `account_id` IN (         SELECT `account_id`         FROM `account`         JOIN `disp` ON `account.account_id` = `disp.account_id`         JOIN `client` ON `disp.client_id` = `client.client_id`         JOIN `district` ON `client.district_id` = `district.district_id`         WHERE `district.district_id` = 5     )     AND `account_id` IN (         SELECT `account_id`         FROM `account`         JOIN `disp` ON `account.account_id` = `disp.account_id`         JOIN `client` ON `disp.client_id` = `client.client_id`         JOIN `district` ON `client.district_id` = `district.district_id`         WHERE `district.district_id` = 5     )     AND `account_id` IN (         SELECT `account_id`         FROM `account`         JOIN `disp` ON `account.account_id` = `disp.account_id`         JOIN `client` ON `disp.client_id` = `client.client_id`         JOIN `district` ON `client.district_id` = `district.district_id`         WHERE `district.district_id` = 5     )     AND `account_id` IN (         SELECT `account_id`         FROM `account`         JOIN `disp` ON `account.account_id` = `disp.account_id`         JOIN `client` ON `disp.client_id` = `client.client_id`         JOIN `district` ON `client.district_id` = `district.district_id`         WHERE `district.district_id` = 5     ) )	financial
SELECT DISTINCT a.account_id FROM account a JOIN card c ON a.account_id = c.account_id JOIN disp d ON a.account_id = d.account_id JOIN client cl ON d.client_id = cl.client_id JOIN district dt ON cl.district_id = dt.district_id WHERE dt.district_id = 5;	financial
SELECT AVG(amount) AS average_credit_card_amount FROM `trans` JOIN `account` ON `trans.account_id` = `account.account_id` WHERE `trans_id` IN (     SELECT `trans_id`     FROM `trans`     JOIN `order` ON `trans.trans_id` = `order.order_id`     WHERE `order_id` IN (         SELECT `order_id`         FROM `order`         JOIN `disp` ON `order.account_id` = `disp.account_id`         JOIN `account` ON `disp.account_id` = `account.account_id`         WHERE `account.account_id` IN (             SELECT `account_id`             FROM `account`             JOIN `card` ON `account.account_id` = `card.account_id`             WHERE `card_id` IN (                 SELECT `card_id`                 FROM `card`                 JOIN `disp` ON `card.disp_id` = `disp.disp_id`                 JOIN `client` ON `disp.client_id` = `client.client_id`                 WHERE `client_id` IN (                     SELECT `client_id`                     FROM `client`                     JOIN `district` ON `client.district_id` = `district.district_id`                     WHERE `district_id` IN (                         SELECT `district_id`                         FROM `district`                         WHERE `district_id` = 1 -- Assuming district_id 1 is for the year 2021                     )                 )             )         )     ) )	financial
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE t.trans_id IN (SELECT trans_id FROM trans WHERE `account_id` IN (SELECT `account_id` FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `order` WHERE `order_id` IN (SELECT `order_id` FROM `order` WHERE `account_id` IN (SELECT `account_id` FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `trans` WHERE `trans_id` IN (SELECT `trans_id` FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `trans` WHERE `operation` = 'VYBER KARTOU')))))) AND t.operation = 'VYBER KARTOU' AND o.order_id IN (SELECT `order_id` FROM `order` WHERE `account_id` IN (SELECT `account_id` FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `trans` WHERE `operation` = 'VYBER KARTOU'))) AND (SELECT AVG(amount) FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `trans` WHERE `operation` = 'VYBER KARTOU'))) > t.amount;	financial
SELECT DISTINCT a.account_id, a.district_id FROM account a JOIN client c ON a.account_id = c.account_id WHERE c.gender = 'F' JOIN card crd ON a.account_id = crd.account_id JOIN loan l ON a.account_id = l.account_id;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN client c ON a.account_id = c.account_id JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.district_id = 3;	financial
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id JOIN `order` o ON a.account_id = o.account_id WHERE d.district_id = 5 AND o.account_id IN (SELECT account_id FROM account WHERE `account_type` = 'OWNER');	financial
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id WHERE NOT EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = a.account_id ) AND d.A11 BETWEEN 8000 AND 9000 AND a.account_id NOT IN (     SELECT account_id     FROM account     WHERE account_type = 'OWNER' );	financial
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dt ON c.district_id = dt.district_id JOIN (     SELECT district_id      FROM district      WHERE district_id = (SELECT district_id FROM district WHERE district_id = 3) ) north_bohemia ON dt.district_id = north_bohemia.district_id JOIN (     SELECT account_id      FROM loan      WHERE account_id IN (SELECT account_id FROM trans) ) l ON a.account_id = l.account_id JOIN district district_ab ON a.district_id = district_ab.district_id WHERE district_ab.district_id = 3;	financial
SELECT d.district_id, d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.trans_id IN (     SELECT trans_id     FROM trans     WHERE type = 'VYDAJ' );	financial
SELECT AVG(A15) AS average_crimes FROM crime WHERE A3 IN (SELECT DISTINCT A3 FROM crime WHERE A15 > 4000) AND EXISTS (     SELECT 1     FROM account     WHERE account.account_id = crime.account_id     AND account_open_year >= 1997 )	financial
SELECT COUNT(*) FROM account JOIN card ON account.account_id = card.account_id JOIN disp ON account.account_id = disp.account_id WHERE account.account_type = 'OWNER' AND card.card_type = 'classic';	financial
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE d.district_id = 2 AND c.gender = 'M';	financial
SELECT      (COUNT(CASE WHEN c.type = 'Gold' AND c.issued_date < '1998-01-01' THEN 1 END) * 100.0) / COUNT(c.card_id) AS gold_card_percentage FROM      card c;	financial
SELECT a.account_id, c.client_id FROM account a JOIN loan l ON a.account_id = l.account_id JOIN `disp` d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id ORDER BY l.loan_id DESC LIMIT 1;	financial
SELECT COUNT(A15.crime_count)  FROM `A15`  JOIN `account` ON A15.district_id = account.district_id  WHERE account.account_id = 532 AND A15.year = 1995;	financial
SELECT a.district_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 33333;	financial
SELECT `trans_id`, `account_id` FROM `trans` WHERE `account_id` IN (     SELECT `account_id`     FROM `account`     WHERE `account_id` IN (         SELECT `account_id`         FROM `client`         WHERE `client_id` = 3356     ) ) AND `account_id` IN (     SELECT `account_id`     FROM `order`     WHERE `operation` = 'VYBER' );	financial
SELECT COUNT(DISTINCT o.account_id) FROM `order` o JOIN `account` a ON o.account_id = a.account_id JOIN `loan` l ON a.account_id = l.account_id WHERE l.loan_id IS NOT NULL AND l.loan_id < 200000;	financial
SELECT c.card_id FROM `client` cl JOIN `disp` d ON cl.client_id = d.client_id JOIN `card` cr ON d.disp_id = cr.disp_id WHERE cl.client_id = 13539;	financial
SELECT d.`district_id` FROM `client` c JOIN `district` d ON c.district_id = d.district_id WHERE c.client_id = 3541;	financial
SELECT d.district_id, COUNT(a.account_id) AS account_count FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;	financial
SELECT c.client_id FROM `order` o JOIN `disp` d ON o.account_id = d.account_id JOIN `client` c ON d.client_id = c.client_id WHERE o.order_id = 32423;	financial
SELECT t.trans_id, a.account_id FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5;	financial
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE district_id = 18);	financial
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.card_id = 2 AND d.date >= '1997-01-01';	financial
SELECT      ROUND((COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_female_clients FROM      client c JOIN      account a ON c.district_id = a.district_id JOIN      district d ON a.district_id = d.district_id JOIN      (SELECT           district_id       FROM           district       WHERE           AVG(salary) > 10000) AS high_salary_districts ON c.district_id = high_salary_districts.district_id;	financial
SELECT     (SUM(CASE WHEN YEAR(trans.trans_date) = 1997 THEN trans.amount ELSE 0 END) -       SUM(CASE WHEN YEAR(trans.trans_date) = 1996 THEN trans.amount ELSE 0 END)) /       SUM(CASE WHEN YEAR(trans.trans_date) = 1996 THEN trans.amount ELSE 1 END) * 100 AS growth_rate FROM     trans JOIN     account ON trans.account_id = account.account_id JOIN     client ON account.account_id = client.account_id WHERE     client.gender = 'M'	financial
SELECT COUNT(*) FROM trans JOIN account ON trans.account_id = account.account_id JOIN card ON account.account_id = card.account_id WHERE card.disp_id IN (SELECT disp_id FROM disp JOIN client ON disp.client_id = client.client_id WHERE client_id = 2) AND trans.trans_id > 1995;	financial
SELECT   (SELECT SUM(crime_count) FROM crime WHERE region = 'North Bohemia' AND year = 1996) -   (SELECT SUM(crime_count) FROM crime WHERE region = 'East Bohemia' AND year = 1996) AS crime_difference;	financial
SELECT COUNT(*)  FROM disp  WHERE account_id BETWEEN 1 AND 10;	financial
-- How often does account number 3 request an account statement to be released? SELECT COUNT(*) as statement_requests FROM trans WHERE account_id = 3;  -- What was the aim of debiting 3539 in total? SELECT SUM(amount) as total_debit FROM trans WHERE k_symbol = '3539';	financial
SELECT birth_year FROM person WHERE account_id = 130;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN trans t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE d.client_id = a.account_id AND o.account_id = a.account_id AND t.account_id = a.account_id AND t.trans_id IN (     SELECT trans_id     FROM trans     WHERE `account_id` = a.account_id AND `account_id` IN (         SELECT account_id         FROM order         WHERE account_id = a.account_id     )     AND `account_id` IN (         SELECT account_id         FROM disp         WHERE client_id = a.account_id     ) ) AND EXISTS (     SELECT 1     FROM trans     WHERE `account_id` = a.account_id AND `account_id` IN (         SELECT account_id         FROM order         WHERE account_id = a.account_id     )     AND `account_id` IN (         SELECT account_id         FROM disp         WHERE client_id = a.account_id     )     AND description = 'POPLATEK PO OBRATU' );	financial
SELECT      COALESCE(SUM(CASE WHEN l.loan_amount IS NOT NULL THEN l.loan_amount ELSE 0 END), 0) AS total_debt,     COUNT(CASE WHEN t.is_payment = 1 THEN 1 END) AS payments_made,     COUNT(*) AS total_transactions FROM      client c LEFT JOIN      loan l ON c.client_id = l.account_id LEFT JOIN      trans t ON c.client_id = t.account_id AND t.is_payment = 1 WHERE      c.client_id = 992;	financial
SELECT SUM(t.amount) AS total_sum,         CASE WHEN a.gender = 'Male' THEN 'Man'             WHEN a.gender = 'Female' THEN 'Woman'             ELSE 'Unknown'        END AS account_owner_gender FROM account a JOIN trans t ON a.account_id = t.account_id JOIN (     SELECT account_id     FROM trans     WHERE trans_id = 851 ) t851 ON a.account_id = t851.account_id JOIN client c ON a.account_id = c.account_id JOIN person a ON c.client_id = a.client_id WHERE c.client_id = 4;	financial
SELECT c.card_id FROM `client` cl JOIN `disp` d ON cl.client_id = d.client_id JOIN `account` a ON d.account_id = a.account_id JOIN `card` c ON a.account_id = c.account_id WHERE cl.client_id = 9;	financial
SELECT SUM(amount) AS total_payment FROM `trans` WHERE `account_id` IN (     SELECT `account_id`     FROM `account`     JOIN `client` ON `account.district_id` = `client.district_id`     WHERE `client_id` = 617 )	financial
SELECT c.client_id FROM client c JOIN account a ON c.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.district_id = 1 AND c.client_id BETWEEN 1983 AND 1987;	financial
SELECT c.client_id FROM client c JOIN loan l ON c.account_id = l.account_id JOIN account a ON c.account_id = a.account_id WHERE a.district_id = 5 AND c.client_id IN (     SELECT client_id     FROM client     WHERE gender = 'F'     ORDER BY l.loan_id DESC ) ORDER BY l.loan_id DESC LIMIT 3;	financial
SELECT COUNT(DISTINCT c.client_id) AS male_customers_over_4000 FROM client c JOIN account a ON c.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND t.trans_id IN (     SELECT trans_id     FROM trans     WHERE amount > 4000 ) AND YEAR(c.birthdate) BETWEEN 1974 AND 1976;	financial
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.district_id = 5 AND account.account_id IN (     SELECT account_id     FROM account     JOIN district ON account.district_id = district.district_id     WHERE district.district_id = 5 AND YEAR(CURRENT_DATE) - YEAR(account.account_id) > 1996 );	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN account a ON c.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card crd ON d.disp_id = crd.disp_id WHERE c.gender = 'F' AND crd.card_id BETWEEN 1 AND 10;	financial
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(c.client_id) AS female_percentage FROM      client c JOIN      account a ON c.account_id = a.account_id JOIN      district d ON a.district_id = d.district_id WHERE      d.district_id = (SELECT district_id FROM district WHERE name = 'Prague');	financial
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN c.client_id END) / COUNT(DISTINCT o.account_id)) * 100 AS male_clients_percentage FROM     client c JOIN     order o ON c.client_id = o.account_id WHERE     o.order_id IN (SELECT order_id FROM `order` WHERE description = 'POPLATEK TYDNE');	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE t.trans_id IN (     SELECT trans_id FROM trans     JOIN `order` o ON trans.account_id = o.account_id     WHERE o.order_id = (         SELECT order_id FROM `order` WHERE account_id = a.account_id AND `order_id` = (             SELECT MAX(`order_id`) FROM `order` WHERE account_id = a.account_id         )     ) ) AND o.order_id = (     SELECT order_id FROM `order` WHERE account_id = a.account_id AND `order_id` = (         SELECT MAX(`order_id`) FROM `order` WHERE account_id = a.account_id     ) ) AND o.account_id IN (     SELECT account_id FROM `order` WHERE `order_id` = (         SELECT MAX(`order_id`) FROM `order` WHERE account_id = o.account_id     ) AND account_id IN (         SELECT account_id FROM `order` WHERE `order_id` = (             SELECT MAX(`order_id`) FROM `order` WHERE account_id = a.account_id         )     ) ) AND t.trans_id IN (     SELECT trans_id FROM trans     JOIN `order` o ON trans.account_id = o.account_id     WHERE o.account_id = a.account_id AND o.order_id = (         SELECT MAX(`order_id`) FROM `order` WHERE account_id = a.account_id     )     AND o.order_id IN (         SELECT order_id FROM `order` WHERE account_id = o.account_id AND `order_id` = (             SELECT MAX(`order_id`) FROM `order` WHERE account_id = o.account_id         )     ) ) AND t.trans_id IN (     SELECT trans_id FROM trans     JOIN `order` o ON trans.account_id = o.account_id     WHERE o.account_id = a.account_id AND o.order_id = (         SELECT MAX(`order_id`) FROM `order` WHERE account_id = a.account_id     )     AND o.order_id IN (         SELECT order_id FROM `order` WHERE account_id = o.account_id AND `order_id` = (             SELECT MAX(`order_id`) FROM `order` WHERE account_id = o.account_id         )     ) );	financial
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id IN (     SELECT loan_id     FROM loan     WHERE loan_validity > 24 ) ORDER BY l.approved_amount ASC LIMIT 1;	financial
SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.account_id JOIN `A11` a11 ON a.account_id = a11.account_id WHERE c.gender = 'F' AND a11.salary = (SELECT MIN(avg_salary) FROM (SELECT AVG(salary) AS avg_salary FROM `A11` GROUP BY account_id) AS min_salary) ORDER BY a11.birth_date ASC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND YEAR(c.birthdate) = 1920;	financial
SELECT COUNT(DISTINCT l.loan_id) FROM loan l JOIN account a ON l.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.trans_id IN (SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                         SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                             SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                                 SELECT trans_id FROM trans WHERE account_id = l.account_id AND trans_id IN (                                                                                                     SELECT trans_id FROM trans WHERE account_id = l.account_id AND	financial
SELECT AVG(l.amount) as average_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.status IN ('C', 'D') AND t.trans_type = 'POPLATEK PO OBRATU';	financial
SELECT c.client_id, d.district_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.account_id IN (SELECT account_id FROM account WHERE district_id = c.district_id);	financial
SELECT c.client_id, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id JOIN account acc ON d.account_id = acc.account_id JOIN loan ln ON acc.account_id = ln.account_id WHERE crd.type = 'gold' AND d.type = 'OWNER';	financial
SELECT `bond_type`, COUNT(`bond_type`) AS `count` FROM `bond` GROUP BY `bond_type` ORDER BY `count` DESC LIMIT 1;	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2  JOIN (     SELECT DISTINCT atom_id      FROM atom      JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2      JOIN molecule ON atom.molecule_id = molecule.molecule_id      WHERE molecule.label = '-' ) non_carcinogenic ON c.atom_id = non_carcinogenic.atom_id  WHERE a.element = 'cl';	toxicology
SELECT AVG(CASE WHEN b.bond_id IS NOT NULL THEN (SELECT COUNT(*) FROM `connected` c JOIN `atom` a ON c.atom_id = a.atom_id WHERE a.atom_id LIKE '%o%' AND c.bond_id = b.bond_id) ELSE 0 END) AS avg_oxygen_atoms FROM `bond` b WHERE b.bond_id LIKE '-%' GROUP BY b.molecule_id;	toxicology
SELECT      AVG(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS avg_single_bonded_carcinogens FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+';	toxicology
SELECT COUNT(*) FROM molecule AS mol JOIN atom AS a ON mol.molecule_id = a.molecule_id JOIN (     SELECT DISTINCT atom_id     FROM atom     JOIN molecule ON atom.molecule_id = molecule.molecule_id     WHERE molecule.molecule_id IN (SELECT molecule_id FROM molecule AS mol2 WHERE mol2.label = '-') ) AS non_carcinogenic_sodium ON a.atom_id = non_carcinogenic_sodium.atom_id WHERE a.element = 'na';	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN connected c1 ON m.molecule_id = c1.atom_id JOIN connected c2 ON m.molecule_id = c2.atom_id2 JOIN bond b ON c1.bond_id = b.bond_id JOIN bond b2 ON c2.bond_id = b2.bond_id WHERE b.bond_type = '#' AND b2.bond_type = '#' JOIN molecule m2 ON m.molecule_id = m2.molecule_id WHERE m2.label = '+';	toxicology
SELECT      (SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100.0) / COUNT(a.atom_id) AS percentage_of_carbon FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '='	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '#';	toxicology
SELECT COUNT(*) FROM atom a WHERE NOT EXISTS (     SELECT 1     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     JOIN molecule m ON b.molecule_id = m.molecule_id     WHERE a.atom_id = c.atom_id     AND m.molecule_id LIKE '%br%' );	toxicology
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id LIKE '%c%';	toxicology
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR004_8_9';	toxicology
SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id LIKE '%=%';	toxicology
SELECT MAX(COUNT(label)) AS most_numerous_label FROM (     SELECT atom_id, label     FROM atom     JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2     JOIN molecule ON atom.molecule_id = molecule.molecule_id     WHERE molecule.label = 'h'     GROUP BY label ) AS hydrogen_labels GROUP BY label;	toxicology
SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE atom.element = 'cl' OR atom2.element = 'cl';	toxicology
SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id IN (     SELECT bond_id     FROM bond     WHERE bond_type = '-' );	toxicology
SELECT DISTINCT c1.atom_id, c2.atom_id FROM connected c1 JOIN connected c2 ON c1.bond_id = c2.bond_id JOIN molecule m ON c1.molecule_id = m.molecule_id WHERE m.molecule_id LIKE 'TR%' AND m.molecule_id NOT LIKE '%TR00%' AND c1.atom_id < c2.atom_id;	toxicology
SELECT m.molecule_id, a.atom_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id LIKE 'TR%' AND m.molecule_id NOT IN (     SELECT molecule_id     FROM molecule     WHERE molecule_id LIKE 'TR00%' ) GROUP BY a.atom_id ORDER BY COUNT(a.atom_id) LIMIT 1;	toxicology
SELECT bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR        (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8');	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m WHERE m.molecule_id NOT IN (     SELECT c.atom_id     FROM connected c     JOIN atom a ON c.atom_id = a.atom_id     WHERE a.molecule_id IN (         SELECT a2.atom_id         FROM atom a2         JOIN molecule mol ON a2.molecule_id = mol.molecule_id         WHERE mol.molecule_id NOT IN (             SELECT mol2.molecule_id             FROM molecule mol2             WHERE mol2.molecule_id LIKE '%sn%'         )     ) ) AND EXISTS (     SELECT 1     FROM molecule m2     WHERE m2.molecule_id = m.molecule_id AND m2.label = '+' )	toxicology
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006')  AND a.atom_id LIKE '%i%'  AND a.atom_id LIKE '%s%'  AND b.bond_type = '-';	toxicology
SELECT c1.atom_id, c1.atom_id2 FROM connected c1 JOIN connected c2 ON c1.bond_id = c2.bond_id JOIN connected c3 ON c1.bond_id = c3.bond_id WHERE c2.atom_id = c3.atom_id2 AND c2.atom_id != c3.atom_id	toxicology
SELECT DISTINCT c1.atom_id FROM connected c1 JOIN connected c2 ON c1.bond_id = c2.bond_id AND c1.atom_id < c2.atom_id WHERE c2.atom_id = 'TR181';	toxicology
SELECT      (SELECT COUNT(DISTINCT a.atom_id)       FROM atom a       JOIN connected c ON a.atom_id = c.atom_id       JOIN molecule m ON a.molecule_id = m.molecule_id       WHERE m.label = '+' AND a.element = 'f') /      (SELECT COUNT(DISTINCT m.molecule_id)       FROM molecule m       WHERE m.label = '+') * 100 AS percentage_of_carcinogenic_with_fluorine	toxicology
SELECT      ROUND((SUM(CASE WHEN c.bond_id IS NOT NULL AND SUBSTRING(c.bond_id, 1, 1) = '#' THEN 1 ELSE 0 END) * 100.0) / COUNT(b.bond_id), 2) AS percent FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.molecule_id LIKE '%TR%' AND     m.molecule_id LIKE '%+' AND     c.bond_id LIKE '#%'	toxicology
SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000' AND a1.atom_id NOT IN (     SELECT a2.atom_id     FROM atom a2     JOIN connected c2 ON a2.atom_id = c2.atom_id     JOIN bond b2 ON c2.bond_id = b2.bond_id     JOIN molecule m2 ON b2.molecule_id = m2.molecule_id     WHERE m2.molecule_id = 'TR000' AND c2.atom_id2 = a1.atom_id ) ORDER BY a1.atom_id ASC LIMIT 3;	toxicology
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';	toxicology
SELECT      (SELECT COUNT(*) FROM molecule WHERE label = '+') -      (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference;	toxicology
SELECT `atom_id` FROM `connected` WHERE `bond_id` = 'TR000_2_5';	toxicology
SELECT bond_id FROM connected WHERE atom_id = 'TR000_2' OR atom_id2 = 'TR000_2';	toxicology
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id IN (     SELECT bond_id     FROM bond     WHERE bond_type = ' = ' ) GROUP BY m.molecule_id ORDER BY m.molecule_id ASC LIMIT 5;	toxicology
SELECT ROUND(DIVIDE(SUM(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END), COUNT(bond.bond_id)) * 100, 5) AS percent FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008';	toxicology
SELECT ROUND(DIVIDE(SUM(CASE WHEN `molecule`.`molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = '+') THEN 1 ELSE 0 END), COUNT(`molecule`.`molecule_id`)) * 100, 3) AS `percent` FROM `molecule`	toxicology
SELECT      ROUND(         (SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) * 100) / COUNT(atom.atom_id),         4     ) AS percent FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id WHERE      connected.molecule_id = 'TR206';	toxicology
SELECT b.bond_id, b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.molecule_id = 'TR000';	toxicology
SELECT a.atom_id, m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';	toxicology
SELECT bond_type, COUNT(bond_type) AS count FROM bond WHERE molecule_id = 'TR010' GROUP BY bond_type ORDER BY count DESC LIMIT 1;	toxicology
SELECT molecule_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE bond.bond_id LIKE '-%' AND molecule.molecule_id NOT IN (     SELECT molecule.molecule_id     FROM molecule     JOIN connected ON molecule.molecule_id = connected.molecule_id     JOIN bond ON connected.bond_id = bond.bond_id     WHERE bond.bond_id LIKE '-%'     GROUP BY molecule.molecule_id     HAVING COUNT(DISTINCT bond.bond_id) > 1 ) ORDER BY molecule_id ASC LIMIT 3;	toxicology
SELECT bond_id, COUNT(*) as count FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR006') OR atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR006') GROUP BY bond_id ORDER BY count DESC LIMIT 2;	toxicology
SELECT COUNT(*) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE m.label = '+' AND a.element = 'br';	toxicology
SELECT bond.bond_id, bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';	toxicology
SELECT m.molecule_id, m.carcinogenic FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_10';	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#';	toxicology
SELECT COUNT(DISTINCT bond_id)  FROM connected  WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';	toxicology
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.molecule_id = 'TR004';	toxicology
SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN (     SELECT molecule_id     FROM molecule     JOIN atom ON molecule.molecule_id = atom.molecule_id     JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2     JOIN bond ON connected.bond_id = bond.bond_id     WHERE bond.bond_id = 'TR000_2_4' );	toxicology
SELECT DISTINCT c.molecule_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND EXISTS (     SELECT 1     FROM connected c2     JOIN bond b ON c2.bond_id = b.bond_id     WHERE c2.atom_id = a.atom_id     AND b.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') );	toxicology
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.atom_id LIKE 'TR%_p' OR a2.atom_id LIKE 'TR%_p') AND (a1.atom_id LIKE 'TR%_n' OR a2.atom_id LIKE 'TR%_n');	toxicology
SELECT      m.molecule_id,      COUNT(c.bond_id) AS double_bond_count FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = ' = ' AND m.label = '+' GROUP BY      m.molecule_id ORDER BY      double_bond_count DESC LIMIT 1;	toxicology
SELECT AVG(COUNT(b.bond_id)) / COUNT(a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.atom_id LIKE '%i%' OR a.atom_id LIKE '%I%' GROUP BY a.atom_id;	toxicology
SELECT bond.bond_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE SUBSTR(connected.atom_id, 7, 2) = '45' OR SUBSTR(connected.atom_id2, 7, 2) = '45'	toxicology
SELECT a.atom_id FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id IS NULL;	toxicology
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR041' AND b.bond_id LIKE '%#%' GROUP BY a1.atom_id, a2.atom_id HAVING COUNT(c.bond_id) = 3;	toxicology
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR144_8_19';	toxicology
SELECT m.molecule_id, COUNT(b.bond_id) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND b.bond_id LIKE '% = %' GROUP BY m.molecule_id ORDER BY double_bond_count DESC LIMIT 1;	toxicology
SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY atom_id ORDER BY COUNT(*) ASC LIMIT 1;	toxicology
SELECT DISTINCT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = (SELECT atom_id FROM atom WHERE atom_id LIKE 'TR000_%' AND atom_id LIKE '%pb');	toxicology
SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';	toxicology
SELECT      (COUNT(bond_id) /      (SELECT COUNT(DISTINCT atom_id)       FROM connected       WHERE atom_id IN         (SELECT atom_id          FROM connected          GROUP BY atom_id          ORDER BY COUNT(atom_id) DESC          LIMIT 1))) * 100 AS percentage_of_most_common_bond FROM      connected;	toxicology
SELECT ROUND((SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100) / COUNT(bond_id), 5) AS proportion_of_carcinogenic_single_bonds FROM bond WHERE bond_type = '-';	toxicology
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND (a.atom_id LIKE 'TR%_c' OR a.atom_id LIKE 'TR%_h' OR a.atom_id LIKE 'TR%_C' OR a.atom_id LIKE 'TR%_H')	toxicology
SELECT DISTINCT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000' AND a.atom_id LIKE 'TR000_%' AND a.atom_id LIKE '%s%';	toxicology
SELECT bond.bond_id, bond.molecule_id, bond_type.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id JOIN (SELECT `atom_id`, CASE `bond_type`                             WHEN ' = ' THEN 'double bond'                            WHEN '-' THEN 'single bond'                            WHEN '#' THEN 'triple bond'                            ELSE 'unknown'                        END AS bond_type       FROM bond) AS bond_type ON bond.bond_type = bond_type.bond_type WHERE atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE `atom_id` LIKE 'sn%')	toxicology
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = '-'  GROUP BY a.molecule_id  HAVING COUNT(DISTINCT a.atom_id) = 2;	toxicology
SELECT COUNT(DISTINCT a.atom_id) AS total_triple_bond_atoms FROM atom a JOIN bond b ON a.atom_id = SUBSTRING_INDEX(b.bond_id, '_', 1) JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND b.bond_id LIKE '%#%' AND (     (SELECT COUNT(DISTINCT element) FROM element WHERE element LIKE '%p%' AND a.atom_id = atom_id)     OR     (SELECT COUNT(DISTINCT element) FROM element WHERE element LIKE '%br%' AND a.atom_id = atom_id) )	toxicology
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');	toxicology
SELECT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-' AND NOT EXISTS (     SELECT 1     FROM molecule m     WHERE c.molecule_id = m.molecule_id AND m.carcinogenic = 'yes' );	toxicology
SELECT      SUM(CASE WHEN a.atom_id LIKE '%cl%' THEN 1 ELSE 0 END) / COUNT(a.atom_id) * 100 AS percentage_cl FROM      atom a JOIN      bond b ON a.molecule_id = b.molecule_id WHERE      b.bond_id LIKE '%-%'	toxicology
SELECT molecule_id, CASE molecule_id     WHEN 'TR000' THEN '+'     WHEN 'TR001' THEN '+'     WHEN 'TR002' THEN '-'     ELSE NULL END AS label FROM `molecule` WHERE molecule_id IN ('TR000', 'TR001', 'TR002');	toxicology
SELECT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) AS total_carcinogenic_molecules FROM molecule m WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030' AND EXISTS (     SELECT 1     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2     JOIN bond b ON c.bond_id = b.bond_id     WHERE a.molecule_id = m.molecule_id     AND b.bond_id = '+' );	toxicology
SELECT bond.bond_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';	toxicology
SELECT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON a2.atom_id = c.atom_id2 WHERE b.bond_id = 'TR001_10_11';	toxicology
SELECT COUNT(DISTINCT b.bond_id) FROM bond b JOIN atom a1 ON b.molecule_id = a1.molecule_id AND a1.atom_id = 'TR000_5' JOIN atom a2 ON b.molecule_id = a2.molecule_id AND a2.atom_id = 'TR000_6' WHERE a1.molecule_id = a2.molecule_id;	toxicology
SELECT      m.molecule_id,     MAX(CASE WHEN c.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_count,     MAX(CASE WHEN c.label = '-' THEN 1 ELSE 0 END) AS non_carcinogenic_count FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id WHERE      m.molecule_id LIKE '%ca%' GROUP BY      m.molecule_id;	toxicology
SELECT EXISTS (     SELECT 1     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     JOIN atom a1 ON c.atom_id = a1.atom_id     JOIN atom a2 ON c.atom_id2 = a2.atom_id     WHERE b.bond_id = 'TR001_1_8'       AND (a1.atom_id = 'TR001_cl' OR a1.atom_id = 'TR001_c')       AND (a2.atom_id = 'TR001_cl' OR a2.atom_id = 'TR001_c') ) AS has_chlorine_and_carbon;	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.atom_id LIKE '%c%' AND b.bond_type = '#' AND m.molecule_id LIKE 'TR%' AND m.molecule_id NOT LIKE '%label-%';	toxicology
SELECT      (SUM(CASE WHEN `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = '+')                AND `element` = 'cl' THEN 1 ELSE 0 END) / COUNT(`molecule_id`))     * 100 AS percentage_of_chlorine_in_carcinogenic_molecules FROM      `atom` WHERE      `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = '+');	toxicology
SELECT DISTINCT `atom_id` FROM `connected` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`molecule_id` = 'TR001' UNION SELECT DISTINCT `atom_id2` FROM `connected` JOIN `atom` ON `connected`.`atom_id2` = `atom`.`atom_id` WHERE `atom`.`molecule_id` = 'TR001';	toxicology
SELECT bond.molecule_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id != connected.atom_id AND bond.molecule_id != connected.atom_id2;	toxicology
SELECT c1.atom_id AS first_atom, c2.atom_id AS second_atom FROM connected c1 JOIN connected c2 ON c1.atom_id = c2.atom_id WHERE c1.bond_id = c2.bond_id AND c1.bond_id LIKE '%#%' AND c1.atom_id < c2.atom_id;	toxicology
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR000_1_2';	toxicology
SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id IN (SELECT bond_id FROM connected WHERE bond_id LIKE '%-%') AND molecule.molecule_id IN (SELECT molecule_id FROM molecule WHERE molecule_id NOT LIKE '%C%')	toxicology
SELECT `label` FROM `bond` JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond_id` = 'TR001_10_11';	toxicology
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND c.bond_id LIKE '%_1' AND m.label = '+';	toxicology
SELECT m.molecule_id,         COUNT(DISTINCT a.atom_id) AS toxicology_element_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id LIKE 'TR%' AND        m.molecule_id LIKE '%4' AND        m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY m.molecule_id;	toxicology
SELECT      (CASE WHEN SUM(CASE WHEN atom.atom_id LIKE 'H%' THEN 1 ELSE 0 END) = 0 THEN 0 ELSE SUM(CASE WHEN atom.atom_id LIKE 'H%' THEN 1 ELSE 0 END) / COUNT(*) END) AS ratio,     CASE          WHEN (SELECT COUNT(*) FROM molecule WHERE molecule.molecule_id = 'TR006' AND molecule.label = '+') > 0 THEN '+'         ELSE '-'     END AS label FROM      atom WHERE      atom.molecule_id = 'TR006'	toxicology
SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id OR m.molecule_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id = a.atom_id2 WHERE a.atom_id LIKE '%ca%' OR a.atom_id2 LIKE '%ca%' AND EXISTS (     SELECT 1     FROM molecule m2     WHERE m2.molecule_id = m.molecule_id     AND m2.molecule_id LIKE '%+%' );	toxicology
SELECT bond.bond_id, bond.molecule_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id LIKE '%c%' AND bond.bond_type IN ('=', '-', '#');	toxicology
SELECT      DISTINCT a1.element AS Element1,      a2.element AS Element2 FROM      connected c JOIN      atom a1 ON c.atom_id = a1.atom_id JOIN      atom a2 ON c.atom_id2 = a2.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11')     AND a1.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')     AND a2.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')     AND c.bond_id = 'TR001_10_11';	toxicology
SELECT     (SELECT COUNT(*) FROM bond WHERE bond_type = '#') * 100.0 /      (SELECT COUNT(*) FROM bond) AS triple_bond_percentage;	toxicology
SELECT      ROUND((SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) / COUNT(bond.bond_id)) * 100, 2) AS percent_double_bond FROM      bond WHERE      bond.molecule_id = 'TR047';	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.atom_id = 'TR001_1' JOIN molecule carcinogenic_mol ON m.molecule_id = carcinogenic_mol.molecule_id WHERE carcinogenic_mol.label = '+';	toxicology
SELECT COUNT(*)  FROM `molecule` m  JOIN `atom` a ON m.molecule_id = a.molecule_id  JOIN `connected` c ON a.atom_id = c.atom_id  WHERE m.molecule_id = 'TR151'  AND c.bond_id IS NULL;	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR151' AND b.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` IN (     SELECT `molecule_id`     FROM `connected`     JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id`     JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id`     JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id`     WHERE `atom`.`molecule_id` IS NULL     GROUP BY `molecule_id`     HAVING COUNT(DISTINCT `atom`.`atom_id`) > 1 ) AND `molecule_id` LIKE 'TR%';	toxicology
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050' AND m.molecule_id LIKE 'TR%';	toxicology
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND m.molecule_id LIKE '+%';	toxicology
SELECT bond_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002', 'TR004', 'TR006') AND bond.bond_type = ' = ';	toxicology
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id LIKE 'TR%' AND m.molecule_id IN (     SELECT c.molecule_id     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     JOIN atom a2 ON b.bond_id = a2.atom_id     JOIN atom a3 ON b.bond_id = a3.atom_id     WHERE a2.atom_id LIKE '%h%' AND a3.atom_id LIKE '%h%' AND a2.atom_id <> a3.atom_id )	toxicology
SELECT `molecule_id` FROM `bond` JOIN `connected` ON `bond.bond_id` = `connected.bond_id` WHERE `connected.atom_id` = 'TR000_1' AND `bond.bond_id` = 'TR000_1_2';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') AND a.element = 'c';	toxicology
SELECT      (SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id)) * 100.0 AS percentage FROM      (SELECT DISTINCT T1.molecule_id       FROM          (SELECT T3.molecule_id           FROM              (SELECT T2.molecule_id               FROM                  (SELECT T1.atom_id                   FROM                      atom T1                   INNER JOIN connected T2 ON T1.atom_id = T2.atom_id                   INNER JOIN bond T3 ON T2.bond_id = T3.bond_id                   INNER JOIN molecule T4 ON T3.molecule_id = T4.molecule_id                   WHERE T4.label = '+' AND T1.atom_id LIKE 'TR%') T2              INNER JOIN molecule T3 ON T2.molecule_id = T3.molecule_id              WHERE T3.label = '+') T3) T1	toxicology
SELECT COUNT(*) > 0 AS is_carcinogenic FROM molecule AS mol JOIN atom AS a ON mol.molecule_id = a.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE mol.molecule_id = 'TR124' AND c.bond_id IN (SELECT bond_id FROM connected WHERE bond_id LIKE 'TR%' AND bond_id NOT IN (SELECT bond_id FROM connected WHERE atom_id LIKE 'TR124%' OR atom_id2 LIKE 'TR124%'));	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.molecule_id = 'TR186' OR a.molecule_id = c.bond_id;	toxicology
SELECT bond_type  FROM bond  WHERE bond_id = 'TR007_4_19';	toxicology
SELECT DISTINCT a1.element AS element1, a2.element AS element2 FROM atom a1 JOIN atom a2 ON a1.atom_id = a2.atom_id JOIN connected c ON c.atom_id = a1.atom_id OR c.atom_id = a2.atom_id JOIN bond b ON b.bond_id = c.bond_id JOIN molecule m ON m.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_2_4' AND a1.element IN ('c', 'h', 'o', 'n', 's', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a2.element IN ('c', 'h', 'o', 'n', 's', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT      COUNT(*) AS double_bond_count,     m.label AS carcinogenic_label FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      m.molecule_id = 'TR006' AND      b.bond_type = ' = '	toxicology
SELECT m.molecule_id, GROUP_CONCAT(DISTINCT a.atom_id ORDER BY a.atom_id) AS elements FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id IN (     SELECT molecule_id     FROM molecule     JOIN connected c ON molecule.molecule_id = c.atom_id     WHERE c.atom_id LIKE '%cl%' ) GROUP BY m.molecule_id;	toxicology
SELECT b.bond_id, a1.atom_id AS atom1, a2.atom_id AS atom2 FROM bond b JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON c1.atom_id = c2.atom_id2 AND c2.atom_id = c1.atom_id2 JOIN atom a1 ON c1.atom_id = a1.atom_id JOIN atom a2 ON c2.atom_id2 = a2.atom_id WHERE b.molecule_id = a1.molecule_id AND b.molecule_id = a2.molecule_id AND b.bond_id = c1.bond_id AND b.bond_id = c2.bond_id AND b.bond_id NOT IN (SELECT bond_id FROM bond WHERE bond_type != '-');	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id LIKE '%3' UNION SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id LIKE '%#' JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element IN ('c', 'n', 'o', 's', 'p', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT a1.element  FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id WHERE c.bond_id = 'TR000_2_3' UNION SELECT a2.element  FROM atom a2 JOIN connected c ON a2.atom_id = c.atom_id2 WHERE c.bond_id = 'TR000_2_3';	toxicology
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE molecule_id LIKE 'TR%') AND atom.molecule_id = 'TR000' AND atom.atom_id LIKE '%cl';	toxicology
SELECT a.atom_id, COUNT(c.bond_id) AS bond_count FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.molecule_id = 'TR346' GROUP BY a.atom_id;	toxicology
SELECT COUNT(DISTINCT m.molecule_id) AS double_bond_molecules,        SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_double_bond_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id LIKE '% = %';	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  WHERE m.molecule_id NOT IN (     SELECT DISTINCT b.molecule_id      FROM bond b      JOIN connected c ON b.bond_id = c.bond_id      JOIN atom a1 ON c.atom_id = a1.atom_id      JOIN atom a2 ON c.atom_id2 = a2.atom_id      WHERE b.bond_type = ' = ' AND a1.element = 's' OR a2.element = 's' )	toxicology
SELECT      m.carcinogenic_label FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_id = 'TR001_2_4'	toxicology
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR001';	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '-';	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id LIKE '%CL%' JOIN molecule m2 ON m.molecule_id = m2.molecule_id AND m2.molecule_id = 'TR000' WHERE m2.label = '+';	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id LIKE '%c%' AND NOT EXISTS (     SELECT 1     FROM molecule m2     WHERE m2.molecule_id = m.molecule_id AND m2.molecule_id LIKE '%carcinogenic%' );	toxicology
SELECT      (SUM(CASE WHEN m.label = '+' AND a.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentage FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = '+';	toxicology
SELECT `molecule_id` FROM `bond` WHERE `bond_id` = 'TR001_1_7';	toxicology
SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'c' AND connected.bond_id = 'TR001_3_4';	toxicology
SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';	toxicology
SELECT m.molecule_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b1 ON c1.bond_id = b1.bond_id JOIN atom a2 ON a2.atom_id = c1.atom_id2 JOIN molecule m ON b1.molecule_id = m.molecule_id WHERE (a1.atom_id = 'TR000_2' OR a2.atom_id = 'TR000_2') AND (a1.atom_id = 'TR000_4' OR a2.atom_id = 'TR000_4') GROUP BY m.molecule_id;	toxicology
SELECT `element` FROM `atom` JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom_id` = 'TR000_1';	toxicology
SELECT COUNT(*)  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m2 ON c.atom_id = m2.molecule_id OR c.atom_id2 = m2.molecule_id WHERE m.molecule_id = 'TR000' AND m2.molecule_id = 'TR004'	toxicology
SELECT      COUNT(CASE WHEN b.bond_id IS NULL THEN 1 END) / COUNT(a.atom_id) * 100 AS single_bond_percentage FROM      atom a LEFT JOIN      connected c ON a.atom_id = c.atom_id LEFT JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_id IS NULL;	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id LIKE '%N%' AND EXISTS (     SELECT 1      FROM molecule m2     JOIN atom a2 ON m2.molecule_id = a2.molecule_id     JOIN connected c ON a2.atom_id = c.atom_id     WHERE m2.molecule_id = m.molecule_id     AND c.bond_id IS NULL )	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND m.molecule_id LIKE '%s%'	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id LIKE 'TR%-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;	toxicology
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR024' AND b.bond_id LIKE '%2%';	toxicology
SELECT      m.molecule_id,      COUNT(a.atom_id) AS atom_count FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.molecule_id LIKE 'TR%+' -- Assuming that the carcinogenic molecules have a '+' at the end of their ID GROUP BY      a.molecule_id ORDER BY      atom_count DESC LIMIT 1;	toxicology
SELECT      (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(m.molecule_id) AS percentage_carcinogenic_with_triple_bonded_H FROM      molecule m JOIN      connected c ON m.molecule_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      atom a ON c.atom_id = a.atom_id WHERE      a.element = 'h' AND b.bond_type = '#';	toxicology
SELECT COUNT(*) FROM molecule WHERE molecule_id IN (     SELECT DISTINCT molecule_id     FROM connected     JOIN bond ON connected.bond_id = bond.bond_id     JOIN atom ON bond.molecule_id = atom.molecule_id     WHERE atom.atom_id LIKE 'TR000%' ) AND molecule_id LIKE 'TR00%'	toxicology
SELECT COUNT(*) FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_id IN (     SELECT bond_id FROM connected WHERE bond_id IS NOT NULL AND bond_id LIKE '-%' )	toxicology
SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR008' AND a.atom_id LIKE 'C%';	toxicology
SELECT DISTINCT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.atom_id = 'TR004_7' AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     JOIN bond b ON c.bond_id = b.bond_id     JOIN atom a2 ON b.bond_id = a2.atom_id OR b.bond_id = a2.atom_id2     WHERE a2.element = '-' )	toxicology
SELECT COUNT(DISTINCT c.molecule_id) FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON b.bond_id = a.atom_id OR b.bond_id = a.atom_id2 WHERE a.atom_id LIKE '%o%' OR a.atom_id2 LIKE '%o%' AND b.bond_type = ' = ';	toxicology
SELECT COUNT(DISTINCT c.molecule_id) FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '-';	toxicology
SELECT a.atom_id, b.bond_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR002';	toxicology
SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR012' AND b.bond_type = ' = ' AND a1.element = 'c';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id LIKE '%TR%' AND m.molecule_id LIKE '%o%' AND m.molecule_id LIKE '%+'	toxicology
SELECT * FROM Cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT c.cardName FROM Cards c WHERE c.borderColor = 'borderless' AND NOT EXISTS (     SELECT 1     FROM CardKingdomFoil cf     WHERE c.cardKingdomId = cf.cardKingdomId     AND cf.cardKingdomFoilId IS NOT NULL );	card_games
SELECT card_name FROM Cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM Cards);	card_games
SELECT CardName FROM Cards WHERE EDHRec < 100 AND frameVersion = 2015;	card_games
SELECT card_name  FROM cards  WHERE rarity = 'mythic'  AND status = 'Banned'  AND format = 'gladiator';	card_games
SELECT card_name, legality_status FROM cards WHERE type = 'Artifact' AND side IS NULL AND format = 'vintage';	card_games
SELECT card_id, artist FROM cards WHERE power = '*' OR power IS NULL AND format = 'commander' AND status = 'Legal';	card_games
SELECT c.card_id, c.ruling_text, c.hasContentWarning, c.value FROM cards c JOIN card_artists ca ON c.card_id = ca.card_id JOIN artists a ON ca.artist_id = a.artist_id WHERE a.artist_name = 'Stephen Daniel' AND c.hasContentWarning = 1;	card_games
SELECT information  FROM rulings  WHERE card_name = 'Sublime Epiphany' AND number = '74s';	card_games
SELECT card_name, artist_name, is_promo FROM cards JOIN rulings ON cards.uuid = rulings.card_uuid WHERE card_name = (SELECT card_name FROM cards JOIN rulings ON cards.uuid = rulings.card_uuid GROUP BY card_name ORDER BY COUNT(rulings.uuid) DESC LIMIT 1) AND is_promo = 1;	card_games
SELECT DISTINCT language FROM cards JOIN card_details ON cards.id = card_details.card_id WHERE cards.name = 'annul' AND cards.number = '29';	card_games
SELECT DISTINCT card_name FROM cards WHERE language = 'Japanese' AND EXISTS (     SELECT 1     FROM translations     WHERE translations.card_id = cards.id     AND translations.language = 'Japanese'     AND translations.text IS NOT NULL );	card_games
SELECT      (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_chinese_simplified FROM      cards;	card_games
SELECT Sets.set_name, Sets.totalSetSize FROM Sets JOIN SetTranslations ON Sets.set_id = SetTranslations.set_id WHERE SetTranslations.language = 'Italian';	card_games
SELECT COUNT(DISTINCT card_type)  FROM card_art  WHERE artist = 'Aaron Boyd';	card_games
SELECT keyword  FROM cards  WHERE name = 'Angel of Mercy';	card_games
SELECT COUNT(*)  FROM Cards  WHERE power = '*';	card_games
SELECT promoTypes.typeName FROM promoTypes JOIN cards ON promoTypes.typeID = cards.promoTypeID WHERE cards.name = 'Duress';	card_games
SELECT border_color FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
SELECT originaltype FROM card WHERE name = 'Ancestor''s Chosen';	card_games
SELECT DISTINCT l.language FROM sets s JOIN cards c ON s.id = c.set_id JOIN languages l ON s.language_id = l.id WHERE c.name = 'Angel of Mercy';	card_games
SELECT COUNT(*) FROM Cards WHERE status = 'restricted' AND isTextless = 0;	card_games
SELECT text FROM Cards WHERE name = 'Condemn';	card_games
SELECT COUNT(*) FROM Cards WHERE legality = 'restricted' AND isStarter = 1;	card_games
SELECT status FROM cards WHERE name = 'Cloudchaser Eagle';	card_games
SELECT card_type FROM cards WHERE card_name = 'Benalish Knight';	card_games
SELECT RuleFormat FROM CardRules WHERE CardName = 'Benalish Knight';	card_games
SELECT artist.name FROM artist JOIN card ON artist.artist_id = card.artist_id WHERE card.card_language = 'Phyrexian';	card_games
SELECT      (COUNT(CASE WHEN borderColor = 'borderless' THEN id END) * 100.0) / COUNT(id) AS percentage_of_borderless_cards FROM      cards;	card_games
SELECT COUNT(*) FROM cards WHERE language = 'German' AND isReprint = 1;	card_games
SELECT COUNT(*) FROM Cards WHERE borderColor = 'borderless' AND language = 'Russian';	card_games
SELECT      (COUNT(CASE WHEN language = 'French' THEN id END) * 100.0) / COUNT(CASE WHEN isStorySpotlight = 1 THEN id END) AS PercentageOfFrenchStorySpotlightCards FROM      Cards WHERE      isStorySpotlight = 1;	card_games
SELECT COUNT(*) FROM cards WHERE toughness = 99;	card_games
SELECT card_name FROM cards WHERE artist = 'Aaron Boyd';	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';	card_games
SELECT cardID FROM Cards WHERE convertedManaCost = 0;	card_games
SELECT card_layout FROM cards WHERE keyword = 'flying';	card_games
SELECT COUNT(*) FROM Cards WHERE original_type = 'Summon - Angel' AND subtype <> 'Angel';	card_games
SELECT foiledCardId FROM Cards WHERE (cardKingdomFoilId IS NOT NULL OR cardKingdomId IS NOT NULL) AND EXISTS (     SELECT 1     FROM Cards AS pairedCard     WHERE pairedCard.cardKingdomFoilId IS NOT NULL OR pairedCard.cardKingdomId IS NOT NULL     AND pairedCard.id != foiledCardId     AND foiledCardId IN (pairedCard.cardKingdomFoilId, pairedCard.cardKingdomId) );	card_games
SELECT card_id FROM cards WHERE duel_deck = 'a';	card_games
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';	card_games
SELECT a.name FROM Artists a JOIN Cards c ON a.artist_id = c.artist_id WHERE c.language = 'Chinese Simplified';	card_games
SELECT card_name FROM cards WHERE availability = 'paper' AND language = 'Japanese' AND NOT EXISTS (     SELECT 1     FROM cards AS c2     WHERE c2.card_name = cards.card_name     AND (c2.language != 'Japanese' OR c2.availability != 'paper') );	card_games
SELECT COUNT(*) FROM Cards WHERE status = 'Banned' AND borderColor = 'white';	card_games
SELECT c.uuid, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.type LIKE '%— Mensch, Kleriker' OR fd.type LIKE '%— Clérigo humano' OR fd.type LIKE '%: humain et clerc' OR fd.type LIKE '%— Chierico Umano' OR fd.type LIKE '%— 人間・クレリック';	card_games
SELECT ruling FROM card_table WHERE name = 'Beacon of Immortality';	card_games
SELECT COUNT(*), status FROM cards WHERE frameVersion = 'future' AND status = 'legal' GROUP BY status;	card_games
SELECT cardName, color FROM Cards WHERE setCode = 'OGW';	card_games
SELECT cardName, language FROM Cards WHERE setCode = '10E' AND convertedManaCost = 5 AND translation IS NOT NULL;	card_games
SELECT card_name, ruling_date FROM cards WHERE original_type = 'Creature - Elf';	card_games
SELECT color, format FROM cards WHERE id BETWEEN 1 AND 20;	card_games
SELECT * FROM Artifact_cards WHERE originalType = 'Artifact' AND colors = 'B' AND EXISTS (     SELECT 1     FROM foreign_data     WHERE foreign_data.artifact_id = Artifact_cards.id );	card_games
SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY ruling_date ASC LIMIT 3;	card_games
SELECT COUNT(*) FROM Cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;	card_games
SELECT COUNT(*) FROM cards WHERE frameVersion = 1993   AND availability = 'paper'   AND hasContentWarning = 1;	card_games
SELECT manaCost FROM Cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability LIKE '%mtgo%' AND availability LIKE '%paper%';	card_games
SELECT SUM(manaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';	card_games
SELECT DISTINCT card_type FROM cards WHERE availability = 'arena';	card_games
SELECT setCode FROM Cards JOIN Translations ON Cards.cardID = Translations.cardID WHERE language = 'Spanish';	card_games
SELECT DIVIDE(COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END), COUNT(id)) AS percentage_legendary_online_only FROM cards WHERE frameEffects = 'legendary';	card_games
SELECT      StorySpotlightID,      (SUM(CASE WHEN isStorylight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN isStorylight = 1 THEN 1 ELSE 0 END) AS Percentage FROM      StorySpotlightCards GROUP BY      StorySpotlightID ORDER BY      StorySpotlightID;	card_games
SELECT      card_name,     (SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_spanish FROM      cards GROUP BY      card_name ORDER BY      percentage_spanish DESC;	card_games
SELECT DISTINCT languageName FROM TranslationSets WHERE baseSetSize = 309;	card_games
SELECT COUNT(*) FROM translations WHERE block = 'Commander' AND setCode = 'Portuguese (Brasil)';	card_games
SELECT id FROM cards WHERE types = 'Creature' AND status = 'legal';	card_games
SELECT DISTINCT card_type FROM cards WHERE language = 'German' AND supertypes IS NOT NULL AND subtypes IS NOT NULL;	card_games
SELECT COUNT(*) FROM PowerCards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';	card_games
SELECT COUNT(*) FROM Cards WHERE format = 'premodern' AND ruling = 'This is a triggered mana ability.' AND side IS NULL;	card_games
SELECT card_id FROM cards JOIN artists ON cards.artist_id = artists.artist_id WHERE artists.name = 'Erica Yang' AND cards.format = 'Pauper' AND cards.availability = 'paper';	card_games
SELECT artist  FROM cards  JOIN artists ON cards.artist_id = artists.id  WHERE cards.text = 'Das perfekte Gegenmittel zu einer dichten Formation';	card_games
SELECT FrenchName FROM Cards WHERE Type = 'Creature' AND Layout = 'Normal' AND BorderColor = 'black' AND Artist = 'Matthew D. Wilson' AND Language = 'French';	card_games
SELECT COUNT(*) FROM Cards WHERE rarity = 'rare' AND date = '2007-02-01';	card_games
SELECT Languages.name FROM Cards JOIN Set_Cards ON Cards.id = Set_Cards.card_id JOIN Sets ON Set_Cards.set_id = Sets.id JOIN Languages ON Sets.block = Languages.block WHERE Sets.baseSetSize = 180;	card_games
SELECT      DIVIDE(COUNT(CASE WHEN hasContentWarning = 0 THEN 1 END), COUNT(ID)) * 100 AS PercentageWithoutContentWarning FROM      Cards WHERE      format = 'commander'      AND Status = 'legal';	card_games
SELECT      (COUNT(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 END AND cards.language = 'French') * 100.0) /      COUNT(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 END)  FROM cards;	card_games
SELECT      (COUNT(CASE WHEN language = 'Japanese' AND type = 'expansion' THEN 1 END) * 100.0) /      COUNT(CASE WHEN language = 'Japanese' THEN 1 END) AS percentage_of_japanese_expansion_sets FROM      your_table_name;	card_games
SELECT kind_of_printing FROM cards WHERE artist = 'Daren Bader';	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;	card_games
SELECT COUNT(*) FROM Cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;	card_games
SELECT card_name, power FROM power_cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY card_name ASC LIMIT 3;	card_games
SELECT card_language FROM cards WHERE multiverseid = 149934;	card_games
SELECT cardKingdomFoilId FROM KingdomCards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY cardKingdomFoilId ORDER BY cardKingdomFoilId ASC LIMIT 3;	card_games
SELECT      (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) / COUNT(CASE WHEN isTextless = 1 THEN 1 END)) * 100 AS ProportionOfNormalLayoutCards FROM      Cards;	card_games
SELECT card_number FROM Cards WHERE faces IS NULL AND (subtype = 'Angel' OR subtype = 'Wizard');	card_games
SELECT name, COUNT(*) AS count FROM Sets WHERE mtgoCode IS NULL OR mtgoCode = '' GROUP BY name ORDER BY name ASC LIMIT 3;	card_games
SELECT DISTINCT Language FROM Cards WHERE mcmName = 'Archenemy' AND setCode = 'ARC';	card_games
SELECT setName, translation  FROM Sets  WHERE id = 5;	card_games
SELECT language, expansion_type  FROM sets  WHERE id = 206;	card_games
SELECT c1.card_id, c1.card_set FROM cards AS c1 JOIN card_languages AS cl ON c1.card_id = cl.card_id JOIN card_blocks AS cb ON c1.card_id = cb.card_id WHERE cl.language = 'Italian' AND cb.block_name = 'Shadowmoor' ORDER BY c1.card_set ASC LIMIT 2;	card_games
SELECT set_id  FROM sets  WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND language = 'Japanese';	card_games
SELECT baseSet, MAX(baseSetSize) AS mostCards FROM sets WHERE language = 'Russian' GROUP BY baseSet ORDER BY mostCards DESC LIMIT 1;	card_games
SELECT      (COUNT(CASE WHEN languages.language = 'Chinese Simplified' AND cards.isOnlineOnly = 1 THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM      cards JOIN      languages ON cards.language_id = languages.id	card_games
SELECT COUNT(*) FROM Sets WHERE language = 'Japanese' AND (mtgoCode IS NULL OR mtgoCode = '');	card_games
SELECT card_id FROM Cards WHERE borderColor = 'black';	card_games
SELECT COUNT(*) AS TotalCardsWithExtendedArtFrame, card_id FROM cards WHERE frameEffects = 'extendedart' GROUP BY card_id;	card_games
SELECT card_id, card_name FROM Cards WHERE borderColor = 'black' AND isFullArt = 1;	card_games
SELECT language FROM sets WHERE set_id = 174;	card_games
SELECT `name` FROM `sets` WHERE `code` = 'ALL';	card_games
SELECT DISTINCT foreign_language FROM books JOIN authors ON books.author_id = authors.id WHERE authors.name = 'A Pedra Fellwar';	card_games
SELECT set_code FROM sets WHERE release_date = '2007-07-13';	card_games
SELECT base_set_size, set_code  FROM sets  WHERE block_name IN ('Masques', 'Mirage');	card_games
SELECT setCode  FROM sets  WHERE expansionType = 'expansion';	card_games
SELECT card_name, card_type FROM cards WHERE watermark = 'Boros';	card_games
SELECT card_language, flavor_text, card_type FROM cards WHERE watermark = 'Colorpie';	card_games
SELECT      (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0) / COUNT(*) AS percentageOfMana10 FROM Cards WHERE name = 'Abyssal Horror';	card_games
SELECT DISTINCT setCode FROM Sets WHERE EXISTS (SELECT 1 FROM ExpansionCommanders WHERE Sets.setID = ExpansionCommanders.setID);	card_games
SELECT c.card_name, c.card_type FROM Cards c JOIN CardWatermarks cw ON c.card_id = cw.card_id JOIN Watermarks w ON cw.watermark_id = w.watermark_id WHERE w.watermark_name = 'Abzan';	card_games
SELECT card_language, card_type FROM cards WHERE card_name = 'Azorius' AND card_watermark = 'Azorius';	card_games
SELECT COUNT(*) FROM Cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT COUNT(*) FROM Cards WHERE availability LIKE '%paper%' AND starting_max_hand_size > 0;	card_games
SELECT card_name FROM cards WHERE isTextless = 0;	card_games
SELECT unconverted_mana_cost FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
SELECT COUNT(*) FROM Cards WHERE border_color = 'white' AND (power = '*' OR power IS NULL);	card_games
SELECT card_name FROM cards WHERE isPromo = 1 AND side IS NOT NULL GROUP BY card_name HAVING COUNT(*) > 1;	card_games
SELECT DISTINCT supertype, subtype FROM card_types WHERE card_name = 'Molimo, Maro-Sorcerer';	card_games
SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';	card_games
SELECT COUNT(DISTINCT artist_id) FROM cards WHERE border_color = 'Black' AND availability LIKE '%arena,mtgo%';	card_games
SELECT      CASE          WHEN MAX(convertedManaCost) = (SELECT MAX(convertedManaCost) FROM Cards WHERE name = 'Serra Angel') THEN 'Serra Angel'         ELSE 'Shrine Keeper'     END AS CardWithHigherManaCost FROM      Cards WHERE      name = 'Serra Angel' OR name = 'Shrine Keeper';	card_games
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';	card_games
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;	card_games
SELECT ItalianName FROM CardSets WHERE CardSetName = 'Ancestor''s Chosen';	card_games
SELECT COUNT(*) FROM translations WHERE card_id IN (SELECT card_id FROM cards WHERE name = 'Angel of Mercy');	card_games
SELECT name FROM cards WHERE translation = 'Hauptset Zehnte Edition';	card_games
SELECT EXISTS (     SELECT 1     FROM Cards AS c     JOIN CardTranslations AS ct ON c.id = ct.card_id     WHERE c.name = 'Ancestor''s Chosen' AND ct.language = 'Korean' ) AS has_korean_translation;	card_games
SELECT COUNT(*) FROM cards WHERE translation = 'Hauptset Zehnte Edition' AND artist = 'Adam Rex';	card_games
SELECT SUM(baseSetSize) AS total_cards FROM card_data WHERE translation = 'Hauptset Zehnte Edition';	card_games
SELECT translation.chinese_simplified FROM translation JOIN card_set ON translation.card_set_id = card_set.id WHERE card_set.name = 'Eighth Edition' AND translation.language = 'Chinese Simplified';	card_games
SELECT COUNT(DISTINCT c.name) FROM cards c JOIN card_sets cs ON c.setId = cs.setId WHERE c.name = 'Angel of Mercy' AND cs.mtgoCode IS NOT NULL;	card_games
SELECT releaseDate  FROM card_sets  WHERE name = 'Ancestor''s Chosen';	card_games
SELECT type FROM card_sets WHERE translation = 'Hauptset Zehnte Edition';	card_games
SELECT COUNT(*) FROM Sets WHERE block = 'Ice Age' AND language = 'Italian' AND translation IS NOT NULL;	card_games
SELECT      COUNT(*) AS card_count FROM      Cards AS c INNER JOIN      SetAvailability AS sa ON c.set_id = sa.set_id WHERE      c.name = 'Adarkar Valkyrie'      AND sa.isForeignOnly = 1      AND sa.country != 'United States';	card_games
SELECT COUNT(*) FROM Cards WHERE language = 'Italian' AND baseSetSize < 10 AND translation IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black';	card_games
SELECT card_name FROM cards WHERE set_name = 'Coldsnap' ORDER BY converted_mana_cost DESC LIMIT 1;	card_games
SELECT DISTINCT artist FROM cards WHERE set_name = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');	card_games
SELECT card_name FROM cards WHERE card_set = 'Coldsnap' AND card_number = 4;	card_games
SELECT COUNT(*) FROM T1 WHERE T1.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL) AND T1.id IN (SELECT id FROM T2);	card_games
SELECT flavorText FROM card_table WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';	card_games
SELECT DISTINCT fl.lang FROM Cards AS c JOIN CardFlavorTexts AS flt ON c.id = flt.card_id JOIN Flavors AS fl ON flt.flavor_id = fl.id WHERE c.name = 'Ancestor''s Chosen' AND flt.flavorText IS NOT NULL;	card_games
SELECT card_type FROM cards WHERE name = 'Ancestor''s Chosen' AND language = 'German';	card_games
SELECT ItalianText FROM Cards WHERE SetName = 'Coldsnap' AND Language = 'Italian';	card_games
SELECT name_italian FROM cards WHERE set = 'Coldsnap' AND language = 'Italian' ORDER BY MAX(convertedManaCost) DESC LIMIT 1;	card_games
SELECT when_created FROM cards WHERE name = 'Reminisce';	card_games
SELECT      (SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM      Cards WHERE      name = 'Coldsnap';	card_games
SELECT      (SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) /      COUNT(*)) * 100 AS percentage_incredibly_powerful FROM Cards WHERE name = 'Coldsnap';	card_games
SELECT code  FROM sets  WHERE releaseDate = '2017-07-14';	card_games
SELECT sets.keyruneCode FROM sets WHERE sets.code = 'PKHC';	card_games
SELECT mcmId FROM set_details WHERE set_code = 'SS2';	card_games
SELECT mcmName FROM Sets WHERE releaseDate = '2017-06-09';	card_games
SELECT expansion_type FROM sets WHERE name LIKE 'From the Vault: Lore%'	card_games
SELECT parent_code FROM sets WHERE name = 'Commander 2014 Oversized';	card_games
SELECT card_name, text, hasContentWarning FROM cards WHERE artist = 'Jim Pavelec'	card_games
SELECT releaseDate  FROM Sets  WHERE cardName = 'Evacuation';	card_games
SELECT baseSetSize FROM card WHERE translation = 'Rinascita di Alara';	card_games
SELECT type FROM sets WHERE translation = 'Huitième édition';	card_games
SELECT FrenchName FROM CardSet JOIN Card ON CardSet.CardSetID = Card.CardSetID JOIN Translation ON Card.CardID = Translation.CardID WHERE Translation.Name = 'Tendo Ice Bridge' AND Translation.Language = 'French';	card_games
SELECT COUNT(*) FROM translation WHERE name = 'Tenth Edition' AND translation IS NOT NULL;	card_games
SELECT SetJapaneseName FROM Sets JOIN Cards ON Sets.SetID = Cards.SetID WHERE Cards.Name = 'Fellwar Stone' AND Sets.Language = 'Japanese';	card_games
SELECT card_name FROM cards WHERE set_name = 'Journey into Nyx Hero''s Path' ORDER BY converted_mana_cost DESC LIMIT 1;	card_games
SELECT release_date FROM card_sets WHERE translation = 'Ola de frío';	card_games
SELECT expansion_type  FROM sets  JOIN cards ON sets.id = cards.set_id  WHERE cards.name = 'Samite Pilgrim';	card_games
SELECT COUNT(*)  FROM cards  WHERE set_name = 'World Championship Decks 2004' AND converted_mana_cost = 3;	card_games
SELECT SimplifiedChineseTranslation FROM Sets WHERE name = 'Mirrodin' AND language = 'Chinese Simplified';	card_games
SELECT      DIVIDE(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END),             SUM(CASE WHEN language = 'Japanese' THEN 1 ELSE 0 END)) * 100 AS percentage_non_foil_in_japanese FROM      cards WHERE      language = 'Japanese';	card_games
SELECT      (SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) FROM      cards WHERE      language = 'Portuguese (Brazil)';	card_games
SELECT DISTINCT printing_type FROM Cards WHERE artist != 'Aleksi Briclot' AND isTextless = 1;	card_games
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);	card_games
SELECT artist FROM cards WHERE side IS NULL ORDER BY cost DESC LIMIT 1;	card_games
SELECT frameEffects, COUNT(*) as frequency FROM foils WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY frequency DESC LIMIT 1;	card_games
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';	card_games
SELECT SET_ID FROM Sets WHERE ExpansionType = 'commander'   AND SET_ID NOT IN (SELECT SET_ID FROM AlchemyModifications) ORDER BY totalSetSize DESC LIMIT 1;	card_games
SELECT cardName, MAX(manaCost) AS maxManaCost FROM cards WHERE format = 'duel' GROUP BY cardName ORDER BY maxManaCost DESC LIMIT 10;	card_games
SELECT MIN(originalReleaseDate), format FROM cards WHERE rarity = 'mythic' AND status = 'legal' GROUP BY format ORDER BY originalReleaseDate ASC LIMIT 1;	card_games
SELECT COUNT(*)  FROM Cards  JOIN Artists ON Cards.artist_id = Artists.artist_id  WHERE Artists.artist_name = 'Volkan Baǵa' AND Cards.language = 'French';	card_games
SELECT COUNT(*) FROM Cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal';	card_games
SELECT format, card_name FROM play_formats AS pf JOIN cards AS c ON pf.format_id = c.format_id WHERE c.status = 'Banned' GROUP BY format, card_name HAVING COUNT(c.status = 'Banned') = (     SELECT MAX(banned_count)     FROM (         SELECT COUNT(status = 'Banned') AS banned_count         FROM cards         GROUP BY format_id     ) AS max_banned ) ORDER BY format, card_name;	card_games
SELECT language  FROM card  WHERE set_name = 'Battlebond';	card_games
SELECT artist, format FROM (     SELECT artist, format, COUNT(*) as card_count     FROM card_illustrations     GROUP BY artist, format ) AS card_counts WHERE card_count = (     SELECT MIN(card_count)     FROM (         SELECT artist, COUNT(*) as card_count         FROM card_illustrations         GROUP BY artist     ) AS min_card_counts )	card_games
SELECT status FROM cards WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';	card_games
SELECT name, format FROM cards WHERE edhrecRank = 1 AND status = 'Banned';	card_games
SELECT AVG(id), MAX(COUNT(language)) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY releaseDate;	card_games
SELECT DISTINCT a.ArtistName FROM Artists AS a JOIN Cards AS c ON a.ArtistID = c.ArtistID WHERE c.BorderColor = 'black' AND c.Availability = 'arena';	card_games
SELECT uuid FROM cards WHERE format = 'oldschool' AND status IN ('banned', 'restricted');	card_games
SELECT COUNT(*) FROM Cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';	card_games
SELECT ruling FROM rulings WHERE card_name = 'Kev Walker' ORDER BY MAX(date) DESC;	card_games
SELECT c.name FROM cards c JOIN card_formats cf ON c.id = cf.card_id JOIN formats f ON cf.format_id = f.id WHERE c.set_name = 'Hour of Devastation' AND cf.status = 'Legal';	card_games
SELECT name FROM sets WHERE language NOT LIKE '%Japanese%' AND language = 'Korean';	card_games
SELECT fs.frameVersion FROM frameStyles fs JOIN cards c ON fs.frameVersionId = c.frameVersionId JOIN artists a ON c.artistId = a.artistId WHERE a.artistName = 'Allen Williams';  SELECT c.cardName FROM cards c WHERE c.status = 'Banned';	card_games
SELECT      CASE          WHEN u1.DisplayName = 'Harlan' THEN u1.Reputation          ELSE u2.Reputation      END AS HigherReputation,      CASE          WHEN u1.DisplayName = 'Harlan' THEN u1.DisplayName          ELSE u2.DisplayName      END AS DisplayName FROM      users u1 CROSS JOIN      users u2 WHERE      (u1.DisplayName = 'Harlan' AND u2.DisplayName = 'Jarrod Dixon') OR      (u1.DisplayName = 'Jarrod Dixon' AND u2.DisplayName = 'Harlan') ORDER BY      CASE          WHEN u1.DisplayName = 'Harlan' THEN u1.Reputation          ELSE u2.Reputation      END DESC LIMIT 1;	codebase_community
SELECT u.DisplayName  FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE YEAR(p.CreationDate) = 2011;	codebase_community
SELECT COUNT(DISTINCT UserId) FROM users WHERE Id IN (     SELECT UserId     FROM postHistory     WHERE PostId IN (         SELECT Id         FROM posts         WHERE LastAccessDate > '2014-09-01'     ) )	codebase_community
SELECT u.Id, u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN (     SELECT PostId, COUNT(*) AS Views     FROM posts     GROUP BY PostId     ORDER BY Views DESC     LIMIT 1 ) AS most_viewed ON p.Id = most_viewed.PostId ORDER BY most_viewed.Views DESC LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT v.UserId)  FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.OwnerUserId = v.UserId  AND v.VoteType = 'Upvote' GROUP BY v.UserId HAVING SUM(v.VoteType = 'Downvote') > 1 AND COUNT(DISTINCT v.PostId) > 100;	codebase_community
SELECT COUNT(DISTINCT p.OwnerUserId) AS UsersWithMoreThanTenViews FROM posts p JOIN (     SELECT PostId     FROM votes     GROUP BY PostId     HAVING COUNT(*) > 10 ) AS v ON p.Id = v.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE u.Id > 0 AND YEAR(u.CreationDate) > 2013;	codebase_community
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');	codebase_community
SELECT p.OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT u.DisplayName  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Title = 'Eliciting priors from experts';	codebase_community
SELECT p.Id, p.OwnerUserId, p.LastEditorUserId, p.ParentId, MAX(ph.CreationDate) AS LatestEdit FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE u.ProfileImageUrl IS NOT NULL AND u.ProfileImageUrl LIKE '%csgillespie%' GROUP BY p.Id ORDER BY LatestEdit DESC LIMIT 1;	codebase_community
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = (SELECT PostId FROM posts ORDER BY FavoriteCount DESC LIMIT 1);	codebase_community
SELECT SUM(c.CommentCount) AS TotalComments FROM (     SELECT p.Id AS PostId, COUNT(cm.Id) AS CommentCount     FROM posts p     LEFT JOIN comments cm ON p.Id = cm.PostId     LEFT JOIN users u ON p.OwnerUserId = u.Id     WHERE u.DisplayName = 'csgillespie'     GROUP BY p.Id ) c;	codebase_community
SELECT p.Id, COUNT(c.Id) AS AnswerCount FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON p.OwnerUserId = u.Id AND u.DisplayName = 'csgillespie' GROUP BY p.Id ORDER BY AnswerCount DESC LIMIT 1;	codebase_community
SELECT u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = (SELECT Id FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation')	codebase_community
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;	codebase_community
SELECT DISTINCT c.UserDisplayName FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.LastEditorUserId IS NOT NULL AND p.ParentId IS NULL AND p.ClosedDate IS NOT NULL;	codebase_community
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Id > 65 AND p.Id IN (     SELECT PostId     FROM votes v     GROUP BY PostId     HAVING SUM(v.VoteValue) >= 20 );	codebase_community
SELECT u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';	codebase_community
SELECT p.Id AS PostId, p.OwnerUserId, p.LastEditorUserId, p.ParentId FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Id = (SELECT Id FROM tags WHERE ExcerptPostId IS NOT NULL AND ExcerptPostId = p.Id) AND t.Id = (SELECT Id FROM tags WHERE ExcerptPostId IS NOT NULL AND ExcerptPostId = p.Id AND Id = (SELECT Id FROM tags WHERE TagName = 'bayesian'));	codebase_community
SELECT p.Id AS PostId, p.OwnerUserId, p.LastEditorUserId, p.ParentId, p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Id = (     SELECT MAX(Count) FROM (         SELECT COUNT(*) AS Count         FROM tags         GROUP BY ExcerptPostId     ) AS TagCounts )	codebase_community
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE `DisplayName` = 'csgillespie');	codebase_community
SELECT badges.Id AS BadgeId, badges.UserId, users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';	codebase_community
SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND EXISTS (     SELECT 1     FROM postHistory     JOIN posts ON postHistory.PostId = posts.Id     WHERE badges.Id = postHistory.PostId     AND YEAR(posts.Date) = 2011 )	codebase_community
SELECT u.Id, u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Id) DESC LIMIT 1;	codebase_community
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.ProfileImageUrl IS NOT NULL AND u.ProfileImageUrl LIKE '%csgillespie%';	codebase_community
SELECT AVG(b.CountOfBadges) AS AverageBadges FROM (     SELECT COUNT(b.Id) AS CountOfBadges     FROM badges b     INNER JOIN users u ON b.UserId = u.Id     INNER JOIN posts p ON u.Id = p.OwnerUserId     GROUP BY b.UserId     HAVING SUM(p.ViewCount) > 200 ) AS b;	codebase_community
SELECT      (COUNT(DISTINCT CASE WHEN u.Age > 65 THEN p.Id END) * 100.0) / COUNT(DISTINCT p.Id) AS elder_user_percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 5;	codebase_community
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';	codebase_community
SELECT CreationDate  FROM votes  GROUP BY CreationDate  ORDER BY COUNT(Id) DESC  LIMIT 1;	codebase_community
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.Id IS NOT NULL AND badges.Id = 5;	codebase_community
SELECT p.Id, p.OwnerUserId, p.LastEditorUserId, p.ParentId, p.PostsTitle FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments)	codebase_community
SELECT COUNT(c.Id) as comment_count FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Id = (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM posts WHERE Id = 1910));	codebase_community
SELECT COUNT(*) FROM posts WHERE Id = (     SELECT PostId     FROM comments     WHERE UserId = 3025 AND CreationDate = '2014/4/23 20:29:39.0' ) AND Id IN (     SELECT PostId     FROM votes     WHERE PostId = posts.Id AND UserId = 3025 );	codebase_community
SELECT CommentText  FROM comments  WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829)  LIMIT 1;	codebase_community
SELECT      p.Id,     p.OwnerUserId,     p.LastEditorUserId,     p.ParentId,     p.ClosedDate,     CASE          WHEN p.ClosedDate IS NULL THEN 'Not Well-Finished'         ELSE 'Well-Finished'     END AS PostStatus FROM      posts p JOIN      comments c ON p.Id = c.PostId WHERE      c.UserId = 23853      AND c.CreationDate = '2013-07-12 09:08:18.0';	codebase_community
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041;	codebase_community
SELECT COUNT(p.Id)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Tiago Pasqualini';	codebase_community
SELECT u.DisplayName  FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347;	codebase_community
SELECT COUNT(v.Id) AS VoteCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.OwnerUserId IS NOT NULL AND p.LastEditorUserId IS NOT NULL AND p.Title LIKE '%data visualization%';	codebase_community
SELECT badges.Name  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';	codebase_community
SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) /      (SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = 24)) AS post_to_vote_ratio FROM      users WHERE      Id = 24	codebase_community
SELECT SUM(p.ViewCount) AS TotalViews FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.ExcerptPostId IS NOT NULL AND p.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';	codebase_community
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = 17;	codebase_community
SELECT `users.DisplayName` FROM `users` WHERE `users.ProfileImageUrl` = 'http://stackoverflow.com';	codebase_community
SELECT badges.Id AS BadgeId, badges.UserId FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';	codebase_community
SELECT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.UserDisplayName = 'user93';	codebase_community
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';	codebase_community
SELECT      u.DisplayName,      u.Reputation FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Id = (         SELECT              PostId          FROM              posts          WHERE              Title = 'Understanding what Dassault iSight is doing?'     );	codebase_community
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';	codebase_community
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Id = (SELECT Id FROM badges WHERE Name = 'Necromancer') LIMIT 10;	codebase_community
SELECT u.DisplayName AS Editor FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data'	codebase_community
SELECT p.Id AS PostId FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa';	codebase_community
SELECT SUM(COALESCE(v.VoteValue, 0)) AS TotalScore, u.Website FROM posts p LEFT JOIN votes v ON p.Id = v.PostId LEFT JOIN users u ON p.LastEditorUserId = u.Id WHERE p.LastEditorUserId IS NOT NULL AND u.DisplayName = 'Yevgeny' GROUP BY u.Website;	codebase_community
SELECT c.Id AS CommentId, c.PostId, c.UserId FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.OwnerUserId IS NULL AND p.LastEditorUserId IS NOT NULL AND p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';	codebase_community
SELECT SUM(BountyAmount) AS TotalBountyAmount FROM posts WHERE Title LIKE '%data%'	codebase_community
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN bounty b ON p.Id = b.PostId WHERE b.BountyAmount = 50 AND p.Title LIKE '%variance%';	codebase_community
SELECT      p.Id,     p.Text,     AVG(v.ViewCount) AS AverageViewCount FROM      posts p JOIN      tags t ON p.Id = t.ExcerptPostId JOIN      (SELECT PostId, COUNT(*) AS ViewCount FROM postLinks GROUP BY PostId) v ON p.Id = v.PostId WHERE      t.Id IN (SELECT Id FROM tags WHERE ExcerptPostId IN (SELECT Id FROM posts WHERE Title LIKE '%humor%')) GROUP BY      p.Id, p.Text	codebase_community
SELECT COUNT(*) FROM comments WHERE UserId = 13;	codebase_community
SELECT `users`.`Id` FROM `users` JOIN `posts` ON `users`.`Id` = `posts`.`OwnerUserId` GROUP BY `users`.`Id` ORDER BY SUM(`posts`.`Reputation`) DESC LIMIT 1;	codebase_community
SELECT `UserId` FROM `posts` GROUP BY `UserId` ORDER BY SUM(`Views`) ASC LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT u.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Id = (SELECT Id FROM badges WHERE Name = 'Supporter') AND EXISTS (SELECT 1 FROM posts p WHERE p.Id = b.PostId AND YEAR(p.Date) = 2011);	codebase_community
SELECT `UserId`, COUNT(`Id`) AS `BadgeCount` FROM `badges` GROUP BY `UserId` HAVING `BadgeCount` > 5;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Id = (SELECT Id FROM badges WHERE `Name` = 'Teacher' OR `Name` = 'Supporter') AND EXISTS (     SELECT 1     FROM users u2     JOIN badges b2 ON u2.Id = b2.UserId     WHERE b2.Id = (SELECT Id FROM badges WHERE `Name` = 'Supporter' OR `Name` = 'Teacher')     AND u2.Location = 'New York' );	codebase_community
SELECT u.Id AS UserId, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;	codebase_community
SELECT DISTINCT ph.UserId FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE ph.UserId IN (     SELECT phinner.UserId     FROM postHistory phinner     GROUP BY phinner.UserId, phinner.PostId     HAVING COUNT(*) = 1 AND phinner.PostId IN (         SELECT pinner.Id         FROM posts pinner         JOIN tags t ON pinner.Id = t.ExcerptPostId         WHERE t.Id IS NOT NULL AND pinner.Id IN (             SELECT pl.PostId             FROM postLinks pl             GROUP BY pl.PostId             HAVING SUM(CASE WHEN pl.PostId = pl.RelatedPostId THEN 1 ELSE 0 END) > 0         )     ) ) AND p.Id IN (     SELECT pl.PostId     FROM postLinks pl     GROUP BY pl.PostId     HAVING SUM(CASE WHEN pl.PostId = pl.RelatedPostId THEN 1 ELSE 0 END) > 0 );	codebase_community
SELECT u.DisplayName, b.Id AS BadgeId FROM users u LEFT JOIN comments c ON u.Id = c.UserId GROUP BY u.Id ORDER BY COUNT(c.Id) DESC LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT u.Id)  FROM users u JOIN badges b ON u.Id = b.UserId JOIN (     SELECT Id      FROM badges      WHERE Name = 'Teacher' ) tb ON b.Id = tb.Id JOIN (     SELECT u.Id      FROM users u      JOIN addresses a ON u.AddressId = a.Id      WHERE a.Location = 'India' ) ui ON u.Id = ui.Id;	codebase_community
SELECT      (100.0 * (SUM(CASE WHEN Year(Date) = 2010 THEN 1 ELSE 0 END) - SUM(CASE WHEN Year(Date) = 2011 THEN 1 ELSE 0 END)) /      (SUM(CASE WHEN Year(Date) = 2010 THEN 1 ELSE 0 END) + SUM(CASE WHEN Year(Date) = 2011 THEN 1 ELSE 0 END))) * 100 AS PercentageDifference FROM      badges JOIN      badges AS b2010 ON badges.Id = b2010.Id AND Year(b2010.Date) = 2010 JOIN      badges AS b2011 ON badges.Id = b2011.Id AND Year(b2011.Date) = 2011 WHERE      badges.Name = 'Student'	codebase_community
SELECT `PostId`, `UserId` FROM `postHistory` WHERE `PostId` = 3720;  SELECT COUNT(DISTINCT `UserId`) AS `UniqueCommenters` FROM `comments` WHERE `PostId` = 3720;	codebase_community
SELECT      p.Id AS PostId,     p.OwnerDisplayName,     SUM(pl.ViewCount) AS TotalViewCount FROM      posts p JOIN      postLinks pl ON p.Id = pl.PostId WHERE      pl.RelatedPostId = 61217 OR p.Id = 61217 GROUP BY      p.Id	codebase_community
SELECT p.Id AS PostId, p.Score, pl.Id AS LinkTypeId FROM posts p LEFT JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;	codebase_community
SELECT p.Id, p.OwnerUserId FROM posts p JOIN votes v ON p.Id = v.PostId GROUP BY p.Id, p.OwnerUserId HAVING SUM(v.VoteValue) > 60;	codebase_community
SELECT SUM(voteCount) AS totalFavouriteCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.OwnerUserId = 686 AND YEAR(p.CreationDate) = 2011;	codebase_community
SELECT AVG(CASE WHEN v.PostId IS NOT NULL THEN v.PostId ELSE 0 END) AS avg_up_votes,         AVG(u.Age) AS avg_user_age FROM users u JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN votes v ON p.Id = v.PostId AND v.VoteType = 1 GROUP BY u.Id HAVING COUNT(p.Id) > 10;	codebase_community
SELECT COUNT(DISTINCT `UserId`)  FROM `badges`  JOIN `users` ON `UserId` = `users.Id`  WHERE `Id` IN (     SELECT `Id`      FROM `badges`      JOIN `tags` ON `badges.Id` = `tags.Id`      WHERE `tags.ExcerptPostId` IS NULL AND `badges.Id` = 5 );	codebase_community
SELECT b.Id, b.UserId FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Id = (     SELECT Id FROM users     WHERE Name = 'User Who Earned Badge' ) AND b.Date = '2010-07-19 19:39:08.0';	codebase_community
SELECT COUNT(*)  FROM comments  WHERE PostId IN (     SELECT Id      FROM posts      WHERE OwnerUserId IN (         SELECT UserId          FROM badges          WHERE Id = 5 -- Assuming that a positive comment is related to a post owned by the user with badge Id 5     ) ) AND score > 60; -- Assuming there is a column 'score' in the comments table that represents the score of the comment	codebase_community
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';	codebase_community
SELECT COUNT(*) FROM posts WHERE Id IN (SELECT PostId FROM votes WHERE Score = 10);	codebase_community
SELECT badges.Name  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);	codebase_community
SELECT u.Id AS Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Id = 1 -- Assuming badge Id 1 is the one obtained on 7/19/2010 7:39:08 PM	codebase_community
SELECT badges.Id AS BadgeId, badges.UserId, badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';	codebase_community
SELECT b.Id, b.UserId FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';	codebase_community
SELECT      (COUNT(CASE WHEN b.UserId IS NOT NULL THEN b.UserId END) * 100.0) / COUNT(DISTINCT u.Id) AS PercentageOfUsersWithTeacherBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE EXISTS (SELECT 1 FROM badges WHERE Name = 'Teacher' AND UserId = b.UserId);	codebase_community
SELECT      (SELECT COUNT(DISTINCT b.UserId)       FROM badges b       JOIN users u ON b.UserId = u.Id       WHERE b.UserId IN (SELECT UserId FROM badges WHERE `Id` = (SELECT `Id` FROM badges WHERE `Name` = 'Organizer'))      AND u.Age BETWEEN 13 AND 18)      * 100.0      /      (SELECT COUNT(DISTINCT b.UserId)       FROM badges b       JOIN users u ON b.UserId = u.Id       WHERE b.UserId IN (SELECT UserId FROM badges WHERE `Id` = (SELECT `Id` FROM badges WHERE `Name` = 'Organizer'))) AS percentage;	codebase_community
SELECT SUM(CASE WHEN v.VoteType = 2 THEN 1 ELSE -1 END) AS CommentRatingScore FROM comments c JOIN votes v ON c.Id = v.PostId WHERE c.PostId = (     SELECT p.Id     FROM posts p     WHERE p.OwnerUserId IS NOT NULL AND p.CreationDate = '2010-07-19 19:19:56.0' );	codebase_community
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.LastEditorUserId IS NULL AND p.OwnerUserId IS NOT NULL AND p.OwnerUserId IN (SELECT u.Id FROM users u WHERE u.Id = 8) AND c.CreationDate = '2010-07-19 19:37:33.0';	codebase_community
SELECT u.Id, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';	codebase_community
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65 AND b.Id = (SELECT Id FROM badges WHERE `Name` = 'Supporter');	codebase_community
SELECT COUNT(DISTINCT b.UserId) AS NumberOfViews FROM badges b JOIN posts p ON b.UserId = p.OwnerUserId OR b.UserId = p.LastEditorUserId WHERE p.LastEditDate = '2010-07-19 19:39:08.0'	codebase_community
SELECT b.Id, b.UserId FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);	codebase_community
SELECT b.Id AS BadgeId, b.UserId, u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';	codebase_community
SELECT COUNT(DISTINCT b.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.Age > 65 AND b.Name = 'Supporter';	codebase_community
SELECT `DisplayName` FROM `users` WHERE `Id` = 30;	codebase_community
SELECT COUNT(DISTINCT u.Id)  FROM users u JOIN posts p ON u.Id = p.OwnerUserId OR u.Id = p.LastEditorUserId JOIN postHistory ph ON u.Id = ph.UserId JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId WHERE EXISTS (SELECT 1 FROM locations l WHERE l.UserId = u.Id AND l.Location = 'New York');	codebase_community
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;	codebase_community
SELECT COUNT(*) FROM users WHERE Id IN (SELECT UserId FROM badges) AND (SELECT Age FROM users WHERE Id = UserId) BETWEEN 19 AND 65;	codebase_community
SELECT u.DisplayName, COUNT(p.Id) AS TotalViews FROM users u JOIN posts p ON u.Id = p.OwnerUserId GROUP BY u.DisplayName ORDER BY TotalViews DESC LIMIT 1;	codebase_community
SELECT      DIVIDE(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 END), COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 END)) AS votes_ratio FROM votes	codebase_community
SELECT t.Id, t.ExcerptPostId FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Salvatier';	codebase_community
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo';	codebase_community
SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');	codebase_community
SELECT p.Id  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'slashnick'  ORDER BY (SELECT COUNT(*) FROM comments c WHERE c.PostId = p.Id) DESC  LIMIT 1;	codebase_community
SELECT      p.OwnerUserId,     SUM(v.ViewCount) AS TotalViews FROM      posts p LEFT JOIN      votes v ON p.Id = v.PostId WHERE      p.OwnerUserId IN (         SELECT Id          FROM users          WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'     ) GROUP BY      p.OwnerUserId ORDER BY      TotalViews DESC LIMIT 1;	codebase_community
SELECT COUNT(*)  FROM posts  JOIN votes ON posts.Id = votes.PostId  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'Matt Parker'  GROUP BY posts.Id  HAVING COUNT(votes.Id) > 4;	codebase_community
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c JOIN users u ON c.UserId = u.Id JOIN posts p ON c.PostId = p.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.PostId IN (     SELECT PostId     FROM posts     WHERE OwnerUserId = (         SELECT Id         FROM users         WHERE DisplayName = 'Neil McGuigan'     ) ) AND c.PostId IN (     SELECT PostId     FROM comments     WHERE Score < 60 );	codebase_community
SELECT t.Id FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.Id NOT IN (SELECT PostId FROM comments)	codebase_community
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';	codebase_community
SELECT      (COUNT(CASE WHEN T1.TagName = 'r' THEN T1.ExcerptPostId END) * 100.0) / COUNT(T1.ExcerptPostId) AS percentage FROM      tags AS T1 JOIN      posts AS T2 ON T1.ExcerptPostId = T2.Id JOIN      users AS T3 ON T2.OwnerUserId = T3.Id WHERE      T3.DisplayName = 'Community';	codebase_community
SELECT      (SELECT SUM(p.ViewCount)       FROM posts p       JOIN users u ON p.OwnerUserId = u.Id       WHERE u.DisplayName = 'Mornington') -      (SELECT SUM(p.ViewCount)       FROM posts p       JOIN users u ON p.OwnerUserId = u.Id       WHERE u.DisplayName = 'Amos') AS DifferenceInViewCount	codebase_community
SELECT COUNT(DISTINCT b.UserId)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.UserId IS NOT NULL AND b.Id = (SELECT Id FROM badges WHERE `Name` = 'Commentator');	codebase_community
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';	codebase_community
SELECT u.DisplayName, u.Age FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = (SELECT PostId FROM posts ORDER BY Views DESC LIMIT 1)	codebase_community
SELECT      p.LastEditorUserId,      ph.Id AS LastEditId FROM      posts p JOIN      postHistory ph ON p.Id = ph.PostId WHERE      p.Title = 'Detecting a given face in a database of facial images' ORDER BY      ph.Id DESC LIMIT 1;	codebase_community
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;	codebase_community
SELECT      p.Title AS PostTitle,     c.UserId,     u.DisplayName FROM      comments c JOIN      posts p ON c.PostId = p.Id JOIN      users u ON c.UserId = u.Id WHERE      c.Score > 60;	codebase_community
SELECT badges.Id FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'North Pole' AND badges.DateYear = 2011;	codebase_community
SELECT      u.UserDisplayName,      p.OwnerUserId  FROM      posts p  JOIN      users u ON p.OwnerUserId = u.Id  WHERE      p.OwnerUserId IN (         SELECT              p.OwnerUserId          FROM              posts p          JOIN              votes v ON p.Id = v.PostId          GROUP BY              p.OwnerUserId          HAVING              COUNT(v.Id) > 150     );	codebase_community
SELECT      ph.PostId,     COUNT(*) AS HistoryCount,     MAX(ph.Id) AS LastEditId FROM      postHistory ph JOIN      posts p ON ph.PostId = p.Id WHERE      p.OwnerUserId = (SELECT Id FROM users WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Id = (SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?'))) GROUP BY      ph.PostId;	codebase_community
SELECT      u.Id AS UserId,     ph.LastAccessDate AS LastAccessDate,     ph.Location AS Location FROM      users u JOIN      badges b ON u.Id = b.UserId JOIN      postHistory ph ON u.Id = ph.UserId WHERE      b.Id = (SELECT Id FROM badges WHERE Name = 'Outliers') ORDER BY      ph.LastAccessDate DESC;	codebase_community
SELECT p2.Title AS RelatedPostTitle FROM posts p1 JOIN posts p2 ON p1.Id = p2.ParentId WHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';	codebase_community
SELECT p.Id, b.Id AS BadgeId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE u.UserDisplayName = 'Samuel' AND YEAR(ph.CreationDate) = 2013;	codebase_community
SELECT u.DisplayName  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  JOIN (     SELECT PostId, COUNT(*) AS ViewCount      FROM posts      GROUP BY PostId      ORDER BY ViewCount DESC      LIMIT 1 ) AS popular_posts ON p.Id = popular_posts.PostId;	codebase_community
SELECT u.DisplayName, u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.Id = (SELECT Id FROM tags WHERE ExcerptPostId = t.ExcerptPostId AND ExcerptPostId IS NOT NULL AND TagName = 'hypothesis-testing')	codebase_community
SELECT p2.Title, pl.Id AS LinkTypeId FROM posts p1 JOIN posts p2 ON p1.Id = p2.ParentId JOIN postLinks pl ON p2.Id = pl.PostId WHERE p1.Title = 'What are principal component scores?';	codebase_community
SELECT p.OwnerUserId, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1;	codebase_community
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)	codebase_community
SELECT p.Id, p.OwnerUserId, SUM(CASE WHEN v.PostId IS NOT NULL THEN 1 ELSE 0 END) AS ViewCount FROM posts p LEFT JOIN votes v ON p.Id = v.PostId GROUP BY p.Id, p.OwnerUserId ORDER BY ViewCount DESC LIMIT 5;	codebase_community
SELECT COUNT(*) FROM tags WHERE EXISTS (     SELECT 1     FROM posts     WHERE posts.Id = tags.ExcerptPostId     GROUP BY posts.Id     HAVING COUNT(posts.Id) BETWEEN 5000 AND 7000 );	codebase_community
SELECT `OwnerUserId` FROM `posts` WHERE `Id` = (SELECT `ExcerptPostId`               FROM `tags`               ORDER BY COUNT(*) DESC               LIMIT 1) ORDER BY `FavoriteCount` DESC LIMIT 1;	codebase_community
SELECT u.Id, MAX(u.Reputation) AS HighestReputation FROM users u WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)	codebase_community
SELECT COUNT(*) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND p.BountyAmount = 50;	codebase_community
SELECT Id FROM users ORDER BY Age ASC LIMIT 1;	codebase_community
SELECT SUM(p.Score) as TotalScore FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.LasActivityDate LIKE '2010-07-19%'	codebase_community
SELECT      COUNT(pl.Id) / 12 AS avg_monthly_links FROM      postLinks pl JOIN      posts p ON pl.PostId = p.Id WHERE      YEAR(pl.CreationDate) = 2010     AND (         SELECT              COUNT(c.Id)         FROM              comments c         WHERE              c.PostId = p.Id     ) <= 2;	codebase_community
SELECT p.Id  FROM posts p  JOIN votes v ON p.Id = v.PostId  WHERE v.UserId = 1465  ORDER BY (SELECT COUNT(*) FROM votes WHERE PostId = p.Id) DESC  LIMIT 1;	codebase_community
SELECT p.Id, p.OwnerUserId, p.LastEditorUserId, p.ParentId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.Id = (     SELECT MIN(pl2.Id)      FROM postLinks pl2     WHERE pl2.PostId = p.Id )	codebase_community
SELECT u.Id, u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Id) DESC LIMIT 1;	codebase_community
SELECT MIN(CreationDate)  FROM votes  WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'chl') ORDER BY CreationDate ASC  LIMIT 1;	codebase_community
SELECT MIN(posts.CreationDate) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = (SELECT MIN(Age) FROM users);	codebase_community
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Id = (     SELECT MIN(b.Id)     FROM badges     WHERE `Name` = 'Autobiographer' );	codebase_community
SELECT COUNT(DISTINCT u.Id)  FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;	codebase_community
SELECT AVG(COUNT(v.PostId)) AS avg_votes_by_oldest_users FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users) GROUP BY u.Id;	codebase_community
SELECT u.Id, u.DisplayName  FROM users u JOIN votes v ON u.Id = v.UserId GROUP BY u.Id, u.DisplayName ORDER BY SUM(v.VoteType) DESC LIMIT 1;	codebase_community
SELECT COUNT(*)  FROM users  WHERE Id IN (     SELECT OwnerUserId      FROM posts      WHERE Reputation > 2000 AND Views > 1000 );	codebase_community
SELECT u.DisplayName  FROM users u JOIN (     SELECT DISTINCT UserId      FROM badges     UNION     SELECT UserId      FROM comments     UNION     SELECT UserId      FROM postHistory     UNION     SELECT UserId      FROM postLinks     UNION     SELECT OwnerUserId      FROM posts     UNION     SELECT LastEditorUserId      FROM posts     UNION     SELECT UserId      FROM votes ) user_activities ON u.Id = user_activities.UserId WHERE u.Age BETWEEN 19 AND 65;	codebase_community
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010;	codebase_community
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;	codebase_community
SELECT p.Id, p.OwnerUserId FROM posts p JOIN votes v ON p.Id = v.PostId GROUP BY p.Id ORDER BY SUM(v.VoteValue) DESC LIMIT 1;	codebase_community
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner'	codebase_community
SELECT DISTINCT p.OwnerUserId, u.UserDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id IN (     SELECT PostId     FROM postLinks pl     WHERE YEAR(pl.CreationDate) = 2011     GROUP BY PostId     HAVING SUM(CASE WHEN pl.CreationDate BETWEEN '2011-01-01' AND '2011-12-31' THEN 1 ELSE 0 END) > 20000 );	codebase_community
SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;	codebase_community
SELECT      ROUND(         (COUNT(CASE WHEN u.Reputation > 1000 THEN p.Id END) * 100.0) / COUNT(p.Id),         2     ) AS ReputationOver1000Percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      YEAR(p.CreationDate) = 2011;	codebase_community
SELECT     (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) / COUNT(u.Id)) * 100 AS percentage FROM     users u	codebase_community
SELECT      p.Id AS PostId,      u.DisplayName AS LastEditorDisplayName,      p.ViewCount AS TotalViews FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Text = 'Computer Game Datasets';	codebase_community
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);	codebase_community
SELECT COUNT(c.Id)  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.Id = (SELECT PostId FROM posts ORDER BY Score DESC LIMIT 1);	codebase_community
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;	codebase_community
SELECT u.DisplayName, u.DisplayName AS Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183;	codebase_community
SELECT MAX(b.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'Emmett';	codebase_community
SELECT COUNT(DISTINCT u.Id) AS adult_users_with_over_5000_upvotes FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Age BETWEEN 19 AND 65 AND v.UpVotes > 5000;	codebase_community
SELECT TIMESTAMPDIFF(SECOND, u.CreationDate, b.CreationDate) AS TimeToGetBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon';	codebase_community
SELECT u.Id, COUNT(p.Id) AS posts_count, COUNT(c.Id) AS comments_count FROM users u LEFT JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN comments c ON u.Id = c.UserId WHERE u.Id = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1) GROUP BY u.Id;	codebase_community
SELECT c.Id, c.CreationDate, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10;	codebase_community
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Id = 5;	codebase_community
SELECT COUNT(*) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Id = (SELECT Id FROM tags WHERE ExcerptPostId IS NULL AND Id = (SELECT Id FROM tags WHERE TagName = 'careers'));	codebase_community
SELECT u.Reputation, p.ViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Jarrod Dixon';	codebase_community
SELECT      (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) AS CommentsCount,     (SELECT COUNT(*) FROM posts WHERE ParentId = p.Id AND OwnerUserId = p.Id) AS AnswersCount FROM      posts p WHERE      p.Id = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')	codebase_community
SELECT CreationDate  FROM users  WHERE DisplayName = 'IrishStat'	codebase_community
SELECT COUNT(*) FROM posts WHERE EXISTS (     SELECT 1     FROM bounty     WHERE bounty.PostId = posts.Id AND bounty.BountyAmount >= 30 );	codebase_community
SELECT      (COUNT(CASE WHEN Score > 50 THEN posts.Id END) * 100.0) / COUNT(posts.Id) AS PercentageScoreAbove50 FROM      posts JOIN      users ON posts.OwnerUserId = users.Id WHERE      users.Id = (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY SUM(votes.Score) DESC LIMIT 1)	codebase_community
SELECT COUNT(*)  FROM posts  WHERE Id IN (SELECT PostId FROM votes WHERE PostId IS NOT NULL AND Id NOT IN (SELECT PostId FROM votes WHERE VoteType = 'Accepted'))  AND (SELECT SUM(VoteType = 'UpVote') - SUM(VoteType = 'DownVote') FROM votes WHERE PostId = posts.Id) < 20;	codebase_community
SELECT COUNT(*) FROM tags WHERE Id < 15 AND (SELECT COUNT(*) FROM posts WHERE ExcerptPostId = tags.Id) <= 20;	codebase_community
SELECT `ExcerptPostId`, `TagName`  FROM `tags` WHERE `TagName` = 'sample';	codebase_community
SELECT u.Reputation, COUNT(v.Id) AS UpVotes FROM users u JOIN comments c ON u.Id = c.UserId LEFT JOIN votes v ON c.Id = v.PostId AND v.VoteType = 1 WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;	codebase_community
SELECT      p.Id AS PostId,      p.Title,      c.Text AS CommentText FROM      posts p JOIN      comments c ON p.Id = c.PostId WHERE      p.Title LIKE '%linear regression%'	codebase_community
SELECT c.Id AS CommentId, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;	codebase_community
SELECT      c.CreationDate,      u.DisplayName AS CommenterName,      TIMESTAMPDIFF(YEAR, u.DateOfBirth, CURDATE()) AS Age FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.UserDisplayName LIKE '%http://%'	codebase_community
SELECT COUNT(DISTINCT c.PostId)  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE c.PostId IN (SELECT PostId FROM comments WHERE Score = 0)  AND p.ViewCount < 5;	codebase_community
SELECT COUNT(c.Id) AS ZeroScoreComments FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Id IN (     SELECT PostId     FROM comments     GROUP BY PostId     HAVING COUNT(*) = 1 ) AND c.PostId IN (     SELECT PostId     FROM comments     GROUP BY PostId     HAVING SUM(v.VoteScore) = 0 );	codebase_community
SELECT COUNT(DISTINCT c.UserId) FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Score = 0 AND u.Age = 40;	codebase_community
SELECT p.Id AS PostId, c.Id AS CommentId FROM posts p JOIN comments c ON p.Id = c.PostId JOIN tags t ON p.Id = t.ExcerptPostId WHERE p.OwnerUserId IS NOT NULL AND p.LastEditorUserId IS NOT NULL AND p.Title = 'Group differences on a five point Likert item' AND t.Id IS NOT NULL;	codebase_community
SELECT v.UserId, COUNT(v.Id) as UpVoteCount FROM votes v JOIN comments c ON v.PostId = c.PostId JOIN posts p ON v.PostId = p.Id WHERE c.Id = (SELECT Id FROM comments WHERE Text = 'R is also lazy evaluated.') GROUP BY v.UserId;	codebase_community
SELECT c.Id, c.PostId, c.UserId FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';	codebase_community
SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId IN (SELECT PostId FROM posts p WHERE p.Id IN (SELECT PostId FROM votes v WHERE v.PostId = p.Id AND v.VoteType = 'UpVote') AND p.Score BETWEEN 1 AND 5) AND u.DownVotes = 0;	codebase_community
SELECT      (COUNT(CASE WHEN c.UserId IN (SELECT v.UserId FROM votes v WHERE v.PostId = c.PostId AND v.UserId IS NOT NULL AND v.UpVotes = 0) THEN c.UserId END) * 100.0) /      COUNT(CASE WHEN c.Score BETWEEN 5 AND 10 THEN c.UserId END) AS PercentageZeroUpVotes FROM      comments c WHERE      c.Score BETWEEN 5 AND 10;	codebase_community
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = '3-D Man');	superhero
SELECT COUNT(DISTINCT h.id)  FROM superhero h  JOIN hero_power hp ON h.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'Super Strength';	superhero
SELECT COUNT(DISTINCT s.id)  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;	superhero
SELECT s.id, s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id, s.full_name HAVING COUNT(hp.power_id) > 15;	superhero
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.id = (SELECT id FROM colour WHERE name = 'Blue');	superhero
SELECT c.name AS Skin_Colour FROM superhero AS s JOIN colour AS c ON s.skin_colour_id = c.id WHERE s.name = 'Apocalypse';	superhero
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE colour.name = 'Blue'  AND superpower.name = 'Agility';	superhero
SELECT s.id FROM superhero s JOIN colour AS eye_colour ON s.eye_colour_id = eye_colour.id AND eye_colour.name = 'Blue' JOIN colour AS hair_colour ON s.hair_colour_id = hair_colour.id AND hair_colour.name = 'Blond';	superhero
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.id = (SELECT id FROM publisher WHERE name = 'Marvel Comics');	superhero
SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' GROUP BY superhero_name ORDER BY tallest_height DESC;	superhero
SELECT p.publisher_name FROM superhero AS s JOIN publisher AS p ON s.publisher_id = p.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = 'Sauron')	superhero
SELECT      c.id AS eye_colour_id,      c.name AS eye_colour_name,      COUNT(s.id) AS superhero_count FROM      superhero s JOIN      colour c ON s.eye_colour_id = c.id JOIN      publisher p ON s.publisher_id = p.id WHERE      p.name = 'Marvel Comics' GROUP BY      c.id, c.name ORDER BY      superhero_count DESC;	superhero
SELECT AVG(height_cm)  FROM superhero  WHERE publisher_id IN (SELECT id FROM publisher WHERE name = 'Marvel Comics');	superhero
SELECT s.* FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN publisher p ON s.publisher_id = p.id WHERE p.id = 13 AND sp.id = (SELECT id FROM superpower WHERE power_name = 'Super Strength');	superhero
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE name = 'DC Comics');	superhero
SELECT p.id AS publisher_id, p.publisher_name, MIN(ha.attribute_value) AS min_speed FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' GROUP BY p.id, p.publisher_name ORDER BY min_speed ASC LIMIT 1;	superhero
SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');	superhero
SELECT p.name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.name = 'Blue Beetle II';	superhero
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.id = (SELECT id FROM colour WHERE colour.name = 'Blond');	superhero
SELECT s.id, s.id AS superhero_id, a.attribute_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;	superhero
SELECT race.id, race.race_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';	superhero
SELECT DISTINCT s.id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') AND ha.attribute_value < 50;	superhero
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';	superhero
SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN gender ON superhero.gender_id = gender.id WHERE gender.id = 2 AND attribute.id = 1 AND hero_attribute.attribute_value = 100;	superhero
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;	superhero
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE `name` = 'Vampire');	superhero
SELECT      ROUND((SUM(CASE WHEN `alignment_id` = 1 THEN 1 ELSE 0 END) * 100) / COUNT(`id`), 2) AS bad_alignment_percentage,     SUM(CASE WHEN `alignment_id` = 1 AND `publisher_id` = 1 THEN 1 ELSE 0 END) AS bad_alignment_marvel_count FROM      `superhero` WHERE      `alignment_id` = 1;	superhero
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) -      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference;	superhero
SELECT id  FROM publisher  WHERE publisher_name = 'Star Trek';	superhero
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;	superhero
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;	superhero
SELECT c.id, c.colour FROM `superhero` AS sh JOIN `colour` AS c ON sh.eye_colour_id = c.id WHERE sh.id = 75;	superhero
SELECT sp.id, sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.name = 'Deathlok';	superhero
SELECT AVG(weight_kg)  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE name = 'Female');	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE g.id = 1 GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 5;	superhero
SELECT superhero.id, superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.id = 2;	superhero
SELECT superhero.name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.name = 'No Colour';	superhero
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.id = 56;	superhero
SELECT s.id, CONCAT(s.id, ' - ', p.name) AS full_name FROM superhero s JOIN race r ON s.race_id = r.id JOIN publisher p ON s.publisher_id = p.id WHERE r.name = 'Demi-God' LIMIT 5;	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = 2;	superhero
SELECT race.id AS race_id, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;	superhero
SELECT c.name  FROM superhero s JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.name = 'human';	superhero
SELECT c.id AS eye_colour_id, c.colour_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN (     SELECT MAX(weight_kg) AS max_weight     FROM superhero ) AS max_weight_query WHERE s.weight_kg = max_weight_query.max_weight	superhero
SELECT      ROUND(         (SUM(CASE WHEN s.publisher_id = 13 THEN 1 ELSE 0 END) * 100.0) / COUNT(*),         2     ) AS percentage_marvel_heroes FROM      superhero s WHERE      s.publisher_id IN (SELECT id FROM publisher WHERE name = 'Marvel Comics')     AND s.height_cm BETWEEN 150 AND 180;	superhero
SELECT `superhero_name` FROM `superhero` WHERE `gender_id` = 1 AND `weight_kg` > (SELECT AVG(`weight_kg`) * 0.79 FROM `superhero` WHERE `gender_id` = 1);	superhero
SELECT sp.power_name, COUNT(hp.power_id) AS power_count FROM `superpower` sp JOIN `hero_power` hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1;	superhero
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.id = (     SELECT id     FROM superhero     WHERE superhero_name = 'Abomination' )	superhero
SELECT sp.id, sp.id AS superpower_id, sp.power_name FROM `superpower` sp JOIN `hero_power` hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;	superhero
SELECT COUNT(hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';	superhero
SELECT s.id, s.name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1;	superhero
SELECT AVG(s.id)  FROM superhero s  WHERE s.skin_colour_id = (SELECT id FROM colour WHERE id = 1);	superhero
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.name = 'Dark Horse Comics';	superhero
SELECT s.id, s.id AS superhero_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.id = (SELECT id FROM attribute WHERE attribute_name = 'durability') AND p.id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') GROUP BY s.id ORDER BY SUM(CASE WHEN a.attribute_name = 'durability' THEN a.attribute_value ELSE 0 END) DESC LIMIT 1;	superhero
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.id = (SELECT id FROM superhero WHERE name = 'Abraham Sapien');	superhero
SELECT s.id, s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';	superhero
SELECT s.eye_colour_id, s.hair_colour_id, s.skin_colour_id FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.id = 2 AND p.id = 2;	superhero
SELECT      s.id AS superhero_id,      sp.publisher_name FROM      superhero s JOIN      colour c_eyes ON s.eye_colour_id = c_eyes.id JOIN      colour c_hair ON s.hair_colour_id = c_hair.id JOIN      colour c_skin ON s.skin_colour_id = c_skin.id JOIN      publisher sp ON s.publisher_id = sp.id WHERE      c_eyes.id = c_hair.id AND c_hair.id = c_skin.id;	superhero
SELECT r.id, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = 'A-Bomb');	superhero
SELECT      (COUNT(CASE WHEN c.id = 2 THEN 1 END) * 100.0) / COUNT(*) AS blue_female_percentage FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.gender_id = 1;	superhero
SELECT s.superhero_name, r.name AS race_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'Charles Chandler';	superhero
SELECT gender.id, gender.name FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.name = 'Agent 13';	superhero
SELECT s.id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';	superhero
SELECT COUNT(power_id) AS power_count FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.name = 'Amazo';	superhero
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.id = (     SELECT id FROM superhero WHERE `name` = 'Hunter Zolomon' );	superhero
SELECT s.id, s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber';	superhero
SELECT superhero_name  FROM superhero  JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id  JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id  WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';	superhero
SELECT s.eye_colour_id  FROM superhero s  JOIN colour c ON s.skin_colour_id = c.id  WHERE c.colour = 'Gold';	superhero
SELECT s.id, s.gender_id, s.eye_colour_id, s.hair_colour_id, s.skin_colour_id, s.race_id, s.publisher_id, s.alignment_id FROM superhero s WHERE s.race_id = (SELECT id FROM race WHERE name = 'Vampire');	superhero
SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.name = 'Neutral';	superhero
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.id = (SELECT attribute_id FROM attribute WHERE attribute_name = 'Strength' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Strength'))	superhero
SELECT      r.id AS race_id,      r.name AS race_name,      a.id AS alignment_id,      a.name AS alignment_name FROM      superhero s JOIN      race r ON s.race_id = r.id JOIN      alignment a ON s.alignment_id = a.id WHERE      s.name = 'Cameron Hicks';	superhero
SELECT      ROUND((SUM(CASE WHEN s.gender_id = 2 AND p.id = 2 THEN 1 ELSE 0 END) * 100.0) /            COUNT(CASE WHEN p.id = 2 THEN 1 END), 2) AS percentage_female_marvel_heroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id	superhero
SELECT AVG(weight_kg)  FROM superhero  WHERE race_id IN (SELECT id FROM race WHERE id = 2);	superhero
SELECT      (SUM(CASE WHEN s.full_name = 'Emil Blonsky' THEN s.weight_kg ELSE 0 END) -      SUM(CASE WHEN s.full_name = 'Charles Chandler' THEN s.weight_kg ELSE 0 END)) AS weight_difference FROM superhero s;	superhero
SELECT      superhero.id,     superhero.name,     (SUM(superhero.height_cm) / COUNT(superhero.id)) AS average_height FROM      superhero GROUP BY      superhero.id, superhero.name;	superhero
SELECT sp.power_name  FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination');	superhero
SELECT COUNT(*)  FROM superhero  JOIN race ON superhero.race_id = race.id  JOIN gender ON superhero.gender_id = gender.id  WHERE race.id = 21 AND gender.id = 1;	superhero
SELECT s.id, s.id AS superhero_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') AND ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Speed')	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;	superhero
SELECT a.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = '3-D Man');	superhero
SELECT s.id, s.gender_id, s.eye_colour_id, s.hair_colour_id, s.skin_colour_id, s.race_id, s.publisher_id, s.alignment_id FROM superhero s JOIN colour c_eye ON s.eye_colour_id = c_eye.id AND c_eye.name = 'Blue' JOIN colour c_hair ON s.hair_colour_id = c_hair.id AND c_hair.name = 'Brown';	superhero
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.name IN ('Hawkman', 'Karate Kid', 'Speedy');	superhero
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id != 1;	superhero
SELECT      ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7), 2) AS blue_eye_percentage FROM      superhero WHERE      eye_colour_id = 7;	superhero
SELECT SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS male_female_ratio FROM superhero;	superhero
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);	superhero
SELECT id FROM `superpower` WHERE `power_name` = 'cryokinesis';	superhero
SELECT superhero_name  FROM superhero  WHERE id = 294;	superhero
SELECT s.id, s.name FROM superhero s LEFT JOIN (     SELECT hero_id     FROM superhero     WHERE weight_kg = 0 OR weight_kg IS NULL ) mw ON s.id = mw.hero_id WHERE mw.hero_id IS NULL;	superhero
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = (SELECT superhero.id FROM superhero WHERE name = 'Karen Beecher-Duncan');	superhero
SELECT sp.id AS power_id, sp.name AS power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = (     SELECT id FROM superhero WHERE name = 'Helen Parr' );	superhero
SELECT race.id, race.name FROM superhero JOIN race ON superhero.race_id = race.id JOIN (     SELECT id     FROM superhero     WHERE weight_kg = 108 AND height_cm = 188 ) AS filtered_hero ON superhero.id = filtered_hero.id;	superhero
SELECT p.name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.id = 38;	superhero
SELECT s.race_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);	superhero
SELECT s.alignment_id, sp.power_name FROM superhero s JOIN superpower sp ON s.id = sp.hero_id WHERE s.id = (     SELECT id     FROM superhero     WHERE name = 'Atom IV' );	superhero
SELECT superhero.id, CONCAT(superhero.id, ' - ', superhero.name) AS superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.name = 'Blue' LIMIT 5;	superhero
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = 3;	superhero
SELECT      s.id AS superhero_id,     c.colour AS skin_colour FROM      superhero s JOIN      hero_attribute ha ON s.id = ha.hero_id JOIN      attribute a ON ha.attribute_id = a.id JOIN      colour c ON s.skin_colour_id = c.id WHERE      a.attribute_name = 'Durability' AND      ha.attribute_value = 100;	superhero
SELECT COUNT(*)  FROM superhero  WHERE gender_id = 2 AND alignment_id = 1;	superhero
SELECT s.id, s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE ha.attribute_value BETWEEN 75 AND 80;	superhero
SELECT race.name FROM superhero JOIN race ON superhero.race_id = race.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id JOIN gender ON superhero.gender_id = gender.id WHERE hair_colour.name = 'blue' AND gender.name = 'male';	superhero
SELECT      MULTIPLY(DIVIDE(COUNT(CASE WHEN gender.id = 2 THEN 1 END), COUNT(CASE WHEN alignment.id = 2 THEN 1 END)), 100.0) AS percentage_female_bad_heroes FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2;	superhero
SELECT      SUM(CASE WHEN c.id = 7 THEN 1 ELSE 0 END) -      SUM(CASE WHEN c.id = 1 THEN 1 ELSE 0 END) AS blue_eyes_minus_no_eye_color FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg IS NULL OR s.weight_kg = 0;	superhero
SELECT ha.attribute_value  FROM hero_attribute ha  JOIN superhero s ON ha.hero_id = s.id  WHERE ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')  AND s.name = 'Hulk';	superhero
SELECT sp.power_name FROM superhero AS sup JOIN hero_power AS hpow ON sup.id = hpow.hero_id JOIN superpower AS sp ON hpow.power_id = sp.id WHERE sup.gender_id = 1 AND sup.race_id = 2 AND sup.publisher_id = 1 AND sp.power_name LIKE 'Lantern Power Ring';	superhero
SELECT COUNT(*) FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');	superhero
SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.id = 2 AND publisher.id = 1;	superhero
SELECT s.id, s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;	superhero
SELECT s.gender_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force';	superhero
SELECT superhero_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher_name = 'DC Comics'  ORDER BY weight_kg DESC  LIMIT 1;	superhero
SELECT AVG(s.height_cm) AS average_height FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.race_id <> (SELECT id FROM race WHERE name = 'Human') AND p.name = 'Dark Horse Comics';	superhero
SELECT s.id, s.gender_id, s.eye_colour_id, s.hair_colour_id, s.skin_colour_id, s.race_id, s.publisher_id, s.alignment_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;	superhero
SELECT     SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -      SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS superhero_difference FROM superhero s JOIN publisher p ON s.publisher_id = p.id;	superhero
SELECT a.attribute_name FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = 'Black Panther') ORDER BY ha.attribute_value ASC LIMIT 1;	superhero
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination');	superhero
SELECT id, `height_cm` FROM `superhero` ORDER BY `height_cm` DESC LIMIT 1;	superhero
SELECT `superhero_name`  FROM `superhero`  WHERE `full_name` = 'Charles Chandler';	superhero
SELECT      ROUND(         (SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0,          2     ) AS percentage_female FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE name = 'George Lucas');	superhero
SELECT      ROUND(Multiply(Divide(Sum(CASE WHEN superhero.alignment_id = 1 THEN 1 ELSE 0 END),                            Count(superhero.id)), 100.0), 2) AS percentage_good_heroes FROM superhero WHERE superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');	superhero
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';	superhero
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);	superhero
SELECT `full_name`  FROM `superhero`  WHERE `full_name` = 'Alien';	superhero
SELECT s.id, s.name FROM superhero s WHERE s.weight_kg < 100 AND s.eye_colour_id = (SELECT id FROM colour WHERE name = 'Brown');	superhero
SELECT a.id, a.id AS attribute_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.id = (SELECT id FROM superhero WHERE name = 'Aquababy');	superhero
SELECT `race`.`id` AS `race`, `superhero`.`weight_kg` AS `weight` FROM `superhero` LEFT JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`id` = 40;	superhero
SELECT AVG(height) AS average_height FROM superhero WHERE alignment_id = 2;	superhero
SELECT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';	superhero
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = (SELECT id FROM superhero WHERE superhero_name = 'Blackwulf');	superhero
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)	superhero
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 20 AND q.q1 IN (     SELECT MAX(q1)     FROM qualifying     WHERE raceId = 20     GROUP BY raceId, driverId )	formula_1
SELECT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 19 AND q.position = 1 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)	formula_1
SELECT DISTINCT s.year  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  JOIN seasons s ON r.year = s.year  WHERE c.name = 'Shanghai International Circuit';	formula_1
SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';	formula_1
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';	formula_1
SELECT c.name, cs.positionText FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors co ON cs.constructorId = co.constructorId WHERE co.name = 'Renault';	formula_1
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE YEAR(races.date) = 2010 AND circuits.country NOT IN ('Malaysia', 'Bahrain', 'Turkey', 'Monaco', 'Spain')	formula_1
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';	formula_1
SELECT c.lat, c.lng  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.name = 'Australian Grand Prix';	formula_1
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';	formula_1
SELECT races.date, races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';	formula_1
SELECT lat, lng  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  WHERE races.name = 'Abu Dhabi Grand Prix';	formula_1
SELECT c.name FROM constructors AS con JOIN constructorStandings AS cs ON con.constructorId = cs.constructorId JOIN races AS r ON cs.raceId = r.raceId JOIN circuits AS cir ON r.circuitId = cir.circuitId WHERE cs.points = 1.0 AND r.raceId = 24;	formula_1
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.surname = 'Senna' AND d.forename = 'Bruno' AND q.raceId = (SELECT raceId FROM races WHERE raceId = 354);	formula_1
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 355 AND q.q2 = '01:40:00';	formula_1
SELECT d.number  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  WHERE q.position = 3 AND q.q3 LIKE '01:54%'  AND q.raceId = (SELECT raceId FROM races WHERE year = 2022 AND round = 3);	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND r.time IS NULL	formula_1
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId JOIN races ra ON r.raceId = ra.raceId JOIN status s ON r.statusId = s.statusId JOIN drivers d ON r.driverId = d.driverId WHERE ra.date = '2015-11-29' AND s.status = 'Finished';	formula_1
SELECT d.driverRef, d.surname, d.forename, d.dob FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.raceId = 592 AND d.dob IS NOT NULL ORDER BY d.dob ASC LIMIT 1;	formula_1
SELECT d.driverRef, d.url FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.time LIKE '0:01:27%' AND r.raceId = 161;	formula_1
SELECT drivers.nationality FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE raceId = 933 AND fastestLap IS NOT NULL) AND results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);	formula_1
SELECT location, lat, lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';	formula_1
SELECT constructors.url FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId WHERE races.raceId = 9 AND constructorResults.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9);	formula_1
SELECT q1  FROM qualifying  JOIN drivers ON drivers.driverRef = qualifying.driverId  WHERE drivers.surname = 'di Grassi' AND qualifying.raceId = (SELECT raceId FROM races WHERE raceId = 345);	formula_1
SELECT drivers.nationality FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE races.raceId = 347 AND qualifying.q2 = '01:15:00';	formula_1
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 45 AND q.q3 LIKE '0:01:%'	formula_1
SELECT time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Bruce McLaren') AND raceId = 743;	formula_1
SELECT d.surname, d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND ds.position = 2;	formula_1
SELECT seasons.url FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.date = '2015-11-29' AND ds.positionText = 'Not Classified';	formula_1
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.raceId = 872 AND ds.positionText = 'Finished' ORDER BY d.dob DESC LIMIT 1;	formula_1
SELECT d.forename || ' ' || d.surname AS fullName FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 AND lt.position = 1 ORDER BY lt.milliseconds ASC LIMIT 1;	formula_1
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLap = 1 ORDER BY r.fastestLapTime LIMIT 1;	formula_1
SELECT      ( fastestLapSpeed(raceId = 853) - fastestLapSpeed(raceId = 854) ) / fastestLapSpeed(raceId = 853) * 100 AS percentFaster FROM      drivers  JOIN      results ON drivers.driverId = results.driverId JOIN      races ON results.raceId = races.raceId WHERE      drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND      races.raceId = 853 OR      races.raceId = 854	formula_1
SELECT      d.driverId,     d.forename,     d.surname,     COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) AS completed_races,     COUNT(d.driverId) AS total_races,     (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) / COUNT(d.driverId)) * 100 AS completion_rate FROM      drivers d JOIN      driverStandings ds ON d.driverId = ds.driverId JOIN      races r ON ds.raceId = r.raceId WHERE      r.date = '1983-07-16' GROUP BY      d.driverId	formula_1
SELECT year  FROM races  WHERE name = 'Singapore Grand Prix'  ORDER BY year  LIMIT 1;	formula_1
SELECT COUNT(*) AS total_races, name FROM races JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2005 GROUP BY name ORDER BY name DESC;	formula_1
SELECT name FROM races WHERE year = (SELECT year FROM races WHERE date = (SELECT MIN(date) FROM races));	formula_1
SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;	formula_1
SELECT seasons.year, COUNT(races.raceId) AS race_count FROM seasons JOIN races ON seasons.year = races.year GROUP BY seasons.year ORDER BY race_count DESC LIMIT 1;	formula_1
SELECT name  FROM races  WHERE year = 2017  AND circuitId NOT IN (SELECT circuitId FROM races WHERE year = 2000);	formula_1
SELECT circuits.name AS circuit_name, circuits.location AS circuit_location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year = (SELECT MIN(year) FROM seasons WHERE url LIKE '%European%') AND circuits.country = 'Spain';	formula_1
SELECT s.year FROM seasons s JOIN races r ON s.year = r.year JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND c.country = 'United Kingdom' ORDER BY s.year DESC LIMIT 1;	formula_1
SELECT COUNT(DISTINCT year) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name LIKE '%British Grand Prix%';	formula_1
SELECT d.forename, d.surname, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'Singapore Grand Prix' ORDER BY ds.position;	formula_1
SELECT d.forename, d.surname, ds.points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings);	formula_1
SELECT d.surname, d.forename, ds.points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3;	formula_1
SELECT d.forename, d.surname, r.name AS race_name, MIN(l.milliseconds) AS best_lap_time FROM lapTimes l JOIN drivers d ON l.driverId = d.driverId JOIN races r ON l.raceId = r.raceId GROUP BY l.driverId, r.name ORDER BY best_lap_time ASC LIMIT 1;	formula_1
SELECT AVG(milliseconds) AS average_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix';	formula_1
SELECT      (COUNT(CASE WHEN ds.position > 1 THEN rs.raceId END) * 100.0) / COUNT(rs.raceId) AS percentage_not_first FROM      results rs JOIN      drivers d ON rs.driverId = d.driverId JOIN      driverStandings ds ON rs.raceId = ds.raceId AND rs.driverId = ds.driverId WHERE      d.surname = 'Hamilton' AND      rs.raceId IN (SELECT r.raceId FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name LIKE 'Circuit de%' OR c.name LIKE 'Sepang International Circuit') AND     YEAR(r.date) >= 2010	formula_1
SELECT d.forename, d.surname, d.nationality, MAX(ds.points) AS max_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId GROUP BY d.driverId ORDER BY MAX(ds.wins) DESC, MAX(ds.points) DESC LIMIT 1;	formula_1
SELECT d.forename, d.surname,         (strftime('%Y', 'now') - strftime('%Y', d.dob)) AS age FROM drivers d WHERE d.nationality = 'Japanese' ORDER BY age ASC LIMIT 1;	formula_1
SELECT DISTINCT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year BETWEEN 1990 AND 2000 GROUP BY c.name, c.location HAVING COUNT(r.raceId) = 4;	formula_1
SELECT c.name, c.location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006;	formula_1
SELECT r.name AS race_name, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE MONTH(r.date) = 9 AND YEAR(r.date) = 2005;	formula_1
SELECT r.name AS RaceName FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND ds.position < 20;	formula_1
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN driverStandings ON races.raceId = driverStandings.raceId JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit' AND driverStandings.wins = 1;	formula_1
SELECT r.name AS race, s.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId JOIN (     SELECT driverId, MIN(milliseconds) AS min_time     FROM lapTimes     GROUP BY driverId ) lt ON d.driverId = lt.driverId JOIN seasons s ON r.year = s.year WHERE d.surname = 'Schumacher' AND lt.min_time = lapTimes.milliseconds ORDER BY lt.min_time LIMIT 1;	formula_1
SELECT AVG(points)  FROM driverStandings  JOIN drivers ON driverStandings.driverId = drivers.driverId  WHERE drivers.surname = 'Irvine' AND driverStandings.year = 2000;	formula_1
SELECT r.year, dr.forename || ' ' || dr.surname AS driver_name, ds.points FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers dr ON ds.driverId = dr.driverId WHERE dr.forename = 'Lewis' AND dr.surname = 'Hamilton' ORDER BY r.year ASC LIMIT 1;	formula_1
SELECT races.name, circuits.country, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;	formula_1
SELECT      r.name AS raceName,      s.year AS raceYear,      c.location AS circuitLocation,      MAX(r.laps) AS mostLaps FROM      races r JOIN      seasons s ON r.year = s.year JOIN      circuits c ON r.circuitId = c.circuitId GROUP BY      r.name, s.year, c.location ORDER BY      mostLaps DESC LIMIT 1;	formula_1
SELECT      (SELECT COUNT(*) FROM races WHERE country = 'Germany' AND name = 'European Grand Prix') * 100.0 /      (SELECT COUNT(*) FROM races WHERE name = 'European Grand Prix') AS percentage	formula_1
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';	formula_1
SELECT name FROM circuits WHERE circuitRef IN ('silverstone', 'hockenheimring', 'hungaroring') ORDER BY lat DESC LIMIT 1;	formula_1
SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit';	formula_1
SELECT c.country FROM circuits c WHERE c.alt = (SELECT MAX(alt) FROM circuits);	formula_1
SELECT COUNT(*) FROM drivers WHERE code IS NULL;	formula_1
SELECT d.nationality FROM drivers d ORDER BY d.dob ASC LIMIT 1;	formula_1
SELECT surname FROM drivers WHERE nationality = 'Italian';	formula_1
SELECT url  FROM drivers  WHERE surname = 'Davidson' AND forename = 'Anthony';	formula_1
SELECT driverRef  FROM drivers  WHERE forename = 'Lewis' AND surname = 'Hamilton';	formula_1
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';	formula_1
SELECT DISTINCT s.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE c.name = 'Silverstone Circuit';	formula_1
SELECT      c.name AS circuitName,      c.url AS circuitURL,      r.year,      r.round,      r.name AS raceName,      r.url AS raceURL FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId WHERE      c.circuitRef = 'silverstone';	formula_1
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Abu Dhabi Circuit' AND SUBSTR(r.date, 1, 4) = '2010';	formula_1
SELECT COUNT(*)  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.country = 'Italy';	formula_1
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya';	formula_1
SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' AND circuitRef = 'catalunya'	formula_1
SELECT MIN(fastestLapTime) as fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Lewis Hamilton');	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN (     SELECT MIN(r.milliseconds) AS min_time, r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.name LIKE '%Formula_1%'     GROUP BY r.driverId ) AS fastest_lap ON d.driverId = fastest_lap.driverId JOIN (     SELECT r.driverId, r.fastestLapTime     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.name LIKE '%Formula_1%' ) AS fastest_lap_time ON fastest_lap.driverId = fastest_lap_time.driverId ORDER BY fastest_lap_time.fastestLapTime ASC LIMIT 1;	formula_1
SELECT d.driverRef FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'Canadian Grand Prix' AND ds.position = 1 AND r.year = 2007;	formula_1
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';	formula_1
SELECT r.name AS race_name FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY ds.rank ASC LIMIT 1;	formula_1
SELECT MAX(fastestLapSpeed) as fastest_lap_speed FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix')	formula_1
SELECT DISTINCT s.year FROM seasons s JOIN races r ON s.year = r.year JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';	formula_1
SELECT d.forename || ' ' || d.surname AS full_name, r.positionOrder AS final_rank FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Chinese Grand Prix' AND d.forename = 'Lewis' AND d.surname = 'Hamilton';	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 1989 AND ra.name = 'Australian Grand Prix' AND r.grid = 4;	formula_1
SELECT COUNT(DISTINCT d.driverId)  FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId  JOIN races ra ON r.raceId = ra.raceId  JOIN drivers d ON r.driverId = d.driverId  WHERE ra.year = 2008  AND ra.name = 'Australian Grand Prix'  AND r.time IS NOT NULL;	formula_1
SELECT MIN(milliseconds) AS fastest_lap_time FROM lapTimes WHERE driverRef = 'hamilton' AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY milliseconds ASC LIMIT 1;	formula_1
SELECT r.time FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.name = 'Chinese Grand Prix' AND d.surname = 'Alonso' AND ds.positionText = '2' AND r.year = 2008;	formula_1
SELECT      d.driverRef,      d.url  FROM      drivers d  JOIN      driverStandings ds ON d.driverId = ds.driverId  JOIN      races r ON ds.raceId = r.raceId  JOIN      seasons s ON r.year = s.year  WHERE      s.year = 2008 AND      r.name = 'Australian Grand Prix' AND      ds.position = 1 AND      ds.status = 'Finished' AND      r.name = (         SELECT              name          FROM              races          WHERE              year = 2008 AND              name = 'Australian Grand Prix' AND              MIN(time LIKE '%:%:%.%')     );	formula_1
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  JOIN seasons se ON ra.year = se.year  WHERE d.nationality = 'British'  AND se.year = 2008  AND ra.name = 'Australian Grand Prix';	formula_1
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE year = 2008 AND circuitId = (         SELECT circuitId         FROM circuits         WHERE name = 'Chinese Grand Prix'     ) ) AND positionText != '';	formula_1
SELECT SUM(points) AS total_points FROM driverStandings JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE drivers.driverRef = 'hamilton';	formula_1
SELECT AVG(     (EXTRACT(EPOCH FROM (TIME_TO_SEC('00:00:00') + TIME_TO_SEC(SUBSTR(fastestLapTime, 1, 2)) * INTERVAL '1 MINUTE'      + TIME_TO_SEC(SUBSTR(fastestLapTime, 4, 2)) * INTERVAL '1 SECOND'      + TIME_TO_SEC(SUBSTR(fastestLapTime, 7, 3)) / 1000))) AS seconds ) AS average_fastest_lap_seconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	formula_1
SELECT      (SELECT COUNT(DISTINCT raceId)       FROM results       WHERE raceId IN         (SELECT raceId          FROM races          WHERE year = 2008 AND name = 'Australian Grand Prix')         AND time IS NOT NULL)      /      (SELECT COUNT(DISTINCT raceId)       FROM results       WHERE raceId IN         (SELECT raceId          FROM races          WHERE year = 2008 AND name = 'Australian Grand Prix')) AS completion_rate;	formula_1
SELECT      (100.0 * (TIMESTAMPDIFF(SECOND, (SELECT time FROM results WHERE position = 1 AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008),      (SELECT time FROM results WHERE position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)))) /      (SELECT time FROM results WHERE position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)))) AS percentage_faster	formula_1
SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide';	formula_1
SELECT lat, lng FROM circuits WHERE country = 'USA';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';	formula_1
SELECT MAX(points) AS max_points FROM constructorStandings WHERE constructorId IN (     SELECT constructorId     FROM constructors     WHERE nationality = 'British' );	formula_1
SELECT constructors.name, SUM(constructorResults.points) AS total_points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructors.name ORDER BY total_points DESC LIMIT 1;	formula_1
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE cs.points = 0 AND r.raceId = 291;	formula_1
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points = 0 GROUP BY c.constructorId HAVING COUNT(cs.raceId) = 2;	formula_1
SELECT c.name, cs.positionText FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;	formula_1
SELECT COUNT(DISTINCT c.constructorRef) FROM constructors c JOIN driverStandings ds ON c.constructorId = ds.constructorId JOIN drivers d ON ds.driverId = d.driverId JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN lapTimes lt ON r.raceId = lt.raceId AND d.driverId = lt.driverId WHERE c.nationality = 'French' AND lt.lap > 50;	formula_1
SELECT      (COUNT(DISTINCT d.driverId)       FILTER (WHERE rs.time IS NOT NULL AND rs.year BETWEEN 2007 AND 2009)     ) / COUNT(DISTINCT d.driverId) * 100 AS completion_percentage FROM drivers d JOIN results rs ON d.driverId = rs.driverId WHERE d.nationality = 'Japanese'	formula_1
SELECT     s.year,     AVG(TIME_TO_SEC(t.time)) AS avg_time_seconds FROM     seasons s JOIN     races r ON s.year = r.year JOIN     results res ON r.raceId = res.raceId JOIN     driverStandings ds ON res.driverId = ds.driverId AND res.raceId = ds.raceId JOIN     drivers d ON ds.driverId = d.driverId WHERE     ds.position = 1 AND     d.surname = 'Hamilton' AND     s.year < 1975 AND     res.time IS NOT NULL GROUP BY     s.year;	formula_1
SELECT d.forename, d.surname FROM drivers d WHERE d.dob > '1975-01-01' AND EXISTS (     SELECT 1     FROM driverStandings ds     WHERE ds.driverId = d.driverId     AND ds.positionText = '2' )	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN constructors c ON r.constructorId = c.constructorId WHERE d.nationality = 'Italian' AND r.time IS NULL;	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);	formula_1
SELECT lap FROM races JOIN results ON races.raceId = results.raceId JOIN driverStandings ON results.driverId = driverStandings.driverId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2009 AND driverStandings.position = 1 AND drivers.surname = 'Hamilton' ORDER BY results.fastestLap LIMIT 1;	formula_1
SELECT AVG(fastestLapSpeed)  FROM results  WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix');	formula_1
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;	formula_1
SELECT      (COUNT(CASE WHEN d.dob < '1985-01-01' THEN d.driverId END) * 100.0) /      COUNT(d.driverId) AS percentage_of_qualified_drivers FROM      drivers d JOIN      driverStandings ds ON d.driverId = ds.driverId JOIN      races r ON ds.raceId = r.raceId WHERE      r.year BETWEEN 2000 AND 2005 AND      d.dob < '1985-01-01' AND      ds.laps > 50	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'French' AND       (TIME_TO_SEC(SUBSTR(lt.time, 1, 2)) * 60 + TIME_TO_SEC(SUBSTR(lt.time, 4, 2)) < 120);	formula_1
SELECT code FROM drivers WHERE nationality = 'America';	formula_1
SELECT raceId FROM races WHERE year = 2009;	formula_1
SELECT COUNT(DISTINCT driverId) AS numberOfDrivers FROM driverStandings WHERE raceId = 18;	formula_1
SELECT      d.code,      COUNT(*) AS netherlands_count FROM      drivers d INNER JOIN (     SELECT          MIN(YEAR(dob)) AS min_dob     FROM          drivers     WHERE          nationality = 'Dutch' ) youngest_dutch ON d.dob = youngest_dutch.min_dob ORDER BY      d.dob DESC LIMIT 3;	formula_1
SELECT driverRef FROM drivers WHERE surname = 'Kubica';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';	formula_1
SELECT d.driverRef, d.surname, d.forename, MIN(lt.time) AS earliestLapTime FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId ORDER BY earliestLapTime LIMIT 3;	formula_1
SELECT driverRef  FROM drivers  WHERE nationality = 'German'  ORDER BY dob ASC  LIMIT 1;	formula_1
SELECT d.driverId, d.code FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN results r ON d.driverId = r.driverId WHERE d.dob LIKE '1971%' AND lt.fastestLap = 1 GROUP BY d.driverId, d.code HAVING COUNT(r.resultId) > 0;	formula_1
SELECT d.driverId, d.forename, d.surname, d.dob, MAX(l.time) AS latestLapTime FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01' GROUP BY d.driverId, d.forename, d.surname, d.dob ORDER BY latestLapTime DESC LIMIT 10;	formula_1
SELECT DISTINCT r.year FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.fastestLapTime = (     SELECT MIN(lt2.fastestLapTime)     FROM lapTimes lt2 )	formula_1
SELECT s.year, MAX(lapTime.time) AS slowestLapTime FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN seasons s ON r.year = s.year GROUP BY s.year ORDER BY slowestLapTime ASC LIMIT 1;	formula_1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5;	formula_1
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NULL;	formula_1
SELECT COUNT(*), location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY circuitId;	formula_1
SELECT raceId, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;	formula_1
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 23 AND q.q2 IS NOT NULL;	formula_1
SELECT d.name, s.year, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE d.dob = (SELECT MIN(dob) FROM drivers) AND r.raceId = (SELECT MIN(raceId) FROM qualifying q2 WHERE q2.driverId = d.driverId);	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.status = 'Puncture';	formula_1
SELECT constructors.name, constructors.url FROM constructors WHERE constructors.nationality = 'Italian' ORDER BY constructors.points DESC LIMIT 1;	formula_1
SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.wins = (     SELECT MAX(wins)     FROM constructorStandings );	formula_1
SELECT      d.driverRef,      d.surname,      d.forename,      lt.time  FROM      lapTimes lt  JOIN      drivers d ON lt.driverId = d.driverId  WHERE      lt.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix')      AND lt.lap = 3  ORDER BY      lt.time DESC  LIMIT 1;	formula_1
SELECT r.name, MIN(lt.time) AS fastest_lap_time, MIN(lt.milliseconds) AS fastest_lap_time_milliseconds FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.position = 1 AND lt.lap = 1 GROUP BY r.raceId, r.name ORDER BY fastest_lap_time_milliseconds LIMIT 1;	formula_1
SELECT AVG(fastestLapTime)  FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.year = 2006 AND races.name = 'United States Grand Prix'  AND results.rank < 11;	formula_1
SELECT      d.driverRef,     d.forename,     d.surname,     AVG(PS.duration) AS avgPitStopDuration FROM      drivers d JOIN      pitStops PS ON d.driverId = PS.driverId WHERE      d.nationality = 'German' AND     d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY      d.driverRef ORDER BY      avgPitStopDuration ASC LIMIT 3;	formula_1
SELECT d.surname, d.forename, r.time FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.name = 'Canadian Grand Prix' AND r.year = 2008 AND ds.position = 1 AND r.time LIKE '%:__:.__';	formula_1
SELECT c.constructorRef, c.url FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE cs.position = 1 AND EXISTS (     SELECT 1     FROM races r     WHERE r.year = 2009     AND r.name = 'Singapore Grand Prix'     AND r.raceId = cs.raceId );	formula_1
SELECT forename, surname, dob  FROM drivers  WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';	formula_1
SELECT CONCAT(forename, ' ', surname) AS fullName, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;	formula_1
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring';	formula_1
SELECT      c.name,      c.nationality,      SUM(cr.points) AS total_points FROM      constructorStandings cs JOIN      races r ON cs.raceId = r.raceId JOIN      constructors c ON cs.constructorId = c.constructorId JOIN      seasons s ON r.year = s.year WHERE      r.name = 'Circuit de Monaco'     AND s.year BETWEEN 1980 AND 2010 GROUP BY      cs.constructorId ORDER BY      total_points DESC LIMIT 1;	formula_1
SELECT AVG(points) as average_score FROM driverStandings JOIN races ON driverStandings.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND circuits.country = 'Turkey';	formula_1
SELECT AVG(COUNT(raceId)) AS average_races_per_year FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year;	formula_1
SELECT nationality  FROM drivers  GROUP BY nationality  ORDER BY COUNT(*) DESC  LIMIT 1;	formula_1
SELECT SUM(CASE WHEN ds.position = 91 THEN cs.wins ELSE 0 END) AS victories_by_91st_rank FROM driverStandings ds JOIN constructors cs ON ds.constructorId = cs.constructorId WHERE ds.points = 91;	formula_1
SELECT r.name FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.fastestLapTime = (     SELECT MIN(fastestLapTime)     FROM lapTimes )	formula_1
SELECT c.location || ', ' || c.country AS full_location FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races);	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE q.position = 1 AND r.year = 2008 AND r.name = 'Malaysian Grand Prix' AND q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = q.raceId)	formula_1
SELECT      d.forename || ' ' || d.surname AS fullName,      d.nationality,      c.name AS raceName FROM      drivers d JOIN      (SELECT           MIN(dob) AS minDob      FROM           drivers) AS youngest ON      d.dob = youngest.minDob JOIN      races c ON      (SELECT           raceId      FROM           driverStandings      WHERE           driverId = d.driverId      ORDER BY           year DESC, raceId DESC      LIMIT 1) = c.raceId;	formula_1
SELECT COUNT(*)  FROM results  JOIN status ON results.statusId = status.statusId  JOIN races ON results.raceId = races.raceId  JOIN drivers ON results.driverId = drivers.driverId  WHERE status.status = 'Accident'  AND races.name = 'Canadian Grand Prix'  AND drivers.driverId = (     SELECT driverId      FROM results      JOIN status ON results.statusId = status.statusId      JOIN races ON results.raceId = races.raceId      JOIN drivers ON results.driverId = drivers.driverId      WHERE status.status = 'Accident'      AND races.name = 'Canadian Grand Prix'      GROUP BY drivers.driverId      ORDER BY COUNT(*) DESC      LIMIT 1 );	formula_1
SELECT d.forename, d.surname, COUNT(*) AS wins FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;	formula_1
SELECT raceId, driverId, MAX(duration) AS longestPitStopDuration FROM pitStops GROUP BY raceId, driverId ORDER BY longestPitStopDuration DESC LIMIT 1;	formula_1
SELECT MIN(milliseconds) as fastestLapTime FROM lapTimes WHERE position = 1;	formula_1
SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Lewis Hamilton');	formula_1
SELECT lap FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE drivers.driverRef = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix' ORDER BY pitStops.lap;	formula_1
SELECT     d.driverId,     d.surname,     d.forename,     ps.raceId,     ps.stop,     ps.duration FROM     pitStops ps JOIN     drivers d ON ps.driverId = d.driverId JOIN     races r ON ps.raceId = r.raceId WHERE     r.year = 2011 AND     r.name = 'Australian Grand Prix';	formula_1
SELECT MIN(milliseconds) AS fastestLapTime,         drivers.forename,         drivers.surname,         races.name AS raceName FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY drivers.driverId, races.name ORDER BY fastestLapTime ASC LIMIT 1;	formula_1
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = (     SELECT MIN(milliseconds)     FROM lapTimes ) ORDER BY lt.milliseconds ASC LIMIT 20;	formula_1
SELECT      circuits.name AS circuit_name,      circuits.position AS circuit_position FROM      circuits  JOIN      lapTimes ON circuits.circuitId = lapTimes.circuitId JOIN      results ON lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId JOIN      drivers ON results.driverId = drivers.driverId WHERE      drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY      lapTimes.milliseconds ASC LIMIT 1;	formula_1
SELECT      MIN(milliseconds) AS fastest_lap_time_milliseconds,     (SELECT time FROM lapTimes WHERE milliseconds = MIN(milliseconds)) AS fastest_lap_time FROM      lapTimes WHERE      raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix');	formula_1
SELECT c.name AS CircuitName, d.forename || ' ' || d.surname AS DriverName, lt.time AS FastestLapTime FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE c.name = 'Circuit de Barcelona-Catalunya' OR c.name = 'Monaco Grand Prix';	formula_1
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.circuitRef = 'austria' AND EXISTS (     SELECT 1     FROM lapTimes lt     WHERE lt.raceId = r.raceId     ORDER BY lt.milliseconds ASC     LIMIT 1 );	formula_1
SELECT pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN lapTimes ON pitStops.driverId = lapTimes.driverId AND pitStops.raceId = lapTimes.raceId WHERE circuits.circuitRef = 'austrian' AND lapTimes.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = races.raceId)	formula_1
SELECT c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.raceId WHERE lt.time = '1:29.488';	formula_1
SELECT AVG(milliseconds) AS average_pit_stop_time FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	formula_1
SELECT AVG(milliseconds) as average_lap_time_milliseconds FROM lapTimes WHERE raceId IN (     SELECT raceId     FROM races     WHERE circuitId IN (         SELECT circuitId         FROM circuits         WHERE country = 'Italy'     ) );	formula_1
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);	european_football_2
SELECT p.player_name, p.height  FROM Player p  WHERE p.height = (SELECT MAX(height) FROM Player);	european_football_2
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (     SELECT player_api_id     FROM Player_Attributes     ORDER BY potential ASC     LIMIT 1 );	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating BETWEEN 60 AND 65 AND pa.defensive_work_rate = 'low';	european_football_2
SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `crossing` DESC LIMIT 5;	european_football_2
SELECT League.name  FROM League  JOIN Match ON League.id = Match.league_id  WHERE Match.season = '2015/2016'  GROUP BY League.name  ORDER BY SUM(Match.home_team_goal + Match.away_team_goal) DESC  LIMIT 1;	european_football_2
SELECT home_team_api_id, COUNT(*) AS lost_matches FROM Match WHERE home_team_goal < away_team_goal   AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1;	european_football_2
SELECT P.player_name, SUM(PA.penalties) AS total_penalties FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id GROUP BY P.player_api_id ORDER BY total_penalties DESC LIMIT 10;	european_football_2
SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.season = '2009/2010' AND T2.league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND T2.away_team_goal > T2.home_team_goal GROUP BY T1.team_long_name ORDER BY COUNT(*) DESC LIMIT 1;	european_football_2
SELECT      MAX(buildUpPlaySpeed) AS highest_build_up_play_speed FROM      Team_Attributes WHERE      team_api_id IN (         SELECT              team_api_id          FROM              Team_Attributes          ORDER BY              buildUpPlaySpeed DESC          LIMIT 4     );	european_football_2
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;	european_football_2
SELECT      p.player_name,     (strftime('%Y-%m-%d', 'now', '-%Y year', p.birthday) AS current_age,     pa.sprint_speed FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.sprint_speed >= 97     AND pa.date BETWEEN '2013-01-01' AND '2015-12-31'	european_football_2
SELECT League.name, COUNT(Match.id) as total_matches FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_matches DESC LIMIT 1;	european_football_2
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';	european_football_2
SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' GROUP BY player_api_id HAVING overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') ORDER BY overall_rating DESC LIMIT 1;	european_football_2
SELECT team_fifa_api_id  FROM Team_Attributes  WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;	european_football_2
SELECT team_long_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing > (     SELECT AVG(buildUpPlayPassing)     FROM Team_Attributes     WHERE buildUpPlayPassing IS NOT NULL     AND strftime('%Y', date) = '2012' ) GROUP BY team_long_name;	european_football_2
SELECT      (SUM(CASE WHEN `Player_Attributes`.`preferred_foot` = 'left' THEN 1 ELSE 0 END) * 100.0) / COUNT(`Player`.`player_api_id`) AS `left_foot_percentage` FROM      `Player_Attributes` JOIN      `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE      `Player`.`birthday` BETWEEN '1987-01-01' AND '1992-12-31';	european_football_2
SELECT League.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_goals ASC LIMIT 5;	european_football_2
SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');	european_football_2
SELECT p.player_name, AVG(pa.heading_accuracy) as avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10;	european_football_2
SELECT T1.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND T1.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND buildUpPlayDribblingClass = 'Normal') ORDER BY T1.chanceCreationPassing ASC;	european_football_2
SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2009/2010' GROUP BY League.name HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);	european_football_2
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';	european_football_2
SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10';	european_football_2
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Franco Zennaro' );	european_football_2
SELECT      t.team_long_name,     taa.buildUpPlayPositioningClass FROM      Team t JOIN      Team_Attributes taa ON t.team_fifa_api_id = taa.team_fifa_api_id WHERE      t.team_long_name = 'ADO Den Haag'     AND taa.buildUpPlayPositioningClass = 'Free'     AND taa.date = (SELECT MAX(date) FROM Team_Attributes WHERE team_api_id = taa.team_api_id)	european_football_2
SELECT heading_accuracy  FROM Player_Attributes  WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francois Affolter')  AND date = '2014-09-18 00:00:00';	european_football_2
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011';	european_football_2
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';	european_football_2
SELECT `Player`.`player_name`, `Player_Attributes`.`preferred_foot` FROM `Player` JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`birthday` = (     SELECT MIN(`birthday`)     FROM `Player` ) ORDER BY `Player`.`birthday` DESC LIMIT 1;	european_football_2
SELECT `Player`.`player_name`, `Player_Attributes`.`potential` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`);	european_football_2
SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left';	european_football_2
SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE chanceCreationPassingClass = 'Risky';	european_football_2
SELECT defensive_work_rate  FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'David Wilson');	european_football_2
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);	european_football_2
SELECT l.name FROM League l JOIN Country c ON l.country_id = c.id WHERE c.name = 'Netherlands';	european_football_2
SELECT AVG(home_team_goal) AS avg_home_team_goal FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';	european_football_2
SELECT      P.player_name,      PA.average_finishing FROM      Player P JOIN      (SELECT           player_api_id,           AVG(finishing) AS average_finishing      FROM           Player_Attributes      WHERE           player_api_id IN (SELECT player_api_id FROM Player WHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player))      GROUP BY           player_api_id) PA ON      P.player_api_id = PA.player_api_id WHERE      PA.average_finishing = (SELECT MAX(average_finishing) FROM (SELECT AVG(finishing) AS average_finishing FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player)) GROUP BY player_api_id))	european_football_2
SELECT p.player_name FROM Player p WHERE p.height > 180;	european_football_2
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';	european_football_2
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;	european_football_2
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';	european_football_2
SELECT `potential` FROM `Player_Attributes` WHERE `player_api_id` = (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Aaron Doran' );	european_football_2
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left';	european_football_2
SELECT team_long_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';	european_football_2
SELECT      `Team_Attributes`.`buildUpPlayPassingClass`  FROM      `Team_Attributes`  JOIN      `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id`  WHERE      `Team`.`team_short_name` = 'CLB';	european_football_2
SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlayPassing > 70;	european_football_2
SELECT AVG(t2.overall_rating) as avg_rating FROM Player_Attributes t2 JOIN Player t1 ON t2.player_api_id = t1.player_api_id WHERE strftime('%Y', t2.date) BETWEEN '2010' AND '2015' AND t1.height > 170;	european_football_2
SELECT player_name, MIN(height) AS shortest_height FROM Player GROUP BY player_name ORDER BY shortest_height LIMIT 1;	european_football_2
SELECT `Country.name`  FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `League.name` = 'Italy Serie A';	european_football_2
SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;	european_football_2
SELECT AVG(`overall_rating`)  FROM `Player_Attributes`  WHERE `player_fifa_api_id` = (SELECT `player_fifa_api_id` FROM `Player` WHERE `player_name` = 'Aaron Doran');	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';	european_football_2
SELECT team_short_name FROM Team WHERE team_api_id IN (     SELECT home_team_api_id     FROM Match     WHERE home_team_goal = 10 );	european_football_2
SELECT p.player_name, pa.potential, pa.balance FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = 61 AND pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE player_api_id = p.player_api_id AND potential = 61);	european_football_2
SELECT      (SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.id ELSE NULL END)) -      (SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.id ELSE NULL END)) AS diff_ball_control FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Abdou Diallo', 'Aaron Appindangoye');	european_football_2
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';	european_football_2
SELECT      p1.player_name AS PlayerName1,      p2.player_name AS PlayerName2,      CASE          WHEN p1.birthday > p2.birthday THEN p1.player_name          ELSE p2.player_name      END AS OlderPlayer FROM      Player p1 JOIN      Player p2 ON p1.player_api_id < p2.player_api_id WHERE      p1.player_name = 'Aaron Lennon' OR p2.player_name = 'Aaron Lennon'     AND p1.player_name = 'Abdelaziz Barrada' OR p2.player_name = 'Abdelaziz Barrada';	european_football_2
SELECT `player_name`, `height` FROM `Player` WHERE `height` = (SELECT MAX(`height`) FROM `Player`);	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low';	european_football_2
SELECT `Country.name` FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `League.name` = 'Belgium Jupiler League';	european_football_2
SELECT name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';	european_football_2
SELECT p.player_name, pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);	european_football_2
SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high';	european_football_2
SELECT p.player_name, pa.crossing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 3;	european_football_2
SELECT heading_accuracy  FROM Player_Attributes  WHERE player_api_id = (     SELECT player_api_id      FROM Player      WHERE player_name = 'Ariel Borysiuk' );	european_football_2
SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height > 180 AND Player_Attributes.volleys > 70;	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;	european_football_2
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';	european_football_2
SELECT pa.long_passing  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.birthday = (SELECT MIN(birthday) FROM Player)	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND SUBSTR(date, 1, 7) = '2009-04';	european_football_2
SELECT `name`  FROM `League`  WHERE `name` IN (     SELECT `League.name`      FROM `League`      JOIN `Match` ON `League.id` = `Match.league_id`      WHERE `Match.season` = '2008/2009'      GROUP BY `League.name`      ORDER BY COUNT(`Match.id`) DESC      LIMIT 1 );	european_football_2
SELECT AVG(`overall_rating`)  FROM `Player_Attributes` WHERE strftime('%Y', `Player`.`birthday`) < '1986' AND `Player_Attributes`.`player_api_id` = `Player`.`player_api_id`;	european_football_2
SELECT      ((         (SELECT overall_rating           FROM Player_Attributes           INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id           WHERE Player.player_name = 'Ariel Borysiuk') -          (SELECT overall_rating           FROM Player_Attributes           INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id           WHERE Player.player_name = 'Paulin Puel')     ) /      (SELECT overall_rating       FROM Player_Attributes       INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id       WHERE Player.player_name = 'Paulin Puel')     ) * 100	european_football_2
SELECT AVG(`buildUpPlaySpeed`)  FROM `Team_Attributes`  WHERE `team_long_name` = 'Heart of Midlothian';	european_football_2
SELECT AVG(T1.overall_rating)  FROM Player_Attributes AS T1  JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T2.player_name = 'Pietro Marino';	european_football_2
SELECT SUM(pa.crossing) AS total_crossing_score FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Lennox';	european_football_2
SELECT MAX(`chanceCreationPassing`) AS highest_chance_creation_passing_score, `chanceCreationPassingClass` FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Ajax' GROUP BY `chanceCreationPassingClass` ORDER BY highest_chance_creation_passing_score DESC LIMIT 1;	european_football_2
SELECT preferred_foot  FROM Player_Attributes  INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.player_name = 'Abdou Diallo';	european_football_2
SELECT MAX(`overall_rating`)  FROM `Player_Attributes`  INNER JOIN `Player` AS T2 ON `Player_Attributes`.`player_fifa_api_id` = T2.`player_fifa_api_id`  WHERE T2.player_name = 'Dorlan Pabon';	european_football_2
SELECT AVG(away_team_goal)  FROM Match  JOIN Team ON Match.away_team_api_id = Team.team_api_id  JOIN League ON Match.league_id = League.id  JOIN Country ON League.country_id = Country.id  WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date LIKE '2016-06-23%' ORDER BY p.birthday DESC LIMIT 1;	european_football_2
SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Aaron Mooy' ) AND `date` LIKE '2016-02-04%';	european_football_2
SELECT `potential` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Parravicini' AND `date` = '2010-08-30 00:00:00';	european_football_2
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Migliore' AND `date` LIKE '2015-05-01%';	european_football_2
SELECT defensive_work_rate  FROM Player_Attributes  WHERE player_name = 'Kevin Berigaud'  AND date = '2013-02-22 00:00:00';	european_football_2
SELECT MAX(crossing), date FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Kevin Constant' GROUP BY date ORDER BY MAX(crossing) DESC LIMIT 1;	european_football_2
SELECT buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Willem II' AND Team_Attributes.date = '2012-02-22';	european_football_2
SELECT `buildUpPlayDribblingClass` FROM `Team_Attributes` WHERE `team_short_name` = 'LEI' AND `date` = '2015-09-10 00:00:00';	european_football_2
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'FC Lorient' AND `date` LIKE '2010-02-22%';	european_football_2
SELECT chanceCreationPassingClass  FROM Team_Attributes  WHERE team_long_name = 'PEC Zwolle' AND date = '2013-09-20 00:00:00';	european_football_2
SELECT chanceCreationCrossingClass FROM Team_Attributes WHERE team_long_name = 'Hull City' AND date = '2010-02-22 00:00:00';	european_football_2
SELECT `defenceAggressionClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hannover 96' AND `date` LIKE '2015-09-10%';	european_football_2
SELECT AVG(overall_rating)  FROM Player_Attributes  WHERE player_name = 'Marko Arnautovic'  AND date BETWEEN '2007-02-22' AND '2016-04-21'  AND SUBSTR(date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';	european_football_2
SELECT      (SUBTRACT(pd.overall_rating, jb.overall_rating) / pd.overall_rating) * 100 AS percentage_difference FROM      Player_Attributes pd JOIN      Player pdon ON pd.player_api_id = pdon.player_api_id JOIN      Player jbon ON jb.player_api_id = jbon.player_api_id WHERE      pdon.player_name = 'Landon Donovan' AND      jbon.player_name = 'Jordan Bowery' AND      pd.date = '2013-07-12'	european_football_2
SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;	european_football_2
SELECT player_api_id  FROM Player  ORDER BY weight DESC  LIMIT 10;	european_football_2
SELECT p.player_name FROM Player p WHERE DATEDIFF(year, p.birthday, CURRENT_TIMESTAMP) > 34;	european_football_2
SELECT SUM(home_team_goal) AS total_home_goals FROM Match JOIN Player ON Match.home_player_1 = Player.player_api_id OR               Match.home_player_2 = Player.player_api_id OR               Match.home_player_3 = Player.player_api_id OR               Match.home_player_4 = Player.player_api_id OR               Match.home_player_5 = Player.player_api_id OR               Match.home_player_6 = Player.player_api_id OR               Match.home_player_7 = Player.player_api_id OR               Match.home_player_8 = Player.player_api_id OR               Match.home_player_9 = Player.player_api_id OR               Match.home_player_10 = Player.player_api_id OR               Match.home_player_11 = Player.player_api_id WHERE Player.player_name = 'Aaron Lennon';	european_football_2
SELECT SUM(away_team_goal) AS total_away_goals FROM Match JOIN Player ON away_player_1 = player_api_id AND player_name = 'Daan Smith' OR away_player_2 = player_api_id AND player_name = 'Daan Smith' OR away_player_3 = player_api_id AND player_name = 'Daan Smith' OR away_player_4 = player_api_id AND player_name = 'Daan Smith' OR away_player_5 = player_api_id AND player_name = 'Daan Smith' OR away_player_6 = player_api_id AND player_name = 'Daan Smith' OR away_player_7 = player_api_id AND player_name = 'Daan Smith' OR away_player_8 = player_api_id AND player_name = 'Daan Smith' OR away_player_9 = player_api_id AND player_name = 'Daan Smith' OR away_player_10 = player_api_id AND player_name = 'Daan Smith' OR away_player_11 = player_api_id AND player_name = 'Daan Smith' JOIN Player ON away_player_1 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_2 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_3 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_4 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_5 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_6 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_7 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_8 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_9 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_10 = player_api_id AND player_name = 'Filipe Ferreira' OR away_player_11 = player_api_id AND player_name = 'Filipe Ferreira';	european_football_2
SELECT SUM(home_team_goal) AS total_home_goals FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Match m ON m.home_player_1 = pa.player_api_id OR m.home_player_2 = pa.player_api_id OR                   m.home_player_3 = pa.player_api_id OR m.home_player_4 = pa.player_api_id OR                   m.home_player_5 = pa.player_api_id OR m.home_player_6 = pa.player_api_id OR                   m.home_player_7 = pa.player_api_id OR m.home_player_8 = pa.player_api_id OR                   m.home_player_9 = pa.player_api_id OR m.home_player_10 = pa.player_api_id OR                   m.home_player_11 = pa.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', p.birthday)) < 30	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);	european_football_2
SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Match M ON P.player_api_id = M.home_player_X1 OR P.player_api_id = M.away_player_X1 JOIN Player_Attributes PA_Mate ON M.home_player_X1 = PA_Mate.player_api_id OR M.away_player_X1 = PA_Mate.player_api_id WHERE PA.attacking_work_rate = 'high' AND PA_Mate.attacking_work_rate = 'high' AND (P.player_api_id = M.home_player_X1 OR P.player_api_id = M.away_player_X1);	european_football_2
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY (strftime('%Y-%m-%d', 'now', '-%[years] year') - strftime('%Y-%m-%d', P.birthday)) DESC LIMIT 1;	european_football_2
SELECT p.player_name FROM Player p JOIN Country c ON p.player_fifa_api_id = c.id WHERE c.name = 'Belgium';	european_football_2
SELECT P.player_name, C.name AS country_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Country C ON P.player_fifa_api_id = C.id WHERE PA.vision > 89;	european_football_2
SELECT c.name AS Country, AVG(p.weight) AS AverageWeight FROM Player p JOIN Country c ON p.player_fifa_api_id = c.id GROUP BY c.name ORDER BY AverageWeight DESC LIMIT 1;	european_football_2
SELECT `team_long_name` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_api_id` = `Team.team_api_id` WHERE `buildUpPlaySpeedClass` = 'Slow'	european_football_2
SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'	european_football_2
SELECT AVG(height) AS average_height FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Player     JOIN Country ON Player.player_api_id = Country.id     WHERE Country.name = 'Italy' );	european_football_2
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;	european_football_2
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';	european_football_2
SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS JumpingScoreDifference;	european_football_2
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5;	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left');	european_football_2
SELECT     ROUND((COUNT(*) FILTER (WHERE `strength` > 80 AND `stamina` > 80) * 100.0) / COUNT(*), 2) AS percentage_above_80 FROM     `Player_Attributes`;	european_football_2
SELECT Country.name  FROM Country  JOIN League ON Country.id = League.country_id  WHERE League.name = 'Poland Ekstraklasa';	european_football_2
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')	european_football_2
SELECT      sprint_speed,      agility,      acceleration  FROM      Player_Attributes  JOIN      Player  ON      Player_Attributes.player_api_id = Player.player_api_id  WHERE      Player.player_name = 'Alexis Blin';	european_football_2
SELECT buildUpPlaySpeedClass  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id  WHERE Team.team_long_name = 'KSV Cercle Brugge';	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Italy Serie A') AND season = '2015/2016';	european_football_2
SELECT MAX(home_team_goal) AS highest_home_score FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Netherlands Eredivisie';	european_football_2
SELECT `finishing`, `curve` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_api_id` = `Player.player_api_id` WHERE `Player.weight` = (SELECT MAX(`weight`) FROM `Player`);	european_football_2
SELECT L.name, COUNT(M.id) AS game_count FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY game_count DESC LIMIT 4;	european_football_2
SELECT T2.team_long_name FROM Match AS M JOIN Team AS T1 ON M.away_team_api_id = T1.team_api_id WHERE M.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)	european_football_2
SELECT player_name  FROM Player WHERE player_api_id = (SELECT player_api_id                         FROM Player_Attributes                         ORDER BY overall_rating DESC                         LIMIT 1);	european_football_2
SELECT      (COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END) * 100.0) / COUNT(id) AS percentage_of_undersixfeet_with_strength_over_seventy FROM      Player_Attributes	european_football_2
SELECT      CASE          WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END AND Admission = '+' AND ID IN (SELECT ID FROM Examination) AND ID IN (SELECT ID FROM Patient)                       THEN 1 ELSE 0 END)          > SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END AND Admission = '-' AND ID IN (SELECT ID FROM Examination) AND ID IN (SELECT ID FROM Patient)                       THEN 1 ELSE 0 END)          THEN 'In-patient'          ELSE 'Outpatient'      END AS Dominant_Patient_Type,     ROUND(         (SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END AND Admission = '+' AND ID IN (SELECT ID FROM Examination) AND ID IN (SELECT ID FROM Patient)                    THEN 1 ELSE 0 END)           - SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END AND Admission = '-' AND ID IN (SELECT ID FROM Examination) AND ID IN (SELECT ID FROM Patient)                    THEN 1 ELSE 0 END)           * 100.0 /           SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END AND ID IN (SELECT ID FROM Examination) AND ID IN (SELECT ID FROM Patient)                    THEN 1 ELSE 0 END), 2) AS Percentage_Deviation FROM      Examination  JOIN      Patient ON Examination.ID = Patient.ID;	thrombosis_prediction
SELECT      (SELECT COUNT(*)       FROM Patient       WHERE YEAR(Birthday) > '1930' AND Sex = 'F') * 100.0 /      (SELECT COUNT(*)       FROM Patient       WHERE Sex = 'F') AS PercentageOfFemalesBornAfter1930;	thrombosis_prediction
SELECT      ROUND((COUNT(CASE WHEN P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND E.Admission = '+' THEN 1 END) * 100.0) / COUNT(P.ID), 2) AS PercentageInpatients FROM      Patient P LEFT JOIN      Examination E ON P.ID = E.ID WHERE      P.Birthday BETWEEN '1930-01-01' AND '1940-12-31';	thrombosis_prediction
SELECT      COUNT(CASE WHEN P.Diagnosis = 'SLE' AND L.Admission = '+' THEN 1 END) AS InpatientCount,     COUNT(CASE WHEN P.Diagnosis = 'SLE' AND L.Admission = '-' THEN 1 END) AS OutpatientCount,     COUNT(CASE WHEN P.Diagnosis = 'SLE' AND L.Admission = '+' THEN 1 END) / COUNT(CASE WHEN P.Diagnosis = 'SLE' AND L.Admission = '-' THEN 1 END) AS Ratio FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Diagnosis = 'SLE'	thrombosis_prediction
SELECT l.Date  FROM Laboratory l  JOIN Patient p ON l.ID = p.ID  WHERE p.ID = 30609;	thrombosis_prediction
SELECT p.Sex, p.Birthday, e.ExaminationDate, l.Symptom FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID LEFT JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = 163109;	thrombosis_prediction
SELECT Patient.ID, Patient.Sex, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.LDH > 500;	thrombosis_prediction
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = l.ID) AND l.Date = '1991-09-21' AND e.ID = p.ID;	thrombosis_prediction
SELECT p.ID, p.sex, d.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Disease d ON p.ID = d.PatientID WHERE e.Thrombosis = 2;	thrombosis_prediction
SELECT DISTINCT P.ID, P.Birthday, L.T-CHO FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.T-CHO >= 250;	thrombosis_prediction
SELECT Patient.ID, Patient.sex, Examination.diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.diagnosis LIKE '%ALB < 3.5%';	thrombosis_prediction
SELECT      (SUM(CASE WHEN sex = 'F' AND (TP < '6.0' OR TP > '8.5') THEN 1 ELSE 0 END) / COUNT(DISTINCT p.ID)) * 100 AS percentage_female_out_of_normal_range FROM      Patient p JOIN      Examination e ON p.ID = e.ID JOIN      Laboratory l ON p.ID = l.ID	thrombosis_prediction
SELECT AVG(`aCL IgG`) AS Average_aCL_IgG FROM `Patient` WHERE `Admission` = '+' AND (SUBSTRING_INDEX(SUBSTRING_INDEX(TO_DAYS(CURDATE()) - TO_DAYS(`Birthday`), '-', 2), ' ', 1) - SUBSTRING_INDEX(`Birthday`, '-', 1)) >= 50;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.sex = 'F' AND YEAR(l.Date) = 1997 AND l.Description = '-';	thrombosis_prediction
SELECT MIN(YEAR(`First Date`) - YEAR(`Birthday`)) AS YoungestAge FROM (     SELECT `Patient.ID`, `Patient.Birthday`, `Laboratory.Date` AS `First Date`     FROM `Patient`     JOIN `Laboratory` ON `Patient.ID` = `Laboratory.ID`     WHERE `Laboratory.Date` IN (         SELECT MIN(`Date`)          FROM `Laboratory`         GROUP BY `Patient.ID`     ) ) AS InitialVisits	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID)  FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON P.ID = L.ID  WHERE L.Date BETWEEN '1997-01-01' AND '1997-12-31'  AND E.ID IN (SELECT ID FROM Examination WHERE Thrombosis = 1) AND P.sex = 'F';	thrombosis_prediction
SELECT MAX(YEAR(Birthday)) - MIN(YEAR(Birthday)) AS AgeGap FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE tg >= 200));	thrombosis_prediction
SELECT p.ID, p.Birthday, l.Symptoms, l.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = (     SELECT MIN(Birthday) FROM Patient ) AND l.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT     COUNT(DISTINCT `Patient.ID`) / 12 AS average_males_tested_per_month FROM     `Patient` JOIN     `Laboratory` ON `Patient.ID` = `Laboratory.ID` WHERE     `Laboratory.Date` BETWEEN '1998-01-01' AND '1998-12-31'     AND `Patient.SEX` = 'M';	thrombosis_prediction
SELECT      p.Birthday,      l.Date,      (YEAR(CURDATE()) - YEAR(p.Birthday)) - (RIGHT(CURDATE(), 5) < RIGHT(p.Birthday, 5)) AS Age FROM      Patient p JOIN      Examination e ON p.ID = e.ID JOIN      Laboratory l ON p.ID = l.ID WHERE      p.ID IN (SELECT ID FROM Examination GROUP BY ID HAVING COUNT(*) = 1) ORDER BY      p.Birthday DESC LIMIT 1;	thrombosis_prediction
SELECT      (SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END), 0)) AS MaleToFemaleRatio FROM      Patient WHERE      (SEX = 'M' AND UA <= 8.0) OR (SEX = 'F' AND UA <= 6.5)	thrombosis_prediction
SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT DISTINCT `ID` FROM Examination) AND ID IN (SELECT `ID` FROM Laboratory WHERE Date > DATE_SUB((SELECT Date FROM Laboratory WHERE `ID` = (SELECT MAX(`ID`) FROM Laboratory)), INTERVAL 1 YEAR));	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Birthday < DATE('1990-01-01') AND L.Date BETWEEN '1990-01-01' AND '1993-12-31';	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.T_BIL >= 2.0;	thrombosis_prediction
SELECT      Diagnosis,      COUNT(Diagnosis) AS CountOfDiagnosis FROM      Examination  JOIN      Laboratory ON Examination.ID = Laboratory.ID WHERE      Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY      Diagnosis ORDER BY      CountOfDiagnosis DESC LIMIT 1;	thrombosis_prediction
SELECT AVG(SUBTRACT(YEAR(CURDATE()), YEAR(Birthday))) AS AvgAge FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-30');	thrombosis_prediction
SELECT      P.ID AS PatientID,     P.Birthday,     T.HGB,     TIMESTAMPDIFF(YEAR, P.Birthday, T.Date) AS AgeAtExamination,     L.DoctorDiagnosis FROM      Patient P JOIN      Examination E ON P.ID = E.ID JOIN      Laboratory T ON P.ID = T.ID JOIN      (SELECT ID, MAX(HGB) AS HGB FROM Laboratory GROUP BY ID) AS LabMax ON P.ID = LabMax.ID JOIN      Examination EMax ON E.ID = LabMax.ID JOIN      Laboratory L ON EMax.ID = L.ID WHERE      L.HGB = (SELECT MAX(HGB) FROM Laboratory)	thrombosis_prediction
SELECT ANA FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.ID = 3605340 AND Laboratory.Date = '1996-12-02';	thrombosis_prediction
SELECT      COUNT(*) AS TotalCholesterolNormalCount FROM      Laboratory AS Lab JOIN      Patient AS Pat ON Lab.ID = Pat.ID WHERE      Pat.ID = 2927464 AND      Lab.Date = '1995-09-04' AND      (SELECT COUNT(*) FROM Examination WHERE Examination.ID = Pat.ID AND Examination.ID IN (SELECT Lab.ID FROM Laboratory WHERE Laboratory.ID = Pat.ID AND Laboratory.Date = '1995-09-04' AND Laboratory.Value < 250)) = 1;	thrombosis_prediction
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.Diagnosis = 'AORTITIS' ORDER BY l.Date ASC LIMIT 1;	thrombosis_prediction
SELECT `Laboratory`.`Date` FROM `Laboratory` JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` JOIN `Examination` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`Description` = '1994-02-19' AND `Examination`.`Test` = 'SLE' AND `Laboratory`.`Date` = '1993-11-12';	thrombosis_prediction
SELECT p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX IN ('M', 'F') AND l.Date = '1992-06-12' AND l.ID IN (SELECT ID FROM Laboratory WHERE GPT = '9');	thrombosis_prediction
SELECT      p.ID,      (YEAR('1991-10-21') - YEAR(p.Birthday)) AS AgeAtTest FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.Date = '1991-10-21' AND l.UA = '8.4';	thrombosis_prediction
SELECT COUNT(Lab.ID)  FROM Laboratory Lab JOIN Patient Pat ON Lab.ID = Pat.ID WHERE Pat.First_Date = '1991-06-13'  AND Pat.Diagnosis = 'SJS'  AND YEAR(Lab.Date) = 1995;	thrombosis_prediction
SELECT p.ID, l.Date, l.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT e.ID     FROM Examination e     WHERE e.ExaminationDate = '1997-01-27' ) AND l.Diagnosis = 'SLE' ORDER BY l.Date ASC LIMIT 1;	thrombosis_prediction
SELECT `Symptoms` FROM `Examination` JOIN `Patient` ON `Examination.ID` = `Patient.ID` WHERE `Patient.Birthday` = '1959-03-01' AND `Laboratory.Date` = '1993-09-27';	thrombosis_prediction
SELECT      (SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-11-%' THEN L.T-CHO ELSE 0 END)      - SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-12-%' THEN L.T-CHO ELSE 0 END)) /      SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-11-%' THEN L.T-CHO ELSE 1 END) AS DecreaseRate FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Birthday = '1959-02-18'     AND L.Date BETWEEN '1981-11-01' AND '1981-12-31';	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1970-01-01' AND '1997-12-31')) AND p.ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1997-01-01' AND '1997-12-31')) AND 'Behcet' IN (SELECT Description FROM Examination WHERE ID = p.ID);	thrombosis_prediction
SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;	thrombosis_prediction
SELECT `Patient.ID` FROM `Patient` WHERE `Patient.SEX` = 'F' AND YEAR(`Patient.Birthday`) = 1964 AND `Examination.ID` IS NOT NULL ORDER BY `Patient.ID`;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Thrombosis = 2 AND P.ANA = 'S' AND L.aCL_IgM > (SELECT AVG(L2.aCL_IgM) * 1.2 FROM Laboratory L2)	thrombosis_prediction
SELECT      ROUND(         (COUNT(CASE WHEN `Laboratory.UA` <= 6.5 THEN 1 ELSE NULL END) * 100.0) /          COUNT(CASE WHEN `Laboratory.U-PRO` > 0 AND `Laboratory.U-PRO` < 30 THEN 1 ELSE NULL END),         2     ) AS PercentageOfNormalProteinuriaWithLowUricAcid FROM     `Laboratory`	thrombosis_prediction
SELECT      (SUM(CASE WHEN P.SEX = 'M' AND YEAR(L.FIRST_DATE) = 1981 THEN 1 ELSE 0 END) * 100.0) / COUNT(P.SEX) FROM      Patient P JOIN      Examination E ON P.ID = E.ID JOIN      Laboratory L ON P.ID = L.ID WHERE      P.SEX = 'M' AND YEAR(L.FIRST_DATE) = 1981	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT ID     FROM Examination     WHERE Admission = '-' ) AND l.Date LIKE '1991-10%' AND T_BIL < 2.0;	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND YEAR(P.BIRTHDAY) BETWEEN 1980 AND 1989 AND NOT EXISTS (     SELECT 1     FROM Examination E     WHERE E.ID = P.ID AND E.ANA_Pattern = 'P' )	thrombosis_prediction
SELECT p.Sex FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123;	thrombosis_prediction
SELECT AVG(ALB)  FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE';	thrombosis_prediction
SELECT MAX(symptoms) FROM Patient WHERE diagnosis = 'SLE';	thrombosis_prediction
SELECT      L.Date AS FirstDocumentationDate,      D.Diagnosis AS Disease FROM      Laboratory L JOIN      Patient P ON L.ID = P.ID JOIN      Examination E ON P.ID = E.ID JOIN      (SELECT           ID       FROM           Examination       WHERE           ID = 48473      ORDER BY           Date ASC       LIMIT 1) AS FirstExamination ON      L.ID = FirstExamination.ID JOIN      (SELECT           ID,           Diagnosis       FROM           Examination       WHERE           ID = 48473      ORDER BY           Date ASC       LIMIT 1) AS FirstDisease ON      FirstExamination.ID = FirstDisease.ID;	thrombosis_prediction
SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.Diagnosis = 'APS';	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Examination.ID = Laboratory.ID WHERE YEAR(Laboratory.Date) = 1997 AND Examination.tp > 6 AND Examination.tp < 8.5;	thrombosis_prediction
SELECT      (SUM(CASE WHEN `Examination.ID` IN (SELECT `Patient.ID` FROM `Patient` WHERE `Patient.ID` IN (SELECT `Laboratory.ID` FROM `Laboratory` WHERE `Laboratory.Date` = '1991-09-11' OR `Laboratory.Date` = '1991-09-17' OR `Laboratory.Date` = '1991-09-19' OR `Laboratory.Date` = '1991-09-20' OR `Laboratory.Date` = '1991-09-21') AND `Laboratory.ID` = `Patient.ID`) AND `Examination.ID` IN (SELECT `Patient.ID` FROM `Patient` WHERE `Patient.Diagnosis` LIKE '%ITP%')) THEN 1 ELSE 0 END) /      SUM(CASE WHEN `Examination.ID` IN (SELECT `Patient.ID` FROM `Patient` WHERE `Patient.ID` IN (SELECT `Laboratory.ID` FROM `Laboratory` WHERE `Laboratory.Date` = '1991-09-11' OR `Laboratory.Date` = '1991-09-17' OR `Laboratory.Date` = '1991-09-19' OR `Laboratory.Date` = '1991-09-20' OR `Laboratory.Date` = '1991-09-21') AND `Patient.Diagnosis` LIKE '%SLE%') THEN 1 ELSE 0 END) * 100 AS Proportion FROM      `Examination`	thrombosis_prediction
SELECT      (SUM(CASE WHEN YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA' AND SEX = 'F' THEN 1 ELSE 0 END) * 100.0) /      COUNT(CASE WHEN YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA' THEN 1 ELSE NULL END) AS Percentage_Women FROM      Patient  WHERE      YEAR(BIRTHDAY) = '1980'      AND Diagnosis = 'RA';	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID WHERE p.SEX = 'M' AND l.Date BETWEEN '1995-01-01' AND '1997-12-31' AND l.Diagnosis = 'Behcet' AND l.Admission = '-';	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5;	thrombosis_prediction
SELECT DATEDIFF(MAX(`Date`), MIN(`Date`)) AS DaysPassed FROM Laboratory WHERE `ID` IN (SELECT `ID` FROM Patient WHERE `ID` = 821298);	thrombosis_prediction
SELECT EXISTS (     SELECT 1      FROM Laboratory AS L     INNER JOIN Patient AS P ON L.ID = P.ID     WHERE P.ID = 57266 AND (         (P.SEX = 'M' AND L.UA > 8.0) OR          (P.SEX = 'F' AND L.UA > 6.5)     ) );	thrombosis_prediction
SELECT Lab.Date FROM Laboratory Lab JOIN Patient Pat ON Lab.ID = Pat.ID WHERE Pat.ID = 48473 AND Lab.Date IN (     SELECT Date     FROM Laboratory     WHERE GOT >= 60 );	thrombosis_prediction
SELECT p.ID, p.Sex, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date BETWEEN '1994-01-01' AND '1994-12-31' AND l.GOT < 60;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;	thrombosis_prediction
SELECT P.ID, P.Date, P.GPT FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.GPT > 60 ORDER BY P.Date;	thrombosis_prediction
SELECT AVG(LDH) AS avg_ldh FROM Examination WHERE LDH < 500;	thrombosis_prediction
SELECT p.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH BETWEEN 600 AND 800;	thrombosis_prediction
SELECT Patient.ID, PatientType FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date = '1991-09-21' AND Laboratory.ALP < 300 GROUP BY Patient.ID, PatientType;	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = (SELECT ID FROM Patient WHERE DATE_FORMAT(BirthDate, '%m-%d') = '04-01') AND l.ALP < 300;	thrombosis_prediction
SELECT p.ID, p.sex, p.dob FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.sex = 'Male' AND l.TP < 6.0;	thrombosis_prediction
SELECT      p.ID,     (l.TP - 8.5) AS TP_Deviation FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.SEX = 'F' AND l.TP > 8.5;	thrombosis_prediction
SELECT p.ID, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.ALB <= 3.5 OR e.ALB >= 5.5 ORDER BY p.Birthday DESC;	thrombosis_prediction
SELECT p.ID,         CASE             WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'            ELSE 'Out of Normal Range'        END AS Albumin_Range FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1982;	thrombosis_prediction
SELECT     (COUNT(CASE WHEN UA > 6.5 THEN 1 END) * 100.0) / COUNT(*) AS PercentageOfFemalePatientsWithHighUA FROM     Laboratory JOIN     Patient ON Laboratory.ID = Patient.ID WHERE     Patient.SEX = 'F';	thrombosis_prediction
SELECT AVG(UA) AS Average_UA FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5)	thrombosis_prediction
SELECT p.ID, p.sex, p.birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UN = 29;	thrombosis_prediction
SELECT p.ID, p.sex, p.birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Diagnosis = 'RA' AND l.UN < 30;	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Sex = 'M' AND L.CRE >= 1.5;	thrombosis_prediction
SELECT      (SUM(CASE WHEN Sex = 'M' AND CRE >= 1.5 THEN 1 ELSE 0 END)) >      (SUM(CASE WHEN Sex = 'F' AND CRE >= 1.5 THEN 1 ELSE 0 END)) AS MalesNotNormalVsFemalesNotNormal FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID;	thrombosis_prediction
SELECT p.ID, p.sex, p.birthday FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.Date = (     SELECT MAX(Date)     FROM Laboratory     WHERE ID IN (         SELECT ID         FROM Laboratory         WHERE T-BIL = (             SELECT MAX(T-BIL)             FROM Laboratory         )     ) ) ORDER BY p.ID;	thrombosis_prediction
SELECT      GROUP_CONCAT(DISTINCT p.ID) AS Patient_IDs,     p.sex FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.T_BIL >= 2.0 GROUP BY      p.sex;	thrombosis_prediction
SELECT p.ID, MAX(l.T-CHO) AS T_CHOL_INDEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID GROUP BY p.ID ORDER BY p.ID LIMIT 1;	thrombosis_prediction
SELECT AVG(TIMESTAMPDIFF(YEAR, `Patient`.`Birthday`, NOW())) AS AverageAge FROM `Patient` WHERE `Patient`.`ID` IN (     SELECT `Examination`.`ID`     FROM `Examination`     JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID`     WHERE `Laboratory`.`T-CHO` >= 250 ) AND `Patient`.`Sex` = 'M';	thrombosis_prediction
SELECT p.ID AS PatientID, p.Name AS PatientName, l.Date AS LabDate, l.TG FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG > 300;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE `Date` = '1991-09-11' AND `ID` IN (SELECT ID FROM Laboratory WHERE `Date` = '1991-09-11' AND `TG` >= 200)) AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50;	thrombosis_prediction
SELECT DISTINCT `Patient`.`ID` FROM `Patient` JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`Date` = '1991-09-11' AND `Laboratory`.`CPK` < 250;	thrombosis_prediction
SELECT DISTINCT P.ID FROM Patient P WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.sex = 'M' AND P.ID IN (SELECT E.ID FROM Examination E WHERE E.CPK >= 250);	thrombosis_prediction
SELECT      P.ID,      P.sex,      TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) AS age FROM      Patient P WHERE      P.ID IN (SELECT                  E.ID             FROM                  Examination E             INNER JOIN                  Laboratory L ON E.ID = L.ID             WHERE                  L.GLU >= 180 AND L.T-CHO < 250)	thrombosis_prediction
SELECT p.ID, l.GLU FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU < 180 AND YEAR(l.Date) = 1991 ORDER BY p.ID;	thrombosis_prediction
SELECT p.ID, p.sex, p.birthday FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.Date = '1991-09-11' AND (     (SELECT COUNT(*) FROM Laboratory WHERE ID = p.ID AND WBC <= 3.5) > 0 OR     (SELECT COUNT(*) FROM Laboratory WHERE ID = p.ID AND WBC >= 9.0) > 0 ) GROUP BY p.sex ORDER BY p.birthday ASC;	thrombosis_prediction
SELECT p.ID, (YEAR(CURDATE()) - YEAR(p.Birthday)) AS age FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID JOIN Diagnosis d ON p.ID = d.PatientID WHERE d.RBC < 3.5;	thrombosis_prediction
SELECT      p.ID,      p.Sex,      p.Birthday,      p.Admission,     CASE          WHEN p.RBC <= 3.5 OR p.RBC >= 6.0 THEN 'Abnormal'         ELSE 'Normal'     END AS RBC_Status FROM      Patient p WHERE      p.Sex = 'F' AND      (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) >= 50 AND      p.RBC <= 3.5 OR p.RBC >= 6.0;	thrombosis_prediction
SELECT DISTINCT p.ID, p.Sex FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.HBG < 10;	thrombosis_prediction
SELECT p.ID, p.Sex FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.HGB > 10 AND l.HGB < 17 ORDER BY p.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT p.ID, (YEAR(CURDATE()) - YEAR(p.Birthday)) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT ID     FROM Laboratory     WHERE HCT >= 52     GROUP BY ID     HAVING COUNT(*) >= 2 );	thrombosis_prediction
SELECT AVG(HCT) AS average_hematocrit_level FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;	thrombosis_prediction
SELECT     SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS 'LowerThanNormalRange',     SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS 'HigherThanNormalRange' FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID;	thrombosis_prediction
SELECT DISTINCT p.ID, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(l.Date) = 1984 AND p.ID IN (     SELECT ID     FROM Patient     WHERE SUBSTR(Birthday, 6, 2) - SUBSTR(CURRENT_DATE, 6, 2) < 50 ) AND (     SELECT PLT     FROM Examination     WHERE Examination.ID = p.ID ) BETWEEN 100 AND 400;	thrombosis_prediction
SELECT      ROUND(         (SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) / SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END)) * 100, 2     ) AS percentage_female_abnormal_PT FROM      Patient  WHERE      (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday)) > 55;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(l.Date) > 1992 AND l.Date < '1993-01-01' AND p.ID IN (     SELECT ID     FROM Laboratory     WHERE PT < 14 );	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.Date > '1997-01-01' AND L.APTT < 45;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p WHERE p.ID NOT IN (     SELECT e.ID     FROM Examination e     JOIN Laboratory l ON e.ID = l.ID     WHERE l.Date = '1991-09-11' OR l.Date = '1991-09-17' OR l.Date = '1991-09-19' OR l.Date = '1991-09-20' OR l.Date = '1991-09-21'     AND e.ID NOT IN (         SELECT ID         FROM Laboratory         WHERE Thrombosis = 0     ) );	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.Sex = 'M'    AND p.WBC > 3.5 AND p.WBC < 9.0   AND (l.FG <= 150 OR l.FG >= 450);	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.Birthday > '1980-01-01' AND l.FG < 150 OR l.FG > 450;	thrombosis_prediction
SELECT DISTINCT d.DiseaseName FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Diagnosis d ON p.ID = d.PatientID WHERE d.U_PRO >= 30;	thrombosis_prediction
SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Laboratory.ID = Patient.ID WHERE Laboratory.U_PRO > 0 AND Laboratory.U_PRO < 30 AND Laboratory.Diagnosis = 'SLE';	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.Igg >= 2000;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE IGG BETWEEN 900 AND 2000) AND p.ID IN (SELECT ID FROM Laboratory WHERE Symptoms IS NOT NULL);	thrombosis_prediction
SELECT p.ID, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (     SELECT e2.ID     FROM Examination e2     WHERE e2.IGA BETWEEN 80 AND 500     GROUP BY e2.ID     ORDER BY MAX(e2.IGA) DESC     LIMIT 1 );	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE Date > '1990-01-01') AND l.IGA > 80 AND l.IGA < 500;	thrombosis_prediction
SELECT Diagnosis, MAX(COUNT(Diagnosis)) as MostCommonDisease FROM Examination JOIN Patient ON Examination.ID = Patient.ID GROUP BY Diagnosis HAVING IGM <= 40 OR IGM >= 400 ORDER BY MAX(COUNT(Diagnosis)) DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE p.ID NOT IN (SELECT ID FROM Laboratory WHERE CRP = '+') AND l.Description IS NULL;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE e.CRE >= 1.5 AND SUBDATE(YEAR(CURDATE()), YEAR(p.Birthday)) < 70;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID IN (SELECT ID FROM Examination WHERE `Value` IN ('-', '+-'))  AND l.KCT = '+';	thrombosis_prediction
SELECT DISTINCT d.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID JOIN Diagnosis d ON e.ID = d.Examination_ID WHERE p.Birthday > '1985-01-01' AND d.RA IN('-', '+-');	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.ID IN (SELECT ID FROM Examination WHERE RF < 20) AND (YEAR(CURDATE()) - YEAR(p.Birthday)) > 60;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND l.Thrombosis = '0';	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID IN (SELECT ID FROM Laboratory WHERE C3 > 35)  AND l.ANA_Pattern = 'P';	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE NOT (29 < l.Hematocrit AND l.Hematocrit < 52) ORDER BY l.aCL_IgA DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID JOIN Patient p ON e.ID = p.ID WHERE l.Date BETWEEN '1991-09-11' AND '1991-09-21' AND p.C4 > 10;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.RNP IN ('-', '+-') AND l.Admission = '+';	thrombosis_prediction
SELECT p.Birthday  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.RNP NOT IN('-', '+-') ORDER BY p.Birthday DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.SM IN('-', '+-') AND l.Thrombosis = 0;	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN ('negative', '0') ORDER BY p.Birthday DESC LIMIT 3;	thrombosis_prediction
SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.ID IN (SELECT ID FROM Examination WHERE `Date` > '1997-01-01') AND L.SC170 IN ('negative', '0');	thrombosis_prediction
SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Sex = 'F'  AND E.Symptoms IS NULL AND L.SC170 IN ('negative', '0');	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.Date < '2000-01-01' AND l.Date NOT IN ('-','+-');	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SSA NOT IN ('negative', '0') ORDER BY l.Date ASC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Disease = 'SLE' AND p.AntiSSB IN('-', '+-');	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SSB IN ('negative', '0') AND e.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.CENTROMEA IN('-', '+-') AND e.SSB IN('-', '+-') AND p.Sex = 'M';	thrombosis_prediction
SELECT DISTINCT p.ID, d.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID JOIN Diagnosis d ON p.ID = d.PatientID WHERE l.Date = '1991-09-21' AND l.DNA >= 8;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID LEFT JOIN Laboratory l ON p.ID = l.ID WHERE l.Date IS NULL AND e.Description IS NULL AND l.DNA < 8;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.IGG BETWEEN 900 AND 2000 AND p.Admission = '+';	thrombosis_prediction
SELECT      (COUNT(CASE WHEN `Laboratory.ID` IN (SELECT `ID` FROM `Examination` WHERE `GOT` >= 60)                  AND `Laboratory.ID` IN (SELECT `ID` FROM `Examination` WHERE `Diagnosis` = 'SLE')                  THEN `Examination.ID` END) * 1.0) /      COUNT(CASE WHEN `Laboratory.ID` IN (SELECT `ID` FROM `Examination` WHERE `GOT` >= 60) THEN `Examination.ID` END) * 100 AS PercentageOfPatients FROM `Examination` JOIN `Laboratory` ON `Examination.ID` = `Laboratory.ID`;	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Sex = 'M' AND L.GOT < 60;	thrombosis_prediction
SELECT p.BirthDate FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60)) ORDER BY p.BirthDate DESC LIMIT 1;	thrombosis_prediction
SELECT p.ID, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 60 ORDER BY l.GPT DESC LIMIT 3;	thrombosis_prediction
SELECT COUNT(*) FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID JOIN Laboratory AS l ON p.ID = l.ID WHERE p.Sex = 'M' AND l.GOT < 60;	thrombosis_prediction
SELECT MIN(L.Date)  FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON L.ID = P.ID WHERE L.LDH < 500 ORDER BY L.LDH DESC LIMIT 1;	thrombosis_prediction
SELECT MAX(`Date`) AS LatestMedicalDataRecorded FROM `Laboratory` WHERE `ID` IN (     SELECT `ID`     FROM `Examination`     WHERE `ID` IN (         SELECT `ID`         FROM `Patient`         WHERE NOT EXISTS (             SELECT 1             FROM `Laboratory`             WHERE `Laboratory`.`ID` = `Patient`.`ID` AND `LDH` >= 500         )     ) )	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE ALP >= 300)) AND p.ID IN (SELECT ID FROM Examination WHERE Admission = '+');	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.ALP < 300;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'SJS' AND l.TP > 6.0 AND l.TP < 8.5;	thrombosis_prediction
SELECT L.Date FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.ALB > 3.5 AND L.ALB < 5.5 ORDER BY L.ALB DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Patient WHERE Sex = 'M' AND ID IN (     SELECT ID     FROM Laboratory     WHERE ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5 ) AND ID IN (     SELECT ID     FROM Laboratory     WHERE ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5 );	thrombosis_prediction
SELECT p.ID, aCL_IgG, aCL_IgM, aCL_IgA FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.Sex = 'F' AND l.UA > 6.50 AND l.UA <= 7.50 ORDER BY l.UA DESC LIMIT 1;	thrombosis_prediction
SELECT MAX(ANA)  FROM Examination  WHERE ID IN (SELECT ID FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE CRE < 1.5));	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.CRE < 1.5 AND p.ID = (     SELECT LabPatient.ID     FROM Laboratory LabPatient     JOIN (         SELECT MAX(aCL_IgA) as MaxACL         FROM Laboratory     ) as MaxACLTable     WHERE LabPatient.aCL_IgA = MaxACLTable.MaxACL )	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID JOIN ANA a ON p.ID = a.ID WHERE l.T_BIL >= 2.0 AND a.ANA_Pattern LIKE '%P%';	thrombosis_prediction
SELECT L.ANA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.T_BIL < 2.0 AND P.ID = (     SELECT P1.ID     FROM Patient P1     JOIN Laboratory L1 ON P1.ID = L1.ID     WHERE L1.T_BIL < 2.0     ORDER BY L1.T_BIL DESC     LIMIT 1 );	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Laboratory l ON e.ID = l.ID  WHERE e.T_Cho > 250 AND l.KCT = '-';	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (SELECT ID FROM Examination WHERE T-CHO < 250) AND l.ANA_Pattern = 'P';	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.TG < 200 AND p.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT d.DiseaseName FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID JOIN Diagnosis d ON e.ID = d.ExaminationID WHERE d.TG < 200 GROUP BY p.ID, d.DiseaseName HAVING MAX(d.TG) = d.TG;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis = 1) AND l.CPK < 250;	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND (Laboratory.KCT = '+' OR Laboratory.RVVT = '+' OR Laboratory.LAC = '+');	thrombosis_prediction
SELECT p.Birthday  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.GLU > 180  ORDER BY p.Birthday  LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.GLU < 180 AND l.Thrombosis = 0;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE e.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID IN (SELECT ID FROM Examination WHERE `Diagnosis` = 'SLE')  AND l.WBC BETWEEN 3.5 AND 9.0;	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE (l.RBC <= 3.5 OR l.RBC >= 6.0) AND p.Admission = '-';	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT p.ID     FROM Patient p     JOIN Examination e ON p.ID = e.ID     WHERE e.ID IN (         SELECT ID FROM Examination WHERE ID NOT IN (SELECT ID FROM Laboratory)     )     AND p.ID IN (         SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-09-11' AND '1991-09-21'     )     AND p.ID IN (         SELECT ID FROM Laboratory WHERE PLT > 100 AND PLT < 400     ) ) AND p.ID IN (     SELECT ID FROM Examination WHERE Diagnosis IS NOT NULL );	thrombosis_prediction
SELECT `Patient`.`ID`, `Laboratory`.`Date`, `Laboratory`.`PLT` FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`PLT` > 100 AND `Laboratory`.`PLT` < 400 AND `Patient`.`Diagnosis` = 'MCTD';	thrombosis_prediction
SELECT AVG(PT)  FROM Laboratory  WHERE `ID` IN (SELECT `ID` FROM Patient WHERE Sex = 'M')  AND PT < 14;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT ID     FROM Examination     WHERE Thrombosis IN (2, 1) ) AND l.PT < 14;	thrombosis_prediction
SELECT m.link_to_major, ma.major_name FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id WHERE CONCAT(m.first_name, ' ', m.last_name) = 'Angela Sanders';	student_club
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT COUNT(DISTINCT a.link_to_member)  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_id = 'rec0akZnLLpGUloLH';	student_club
SELECT m.phone_number FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id = (SELECT event_id FROM event WHERE event_id = 'rec0Si5cQ4rJRVzd6' AND event_name = 'Women''s Soccer') AND m.phone_number IS NOT NULL;	student_club
SELECT COUNT(*) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN t_shirt_order tso ON m.member_id = tso.link_to_member WHERE e.event_id = 'rec180D2MI4EpckHy' AND tso.t_shirt_size = 'Medium';	student_club
SELECT e.event_name, COUNT(a.link_to_event) AS attendance_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.link_to_major = (SELECT major_id FROM major WHERE major_id = 'recxK3MHQFbR9J5uO') GROUP BY e.event_name ORDER BY attendance_count DESC LIMIT 1;	student_club
SELECT m.zip, z.zip_code FROM `member` m JOIN `zip_code` z ON m.zip = z.zip_code WHERE m.member_id = (     SELECT `member_id`     FROM `member`     WHERE `link_to_major` = (         SELECT `major_id`         FROM `major`         WHERE `major_id` = (             SELECT `link_to_major`             FROM `member`             WHERE `member_id` = (                 SELECT `member_id`                 FROM `member`                 WHERE `member_id` IN (                     SELECT `link_to_member`                     FROM `attendance`                     WHERE `link_to_event` = (                         SELECT `event_id`                         FROM `event`                         WHERE `event_id` = (                             SELECT `link_to_event`                             FROM `budget`                             WHERE `budget_id` = (                                 SELECT `budget_id`                                 FROM `expense`                                 WHERE `expense_id` = (                                     SELECT `expense_id`                                     FROM `expense`                                     WHERE `link_to_member` = (                                         SELECT `member_id`                                         FROM `member`                                         WHERE `member_id` = (                                             SELECT `member_id`                                             FROM `member`                                             WHERE `member_id` IN (                                                 SELECT `link_to_member`                                                 FROM `attendance`                                                 WHERE `link_to_event` = (                                                     SELECT `event_id`                                                     FROM `event`                                                     WHERE `event_id` = (                                                         SELECT `event_id`                                                         FROM `event`                                                         WHERE `event_id` = 'rec2N69DMcrqN9PJC'                                                     )                                                 )                                             )                                         )                                     )                                 )                             )                         )                     )                 )             )         )     ) );	student_club
SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.member_id = 'rec2a03QXbFQAUZ7X';	student_club
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.member_id = 'rec1x5zBFIqoOuPW8' AND YEAR(e.event_date) = 2019;	student_club
SELECT COUNT(*) FROM `event` e JOIN `attendance` a ON e.event_id = a.link_to_event JOIN `member` m ON a.link_to_member = m.member_id WHERE m.link_to_major = (SELECT `major_id` FROM `major` WHERE `major_id` = 'recxK3MHQFbR9J5uO') AND e.event_id IN (SELECT `event_id` FROM `event` WHERE `type` = 'Meeting') GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10;	student_club
SELECT event.event_id FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_id NOT IN (     SELECT budget.link_to_event     FROM budget ) GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 20;	student_club
SELECT AVG(COUNT(a.event_id)) AS average_attendance FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id IN (     SELECT event_id     FROM event     WHERE event_name = 'Meeting' AND YEAR(event_date) = 2020 );	student_club
SELECT `expense_id`, MAX(`cost`) AS max_cost FROM `expense` JOIN `budget` ON `expense.link_to_budget` = `budget.budget_id` JOIN `event` ON `budget.link_to_event` = `event.event_id` GROUP BY `expense_id` ORDER BY max_cost DESC LIMIT 1;	student_club
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id = 'rec180D2MI4EpckHy';	student_club
SELECT m.last_name  FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = (SELECT major_id FROM major WHERE `name` = 'Law and Constitutional Studies');	student_club
SELECT m.zip  FROM member m  JOIN zip_code zc ON m.zip = zc.zip_code  JOIN major ma ON m.link_to_major = ma.major_id  WHERE m.member_id = 'rec1x5zBFIqoOuPW8';	student_club
SELECT m.link_to_major  FROM member m  WHERE m.member_id = 'rec3pH4DxMcWHMRB7';	student_club
SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.member_id = (SELECT member_id FROM member WHERE position = 'Vice President')	student_club
SELECT SUM(e.amount_spent) AS total_food_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Meeting' AND e.category = 'Food';	student_club
SELECT m.zip, zc.zip_code FROM member m JOIN zip_code zc ON m.zip = zc.zip_code WHERE m.member_id = (     SELECT member_id     FROM member     WHERE link_to_major = (         SELECT major_id         FROM major         WHERE major_id = (             SELECT major_id             FROM member             WHERE member_id = (                 SELECT member_id                 FROM member_position                 WHERE position = 'President'             )         )     ) );	student_club
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE zip IN (601, 602, 603);	student_club
SELECT SUM(e.spent) AS total_advertisement_spent FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id JOIN member m ON e.link_to_member = m.member_id WHERE ev.event_name = 'September Meeting' AND m.member_id IN (     SELECT member_id     FROM member     JOIN major ON member.link_to_major = major.major_id     WHERE major.major_id = 'recxK3MHQFbR9J5uO' ) AND e.category = 'Advertisement';	student_club
SELECT m.link_to_major FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id WHERE m.member_id = 'rec1x5zBFIqoOuPW8' OR m.member_id = 'rec280Sk7o31iG0Tx';	student_club
SELECT SUM(amount)  FROM budget  JOIN event ON budget.link_to_event = event.event_id  WHERE event.event_name = 'October Speaker';	student_club
SELECT      e.expense_id,      e.link_to_member,      e.link_to_budget FROM      expense e JOIN      event ev ON e.link_to_event = ev.event_id WHERE      ev.event_name = 'October Meeting'      AND ev.event_date = '2019-10-08'      AND e.approved = TRUE;	student_club
SELECT      SUM(e.expense_id) AS total_expense FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      CONCAT(SUBSTRING(e.expense_date, 5, 2), SUBSTRING(e.expense_date, 8, 2)) IN ('09', '10')     AND CONCAT(m.first_name, ' ', m.last_name) = 'Elijah Allen';	student_club
SELECT      (SELECT SUM(amount)       FROM expense       WHERE DATE_FORMAT(event_date, '%Y') = '2019') -       (SELECT SUM(amount)        FROM expense        WHERE DATE_FORMAT(event_date, '%Y') = '2020') AS total_difference FROM      DUAL;	student_club
SELECT m.zip FROM `event` e JOIN `member` m ON e.event_id = m.link_to_major WHERE e.event_id = (SELECT event_id FROM `event` WHERE `event` = 'Spring Budget Review')	student_club
SELECT SUM(e.expense_id) AS total_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_description = 'Posters' AND ev.event_date = '2019-09-04';	student_club
SELECT b.link_to_event, b.budget_id, (SELECT SUM(e.amount) FROM `expense` e WHERE e.link_to_budget = b.budget_id) AS total_expenses FROM `budget` b JOIN `expense` e ON b.budget_id = e.link_to_budget WHERE e.category = 'Food' GROUP BY b.budget_id ORDER BY total_expenses DESC LIMIT 1;	student_club
SELECT notes FROM income WHERE link_to_member IN (     SELECT member_id     FROM member     WHERE zip IN (         SELECT zip_code         FROM zip_code         WHERE zip = 48236     ) ) AND date_received = '2019-09-14' AND source = 'Fundraising';	student_club
SELECT COUNT(DISTINCT `link_to_major`)  FROM `member`  WHERE `link_to_major` IN (SELECT `major_id` FROM `major` WHERE `major_id` LIKE 'rec7BxKpjJ7bNph3O');	student_club
SELECT phone_number  FROM member  JOIN person ON member.member_id = person.member_id  WHERE first_name = 'Carlo' AND last_name = 'Jacobs';	student_club
SELECT m.zip, z.zip_code FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.member_id = 'rec280Sk7o31iG0Tx'	student_club
SELECT COUNT(*) FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_id = 'rec0Si5cQ4rJRVzd6' AND expense.remaining < 0;	student_club
SELECT SUM(b.amount) AS total_budget_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_id = (SELECT event_id FROM event WHERE event_id = 'recI43CzsZ0Q625ma');	student_club
SELECT e.event_id, e.event_status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20';	student_club
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';	student_club
SELECT COUNT(*)  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  JOIN t_shirt_size ts ON m.t_shirt_size = ts.t_shirt_size  WHERE ma.major_name = 'Business' AND ts.t_shirt_size = 'Medium';	student_club
SELECT zip  FROM member  WHERE member_id = 'rec1x5zBFIqoOuPW8';	student_club
SELECT major.major_id, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN (     SELECT member_id     FROM member     JOIN role ON member.member_id = role.member_id     WHERE role.position = 'Vice President' ) AS vice_president ON member.member_id = vice_president.member_id;	student_club
SELECT m.zip FROM member m JOIN zip_code zc ON m.zip = zc.zip_code JOIN (     SELECT member_id     FROM member     WHERE `name` = 'Sacha Harrison' ) as subquery ON m.member_id = subquery.member_id;	student_club
SELECT major.major_id, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN (     SELECT member_id     FROM member     JOIN position ON member.member_id = position.member_id     WHERE position.position_name = 'President' ) AS president_member ON member.member_id = president_member.member_id;	student_club
SELECT m.first_name, m.last_name, i.date_received FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE CONCAT(m.first_name, ' ', m.last_name) = 'Connor Hilton' AND i.date_received IS NOT NULL AND i.source = 'Dues';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') AND i.source = 'Dues';	student_club
SELECT      (SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN amount ELSE 0 END) /       SUM(CASE WHEN event_name = 'October Meeting' THEN amount ELSE 0 END)) AS budget_ratio FROM      budget      JOIN event ON budget.link_to_event = event.event_id      JOIN expense ON budget.budget_id = expense.link_to_budget      JOIN income ON expense.link_to_member = income.member_id WHERE      event_name IN ('Yearly Kickoff', 'October Meeting')	student_club
SELECT      (SUM(CASE WHEN b.amount = 'Parking' THEN b.amount ELSE 0 END) / COUNT(e.event_name)) * 100 AS parking_budget_percentage FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'November Speaker'	student_club
SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Pizza' GROUP BY b.link_to_event;	student_club
SELECT COUNT(DISTINCT zip) AS city_count FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE zip_code IN (SELECT zip_code FROM member WHERE zip = 55108));	student_club
SELECT major_id  FROM major  WHERE major_id IN ('recxK3MHQFbR9J5uO', 'rec7BxKpjJ7bNph3O', 'recaJdSK83k6ekRJL');	student_club
SELECT `member`.`zip` FROM `member` JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `member`.`member_id` = 'rec2a03QXbFQAUZ7X';	student_club
SELECT e.expense_id, e.link_to_member, e.link_to_budget FROM `expense` e JOIN `budget` b ON e.link_to_budget = b.budget_id WHERE b.budget_id = (     SELECT budget_id     FROM `budget`     ORDER BY remaining ASC     LIMIT 1 );	student_club
SELECT m.member_id FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id = (SELECT event_id FROM event WHERE event_id = 'rec180D2MI4EpckHy');	student_club
SELECT major.college FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;	student_club
SELECT m.link_to_major FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id JOIN `phone` p ON m.member_id = p.link_to_member WHERE p.phone_number = '809-555-3360';	student_club
SELECT event.event_name, MAX(b.budget_id) AS max_budget_id FROM event JOIN budget b ON event.event_id = b.link_to_event GROUP BY event.event_name ORDER BY max_budget_id DESC LIMIT 1;	student_club
SELECT e.expense_id, e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN major ma ON m.link_to_major = ma.major_id JOIN (     SELECT major_id     FROM major     WHERE major_name = 'Vice President' ) vp ON ma.major_id = vp.major_id;	student_club
SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id = 'rec180D2MI4EpckHy';	student_club
SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.member_id = 'rec2a03QXbFQAUZ7X';	student_club
SELECT COUNT(*)  FROM member  WHERE zip IN (501, 544);	student_club
SELECT COUNT(DISTINCT a.event_id) FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT e.event_id, MAX(DIVIDE(SUM(CASE WHEN e.expense_id IS NOT NULL THEN e.amount ELSE 0 END), b.amount)) AS spend_to_budget_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_id IN (SELECT event_id FROM event WHERE status = 'Closed') GROUP BY e.event_id ORDER BY spend_to_budget_ratio DESC LIMIT 1;	student_club
SELECT COUNT(*) FROM `member` WHERE `link_to_major` IN (     SELECT `major_id`     FROM `major`     WHERE `major_id` = (         SELECT `major_id`         FROM `major`         WHERE `major_id` = (             SELECT `link_to_major`             FROM `member`             WHERE `member_id` = (                 SELECT `member_id`                 FROM `member`                 WHERE `member_id` IN (                     SELECT `link_to_member`                     FROM `attendance`                     WHERE `link_to_event` IN (                         SELECT `event_id`                         FROM `event`                         WHERE `event_id` = (                             SELECT `event_id`                             FROM `event`                             WHERE `event_id` = (                                 SELECT `event_id`                                 FROM `event`                                 WHERE `event_id` IN (                                     SELECT `link_to_event`                                     FROM `budget`                                     WHERE `budget_id` IN (                                         SELECT `budget_id`                                         FROM `budget`                                         WHERE `budget_id` = (                                             SELECT `budget_id`                                             FROM `expense`                                             WHERE `link_to_member` IN (                                                 SELECT `member_id`                                                 FROM `member`                                                 WHERE `member_id` = (                                                     SELECT `member_id`                                                     FROM `member`                                                     WHERE `member_id` = (                                                         SELECT `member_id`                                                         FROM `member`                                                         WHERE `member_id` IN (                                                             SELECT `member_id`                                                             FROM `member`                                                             WHERE `member_id` = (                                                                 SELECT `member_id`                                                                 FROM `member`                                                                 WHERE `position` = 'President	student_club
SELECT MAX(spent) AS highest_budget_spent FROM (     SELECT SUM(amount) AS spent     FROM expense     JOIN budget ON expense.link_to_budget = budget.budget_id     GROUP BY budget.link_to_event ) AS budget_spend;	student_club
SELECT COUNT(*) FROM event WHERE event_id IN (     SELECT event_id     FROM event     JOIN attendance ON event.event_id = attendance.link_to_event     JOIN member ON attendance.link_to_member = member.member_id     WHERE member.link_to_major = 'rec0Eanv576RhQllI' ) AND YEAR(event.event_date) = 2020;	student_club
SELECT SUM(e.spent) as total_food_spent FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN income i ON i.member_id = e.link_to_member WHERE i.member_id = 'rec0s9ZrO15zhzUeE' AND b.link_to_event = 'recI43CzsZ0Q625ma';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;	student_club
SELECT m.member_id FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON a.link_to_member = m.member_id JOIN event e ON e.event_id = a.link_to_event WHERE ma.major_id = 'rec0Eanv576RhQllI' AND e.event_id = 'rec180D2MI4EpckHy';	student_club
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE zip_code = 29440) AND link_to_major IN (SELECT major_id FROM major WHERE major_id = 'recxK3MHQFbR9J5uO') AND link_to_major IN (SELECT major_id FROM major WHERE major_id = 'rec7BxKpjJ7bNph3O');	student_club
SELECT SUM(`amount`) AS total_income FROM `income` WHERE `link_to_member` = 'rec0s9ZrO15zhzUeE';	student_club
SELECT m.first_name, m.last_name FROM `member` m JOIN `income` i ON m.member_id = i.link_to_member WHERE i.amount > 40;	student_club
SELECT SUM(CASE WHEN e.event_id = 'rec0Si5cQ4rJRVzd6' THEN e.expense_id ELSE NULL END) AS total_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id;	student_club
SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_event JOIN event e ON b.link_to_event = e.event_id WHERE e.event_id = (SELECT event_id FROM event WHERE event_id = 'rec180D2MI4EpckHy')	student_club
SELECT m.first_name, m.last_name, SUM(i.amount) AS total_income FROM `income` i JOIN `member` m ON i.link_to_member = m.member_id GROUP BY m.member_id ORDER BY total_income DESC LIMIT 1;	student_club
SELECT `event_id`, MIN(`budget_id`) AS `lowest_cost` FROM `event` JOIN `budget` ON `event.event_id` = `budget.link_to_event` GROUP BY `event.event_id` ORDER BY `lowest_cost` ASC LIMIT 1;	student_club
SELECT      (SUM(CASE WHEN e.event_id = 'recI43CzsZ0Q625ma' THEN b.amount ELSE 0 END) /      (SELECT SUM(b.amount) FROM budget b JOIN event e ON b.link_to_event = e.event_id)) * 100 AS percentage_of_yearly_kickoff FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_id = 'recI43CzsZ0Q625ma';	student_club
SELECT      SUM(CASE WHEN m.link_to_major = 'rec7BxKpjJ7bNph3O' THEN 1 ELSE 0 END) AS Finance_Majors,     SUM(CASE WHEN m.link_to_major = 'recdIBgeU38UbV2sy' THEN 1 ELSE 0 END) AS Physics_Majors,     (SUM(CASE WHEN m.link_to_major = 'rec7BxKpjJ7bNph3O' THEN 1 ELSE 0 END) / SUM(CASE WHEN m.link_to_major = 'recdIBgeU38UbV2sy' THEN 1 ELSE 0 END)) AS Ratio FROM      member m;	student_club
SELECT link_to_member, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY link_to_member ORDER BY total_amount DESC LIMIT 1;	student_club
SELECT m.first_name, m.last_name FROM member m JOIN position p ON m.member_id = p.link_to_member WHERE p.position_name = 'Secretary';	student_club
SELECT COUNT(*) FROM `member` JOIN `major` ON `member.link_to_major` = `major.major_id` WHERE `major.major_name` = 'Physics Teaching';	student_club
SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_id = 'rec0Si5cQ4rJRVzd6' AND YEAR(e.event_date) = 2019;	student_club
SELECT COUNT(a.link_to_event) AS event_count, m.link_to_major FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.member_id = 'rec1x5zBFIqoOuPW8' GROUP BY m.link_to_major;	student_club
SELECT AVG(TotalSpent) AS AverageFoodExpensePerEvent FROM (     SELECT SUM(e.expense_amount) AS TotalSpent     FROM expense e     JOIN budget b ON e.link_to_budget = b.budget_id     JOIN event ev ON b.link_to_event = ev.event_id     WHERE ev.event_status = 'Closed' AND e.expense_category = 'Food' ) AS FoodExpensesPerEvent;	student_club
SELECT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.category = 'Advertisement' GROUP BY e.event_id ORDER BY SUM(ex.amount) DESC LIMIT 1;	student_club
SELECT EXISTS (     SELECT 1      FROM `event` e     JOIN `attendance` a ON e.event_id = a.link_to_event     JOIN `member` m ON a.link_to_member = m.member_id     WHERE e.event_id = 'rec0akZnLLpGUloLH' AND m.first_name = 'Maya' AND m.last_name = 'Mclean' ) AS Maya_Attended_Womens_Soccer;	student_club
SELECT      (COUNT(CASE WHEN e.event_id IN (SELECT event_id FROM event WHERE type = 'Community Service') THEN 1 END) * 100.0) / COUNT(e.event_id) AS percentage_of_community_service_events FROM      event e WHERE      e.event_date BETWEEN '2019-01-01' AND '2019-12-31';	student_club
SELECT SUM(e.expense_amount) AS total_poster_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE e.expense_description = 'Posters' AND ev.event_name = 'September Speaker';	student_club
SELECT `t_shirt_size`, COUNT(`t_shirt_size`) AS size_count FROM `member` GROUP BY `t_shirt_size` ORDER BY size_count DESC LIMIT 1;	student_club
SELECT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN (     SELECT link_to_event, SUM(amount) - SUM(budget_amount) AS remaining     FROM expense     JOIN budget ON expense.link_to_budget = budget.budget_id     GROUP BY link_to_event ) AS ex ON b.link_to_event = ex.link_to_event WHERE e.event_name = 'Closed' AND ex.remaining < 0 ORDER BY ex.remaining LIMIT 1;	student_club
SELECT e.expense_id, e.expense_id AS 'Expense Type', SUM(e.expense_id) AS 'Total Value' FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_id = 'rec180D2MI4EpckHy' AND ev.event_id = (SELECT event_id FROM event WHERE event_id = 'rec180D2MI4EpckHy' AND event_id = (SELECT link_to_event FROM budget WHERE budget_id = (SELECT budget_id FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_id = 'rec180D2MI4EpckHy' AND event_name = 'October Meeting')))) GROUP BY e.expense_id;	student_club
SELECT `budget_category`, SUM(`amount`) AS total_budgeted FROM `budget` JOIN `event` ON `budget.link_to_event` = `event.event_id` WHERE `event.event_name` = 'April Speaker' GROUP BY `budget_category` ORDER BY total_budgeted ASC;	student_club
SELECT `budget_id` FROM `budget` JOIN `expense` ON `budget.link_to_event` = `expense.link_to_budget` WHERE `expense.category` = 'Food' GROUP BY `budget_id` ORDER BY SUM(`expense.amount`) DESC LIMIT 1;	student_club
SELECT b.budget_id FROM budget b JOIN (     SELECT link_to_event, SUM(amount) AS total_amount     FROM budget     WHERE link_to_event IN (         SELECT event_id         FROM event         WHERE event_id IN (             SELECT link_to_event             FROM expense             WHERE link_to_budget IN (                 SELECT budget_id                 FROM budget                 WHERE link_to_event IN (                     SELECT event_id                     FROM event                     WHERE event_id IN (                         SELECT link_to_event                         FROM expense                         WHERE link_to_budget IN (                             SELECT budget_id                             FROM budget                             WHERE category = 'Advertisement'                         )                     )                 )             )         )     )     GROUP BY link_to_event     ORDER BY total_amount DESC ) AS subq ON b.link_to_event = subq.link_to_event ORDER BY subq.total_amount DESC LIMIT 3;	student_club
SELECT SUM(CASE WHEN e.expense_description = 'Parking' THEN e.expense_description ELSE NULL END) AS total_parking_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id;	student_club
SELECT SUM(cost) AS total_expense_on_20190820 FROM expense WHERE expense_date = '2019-08-20';	student_club
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, SUM(e.expense_description) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id;	student_club
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';	student_club
SELECT e.expense_id, e.expense_date, e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';	student_club
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.link_to_budget IN (     SELECT b.budget_id     FROM budget b     JOIN expense ex ON b.budget_id = ex.link_to_budget     WHERE ex.expense_id = e.expense_id     GROUP BY b.budget_id     HAVING SUM(ex.expense_amount) < 50 );	student_club
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.member_id = 'rec1x5zBFIqoOuPW8';	student_club
SELECT m.member_id FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';	student_club
SELECT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event LEFT JOIN (     SELECT e.event_id, SUM(ei.amount) AS total_expense     FROM event e     JOIN expense ei ON e.event_id = ei.link_to_budget     GROUP BY e.event_id ) AS expenses ON e.event_id = expenses.event_id WHERE (b.amount - COALESCE(expenses.total_expense, 0)) > 30;	student_club
SELECT `event_id` FROM `event` WHERE `event_id` IN (     SELECT `link_to_event`     FROM `attendance`     WHERE `link_to_member` IN (         SELECT `member_id`         FROM `member`         WHERE `zip` = 55108     ) );	student_club
SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.zip = (SELECT zip FROM zip_code WHERE zip_code = 601) AND e.event_id IN (SELECT link_to_event FROM budget WHERE link_to_event = e.event_id) AND e.event_id IN (SELECT link_to_event FROM event WHERE event_date = '2020-03-24T12:00:00');	student_club
SELECT m.link_to_major FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id JOIN `position` p ON m.member_id = p.member_id WHERE p.position_name = 'Vice President';	student_club
SELECT      (SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_id = 'rec0Eanv576RhQllI') THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.member_id) AS percentage_business_members FROM      member m;	student_club
SELECT event.event_id FROM event WHERE event.event_id IN (SELECT link_to_event FROM `budget` WHERE link_to_event IN (SELECT link_to_event FROM `event` WHERE `event_id` = 'rec0xRZtkzxrg8kj2'));	student_club
SELECT COUNT(*) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_id = 'rec0Eanv576RhQllI')) AND link_to_member IN (SELECT member_id FROM income WHERE income_id IN (SELECT income_id FROM income WHERE amount = 50));	student_club
SELECT COUNT(*) FROM `member` WHERE `t_shirt_size` = 'X-Large';	student_club
SELECT COUNT(DISTINCT m.member_id)  FROM `member` m  JOIN `major` ma ON m.`link_to_major` = ma.`major_id`  JOIN `event` e ON m.member_id = e.event_id  WHERE ma.major_id = 'recxK3MHQFbR9J5uO' AND e.event_id = 'rec0Si5cQ4rJRVzd6';	student_club
SELECT m.last_name, m.department_name, m.college_name FROM `member` m JOIN `major` ma ON m.`link_to_major` = ma.`major_id` JOIN (     SELECT `major_id`     FROM `major`     WHERE `major_name` = 'Environmental Engineering' ) me ON ma.`major_id` = me.`major_id`;	student_club
SELECT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN member m ON e.event_id = (SELECT event_id FROM event WHERE location = 'MU 215') WHERE b.link_to_event IN (SELECT event_id FROM budget WHERE spent = 0) AND m.link_to_major IN (SELECT major_id FROM major WHERE category = 'Guest Speaker');	student_club
SELECT m.zip, zc.zip_code FROM member m JOIN zip_code zc ON m.zip = zc.zip_code JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_id = 'recxK3MHQFbR9J5uO' AND m.member_id IN (     SELECT member_id     FROM member     WHERE position = 'Member' );	student_club
SELECT e.event_id FROM event e JOIN member m ON e.event_id = (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE zip = 900 AND link_to_major = (SELECT major_id FROM major WHERE major_id = 'rec7BxKpjJ7bNph3O'))) WHERE e.event_name = 'Social';	student_club
SELECT m.last_name, m.position  FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Pizza'  AND e.expense_date = '2019-09-10';	student_club
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'rec09LedkREyskCNv' AND e.event_id = 'rec180D2MI4EpckHy';	student_club
SELECT      ROUND(         (COUNT(CASE WHEN t_shirt_size = 'Medium' AND position = 'Member' THEN 1 END) * 100.0)          / COUNT(member_id),          2     ) AS percentage_of_medium_shirt_amount_50 FROM      member JOIN      income ON member.member_id = income.link_to_member WHERE      income_id = 'rec0s9ZrO15zhzUeE'	student_club
SELECT DISTINCT m.zip, m.member_id FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_id = 'rec017x6R3hQqkLAo' OR ex.expense_id = 'rec1nIjoZKTYayqZ6' JOIN zip_code zc ON m.zip = zc.zip_code WHERE zc.zip_code IN (501, 544, 601, 602, 603);	student_club
SELECT DISTINCT m.zip FROM member m JOIN zip_code zc ON m.zip = zc.zip_code WHERE zc.zip_code IN (SELECT zip_code FROM zip_code WHERE type = 'PO Box') AND m.zip IN (SELECT zip FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE `name` = 'San Juan Municipio') AND link_to_major IS NOT NULL);	student_club
SELECT e.event_name FROM event e JOIN event_type et ON e.event_type_id = et.event_type_id WHERE et.event_type_name = 'Game' AND et.status = 'Closed' AND e.event_date BETWEEN '2019-03-15' AND '2020-03-20';	student_club
SELECT link_to_member, SUM(amount) AS total_spent FROM expense JOIN member ON expense.link_to_member = member.member_id GROUP BY link_to_member HAVING SUM(amount) > 50 JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id;	student_club
SELECT m.member_id, a.link_to_event FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND e.approved = 'true';	student_club
SELECT m.link_to_major  FROM `member` m  JOIN `major` ma ON m.link_to_major = ma.major_id  JOIN `person` p ON m.member_id = p.member_id  WHERE p.first_name = 'Katy' AND ma.major_id = 'rec1N0upiVLy5esTO';	student_club
SELECT m.phone  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  JOIN `event` e ON m.member_id = e.event_id  WHERE ma.major_name = 'Business'  AND e.event_name = 'College of Agriculture and Applied Sciences';	student_club
SELECT m.member_id FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND e.cost > 20;	student_club
SELECT COUNT(*) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'rec7BxKpjJ7bNph3O';	student_club
SELECT      ROUND(DIVIDE(SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END), COUNT(e.event_id)) * 100, 2) AS over_budget_percentage FROM      event e LEFT JOIN      budget b ON e.event_id = b.link_to_event	student_club
SELECT event.event_id, member.zip, 'Conducted' AS status FROM event JOIN member ON event.event_id = member.link_to_event WHERE event.event_id IN (     SELECT link_to_event     FROM attendance     WHERE link_to_member IN (         SELECT member_id         FROM member         WHERE zip IN (501, 544, 601, 602, 603)     ) ) AND event.event_date BETWEEN '2019-11-01' AND '2020-03-31';	student_club
SELECT      e.expense_id,      AVG(e.cost) AS average_spend FROM      expense e JOIN      budget b ON e.link_to_budget = b.budget_id GROUP BY      e.expense_id HAVING      AVG(e.cost) > 50;	student_club
SELECT m.first_name, m.last_name FROM member m JOIN `member` m2 ON m.member_id = m2.member_id WHERE m2.t_shirt_size = 'X-Large';	student_club
SELECT      (SUM(CASE WHEN `type` = 'PO Box' THEN 1 ELSE 0 END) * 100) / COUNT(`zip_code`) AS percentage_po_box FROM `zip_code`;	student_club
SELECT e.event_id, e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN (     SELECT b.link_to_event, SUM(i.amount) AS total_income, SUM(e.amount) AS total_expense     FROM budget b     LEFT JOIN income i ON b.budget_id = i.link_to_budget     LEFT JOIN expense e ON b.budget_id = e.link_to_budget     GROUP BY b.link_to_event ) as finances ON e.event_id = finances.link_to_event WHERE finances.total_income + finances.total_expense < b.amount;	student_club
SELECT e.event_name, e.event_date FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN expense ex ON a.link_to_member = ex.link_to_member WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;	student_club
SELECT m.first_name, m.last_name, m.major_name FROM `member` m JOIN `expense` e ON m.member_id = e.link_to_member JOIN `budget` b ON e.link_to_budget = b.budget_id WHERE b.budget_id IN (     SELECT b.budget_id     FROM `budget` b     JOIN `expense` e ON b.budget_id = e.link_to_budget     GROUP BY b.budget_id     HAVING SUM(e.cost) > 100 );	student_club
SELECT m.zip, z.zip_code FROM member m JOIN income i ON m.member_id = i.link_to_member JOIN event e ON m.link_to_major = e.event_id JOIN zip_code z ON m.zip = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 40;	student_club
SELECT      m.member_id,      SUM(e.amount) AS total_expense FROM      member m JOIN      expense e ON m.member_id = e.link_to_member JOIN      budget b ON e.link_to_budget = b.budget_id JOIN      event ev ON b.link_to_event = ev.event_id GROUP BY      m.member_id HAVING      COUNT(DISTINCT ev.event_id) > 1 ORDER BY      total_expense DESC LIMIT 1;	student_club
SELECT AVG(expense.cost) AS average_amount_paid FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.member_id NOT IN (     SELECT member_id     FROM member     WHERE link_to_major IS NOT NULL )	student_club
SELECT event_name FROM event WHERE cost < (     SELECT AVG(cost)     FROM expense     JOIN budget ON expense.link_to_budget = budget.budget_id     JOIN event ON budget.link_to_event = event.event_id     WHERE category = 'Parking' )	student_club
SELECT      SUM(CASE WHEN e.event_type = 'Meeting' THEN e.cost ELSE 0 END) / COUNT(e.event_id) * 100 AS percentage_cost FROM      event e;	student_club
SELECT      b.budget_id,      SUM(e.cost) AS total_cost FROM      budget b JOIN      expense e ON b.budget_id = e.link_to_budget WHERE      e.expense_description = 'Water, chips, cookies' GROUP BY      b.budget_id ORDER BY      total_cost DESC LIMIT 1;	student_club
SELECT m.first_name, m.last_name, SUM(e.cost) as total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5;	student_club
SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)	student_club
SELECT      (SUM(CASE WHEN m.zip = 55108 THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM member WHERE position = 'Member')) -     (SUM(CASE WHEN m.zip = 48236 THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM member WHERE position = 'Member')) AS percentage_difference FROM      member m;	student_club
SELECT m.link_to_major, ma.major_id FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.member_id = 'rec1x5zBFIqoOuPW8';	student_club
SELECT m.first_name, m.last_name, SUM(e.amount) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies' GROUP BY m.member_id;	student_club
SELECT m.phone, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_id = 'recxK3MHQFbR9J5uO';	student_club
SELECT      `budget`.`budget_id`,      `budget`.`amount`  FROM      `budget`  INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id`  WHERE      `event`.`event_id` = 'recI43CzsZ0Q625ma';	student_club
SELECT DISTINCT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget JOIN `category` c ON ex.link_to_category = c.category_id WHERE c.category_name = 'Food';	student_club
SELECT m.first_name, m.last_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.zip = 10002 AND i.date_received = '2019-09-09';	student_club
SELECT `budget_id` FROM `expense` JOIN `budget` ON `expense.link_to_budget` = `budget.budget_id` WHERE `expense.expense_id` = (SELECT `expense_id` FROM `expense` WHERE `expense.description` = 'Posters');	student_club
SELECT m.first_name, m.last_name, m.link_to_major FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id JOIN `role` r ON m.member_id = r.link_to_member WHERE r.position = 'Secretary';	student_club
SELECT e.event_id, SUM(e.spent) AS total_spent FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE e.category = 'Speaker Gifts' GROUP BY e.event_id;	student_club
SELECT m.zip FROM `member` m JOIN `zip_code` zc ON m.zip = zc.zip_code WHERE m.member_id = 'rec1x5zBFIqoOuPW8';	student_club
SELECT m.first_name, m.last_name, m.position  FROM `member` m  JOIN `zip_code` zc ON m.zip = zc.zip_code  WHERE zc.zip_code = 28092 AND zc.city = 'Lincolnton' AND zc.state = 'North Carolina';	student_club
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';	debit_card_specializing
SELECT (COUNT(*) FILTER (WHERE Currency = 'EUR')) / (COUNT(*) FILTER (WHERE Currency = 'CZK')) FROM customers;	debit_card_specializing
SELECT CustomerID, MIN(Consumption) AS MinConsumption FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Segment = 'LAM' GROUP BY CustomerID ORDER BY MinConsumption ASC LIMIT 1;	debit_card_specializing
SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')    AND Date BETWEEN '201301' AND '201312';	debit_card_specializing
SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;	debit_card_specializing
SELECT COUNT(DISTINCT ym.CustomerID) AS CustomersWithLowConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND ym.Consumption < 30000 AND ym.Date BETWEEN '201201' AND '201212';	debit_card_specializing
SELECT      (SUM(CASE WHEN yearmonth.Date BETWEEN '201201' AND '201212' AND customers.Currency = 'CZK' THEN yearmonth.Consumption ELSE 0 END) -      SUM(CASE WHEN yearmonth.Date BETWEEN '201201' AND '201212' AND customers.Currency = 'EUR' THEN yearmonth.Consumption ELSE 0 END)) AS ConsumptionDifference FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212';	debit_card_specializing
SELECT yearmonth.Date AS Year, SUM(yearmonth.Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY yearmonth.Date ORDER BY TotalConsumption DESC LIMIT 1;	debit_card_specializing
SELECT Segment, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT     LEFT(Date, 4) AS Year,     SUM(Consumption) AS TotalConsumption FROM     yearmonth WHERE     Country = 'CZE' GROUP BY     Year ORDER BY     TotalConsumption DESC LIMIT 1;	debit_card_specializing
SELECT Date, MAX(Consumption) AS MaxConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') AND Date BETWEEN '201301' AND '201312' GROUP BY Date ORDER BY MaxConsumption DESC LIMIT 1;	debit_card_specializing
WITH AnnualAverage AS (     SELECT         Segment,         AVG(Consumption) AS AvgConsumption     FROM yearmonth     WHERE Date BETWEEN '201301' AND '201312'     GROUP BY Segment ), LowestConsumption AS (     SELECT         Segment,         MIN(AvgConsumption) AS MinAvgConsumption     FROM AnnualAverage     GROUP BY Segment ), SME_LAM_Diff AS (     SELECT         (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'SME') -          (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'LAM') AS Difference ), LAM_KAM_Diff AS (     SELECT         (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'LAM') -          (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'KAM') AS Difference ), KAM_SME_Diff AS (     SELECT         (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'KAM') -          (SELECT AvgConsumption FROM AnnualAverage WHERE Segment = 'SME') AS Difference ) SELECT     SME_LAM_Diff.Difference AS SME_LAM,     LAM_KAM_Diff.Difference AS LAM_KAM,     KAM_SME_Diff.Difference AS KAM_SME FROM SME_LAM_Diff, LAM_KAM_Diff, KAM_SME_Diff;	debit_card_specializing
SELECT      Segment,     (MAX(ConsumptionChange) * 100) / MAX(Consumption2013) AS MaxPercentIncrease,     (MIN(ConsumptionChange) * 100) / MIN(Consumption2013) AS MinPercentIncrease FROM (     SELECT          c.Segment,         (SUM(y3.Consumption) - SUM(y2.Consumption)) AS ConsumptionChange,         SUM(y3.Consumption) AS Consumption2013     FROM          yearmonth y2     JOIN          yearmonth y3 ON y2.CustomerID = y3.CustomerID AND LEFT(y3.Date, 4) = LEFT(y3.Date, 4) + 1     JOIN          customers c ON y2.CustomerID = c.CustomerID     WHERE          LEFT(y2.Date, 4) = '2012' AND         c.Segment IN ('SME', 'LAM', 'KAM')     GROUP BY          c.Segment ) AS SegmentConsumptionChanges WHERE      Segment IN ('SME', 'LAM', 'KAM') GROUP BY      Segment ORDER BY      MaxPercentIncrease DESC,      MinPercentIncrease ASC;	debit_card_specializing
SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';	debit_card_specializing
SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount')       - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS DifferenceInDiscountStations;	debit_card_specializing
SELECT (SUM(yearmonth.Consumption) FILTER (WHERE yearmonth.CustomerID = 7 AND yearmonth.Date = '201304')) -         (SUM(yearmonth.Consumption) FILTER (WHERE yearmonth.CustomerID = 5 AND yearmonth.Date = '201304')) AS Difference FROM yearmonth WHERE yearmonth.Date = '201304'	debit_card_specializing
SELECT      (SELECT SUM(Amount)       FROM transactions_1k       JOIN customers ON transactions_1k.CustomerID = customers.CustomerID       WHERE customers.Segment = 'SME' AND customers.Currency = 'CZK') -     (SELECT SUM(Amount)       FROM transactions_1k       JOIN customers ON transactions_1k.CustomerID = customers.CustomerID       WHERE customers.Segment = 'SME' AND customers.Currency = 'EUR')  AS Difference;	debit_card_specializing
SELECT c.CustomerID, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'EUR' AND y.Date = '201310' ORDER BY y.Consumption DESC LIMIT 1;	debit_card_specializing
SELECT      c.CustomerID,      SUM(ym.Consumption) AS TotalConsumption FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID WHERE      c.Segment = 'KAM' GROUP BY      c.CustomerID ORDER BY      TotalConsumption DESC LIMIT 1;	debit_card_specializing
SELECT SUM(consumption) as TotalConsumption FROM yearmonth WHERE CustomerID IN (     SELECT CustomerID     FROM customers     WHERE Segment = 'KAM' ) AND Date = '201305';	debit_card_specializing
SELECT      (SUM(CASE WHEN Consumption > 46.73 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Percentage FROM      yearmonth INNER JOIN      customers ON yearmonth.CustomerID = customers.CustomerID WHERE      customers.Segment = 'LAM';	debit_card_specializing
SELECT g.Country, COUNT(*) AS ValueForMoneyStations FROM gasstations g WHERE g.Segment = 'Value for money' GROUP BY g.Country ORDER BY ValueForMoneyStations DESC;	debit_card_specializing
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 100.0) / COUNT(c.CustomerID) AS PercentageOfKAMCustomersPayInEUR FROM      customers c WHERE      c.Segment = 'KAM';	debit_card_specializing
SELECT      (COUNT(*) * 100.0) / COUNT(DISTINCT CustomerID) AS percentage FROM      yearmonth WHERE      Date = '201202' AND      Consumption > 528.3;	debit_card_specializing
SELECT      (COUNT(CASE WHEN g.Country = 'CZE' AND g.Segment = 'Premium' THEN 1 END) * 100.0) / COUNT(*) AS PercentageOfPremiumGasStations FROM      gasstations g;	debit_card_specializing
SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1;	debit_card_specializing
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT CustomerID FROM yearmonth WHERE Date = '201206' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') ORDER BY Consumption ASC LIMIT 1;	debit_card_specializing
SELECT MAX(Consumption) as HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '201201%' OR Date LIKE '201202%' OR Date LIKE '201203%' OR Date LIKE '201204%'	debit_card_specializing
SELECT CustomerID,         (SUM(Consumption) / 12) AS AvgMonthlyConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') GROUP BY CustomerID ORDER BY AvgMonthlyConsumption DESC LIMIT 1;	debit_card_specializing
SELECT p.Description FROM products p JOIN yearmonth y ON p.ProductID = y.ProductID WHERE y.Date LIKE '201309%';	debit_card_specializing
SELECT g.Country FROM gasstations g JOIN yearmonth y ON g.CustomerID = y.CustomerID WHERE y.Date LIKE '201306%';	debit_card_specializing
SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';	debit_card_specializing
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Price > 0	debit_card_specializing
SELECT AVG(Price * Amount) AS AverageTotalPrice FROM transactions_1k WHERE Date LIKE '2012-01%';	debit_card_specializing
SELECT COUNT(DISTINCT CustomerID)  FROM yearmonth  JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000;	debit_card_specializing
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';	debit_card_specializing
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';	debit_card_specializing
SELECT AVG(TotalPrice) AS AverageTotalPrice FROM (     SELECT SUM(T.Amount * T.Price) AS TotalPrice     FROM transactions_1k T     JOIN gasstations G ON T.GasStationID = G.GasStationID     WHERE G.Country = 'CZE' ) AS SubQuery;	debit_card_specializing
SELECT AVG(t.Price * t.Amount) AS average_total_price FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';	debit_card_specializing
SELECT CustomerID, SUM(Consumption) AS TotalPaid FROM yearmonth WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalPaid DESC LIMIT 1;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.TransactionID LIMIT 1;	debit_card_specializing
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24';	debit_card_specializing
SELECT Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '2012-08-23';	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Price * Amount = 672.64;	debit_card_specializing
SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';	debit_card_specializing
SELECT transactions_1k.ProductID FROM transactions_1k WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';	debit_card_specializing
SELECT      ym.Consumption,      ym.Date FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID JOIN      (SELECT          CustomerID       FROM          transactions_1k       WHERE          Date = '2012-08-24' AND          Price = 124.05) t ON ym.CustomerID = t.CustomerID WHERE      ym.Date = '201201';	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.Date = '2012-08-26' AND gasstations.Country = 'CZE';	debit_card_specializing
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201306' AND ym.Consumption = 214582.17;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.CardID = 667467;	debit_card_specializing
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Price = 548.4;	debit_card_specializing
SELECT      (COUNT(DISTINCT c.CustomerID) * 100) /      (SELECT COUNT(*) FROM customers c) AS PercentageOfCustomersUsingEUR FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID WHERE      c.Currency = 'EUR' AND      ym.Date = '2012-08-25';	debit_card_specializing
SELECT     ((SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '201208' AND Consumption > 0) -     (SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '201301' AND Consumption > 0)) /      (SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '201208' AND Consumption > 0) AS ConsumptionDecreaseRate FROM     customers c JOIN     yearmonth ym1 ON c.CustomerID = ym1.CustomerID JOIN     yearmonth ym2 ON c.CustomerID = ym2.CustomerID WHERE     ym1.Date = '201208'     AND ym2.Date = '201301'     AND ym1.Consumption > 0     AND ym2.Consumption > 0     AND EXISTS (         SELECT 1         FROM transactions_1k t         WHERE             t.CustomerID = c.CustomerID             AND t.Date = '2012-08-25'             AND t.Amount = 634.8     );	debit_card_specializing
SELECT gasstations.GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) AS TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID ORDER BY TotalRevenue DESC LIMIT 1;	debit_card_specializing
SELECT     (SUM(CASE WHEN g.Segment = 'Premium' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS Premium_Percentage FROM     transactions_1k t JOIN     gasstations g ON t.GasStationID = g.GasStationID JOIN     customers c ON t.CustomerID = c.CustomerID WHERE     g.Country = 'SVK' GROUP BY     c.Segment;	debit_card_specializing
SELECT SUM(t.Amount) AS TotalAmount FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508;  SELECT SUM(y.Consumption) AS TotalSpentInJanuary FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND y.Date = '201201';	debit_card_specializing
SELECT p.Description AS ProductName, SUM(t.Amount) AS TotalSold FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.Description ORDER BY TotalSold DESC LIMIT 5;	debit_card_specializing
SELECT c.CustomerID, AVG(t.Price / t.Amount) AS avg_price_per_item, c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY AVG(t.Price / t.Amount) DESC LIMIT 1;	debit_card_specializing
SELECT g.Country, MAX(t.Price) as MaxPrice FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 GROUP BY g.Country ORDER BY MaxPrice DESC LIMIT 1;	debit_card_specializing
SELECT ym.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE ym.Date = '201208' AND t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 GROUP BY ym.CustomerID;	debit_card_specializing

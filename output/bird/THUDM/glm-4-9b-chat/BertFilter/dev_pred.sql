SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM `frpm` WHERE `County Code` = 'Alameda' AND `Percent (%) Eligible Free (K-12)` IS NOT NULL; 
SELECT      CDSCode,      Percent_Eligible_Free_Ages_5_17 FROM      frpm WHERE      School_Type = 'Continuation School' ORDER BY      Percent_Eligible_Free_Ages_5_17 ASC LIMIT 3; 
SELECT `Zip` FROM `frpm` JOIN `schools` ON `frpm.CDSCode` = `schools.CDSCode` WHERE `frpm.County Code` = 'Fresno' AND `frpm.Charter School (Y/N)` = 1; 
SELECT s.MailStreet, s.MailZip, s.MailState FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.FRPM Count (K-12) = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm) 
SELECT `schools.Phone` FROM `schools` INNER JOIN `frpm` ON `schools.CDSCode` = `frpm.CDSCode` WHERE `frpm.Charter School (Y/N)` = 1 AND `schools.FundingType` = 'Charter' AND `schools.OpenDate` > '2000-01-01'; 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath < 400 AND schools.GSoffered = 'Virtual' AND schools.GSserved = 'F'; 
SELECT DISTINCT s.CDSCode, s.NCESSchool FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE sat.enroll12 > 500 AND s.Magnet = 1; 
SELECT t1.SchoolPhone FROM test_takers t1 JOIN schools t2 ON t1.SchoolPhone = t2.SchoolPhone JOIN satscores t3 ON t2.CDSCode = t3.cds WHERE t3.NumGE1500 IS NOT NULL AND t3.NumGE1500 > 0 GROUP BY t1.SchoolPhone ORDER BY COUNT(t1.SATScore) DESC LIMIT 1; 
SELECT COUNT(t.SATScore) AS NumSATTestTakers FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN test_takers t ON s.CDSCode = t.SchoolPhone WHERE f.FRPM Count (K-12) = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm) 
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode JOIN test_takers tt ON s.CDSCode = tt.SchoolPhone WHERE ss.Subject = 'Math' AND ss.Score > 560 AND s.Charter = 1; 
SELECT frpm.`Free Meal Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN (     SELECT s.CDSCode, AVG(sc.Score) AS avg_score     FROM schools s     JOIN school_scores sc ON s.CDSCode = sc.CDSCode     WHERE sc.Subject = 'Reading'     GROUP BY s.CDSCode     ORDER BY avg_score DESC     LIMIT 1 ) highest_avg ON frpm.CDSCode = highest_avg.CDSCode; 
SELECT frpm.CDSCode FROM frpm WHERE frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)` > 500; 
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestFreeMealRate FROM frpm WHERE `Percent (%) Eligible FRPM (Ages 5-17)` > 0.3; 
SELECT s.Phone FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.rtype = 'SAT' AND st.NumTstTakr > 0 ORDER BY (st.NumGE1500 / st.NumTstTakr) DESC LIMIT 3; 
SELECT      s.NCESDist AS NCES_School_ID,      f.`Enrollment (Ages 5-17)` AS Enrollment_Ages_5_17 FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode ORDER BY      f.`Enrollment (Ages 5-17)` DESC LIMIT      5; 
SELECT s.NCESDist, AVG(sc.Score) AS AvgReadingScore FROM schools s JOIN school_scores sc ON s.CDSCode = sc.CDSCode WHERE sc.Subject = 'Reading' AND s.NCESDist IS NOT NULL GROUP BY s.NCESDist ORDER BY AvgReadingScore DESC LIMIT 1; 
SELECT COUNT(*) FROM schools WHERE `StatusType` = 'Merged' AND CDSCode IN (     SELECT CDSCode     FROM test_takers     GROUP BY CDSCode     HAVING COUNT(*) < 100 ); 
SELECT `Charter School Number` FROM `schools` WHERE `CDSCode` IN (     SELECT `CDSCode`     FROM `school_scores`     WHERE `Subject` = 'Writing' AND `Score` = 499 ) AND `Charter` = 1; 
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' AND s.GSserved = 'Direct' AND s.NCESDist = 'Contra Costa' AND s.FundingType = 'Direct Funded' AND (s.CDSCode IN (SELECT t.CDSCode FROM test_takers t WHERE t.SchoolPhone IS NOT NULL) AND (SELECT COUNT(*) FROM test_takers t WHERE t.SchoolPhone IS NOT NULL AND t.CDSCode = s.CDSCode) <= 250); 
SELECT s.Phone FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' GROUP BY s.CDSCode ORDER BY AVG(ss.Score) DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE `District Code` = (SELECT `District Code` FROM schools WHERE `District` = 'Amador') AND `Low Grade` = '09' AND `High Grade` = '12'; 
SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700 AND `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `NCESDist` = 'Los Angeles'); 
SELECT s.NCESSchool, SUM(t.SATScore) AS TotalTestTakers FROM schools s JOIN test_takers t ON s.CDSCode = t.SchoolPhone WHERE s.NCESDist = 'Contra Costa' GROUP BY s.NCESSchool ORDER BY TotalTestTakers DESC LIMIT 1; 
SELECT      frpm.School Name,      CONCAT(school.Street, ', ', school.City, ', ', school.State, ' ', school.Zip) AS FullAddress FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      ABS(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30; 
SELECT s.NCESDist FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN test_takers tt ON s.CDSCode = tt.SchoolPhone WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND tt.SATScore >= 1500; 
SELECT      s.NCESSchool,      s.FundingType FROM      schools s JOIN      (SELECT          s.CDSCode,          AVG(sat.AvgScrRead) AS AvgMathScore      FROM          schools s      JOIN          satscores sat ON s.CDSCode = sat.cds      WHERE          s.State = 'Riverside' AND         sat.AvgScrRead IS NOT NULL      GROUP BY          s.CDSCode      HAVING          AvgMathScore > 400) AS avg_scores ON      s.CDSCode = avg_scores.CDSCode; 
SELECT      s.School Name,      s.MailStreet,      s.MailCity,      s.MailState,      s.MailingZipCode FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f.County Code = 'Monterey'     AND f.`Percent (%) Eligible Free (Ages 5-17)` > 0     AND f.`Free Meal Count (Ages 5-17)` > 800     AND f.`Educational Option Type` LIKE '%High School%'; 
SELECT      s.School,     ss.Score,     s.Phone AS CommunicationNumber FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode WHERE      s.OpenDate > '1991-01-01'     OR EXISTS (         SELECT 1         FROM district_closures dc         WHERE s.District = dc.City         AND dc.ClosureYear < '2000'     )     AND ss.Subject = 'Writing'; 
WITH LocalFundingSchools AS (     SELECT          frpm.CDSCode,         frpm.School Name,         schools.DOCType,         frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)` AS EnrollmentDifference     FROM          frpm     JOIN          schools ON frpm.CDSCode = schools.CDSCode     WHERE          schools.FundingType = 'Local' ), AverageDifference AS (     SELECT          AVG(EnrollmentDifference) AS AvgDiff     FROM          LocalFundingSchools ) SELECT      lfs.School Name,     lfs.DOCType FROM      LocalFundingSchools lfs, AverageDifference ad WHERE      lfs.EnrollmentDifference > ad.AvgDiff; 
SELECT s.LastUpdate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND s.StatusType = 'School' ORDER BY s.LastUpdate ASC LIMIT 1; 
SELECT s.State, s.NCESDist FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (K-12)` IS NOT NULL ORDER BY f.`Enrollment (K-12)` ASC LIMIT 5; 
SELECT      `Percent (%) Eligible Free (K-12)`  FROM      `frpm`  WHERE      `CDSCode` IN (         SELECT              `CDSCode`          FROM              `frpm`          ORDER BY              `Enrollment (K-12)` DESC          LIMIT 10     )      AND `CDSCode` IN (         SELECT              `CDSCode`          FROM              `frpm`          ORDER BY              `Enrollment (K-12)` DESC          LIMIT 11, 1     ); 
SELECT      frpm.CDSCode,      frpm.School Name,      (frpm.FRPM Count (K-12) / frpm.Enrollment (K-12)) AS EligibleFreeMealRate FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.EILCode = '66' ORDER BY      frpm.FRPM Count (K-12) DESC LIMIT 5; 
SELECT      frpm.School Name,      schools.Website FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.Free Meal Count (Ages 5-17) BETWEEN 1900 AND 2000; 
SELECT      (t5.`Free Meal Count (Ages 5-17)` / t5.`Enrollment (Ages 5-17)` * 100) AS FreeRate FROM      frpm t1 JOIN      schools t2 ON t1.CDSCode = t2.CDSCode JOIN      (SELECT `AdmFName1`, `AdmLName1` FROM schools WHERE `AdmFName1` = 'Kacey Gibson' OR `AdmLName1` = 'Kacey Gibson') t3 ON t2.CDSCode = t3.CDSCode JOIN      frpm t4 ON t1.CDSCode = t4.CDSCode AND t4.Academic Year = t1.Academic Year JOIN      frpm t5 ON t1.CDSCode = t5.CDSCode AND t5.Academic Year = t1.Academic Year WHERE      t4.Academic Year IS NOT NULL AND t5.Academic Year IS NOT NULL 
SELECT s.AdmEmail1 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode AND f.`Charter School (Y/N)` = 1 WHERE f.`Enrollment (K-12)` = (SELECT MIN(`Enrollment (K-12)`) FROM frpm WHERE `Charter School (Y/N)` = 1) 
SELECT s.AdmFName1, s.AdmLName1, s.AdmLName2, s.AdmLName3 FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN (     SELECT cds     FROM satscores     WHERE NumGE1500 IS NOT NULL AND NumGE1500 >= 1500     GROUP BY cds     ORDER BY SUM(NumGE1500) DESC     LIMIT 1 ) AS top_school ON s.CDSCode = top_school.cds; 
SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE sat.NumGE1500 / sat.NumTstTakr = (SELECT MIN(sat.NumGE1500 / sat.NumTstTakr) FROM satscores sat) 
SELECT s.NCESDist FROM schools s JOIN test_takers tt ON s.CDSCode = tt.SchoolPhone WHERE s.NCESDist LIKE 'Los Angeles%' AND (SELECT COUNT(*)      FROM test_takers      WHERE SchoolPhone = s.CDSCode) BETWEEN 2000 AND 3000; 
SELECT AVG(test_takers.SATScore) AS average_test_takers FROM test_takers JOIN schools ON test_takers.SchoolPhone = schools.NCESDist JOIN (     SELECT CDSCode     FROM schools     WHERE LastUpdate BETWEEN '1980-01-01' AND '1980-12-31' ) AS opened_schools ON schools.CDSCode = opened_schools.CDSCode; 
SELECT s.Phone FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.District = 'Fresno Unified' AND sc.rtype = 'Reading' AND sc.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'Reading' AND cds IN (SELECT CDSCode FROM schools WHERE District = 'Fresno Unified')) AND s.District = (SELECT District FROM schools WHERE District = 'Fresno Unified' AND AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'Reading' AND cds IN (SELECT CDSCode FROM schools WHERE District = 'Fresno Unified'))); 
SELECT s.CDSCode, s.School Name, AVG(st.AvgScrRead) AS AvgReadingScore FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode ORDER BY AvgReadingScore DESC LIMIT 5; 
SELECT      s.`CDSCode`,      s.`EducationType` FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode WHERE      ss.Subject = 'Math' GROUP BY      s.CDSCode, s.EducationType ORDER BY      AVG(ss.`SubjectScore`) DESC LIMIT 1; 
SELECT      s.County Name,     (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) AS TotalAverageScore FROM      satscores s JOIN      schools sch ON s.cds = sch.CDSCode WHERE      (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) = (         SELECT              MIN(s2.AvgScrRead + s2.AvgScrMath + s2.AvgScrWrite)         FROM              satscores s2         JOIN              schools sch2 ON s2.cds = sch2.CDSCode     ) 
SELECT s.NCESDist, ss.Score FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode JOIN (     SELECT s.CDSCode     FROM schools s     JOIN test_takers tt ON s.CDSCode = tt.SchoolPhone     WHERE tt.SATScore >= 1500     GROUP BY s.CDSCode     ORDER BY COUNT(tt.SATScore) DESC     LIMIT 1 ) AS high_taker_school ON s.CDSCode = high_taker_school.CDSCode WHERE ss.Subject = 'Writing'; 
SELECT      s.School,     AVG(sc.Score) AS AvgWritingScore FROM      schools s JOIN      school_scores sc ON s.CDSCode = sc.CDSCode WHERE      s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' AND sc.Subject = 'Writing' GROUP BY      s.School; 
SELECT s.State, SUM(frm.`Enrollment (K-12)`) AS TotalEnrollment FROM frpm frm JOIN schools s ON frm.CDSCode = s.CDSCode WHERE s.DOCType = '31' GROUP BY s.State ORDER BY TotalEnrollment DESC LIMIT 1; 
SELECT COUNT(CDSCode) / 12 AS MonthlyAvgSchoolsOpened FROM schools WHERE `StatusType` = 'Open' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND `District` = 'Elementary School District' AND `DOCType` = '52'; 
SELECT      (SELECT COUNT(*)      FROM schools AS s1      JOIN district_closures AS dc ON s1.County = 'Orange' AND s1.District = dc.City      WHERE s1.DOCType = '52') /      (SELECT COUNT(*)      FROM schools AS s2      JOIN district_closures AS dc ON s2.County = 'Orange' AND s2.District = dc.City      WHERE s2.DOCType = '54') AS Ratio 
SELECT      d.County Name,      s.School,      d.ClosureYear AS ClosureDate  FROM      district_closures d  JOIN      schools s ON d.City = s.City AND s.StatusType LIKE '%Closed%' ORDER BY      d.DistrictClosureCount DESC  LIMIT 1; 
SELECT      s.Street AS PostalStreet,     s.School AS SchoolName FROM      schools s JOIN      (SELECT           CDSCode,           AVG(AvgScrMath) AS AvgMathScore      FROM           satscores      GROUP BY           CDSCode      ORDER BY           AvgMathScore DESC     ) AS math_scores ON      s.CDSCode = math_scores.CDSCode WHERE      math_scores.AvgMathScore = (         SELECT              AvgMathScore         FROM              (SELECT                   AVG(AvgScrMath) AS AvgMathScore              FROM                   satscores              GROUP BY                   CDSCode              ORDER BY                   AvgMathScore DESC             ) AS subquery         LIMIT 1 OFFSET 5     ); 
SELECT      s.MailStreet,      s.MailCity,      s.MailState,      s.MailZip,      s.School FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode JOIN      (SELECT          CDSCode,          MIN(Score) AS MinScore      FROM          school_scores      WHERE          Subject = 'Reading'      GROUP BY          CDSCode) AS MinScoreSchools ON      ss.CDSCode = MinScoreSchools.CDSCode AND ss.Score = MinScoreSchools.MinScore ORDER BY      ss.Score ASC LIMIT 1; 
SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500; 
SELECT SUM(test_takers.NumTstTakr) AS TotalTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'; 
SELECT s.CDSCode, s.NCESDist FROM schools s JOIN (     SELECT District     FROM schools     WHERE `NCESDist` = 'Avetik Atoian' ) aa ON s.District = aa.District; 
SELECT      (SELECT COUNT(*) FROM schools WHERE `State` = 'CA' AND `County Code` = 'Colusa') /      (SELECT COUNT(*) FROM schools WHERE `State` = 'CA' AND `County Code` = 'Humboldt') AS Ratio 
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.MailState = 'CA' AND s.County = 'San Joaquin'; 
SELECT t.SchoolPhone FROM (     SELECT s.CDSCode, s.SchoolPhone, AVG(sc.Score) as AvgWritingScore     FROM schools s     JOIN school_scores sc ON s.CDSCode = sc.CDSCode     WHERE sc.Subject = 'Writing'     GROUP BY s.CDSCode, s.SchoolPhone     ORDER BY AvgWritingScore DESC ) AS ordered_scores WHERE RANK() OVER (ORDER BY AvgWritingScore DESC) = 333 LIMIT 1; 
SELECT `schools`.`Phone`, `schools`.`StreetAbr` AS `Extension` FROM `schools` WHERE `schools`.`Zip` = '95203-3704'; 
SELECT s.Website FROM schools s JOIN (     SELECT CDSCode     FROM schools     WHERE AdmFName1 = 'Mike Larson' OR AdmLName1 = 'Larson' OR           AdmFName2 = 'Mike Larson' OR AdmLName2 = 'Larson' OR           AdmFName3 = 'Mike Larson' OR AdmLName3 = 'Larson' OR           AdmFName1 = 'Dante Alvarez' OR AdmLName1 = 'Alvarez' OR           AdmFName2 = 'Dante Alvarez' OR AdmLName2 = 'Alvarez' OR           AdmFName3 = 'Dante Alvarez' OR AdmLName3 = 'Alvarez' ) adm ON s.CDSCode = adm.CDSCode WHERE s.Website IS NOT NULL; 
SELECT Website  FROM schools  WHERE Charter = 1  AND Virtual = 'P'  AND County = 'San Joaquin'; 
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = '52' AND City = 'Hickman'; 
SELECT COUNT(*)  FROM frpm  WHERE `County Code` = 'Los Angeles'  AND `Charter School (Y/N)` = 0  AND `Percent (%) Eligible Free (K-12)` < 0.18; 
SELECT      s.School,      s.City,      a1.AdmFName1 || ' ' || a1.AdmLName1 AS AdminName1,      a2.AdmFName2 || ' ' || a2.AdmLName2 AS AdminName2,      a3.AdmFName3 || ' ' || a3.AdmLName3 AS AdminName3 FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      schools a1 ON f.CDSCode = a1.CDSCode AND a1.AdmLName1 IS NOT NULL LEFT JOIN      schools a2 ON f.CDSCode = a2.CDSCode AND a2.AdmLName2 IS NOT NULL LEFT JOIN      schools a3 ON f.CDSCode = a3.CDSCode AND a3.AdmLName3 IS NOT NULL WHERE      s.Charter = 1 AND      s.CharterNum = '00D2'; 
SELECT COUNT(*) FROM schools WHERE `MailCity` = 'Hickman' AND `CharterNum` = '00D4'; 
SELECT     ROUND((COUNT(CASE WHEN schools.FundingType = 'Locally Funded' THEN 1 END) * 100.0) / COUNT(*), 2) AS PercentageOfLocallyFundedSchools FROM     schools WHERE     schools.District = 'Santa Clara'     AND schools.FundingType IS NOT NULL; 
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND District = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'; 
SELECT SUM(`DistrictClosureCount`) AS TotalDistrictClosures FROM `district_closures` WHERE `ClosureYear` = '1989' AND `City` = 'San Francisco'; 
SELECT      County,      COUNT(*) AS ClosureCount FROM      district_closures WHERE      ClosureYear BETWEEN '1980' AND '1989'      AND SOCType = '11' GROUP BY      County ORDER BY      ClosureCount DESC LIMIT 1; 
SELECT s.NCESDist  FROM schools s  WHERE s.EILCode = '31'; 
SELECT      COUNT(CASE WHEN s.StatusType = 'Active' THEN 1 END) AS ActiveCount,     COUNT(CASE WHEN s.StatusType = 'Closed' THEN 1 END) AS ClosedCount FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.County = 'Alpine' AND     s.StatusType IN ('Active', 'Closed'); 
SELECT `District Code` FROM `frpm` WHERE `City` = 'Fresno' AND `Magnet` = 0 AND `School Code` IN (SELECT `School Code` FROM `schools` WHERE `Magnet` = 0); 
SELECT      SUM(`Enrollment (Ages 5-17)`) AS TotalEnrollment FROM      `frpm` WHERE      `Academic Year` = '2014-2015'     AND `School Name` = 'State Special School'     AND `County Name` = 'Fremont'     AND `EdOpsCode` = 'SSS'; 
SELECT `Free Meal Count (Ages 5-17)` FROM `frpm` WHERE `School Name` = 'Youth Authority School' AND `MailStreet` = 'PO Box 1040'; 
SELECT MIN(`High Grade`)  FROM `frpm`  WHERE `EdOpsCode` = 'SPECON' AND `NCESDist` = '613360'; 
SELECT      frpm.`School Name`,      frpm.`Educational Option Type` FROM      frpm WHERE      frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND     frpm.`County Code` = '37'; 
SELECT s.City FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.EILCode = 'HS' AND f.LowGrade = '09' AND f.HighGrade = '12' AND f.County Name = 'Merced' AND f.NSLP Provision Status = 'Lunch Provision 2'; 
SELECT      frpm.School Name,      frpm.`Percent (%) Eligible FRPM (Ages 5-17)` FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.`Educational Option Type` LIKE '%K-9%'      AND schools.State = 'CA'      AND schools.County Code = 'Los Angeles'; 
SELECT GSserved  FROM schools  WHERE City = 'Adelanto'  GROUP BY GSserved  ORDER BY COUNT(*) DESC  LIMIT 1; 
SELECT      `schools.County`,      COUNT(`schools.CDSCode`) AS `SchoolCount` FROM      `schools` JOIN      `frpm` ON      `schools.CDSCode` = `frpm.CDSCode` WHERE      (`schools.County` = 'San Diego' OR `schools.County` = 'Santa Barbara')     AND `schools.Virtual` = 'F' GROUP BY      `schools.County` ORDER BY      `SchoolCount` DESC LIMIT 1; 
SELECT s.NCESDist, s.CDSCode, s.LastUpdate FROM schools s JOIN (     SELECT CDSCode     FROM schools     JOIN (         SELECT MAX(Latitude) AS MaxLat FROM schools     ) AS max_lat     ON s.Latitude = max_lat.MaxLat ) AS max_school ON s.CDSCode = max_school.CDSCode; 
SELECT      s.City,      s.School,      frpm.`Lowest Grade` FROM      schools s JOIN      frpm ON s.CDSCode = frpm.CDSCode WHERE      s.State = 'CA' ORDER BY      s.Latitude ASC LIMIT 1; 
SELECT      MAX(`Longitude`) AS MaxLongitude,      `Low Grade`,      `High Grade` FROM      `frpm` GROUP BY      `Low Grade`,      `High Grade` ORDER BY      MaxLongitude DESC LIMIT 1; 
SELECT      sc.NCESDist AS District,     COUNT(DISTINCT frpm.School Code) AS NumberOfSchoolsInCity,     COUNT(DISTINCT CASE WHEN frpm.NSLP Provision Status = 'Multiple Provision Types' THEN frpm.School Code END) AS SchoolsOfferingMultipleProvisionTypes FROM      frpm JOIN      schools sc ON frpm.CDSCode = sc.CDSCode WHERE      sc.Magnet = 1 AND sc.GSoffered LIKE '%K-8%' GROUP BY      sc.NCESDist 
SELECT      s.District,     a1.AdmFName1 AS First_Name,     COUNT(*) AS Count FROM      schools s JOIN      (SELECT           AdmFName1,           District       FROM           schools       GROUP BY           AdmFName1,           District       ORDER BY           COUNT(*) DESC       LIMIT 1) a1 ON s.AdmFName1 = a1.AdmFName1 AND s.District = a1.District JOIN      (SELECT           AdmFName1,           District       FROM           schools       GROUP BY           AdmFName1,           District       ORDER BY           COUNT(*) DESC       LIMIT 1, 1) a2 ON s.AdmFName1 = a2.AdmFName1 AND s.District = a2.District GROUP BY      s.District,      a1.AdmFName1 ORDER BY      Count DESC LIMIT 2; 
SELECT      frpm.`Percent (%) Eligible Free (K-12)`,      schools.NCESDist  FROM      frpm  JOIN      schools ON frpm.CDSCode = schools.CDSCode  JOIN      schools AS adm ON schools.CDSCode = adm.CDSCode  WHERE      adm.AdmFName1 = 'Alusine' AND      frpm.`Percent (%) Eligible Free (K-12)` IS NOT NULL; 
SELECT      s.AdmLName1 AS AdminLastName,      sch.District,      frpm.County Code AS County,      sch.School Name AS SchoolName FROM      schools sch JOIN      frpm ON sch.CDSCode = frpm.CDSCode WHERE      frpm.Charter School Number = '40'; 
SELECT      s.AdmEmail1  FROM      frpm f  JOIN      schools s ON f.CDSCode = s.CDSCode  WHERE      f.County Code = 'San Bernardino'      AND f.District Name = 'San Bernardino City Unified'      AND f.School Type IN ('Public Intermediate/Middle Schools', 'Unified Schools')      AND f.Academic Year BETWEEN '2009-10' AND '2010-11'     AND s.DOCType = '54'     AND s.StatusType = 'Public'; 
SELECT s.AdminEmail, sch.Name FROM schools s JOIN (     SELECT SchoolPhone, COUNT(*) AS num_takers     FROM test_takers     WHERE SATScore >= 1500     GROUP BY SchoolPhone     ORDER BY num_takers DESC     LIMIT 1 ) AS tt ON s.SchoolPhone = tt.SchoolPhone JOIN school_scores ss ON s.CDSCode = ss.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ss.Subject = 'Total' ORDER BY tt.num_takers DESC LIMIT 1; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND t.k_symbol = 'POPLATEK PO OBRATU'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Prague' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = a.account_id ); 
SELECT      (SELECT AVG(A12) FROM `trans` WHERE `date` BETWEEN '1995-01-01' AND '1995-12-31') AS avg_unemployment_1995,     (SELECT AVG(A13) FROM `trans` WHERE `date` BETWEEN '1996-01-01' AND '1996-12-31') AS avg_unemployment_1996 
SELECT COUNT(DISTINCT d.district_id)  FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000; 
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M'  AND d.A3 = 'North Bohemia'  AND d.A11 > 8000; 
SELECT      a.account_id,     c.birth_date,     d.A11 AS average_salary FROM      account a JOIN      client c ON a.district_id = c.district_id JOIN      district d ON a.district_id = d.district_id WHERE      c.gender = 'F' ORDER BY      c.birth_date ASC, d.A11 ASC LIMIT 1;  SELECT      d.A11 AS highest_average_salary,     (         SELECT              d.A11          FROM              account a         JOIN              client c ON a.district_id = c.district_id         JOIN              district d ON a.district_id = d.district_id         WHERE              c.gender = 'F'         ORDER BY              d.A11 DESC         LIMIT 1     ) - (         SELECT              d.A11          FROM              account a         JOIN              client c ON a.district_id = c.district_id         JOIN              district d ON a.district_id = d.district_id         WHERE              c.gender = 'F'         ORDER BY              d.A11 ASC         LIMIT 1     ) AS salary_gap; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client ) AND a.account_id IN (     SELECT account_id     FROM (         SELECT account_id, AVG(CASE WHEN k_symbol = 'A11' THEN amount ELSE 0 END) AS avg_salary         FROM trans         GROUP BY account_id     ) AS salary_avg     WHERE avg_salary = (         SELECT MAX(avg_salary)         FROM (             SELECT account_id, AVG(CASE WHEN k_symbol = 'A11' THEN amount ELSE 0 END) AS avg_salary             FROM trans             GROUP BY account_id         ) AS max_salary     ) ); 
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK TYDNE'  AND c.gender = 'Owner'; 
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU'; 
SELECT a.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' AND a.frequency = 'POPLATEK TYDNE' ORDER BY l.amount ASC LIMIT 1; 
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 ORDER BY l.amount DESC LIMIT 1; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov'; 
SELECT a.account_id FROM account a WHERE a.date = (     SELECT MIN(date)     FROM account     WHERE YEAR(a.date) = 1995 ) 
SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date < '1997-01-01' AND l.amount > 3000; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cd ON d.disp_id = cd.disp_id WHERE cd.issued = '1994-03-03'; 
SELECT a.date AS account_open_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.trans_id = 840 AND t.date = '1998-10-14'; 
SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE l.date = '1994-08-25'; 
SELECT MAX(t.amount) AS max_transaction_amount FROM trans t JOIN card c ON t.account_id = c.card_id JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE c.issued = '1996-10-21'; 
SELECT c.gender FROM client c JOIN account a ON c.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A11 = (     SELECT MAX(A11) FROM district ) AND c.birth_date = (     SELECT MIN(birth_date) FROM client     JOIN account a ON client.account_id = a.account_id     WHERE a.district_id = d.district_id ) 
SELECT      c.client_id,     t.amount AS first_transaction_amount FROM      `loan` l JOIN      `account` a ON l.account_id = a.account_id JOIN      `client` c ON a.account_id = c.account_id JOIN      `trans` t ON c.client_id = t.account_id WHERE      l.amount = (SELECT MAX(amount) FROM `loan`)     AND t.trans_id = (         SELECT MIN(trans_id)         FROM `trans`         WHERE account_id = c.client_id         AND date IN (SELECT date FROM `account` WHERE account_id = c.account_id)     ) 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F'; 
SELECT d.disp_id FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE t.date = '1998-09-02' AND t.account_id IN (     SELECT a.account_id     FROM account a     JOIN client c ON a.district_id = c.district_id     JOIN disp d ON a.account_id = d.account_id     JOIN trans t ON d.account_id = t.account_id     WHERE t.k_symbol = '5100' AND t.date = '1998-09-02' ); 
SELECT COUNT(a.account_id) AS accounts_opened FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996; 
SELECT d.A2 FROM client c JOIN account a ON c.district_id = a.district_id JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29'; 
SELECT c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; 
SELECT `client_id` FROM `client` WHERE `district_id` = (SELECT `district_id` FROM `district` WHERE `A3` = 'Prague') AND `date` = (SELECT MIN(`date`) FROM `account` WHERE `district_id` = (SELECT `district_id` FROM `district` WHERE `A3` = 'Prague')) ORDER BY `date` LIMIT 1; 
SELECT      (SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id =          (SELECT district_id FROM district WHERE A3 = 'South Bohemia')) /      (SELECT COUNT(*) FROM client WHERE district_id =          (SELECT district_id FROM district WHERE A3 = 'South Bohemia')) * 100 AS male_clients_percentage FROM district WHERE A3 = 'South Bohemia' 
SELECT      (SUM(CASE WHEN o.date BETWEEN '1993-03-22' AND '1993-07-05' THEN amount ELSE 0 END) -       SUM(CASE WHEN o.date BETWEEN '1993-07-05' AND '1998-12-27' THEN amount ELSE 0 END)) /       SUM(CASE WHEN o.date BETWEEN '1993-07-05' AND '1998-12-27' THEN amount ELSE 0 END) * 100 AS increase_rate FROM      loan o JOIN      account a ON o.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.client_id = (         SELECT              client_id         FROM              disp d         JOIN              loan o ON d.account_id = o.account_id         WHERE              o.date = '1993-07-05'         GROUP BY              client_id         ORDER BY              MIN(o.date) ASC         LIMIT 1     ) 
SELECT      (SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100 AS percentage_fully_paid FROM      loan l; 
SELECT      (COUNT(*) FILTER (WHERE l.status = 'C') * 100.0) / COUNT(*) FROM      loan l WHERE      l.amount < 100000; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND a.frequency = 'POPLATEK PO OBRATU' JOIN trans t ON a.account_id = t.account_id WHERE t.date > a.date; 
SELECT      a.account_id,      a.frequency FROM      account a JOIN      client c ON a.district_id = c.district_id JOIN      district d ON c.district_id = d.district_id WHERE      d.district_id = (SELECT district_id FROM district WHERE district_id = 1) -- Assuming 'east Bohemia' corresponds to district_id 1     AND a.date BETWEEN '1995-01-01' AND '2000-12-31'; 
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice'; 
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.loan_id = 4990; 
SELECT a.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000; 
SELECT l.loan_id, d.A3, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60 GROUP BY l.loan_id, d.A3; 
SELECT      d.district_id,     ((u2016.A12 - u2015.A12) / u2015.A12) * 100 AS unemployment_rate_increment FROM      district d JOIN      client c ON d.district_id = c.district_id JOIN      disp d2 ON c.client_id = d2.client_id JOIN      account a ON d2.account_id = a.account_id JOIN      loan l ON a.account_id = l.account_id JOIN      (SELECT district_id, A12 AS unemployment_rate_2016 FROM district WHERE district_id IN (SELECT district_id FROM loan WHERE status = 'D')) u2016 ON d.district_id = u2016.district_id JOIN      (SELECT district_id, A12 AS unemployment_rate_2015 FROM district WHERE district_id IN (SELECT district_id FROM loan WHERE status = 'D')) u2015 ON d.district_id = u2015.district_id WHERE      l.status = 'D'     AND l.amount > l.payments; 
SELECT      (COUNT(CASE WHEN d.A2 = 'Decin' THEN a.account_id END) * 100.0) / COUNT(a.account_id) AS percentage FROM      account a JOIN      district d ON a.district_id = d.district_id WHERE      YEAR(a.date) = 1993; 
SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' GROUP BY account.account_id HAVING COUNT(trans.trans_id) > 0; 
SELECT      d.district_id,      COUNT(c.client_id) AS num_female_account_holders FROM      district d JOIN      client c ON d.district_id = c.district_id JOIN      account a ON c.client_id = a.account_id WHERE      c.gender = 'F' GROUP BY      d.district_id ORDER BY      num_female_account_holders DESC LIMIT 10; 
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'VYDAJ' AND t.date LIKE '1996-01%' AND NOT EXISTS (     SELECT 1     FROM card c     JOIN disp d ON c.disp_id = d.disp_id     WHERE d.account_id = a.account_id ) GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10; 
SELECT COUNT(DISTINCT c.client_id) AS unowned_credit_cards FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON c.client_id = a.account_id LEFT JOIN card cr ON a.account_id = cr.account_id WHERE d.A3 = 'South Bohemia' AND cr.card_id IS NULL; 
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1; 
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN client c ON l.account_id = c.account_id WHERE c.gender = 'M'; 
SELECT d.A2 AS branch_location, d.A13 AS unemployment_rate FROM district d WHERE d.A13 = (SELECT MAX(A13) FROM district WHERE YEAR(d.date) = 1996) AND YEAR(d.date) = 1996; 
SELECT COUNT(a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A16 = (SELECT MAX(A16) FROM district WHERE A16 IS NOT NULL) 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'VYBER KARTOU' AND a.frequency = 'POPLATEK MESICNE' AND a.account_id IN (     SELECT account_id     FROM account     WHERE balance < 0 ); 
SELECT COUNT(DISTINCT l.account_id) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE' AND l.date BETWEEN '1995-01-01' AND '1997-12-31'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Branch location 1' AND l.status IN ('C', 'D'); 
SELECT COUNT(c.client_id) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A15 = (     SELECT A15     FROM district     WHERE A15 = (         SELECT MAX(A15) - 1         FROM district         WHERE A15 < (SELECT MAX(A15) FROM district)     ) ) 
SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE c.type = 'gold' AND d.client_id IS NULL; 
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Pisek'; 
SELECT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A13 = '1997' AND t.account_id IN (     SELECT account_id     FROM trans     JOIN order o ON t.account_id = o.account_id     GROUP BY t.account_id     HAVING SUM(o.amount) > 10000 ); 
SELECT DISTINCT o.account_id FROM `order` o JOIN `account` a ON o.account_id = a.account_id JOIN `client` c ON a.district_id = c.district_id JOIN `district` d ON c.district_id = d.district_id WHERE d.A2 = 'Pisek' AND o.k_symbol = 'SIPO'; 
SELECT ac.account_id FROM account ac JOIN card c1 ON ac.account_id = c1.account_id JOIN card c2 ON ac.account_id = c2.account_id WHERE c1.type = 'gold' AND c2.type = 'junior'; 
SELECT AVG(t.amount) AS avg_credit_card_amount FROM account a JOIN order o ON a.account_id = o.account_id JOIN district d ON a.district_id = d.district_id WHERE o.k_symbol = 'VYBER KARTOU' AND YEAR(o.date) = 2021 AND MONTH(o.date) = MONTH(CURRENT_DATE()); 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id JOIN `order` o ON a.account_id = o.account_id WHERE o.k_symbol = 'VYBER KARTOU' AND o.date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY a.account_id HAVING SUM(o.amount) < (     SELECT AVG(monthly_spending)     FROM (         SELECT SUM(o.amount) AS monthly_spending         FROM `order` o         WHERE o.k_symbol = 'VYBER KARTOU'         AND o.date BETWEEN '1998-01-01' AND '1998-12-31'         GROUP BY MONTH(o.date), a.account_id     ) AS spending_per_month     GROUP BY MONTH(spending_per_month.monthly_spending) ); 
SELECT DISTINCT c.client_id FROM client c JOIN account a ON c.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card crd ON d.disp_id = crd.disp_id JOIN loan ln ON a.account_id = ln.account_id WHERE c.gender = 'F' AND crd.type = 'credit'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia'; 
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Tabor' AND a.frequency = 'OWNER'; 
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.frequency != 'OWNER' AND (SELECT AVG(A11) FROM district) > 8000 AND (SELECT AVG(A11) FROM district) <= 9000; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB'; 
SELECT d.A2 AS district_name FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'VYDAJ'; 
SELECT AVG(CAST(`A15` AS REAL)) AS avg_crimes FROM `district` WHERE `A15` > 4000 AND `A3` IN (     SELECT `A3`     FROM `account`     WHERE YEAR(`date`) >= 1997 ) 
SELECT COUNT(*)  FROM card  JOIN account ON card.account_id = account.account_id  WHERE card.type = 'classic' AND account.frequency = 'OWNER'; 
SELECT COUNT(client.client_id)  FROM client  JOIN district ON client.district_id = district.district_id  WHERE district.A2 = 'Hl.m. Praha' AND client.gender = 'M'; 
SELECT      (SUM(CASE WHEN c.type = 'Gold' AND c.issued < '1998-01-01' THEN 1 ELSE 0 END) * 100.0) /      COUNT(c.card_id) AS gold_card_percentage FROM      card c; 
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan); 
SELECT d.A15 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id = 532; 
SELECT a.district_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 33333; 
SELECT o.account_id, o.amount FROM `order` o JOIN `account` a ON o.account_id = a.account_id JOIN `client` c ON a.district_id = c.district_id WHERE c.client_id = 3356 AND o.k_symbol = 'VYBER'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 13539; 
SELECT d.A3  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.client_id = 3541; 
SELECT d.district_id, COUNT(a.account_id) AS account_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1; 
SELECT c.client_id FROM `order` o JOIN `disp` d ON o.account_id = d.account_id JOIN `client` c ON d.client_id = c.client_id WHERE o.order_id = 32423; 
SELECT t.trans_id, a.account_id FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A5 = '5'; 
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A3 = 'Jesenik'; 
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.type = 'junior' AND crd.issued >= '1997-01-01'; 
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) /      COUNT(c.gender) AS women_percentage FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A11 > 10000; 
SELECT   (SUM(CASE WHEN l.date BETWEEN '1997-01-01' AND '1997-12-31' THEN l.amount ELSE 0 END) -    SUM(CASE WHEN l.date BETWEEN '1996-01-01' AND '1996-12-31' THEN l.amount ELSE 0 END)) /     SUM(CASE WHEN l.date BETWEEN '1996-01-01' AND '1996-12-31' THEN l.amount ELSE 0 END) * 100 AS growth_rate FROM   loan l JOIN   client c ON l.account_id IN (SELECT a.account_id FROM account a JOIN client cl ON a.district_id = cl.district_id WHERE cl.gender = 'M') WHERE   c.gender = 'M'; 
SELECT COUNT(*) FROM `trans` WHERE `k_symbol` = 'VYBER KARTOU' AND `date` > '1995-12-31'; 
SELECT      (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia' AND A10 = '1996') -      (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia' AND A10 = '1996') AS crime_difference; 
SELECT COUNT(*) AS total_dispositions FROM disp WHERE account_id BETWEEN 1 AND 10; 
-- Query to find out how often account number 3 requests an account statement to be released SELECT COUNT(`trans_id`) AS statement_request_count FROM `trans` WHERE `account_id` = 3 AND `k_symbol` = 'Account Statement';  -- Query to find out the total amount debited for k_symbol '3539' SELECT SUM(`amount`) AS total_debit_for_3539 FROM `order` WHERE `k_symbol` = '3539'; 
SELECT YEAR(c.birth_date) AS birth_year FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.account_id = 130; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND t.k_symbol = 'POPLATEK PO OBRATU'; 
SELECT      l.amount AS TotalDebt,     SUM(t.payments) AS TotalPayments FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.client_id = 992 GROUP BY      l.loan_id; 
SELECT      SUM(t.amount) AS total_sum,     c.gender FROM      trans t JOIN      account a ON t.account_id = a.account_id JOIN      client c ON a.district_id = c.district_id WHERE      t.trans_id = 851 AND a.account_id IN (         SELECT              d.account_id         FROM              disp d         WHERE              d.client_id = 4     ) GROUP BY      c.gender; 
SELECT card.card_id, card.disp_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN card ON account.account_id = card.account_id WHERE client.client_id = 9; 
SELECT SUM(t.amount) AS total_payment FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 617 AND YEAR(t.trans_date) = 1998; 
SELECT c.client_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.district_id = (SELECT district_id FROM district WHERE district_name = 'East Bohemia'); 
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3; 
SELECT COUNT(DISTINCT c.client_id) AS male_customers_exceeding_4000 FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND YEAR(t.date) BETWEEN 1974 AND 1976 AND t.k_symbol = 'SIPO' AND t.amount > 4000; 
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A4 = 'Beroun' AND account.date > '1996-12-31'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE c.gender = 'F' AND crd.type = 'junior'; 
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(c.client_id) AS female_percentage FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A3 = 'Prague'; 
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0) / COUNT(CASE WHEN c.gender = 'M' THEN 1 END + COUNT(CASE WHEN a.frequency = 'POPLATEK TYDNE' THEN 1 END - COUNT(CASE WHEN c.gender = 'M' THEN 1 END AND a.frequency = 'POPLATEK TYDNE' END)) AS male_percentage FROM     client c JOIN     account a ON c.district_id = a.district_id JOIN     disp d ON a.account_id = d.account_id JOIN     order o ON d.account_id = o.account_id WHERE     c.gender = 'M' AND     a.frequency = 'POPLATEK TYDNE'; 
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN account a ON d.account_id = a.account_id  WHERE a.frequency = 'POPLATEK TYDNE'; 
SELECT l.account_id FROM loan l WHERE l.duration > 24 AND l.amount = (SELECT MIN(amount) FROM loan WHERE duration > 24) AND (SELECT DATE(l.date) FROM loan l2 WHERE l2.account_id = l.account_id AND l2.duration > 24 ORDER BY l2.date ASC LIMIT 1) < '1997-01-01' GROUP BY l.account_id; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A11 = (     SELECT MIN(d.A11)     FROM district d     JOIN client c ON d.district_id = c.district_id     WHERE c.gender = 'F' ) ORDER BY c.birth_date ASC LIMIT 1; 
SELECT COUNT(c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND d.A3 = 'East Bohemia'; 
SELECT COUNT(DISTINCT l.account_id)  FROM loan l  JOIN account a ON l.account_id = a.account_id  WHERE a.frequency = 'POPLATEK TYDNE'  AND l.duration = 24; 
SELECT      l.account_id,     AVG(l.amount) AS avg_loan_amount FROM      loan l JOIN      account a ON l.account_id = a.account_id WHERE      l.status IN ('C', 'D')     AND a.frequency = 'POPLATEK PO OBRATU' GROUP BY      l.account_id; 
SELECT c.client_id, d.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'permanent'; 
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN card crd ON c.client_id = crd.client_id JOIN account acc ON c.district_id = acc.district_id AND acc.account_id = crd.account_id JOIN loan ln ON acc.account_id = ln.account_id WHERE crd.type = 'gold' AND ln.amount > 0; 
SELECT bond_type, COUNT(bond_type) AS frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '-'; 
SELECT AVG(COUNT(c.atom_id) OVER (PARTITION BY b.molecule_id) /         COUNT(DISTINCT c.bond_id) OVER (PARTITION BY b.molecule_id)) AS avg_oxygen_atoms FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'O' AND b.bond_type = '-'; 
SELECT AVG(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS average_single_bonded FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+'; 
SELECT COUNT(*) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.label = '-'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON c1.atom_id = c2.atom_id2 AND c2.bond_id IS NOT NULL JOIN connected c3 ON c2.atom_id2 = c3.atom_id JOIN connected c4 ON c3.bond_id = c4.bond_id AND c4.atom_id2 = c1.atom_id JOIN atom a1 ON c1.atom_id = a1.atom_id JOIN atom a2 ON c2.atom_id2 = a2.atom_id JOIN atom a3 ON c3.atom_id = a3.atom_id JOIN atom a4 ON c4.atom_id2 = a4.atom_id JOIN molecule m2 ON m.molecule_id = m2.molecule_id WHERE a1.element = '+' AND a2.element = '+' AND a3.element = '+' AND a4.element = '+'; 
SELECT      ROUND((SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) / COUNT(c.atom_id)) * 100, 2) AS percentage_of_carbon FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = ' = '; 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a  WHERE a.element <> 'br' AND NOT EXISTS (     SELECT 1      FROM connected c      JOIN bond b ON c.bond_id = b.bond_id      WHERE b.bond_type = 'br' AND c.atom_id = a.atom_id ); 
SELECT COUNT(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR099' AND EXISTS (     SELECT 1     FROM bond b     JOIN connected c ON b.bond_id = c.bond_id     WHERE a.atom_id = c.atom_id     AND b.bond_type = '+' ); 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9'; 
SELECT DISTINCT a1.element AS element1, a2.element AS element2 FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON a2.atom_id = c.atom_id2 WHERE b.bond_type = ' = ' AND a1.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a2.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      COUNT(CASE WHEN a.element = 'h' THEN a.atom_id ELSE NULL END) AS hydrogen_atom_count,     CASE WHEN a.element = 'h' THEN m.label ELSE NULL END AS label FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.element = 'h' GROUP BY      CASE WHEN a.element = 'h' THEN m.label ELSE NULL END ORDER BY      hydrogen_atom_count DESC LIMIT 1; 
SELECT b.bond_type FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id AND a.element = 'te' WHERE b.bond_type IS NOT NULL; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'; 
SELECT DISTINCT c1.atom_id, c2.atom_id FROM connected c1 JOIN connected c2 ON c1.bond_id = c2.bond_id JOIN molecule m ON c1.molecule_id = m.molecule_id WHERE m.label = '-' AND c1.atom_id < c2.atom_id; -- This condition ensures each pair is listed only once 
SELECT element, COUNT(*) as count FROM (     SELECT atom_id, element     FROM atom     JOIN molecule ON atom.molecule_id = molecule.molecule_id     WHERE molecule.label = '-' ) AS filtered_atoms GROUP BY element ORDER BY count ASC LIMIT 1; 
SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20')    OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8'); 
SELECT DISTINCT b.`bond_type` FROM `bond` b JOIN `connected` c ON b.`bond_id` = c.`bond_id` JOIN `atom` a1 ON c.`atom_id` = a1.`atom_id` JOIN `atom` a2 ON c.`atom_id2` = a2.`atom_id` WHERE a1.`element` <> 'sn' OR a2.`element` <> 'sn' AND NOT EXISTS (     SELECT 1     FROM `molecule` m     WHERE m.`molecule_id` = b.`molecule_id`     AND (         (SELECT COUNT(*) FROM `bond` b1 WHERE b1.`molecule_id` = m.`molecule_id` AND b1.`bond_type` = '+') > 0         OR (SELECT COUNT(*) FROM `bond` b1 WHERE b1.`molecule_id` = m.`molecule_id` AND b1.`bond_type` = '-') = 0     ) ); 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-'; 
SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b ON c1.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR181'; 
SELECT      (SUM(CASE WHEN a.element = 'f' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100 AS percent FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+'; 
SELECT      DIVIDE(SUM(CASE WHEN c.bond_id IS NOT NULL AND b.bond_type = '#' THEN 1 ELSE 0 END),             COUNT(DISTINCT c.bond_id)) AS percent FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON c.bond_id IS NOT NULL AND m.molecule_id = b.molecule_id WHERE      m.label = '+'; 
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY element ORDER BY element ASC LIMIT 3; 
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_2_6' AND a1.molecule_id = 'TR001' AND a2.molecule_id = 'TR001'; 
SELECT   (SELECT COUNT(*) FROM molecule WHERE label = '+') - (SELECT COUNT(*) FROM molecule WHERE label = '-') 
SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR_000_2_5'; 
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'; 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY m.molecule_id ASC LIMIT 5; 
SELECT      SUM(CASE WHEN b.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(b.bond_id) AS percent FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id WHERE      b.molecule_id = 'TR008'; 
SELECT     (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) / COUNT(m.molecule_id)) * 100 AS percent FROM     molecule m 
SELECT      (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 100) / COUNT(a.atom_id) AS percent FROM      atom a WHERE      a.molecule_id = 'TR206'; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+'; 
SELECT      bond.`bond_type`,      COUNT(bond.`bond_type`) AS bond_count,     CASE          WHEN mol.label = '+' THEN 'Yes'         ELSE 'No'     END AS is_carcinogenic FROM      bond JOIN      molecule AS mol ON bond.`molecule_id` = mol.`molecule_id` WHERE      bond.`molecule_id` = 'TR018' GROUP BY      bond.`bond_type`, mol.label ORDER BY      bond_count DESC LIMIT 1; 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     JOIN connected c ON b.bond_id = c.bond_id     WHERE b.bond_type = '-' AND c.atom_id <> c.atom_id2     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.atom_id) = 2 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     WHERE c.bond_id IS NULL ) ORDER BY m.molecule_id ASC LIMIT 3; 
SELECT bond_id, COUNT(bond_id) AS bond_count FROM connected WHERE molecule_id = 'TR006' GROUP BY bond_id ORDER BY bond_count DESC, bond_id ASC LIMIT 2; 
SELECT COUNT(*) FROM bond WHERE molecule_id LIKE 'TR009%' AND (atom_id LIKE 'TR009_12' OR atom_id2 LIKE 'TR009_12'); 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'br' AND m.molecule_id IN (     SELECT DISTINCT c.molecule_id     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.label = '+' ); 
SELECT b.bond_type, a1.atom_id AS atom1, a2.atom_id AS atom2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_6_9'; 
SELECT m.molecule_id, CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS carcinogenicity FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id WHERE c.atom_id = 'TR001_10'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#'; 
SELECT COUNT(DISTINCT c.bond_id)  FROM connected c  JOIN atom a ON c.atom_id = a.atom_id  WHERE a.atom_id LIKE 'TR%_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR004' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-') 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND EXISTS (     SELECT 1     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     WHERE c.atom_id = a.atom_id     AND b.bond_type = '+' ); 
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.element = 'p' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.element = 'n' WHERE a1.atom_id != a2.atom_id; 
SELECT m.molecule_id, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE m.molecule_id IN (     SELECT m2.molecule_id     FROM molecule m2     JOIN bond b2 ON m2.molecule_id = b2.molecule_id AND b2.bond_type = ' = '     GROUP BY m2.molecule_id     ORDER BY COUNT(b2.bond_id) DESC     LIMIT 1 ) AND EXISTS (     SELECT 1     FROM connected c2     JOIN bond b3 ON c2.bond_id = b3.bond_id     JOIN atom a3 ON c2.atom_id = a3.atom_id OR c2.atom_id2 = a3.atom_id     JOIN atom a4 ON a3.atom_id = a4.atom_id AND a4.element = '+' ) GROUP BY m.molecule_id ORDER BY double_bond_count DESC LIMIT 1; 
SELECT AVG(COUNT(b.bond_id)) / COUNT(a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'i'; 
SELECT b.bond_id, b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE SUBSTR(b.atom_id, 7, 2) + 0 = 45 OR SUBSTR(c.atom_id2, 7, 2) + 0 = 45; 
SELECT a.atom_id, a.element FROM atom a WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a.atom_id NOT IN (SELECT DISTINCT c.atom_id FROM connected c); 
SELECT DISTINCT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b ON c1.bond_id = b.bond_id JOIN atom a2 ON a2.atom_id = c1.atom_id2 WHERE b.bond_type = '#' AND a1.molecule_id = 'TR447' AND a2.molecule_id = 'TR447'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19'; 
SELECT m.molecule_id, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY double_bond_count DESC LIMIT 1; 
SELECT element, COUNT(DISTINCT molecule_id) AS molecule_count FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY molecule_count ASC LIMIT 1; 
SELECT DISTINCT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'pb' UNION SELECT DISTINCT c.atom_id FROM connected c JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'pb'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      (COUNT(bond.bond_id) * 100.0) /      (SELECT COUNT(DISTINCT connected.atom_id)       FROM connected       JOIN bond ON connected.bond_id = bond.bond_id      JOIN atom AS a1 ON connected.atom_id = a1.atom_id      JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id      WHERE a1.element = a2.element      GROUP BY a1.element      ORDER BY COUNT(a1.atom_id) DESC      LIMIT 1) AS percentage_of_most_common_bond_combination FROM      bond; 
SELECT      (SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) * 1.0) / COUNT(b.bond_id) AS proportion_carcinogenic_single_bonds FROM      bond b WHERE      b.bond_type = '-'; 
SELECT COUNT(*) AS total_carbon_hydrogen_atoms FROM atom WHERE element IN ('c', 'h') AND atom_id IN (     SELECT atom_id     FROM connected     WHERE bond_id IS NOT NULL ); 
SELECT DISTINCT c.atom_id2  FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 's'; 
SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'sn'; 
SELECT COUNT(DISTINCT a.element)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = '-'  GROUP BY a.element; 
SELECT COUNT(DISTINCT a.atom_id) AS total_triple_bond_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('p', 'br') AND b.bond_type = '#'; 
SELECT DISTINCT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '-' WHERE m.molecule_id NOT IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '-'     JOIN connected c ON b.bond_id = c.bond_id     JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id     WHERE a.element = 'carcinogenic' ); 
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(a.atom_id)) * 100 AS chlorine_percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '-'; 
SELECT `molecule_id`, CASE `molecule_id`     WHEN 'TR000' THEN '+'     WHEN 'TR001' THEN '+'     WHEN 'TR002' THEN '-'     ELSE NULL END AS label FROM `molecule` WHERE `molecule_id` IN ('TR000', 'TR001', 'TR002'); 
SELECT DISTINCT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a1.element = '-' OR a2.element = '-'; 
SELECT COUNT(DISTINCT m.molecule_id) AS total_carcinogenic_molecules FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030' AND b.bond_type = '+'; 
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR001_10_11'; 
SELECT COUNT(c.bond_id) FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'i' AND c.bond_id IS NOT NULL; 
SELECT      m.molecule_id,     CASE          WHEN COUNT(CASE WHEN c.label = '+' THEN 1 END) > COUNT(CASE WHEN c.label = '-' THEN 1 END) THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS carcinogenicity FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id JOIN      connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE      a.element = 'ca' GROUP BY      m.molecule_id ORDER BY      carcinogenicity DESC; 
SELECT EXISTS (     SELECT 1     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_id = 'TR001_1_8'       AND (a.element = 'cl' OR a.element = 'c') ) AS has_both_elements; 
SELECT DISTINCT a.molecule_id FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-' GROUP BY a.molecule_id HAVING COUNT(DISTINCT b.bond_id) = 3; 
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentage_cl FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN      molecule m ON m.molecule_id = c.molecule_id WHERE      m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR001'; 
SELECT DISTINCT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = '; 
SELECT c1.atom_id AS first_atom, c2.atom_id AS second_atom FROM connected AS c1 JOIN connected AS c2 ON c1.bond_id = c2.bond_id AND c1.atom_id < c2.atom_id JOIN bond ON c1.bond_id = bond.bond_id WHERE bond.bond_type = '#'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR005_16_26'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND EXISTS (     SELECT 1     FROM connected c     WHERE c.bond_id = b.bond_id     GROUP BY c.bond_id     HAVING COUNT(DISTINCT c.atom_id) = 1 ); 
SELECT bond_type  FROM bond  WHERE bond_id = 'TR001_10_11'; 
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '+'; 
SELECT COUNT(DISTINCT a.element)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN molecule m ON c.molecule_id = m.molecule_id  WHERE m.label = '+'  AND LENGTH(SUBSTRING(a.atom_id, 7, 1)) = 4  AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(a.atom_id) AS hydrogen_ratio,     CASE          WHEN (SELECT COUNT(*) FROM molecule WHERE molecule_id = a.molecule_id AND label = '+') > 0 THEN '+'         ELSE '-'     END AS label FROM      atom a WHERE      a.molecule_id = 'TR006' 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m2 ON b.molecule_id = m2.molecule_id WHERE m2.molecule_id IN (     SELECT m3.molecule_id     FROM molecule m3     JOIN connected c3 ON m3.molecule_id = c3.bond_id     JOIN bond b3 ON c3.bond_id = b3.bond_id     WHERE b3.molecule_id IN (         SELECT m4.molecule_id         FROM molecule m4         JOIN atom a4 ON m4.molecule_id = a4.molecule_id         WHERE a4.element = 'ca'     )     AND c3.atom_id2 IN (         SELECT a5.atom_id         FROM atom a5         WHERE a5.element = 'ca'     )     AND m3.molecule_id <> m2.molecule_id ) AND EXISTS (     SELECT 1     FROM connected c4     JOIN bond b4 ON c4.bond_id = b4.bond_id     JOIN molecule m4 ON b4.molecule_id = m4.molecule_id     WHERE m4.molecule_id = m2.molecule_id     AND c4.atom_id2 IN (         SELECT a6.atom_id         FROM atom a6         WHERE a6.element = 'ca'     )     AND c4.bond_id IN (         SELECT bond_id         FROM bond         JOIN connected c5 ON bond.bond_id = c5.bond_id         WHERE c5.atom_id2 IN (             SELECT a7.atom_id             FROM atom a7             WHERE a7.element = 'ca'         )         AND c5.bond_id IN (             SELECT bond_id             FROM bond             JOIN connected c6 ON bond.bond_id = c6.bond_id             WHERE c6.atom_id2 IN (                 SELECT a8.atom_id                 FROM atom a8                 WHERE a8.element = 'ca'             )         )     ) ); 
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'te' UNION SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.element = 'te'; 
SELECT a1.element AS element1, a2.element AS element2 FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON a2.atom_id = c.atom_id2 JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_10_11' AND a1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      ROUND((COUNT(CASE WHEN b.bond_type = '#' THEN 1 END) * 100.0) / COUNT(*), 2) AS triple_bond_percentage FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      b.bond_type = '#'; 
SELECT      COUNT(CASE WHEN bond.bond_type = ' = ' THEN 1 END) / COUNT(bond.bond_id) * 100 AS percent FROM      bond JOIN      connected ON bond.bond_id = connected.bond_id WHERE      connected.molecule_id = 'TR047' 
SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR001_1' AND m.label = '+'; 
SELECT      COUNT(*) AS carcinogenic_count,     CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM      connected AS c JOIN      molecule AS m ON c.molecule_id = m.molecule_id WHERE      m.molecule_id = 'TR151' AND     EXISTS (SELECT 1 FROM connected AS cc JOIN bond AS b ON cc.bond_id = b.bond_id             WHERE cc.atom_id2 = c.atom_id AND b.bond_type = '+'); 
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR151' AND a.element IN ('cl', 'br', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN atom a ON c.atom_id = a.atom_id  WHERE a.element = '+' OR a.element = '+' OR b.bond_type = '+' OR b.bond_type = '+'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050' AND a.element = 'c'; 
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+'); 
SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'; 
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' AND m.label = '+'; 
SELECT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR00_1_2' AND c.atom_id = (SELECT a.atom_id FROM atom a WHERE a.atom_id = 'TR00_1'); 
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type != '-' GROUP BY a.atom_id HAVING COUNT(b.bond_type) = COUNT(DISTINCT CASE WHEN b.bond_type = '-' THEN b.bond_id END); 
SELECT      (SUM(CASE WHEN c.bond_id IS NOT NULL AND a.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentage_carcinogenic_with_hydrogen FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      atom a ON c.atom_id = a.atom_id 
SELECT COUNT(*) AS carcinogenic_atoms FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR124' AND atom.element = '+'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.molecule_id = 'TR186'; 
SELECT bond_type  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON connected.atom_id = atom.atom_id  WHERE atom.atom_id = 'TR007_4_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_2_4'; 
SELECT      COUNT(c.bond_id) AS double_bond_count,     CASE          WHEN m.label = '+' THEN 'Yes'         ELSE 'No'     END AS carcinogenic FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      c.atom_id = 'TR006' AND      b.bond_type = ' = ' 
SELECT m.molecule_id, GROUP_CONCAT(DISTINCT a.element ORDER BY a.element) AS elements FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE m.molecule_id IN (     SELECT molecule_id     FROM molecule     JOIN connected c ON molecule.molecule_id = c.molecule_id     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_id IN (         SELECT bond_id         FROM connected         JOIN bond b ON connected.bond_id = b.bond_id         WHERE b.label = '+'     ) ) GROUP BY m.molecule_id; 
SELECT b.bond_id, a1.atom_id AS atom_id1, a2.atom_id AS atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-'; 
SELECT DISTINCT m.molecule_id, GROUP_CONCAT(DISTINCT a.element ORDER BY a.element) AS elements FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id AND b.bond_type = '#' JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id GROUP BY m.molecule_id; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR000_2_3'; 
SELECT COUNT(*) FROM bond WHERE molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'cl' ) 
SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_types_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR346' GROUP BY a.atom_id; 
SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bond_molecules,        SUM(CASE WHEN m.carcinogenic = '+' THEN 1 ELSE 0 END) AS total_carcinogenic_double_bond_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' WHERE EXISTS (     SELECT 1     FROM connected c     JOIN bond b2 ON c.bond_id = b2.bond_id AND b2.bond_type = ' = '     WHERE c.atom_id = m.molecule_id OR c.atom_id2 = m.molecule_id ) AND m.carcinogenic = '+'; 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 's' LEFT JOIN bond b ON a.atom_id = b.bond_id AND b.bond_type = ' = ' WHERE a.atom_id IS NULL OR b.bond_id IS NOT NULL; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.bond_id = 'TR001_2_4' AND b.bond_type = '+'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '-'; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'Cl' AND m.molecule_id IN (     SELECT c.molecule_id     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_type = '+' ) 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.molecule_id NOT IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     JOIN bond b ON c.bond_id = b.bond_id     JOIN atom a2 ON b.bond_id = a2.bond_id     WHERE a2.element = 'c'     AND m.label = '-' ); 
SELECT      DIVIDE(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END), COUNT(DISTINCT m.molecule_id)) * 100 AS percentage FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.molecule_id IN (         SELECT              m.molecule_id          FROM              molecule m          JOIN              atom a ON m.molecule_id = a.molecule_id          WHERE              a.element = 'cl' AND              m.molecule_id IN (                 SELECT                      molecule_id                  FROM                      molecule                  WHERE                      label = '+'             )     ) 
SELECT molecule_id  FROM bond  WHERE bond_id = 'TR001_1_7'; 
SELECT COUNT(DISTINCT a.element)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  WHERE c.bond_id = 'TR001_3_4'; 
SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2'; 
SELECT m.molecule_id FROM atom a1 JOIN atom a2 ON a1.molecule_id = a2.molecule_id JOIN connected c ON c.atom_id = a1.atom_id OR c.atom_id2 = a1.atom_id JOIN molecule m ON m.molecule_id = a1.molecule_id WHERE a1.atom_id = 'TR000_2' OR a2.atom_id = 'TR000_4'; 
SELECT `element` FROM `atom` WHERE `atom_id` = 'TR000_1'; 
SELECT      m.molecule_id,     CASE          WHEN COUNT(c.bond_id) > 0 THEN '+'         ELSE '-'     END AS carcinogenicity FROM      molecule m LEFT JOIN      connected c ON m.molecule_id = c.molecule_id WHERE      m.molecule_id = 'TR000' GROUP BY      m.molecule_id; 
SELECT      (SUM(CASE WHEN b.`bond_type` = '-' THEN 1 ELSE 0 END) * 100) / COUNT(a.`atom_id`) AS percentage FROM      `atom` a JOIN      `connected` c ON a.`atom_id` = c.`atom_id` JOIN      `bond` b ON c.`bond_id` = b.`bond_id` 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'n' AND EXISTS (     SELECT 1     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     WHERE c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id     AND b.molecule_id = m.molecule_id ) AND EXISTS (     SELECT 1     FROM connected c     JOIN bond b ON c.bond_id = b.bond_id     WHERE c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id     AND b.molecule_id = m.molecule_id     AND EXISTS (         SELECT 1         FROM connected c2         WHERE c2.bond_id = b.bond_id AND c2.atom_id = '+'     ) ); 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 's' AND b.bond_type = ' = '; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id LIKE '-%' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '=' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a.molecule_id = (SELECT molecule_id FROM molecule WHERE molecule_id = 'TR024'); 
SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY m.molecule_id ORDER BY atom_count DESC LIMIT 1; 
SELECT      (SUM(CASE WHEN a.element = 'h' AND b.bond_type = '#' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT a.molecule_id) AS percentage_carcinogenic_with_triple_bonded_hydrogen FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.molecule_id IN (SELECT molecule_id FROM molecule WHERE molecule_id IS NOT NULL AND molecule_id != '') 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = '+'; 
SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' AND EXISTS (     SELECT 1     FROM `bond`     WHERE `bond`.`molecule_id` = `molecule`.`molecule_id`     AND `bond_type` = '-' ); 
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.molecule_id = 'TR008' AND a.element = 'c'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-'; 
SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bonded_oxygen_molecules FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'o' AND b.bond_type = ' = '; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND NOT EXISTS (     SELECT 1     FROM molecule m2     JOIN connected c ON m2.molecule_id = m.molecule_id     WHERE m2.molecule_id = m.molecule_id     AND c.bond_id IS NULL     AND m2.label = '-' ); 
SELECT      a.element,     CASE          WHEN b.bond_type = '=' THEN 'double bond'         WHEN b.bond_type = '-' THEN 'single bond'         WHEN b.bond_type = '#' THEN 'triple bond'         ELSE 'unknown bond'     END AS bond_type FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 LEFT JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON a.molecule_id = m.molecule_id AND m.molecule_id = 'TR016'; 
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type = ' = ' AND a.molecule_id = 'TR012'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')  AND a.element = 'o'; 
SELECT id, artist, asciiName, name, rarity FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL AND hasFoil = 1 ORDER BY rarity DESC; 
SELECT c.id, c.name, c.setCode FROM cards c WHERE c.borderColor IS NULL AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NULL AND c.hasFoil = 0; 
SELECT name FROM cards WHERE convertedManaCost > faceConvertedManaCost; 
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '2015' AND l.format = 'EDHRec' AND c.edhrecRank < 100; 
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator'; 
SELECT l.uuid, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage'; 
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal' AND l.format = 'commander'; 
SELECT c.name, r.text,         CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasContentWarning,        CASE WHEN c.hasFoil = 0 AND c.hasNonFoil = 0 THEN 'Yes' ELSE 'No' END AS hasMissingFoilNonFoil,        CASE WHEN c.isOnlineOnly = 1 THEN 'Yes' ELSE 'No' END AS isOnlineOnly,        CASE WHEN c.isOversized = 1 THEN 'Yes' ELSE 'No' END AS isOversized,        CASE WHEN c.isPromo = 1 THEN 'Yes' ELSE 'No' END AS isPromo,        CASE WHEN c.isReprint = 1 THEN 'Yes' ELSE 'No' END AS isReprint,        CASE WHEN c.isReserved = 1 THEN 'Yes' ELSE 'No' END AS isReserved,        CASE WHEN c.isStarter = 1 THEN 'Yes' ELSE 'No' END AS isStarter,        CASE WHEN c.isTextless = 1 THEN 'Yes' ELSE 'No' END AS isTextless,        CASE WHEN c.isTimeshifted = 1 THEN 'Yes' ELSE 'No' END AS isTimeshifted FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel' ORDER BY c.name; 
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s'; 
SELECT c.name, c.artist, COUNT(r.id) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.isPromo = 1 GROUP BY c.uuid ORDER BY ruling_count DESC LIMIT 1; 
SELECT DISTINCT f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Annul' AND c.number = '29'; 
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'; 
SELECT      (SUM(CASE WHEN f.language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS percentageChineseSimplified FROM      cards c LEFT JOIN      foreign_data f ON c.uuid = f.uuid; 
SELECT s.name, st.translation, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian'; 
SELECT COUNT(DISTINCT type)  FROM cards  WHERE artist = 'Aaron Boyd'; 
SELECT `keywords` FROM `cards` WHERE `name` = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards WHERE power = '*'; 
SELECT `promoTypes` FROM `cards` WHERE `name` = 'Duress'; 
SELECT `borderColor` FROM `cards` WHERE `name` = 'Ancestor''s Chosen'; 
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND id IN (     SELECT id     FROM cards     WHERE name = 'Ancestor''s Chosen'     AND originalReleaseDate = (         SELECT MIN(originalReleaseDate)         FROM cards         WHERE name = 'Ancestor''s Chosen'     ) ); 
SELECT DISTINCT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE c.name = 'Angel of Mercy'; 
SELECT COUNT(c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0; 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Condemn'; 
SELECT COUNT(c.id)  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.status = 'restricted' AND c.isStarter = 1; 
SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.faceName = 'Cloudchaser Eagle'; 
SELECT type FROM cards WHERE name = 'Benalish Knight'; 
SELECT r.text AS rule FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Benalish Knight' AND r.format = 'Legal' AND EXISTS (     SELECT 1     FROM legalities l     JOIN cards c ON l.uuid = c.uuid     WHERE c.name = 'Benalish Knight'     AND l.format = 'Legal'     AND l.status = 'Legal' ); 
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian' AND fd.name = c.name; 
SELECT     (COUNT(CASE WHEN c.borderColor = 'borderless' THEN c.id END) * 100.0) / COUNT(c.id) AS percentage_borderless_cards FROM     cards c; 
SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'German' AND c.isReprint = 1; 
SELECT COUNT(c.id) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN set_translations st ON c.setCode = st.setCode WHERE c.borderColor = 'borderless' AND fd.language = 'Russian' AND st.translation LIKE '%Russian%' 
SELECT      (COUNT(CASE WHEN c.isStorySpotlight = 1 AND fd.language = 'French' THEN 1 END) * 100.0) /      COUNT(CASE WHEN c.isStorySpotlight = 1 THEN 1 END) AS percentage_French_StorySpotlight_cards FROM      cards c JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      c.isStorySpotlight = 1; 
SELECT COUNT(*) FROM cards WHERE toughness = '99'; 
SELECT name FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'black' AND `availability` = 'mtgo'; 
SELECT id  FROM cards  WHERE convertedManaCost = 0; 
SELECT layout FROM cards WHERE keywords LIKE '%flying%'; 
SELECT COUNT(*) FROM cards WHERE type = 'Summon - Angel' AND (subtypes IS NOT NULL AND 'Angel' NOT IN (REPLACE(subtypes, ',', ' '))); 
SELECT c.id FROM cards c WHERE c.hasFoil = 1 AND c.hasNonFoil = 1 AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL; 
SELECT id FROM cards WHERE duelDeck = 'a'; 
SELECT `edhrecRank` FROM `cards` WHERE `frameVersion` = '2015'; 
SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified' AND cards.artist IS NOT NULL; 
SELECT c.name, c.uuid FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese'; 
SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white'; 
SELECT c.uuid, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy' AND fd.language != 'en'; 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality'; 
SELECT COUNT(*) AS total_cards_with_future_frame_version FROM cards WHERE frameVersion = 'future' AND id IN (     SELECT uuid     FROM legalities     WHERE status = 'legal' ); 
SELECT c.name, c.colors FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.setCode = 'OGW'; 
SELECT c.name, st.translation, st.language FROM cards c JOIN set_translations st ON c.uuid = st.uuid JOIN sets s ON c.setCode = s.code WHERE s.code = '10E' AND c.convertedManaCost = 5; 
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'; 
SELECT      c.colors,      l.format FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.id BETWEEN 1 AND 20; 
SELECT c.name, c.colors, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND fd.language <> 'en'; 
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'Uncommon' ORDER BY r.date ASC LIMIT 3; 
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon'  AND (cardKingdomFoilId IS NOT NULL OR cardKingdomId IS NOT NULL) AND (power IS NULL OR power = '0'); 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1'; 
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1; 
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability IN ('paper', 'mtgo'); 
SELECT SUM(CASE WHEN artist = 'Rob Alexander' THEN CAST(manaCost AS REAL) ELSE 0 END) AS total_unconverted_mana_cost FROM cards; 
SELECT DISTINCT type, supertypes FROM cards WHERE availability = 'arena' ORDER BY type, supertypes; 
SELECT s.setCode FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON c.setCode = s.code WHERE st.language = 'Spanish'; 
SELECT      (COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) * 100.0) / COUNT(cards.id) FROM      cards WHERE      cards.frameEffects = 'legendary' 
SELECT     c.id,     ROUND((SUM(CASE WHEN c.isStorySpotlight = 1 AND c.isTextless = 0 THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN c.isStorySpotlight = 1 THEN 1 ELSE 0 END), 2) AS percentage FROM     cards c GROUP BY     c.id ORDER BY     c.id; 
SELECT c.name,         (SUM(CASE WHEN fd.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS percentage_spanish FROM cards c LEFT JOIN foreign_data fd ON c.uuid = fd.uuid GROUP BY c.name ORDER BY percentage_spanish DESC; 
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 309; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)'; 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'legal' AND c.types LIKE '%Creature%' AND c.type = 'Creature'; 
SELECT DISTINCT   s.name AS cardName,   st.translation AS cardType FROM   cards c JOIN   set_translations st ON c.setCode = st.setCode AND st.language = 'de' JOIN   foreign_data fd ON c.uuid = fd.uuid WHERE   c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL 
SELECT COUNT(*) FROM cards WHERE power IS NULL AND tough IS NOT NULL AND id IN (SELECT id FROM cards WHERE tough IS NOT NULL AND (power = '*' OR power IS NULL)); 
SELECT COUNT(*) FROM cards WHERE type LIKE '%%-%%' -- Ensures it's a split card type (e.g., "Enchantment — Aura") AND side IS NULL AND EXISTS (     SELECT 1     FROM rulings     WHERE cards.uuid = rulings.uuid     AND text LIKE '%triggered mana ability%' ) AND EXISTS (     SELECT 1     FROM legalities     WHERE cards.uuid = legalities.uuid     AND format = 'Pre-Modern' ); 
SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper'; 
SELECT DISTINCT c.colorIdentity FROM cards c JOIN rulings r ON c.uuid = r.uuid JOIN set_translations st ON c.uuid = r.uuid JOIN sets s ON st.setCode = s.code JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.colorIdentity IS NOT NULL AND fd.uuid IS NOT NULL AND st.setCode IS NOT NULL AND s.isForeignOnly = 0 AND r.uuid IN (     SELECT uuid     FROM cards     WHERE `text` = 'Das perfekte Gegenmittel zu einer dichten Formation' ) 
SELECT f.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.type LIKE '%Creature%'   AND c.layout = 'normal'   AND c.borderColor = 'black'   AND f.language = 'French'   AND c.artist = 'Matthew D. Wilson'; 
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10'; 
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica'; 
SELECT      ROUND(         (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0) / COUNT(c.id),          2     ) AS percentageNoContentWarning FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.isCommander = 1      AND l.status = 'legal'; 
SELECT      (COUNT(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 END AND foreign_data.language = 'French'                 ELSE NULL END) /       COUNT(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 END) * 100) AS percentage_of_cards_without_power_in_French FROM      cards JOIN      foreign_data ON cards.uuid = foreign_data.uuid WHERE      cards.power IS NULL OR cards.power = '*'; 
SELECT      (COUNT(CASE WHEN s.type = 'expansion' THEN 1 END) * 100.0) / COUNT(s.code) AS percentage_Japanese_expansion_sets FROM      sets s JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Japanese' 
SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader'; 
SELECT COUNT(*) FROM cards WHERE colorIdentity IS NOT NULL AND borderColor = 'borderless' AND edhrecRank > 12000; 
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1; 
SELECT      c.name,      c.power FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.power IS NULL OR c.power = '*' AND      l.promoTypes LIKE '%arenaleague%' AND      c.isPromo = 1 ORDER BY      c.name ASC LIMIT 3; 
SELECT language  FROM foreign_data  WHERE multiverseid = 149934; 
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3; 
SELECT      (COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 END) / COUNT(c.id)) * 100 AS proportion FROM      cards c; 
SELECT c.id FROM cards c WHERE c.otherFaceIds IS NULL AND c.subtypes LIKE '%Angel%' AND c.subtypes LIKE '%Wizard%'; 
SELECT s.name, COUNT(*) as total_cards FROM sets s JOIN cards c ON s.id = c.id WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' GROUP BY s.name ORDER BY total_cards DESC, s.name ASC LIMIT 3; 
SELECT DISTINCT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC'; 
SELECT      sets.name AS setName,      set_translations.translation AS translation FROM      sets  JOIN      set_translations ON sets.code = set_translations.setCode WHERE      sets.id = 5; 
SELECT st.language, s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206; 
SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE st.language = 'Italian' AND s.name LIKE 'Shadowmoor%' GROUP BY s.id, s.name ORDER BY s.name ASC LIMIT 2; 
SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 1 AND s.isFoilOnly = 1 AND st.language = 'Japanese'; 
SELECT s.name, MAX(s.baseSetSize) AS max_cards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' GROUP BY s.name ORDER BY max_cards DESC LIMIT 1; 
SELECT      ROUND((COUNT(CASE WHEN c.isOnlineOnly = 1 THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Chinese Simplified' 
SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese') AND (mtgoCode IS NULL OR mtgoCode = ''); 
SELECT `id` FROM `cards` WHERE `borderColor` = 'black'; 
SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id; 
SELECT c.name FROM cards c WHERE c.borderColor = 'black' AND c.isFullArt = 1; 
SELECT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.id = 174; 
SELECT `name`  FROM `sets`  WHERE `code` = 'ALL'; 
SELECT fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.asciiName = 'A Pedra Fellwar'; 
SELECT `code` FROM `sets` WHERE `releaseDate` = '2007-07-13'; 
SELECT s.baseSetSize, s.code  FROM sets s  WHERE s.block = 'Masques' OR s.block = 'Mirage'; 
SELECT `code` FROM `sets` WHERE `type` = 'expansion'; 
SELECT c.name AS cardName, c.type AS cardType FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'Boros' AND fd.language = 'Foreign'; 
SELECT f.language, f.flavorText, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'colorpie'; 
SELECT      (COUNT(*) * 100.0) /      (SELECT COUNT(*) FROM cards WHERE setCode = 'AbyssalHorror') AS percentage_with_mana_cost_10 FROM      cards WHERE      convertedManaCost = 10 AND      setCode = 'AbyssalHorror'; 
SELECT DISTINCT s.setCode FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.type = 'Expansion' AND s.type = 'Commander'; 
SELECT f.name, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'Abzan' 
SELECT f.language, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'Azorius'; 
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%' 
SELECT `name` FROM `cards` WHERE `isTextless` = 0; 
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'; 
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'W' AND (`power` IS NULL OR `power` = '*'); 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.isPromo = 1 AND c.side IS NOT NULL; 
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'; 
SELECT DISTINCT c.purchaseUrls FROM cards c WHERE c.promoTypes = 'bundle'; 
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'Black' AND availability LIKE '%arena,mtgo%' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT      CASE          WHEN MAX(CASE WHEN c.name = 'Serra Angel' THEN c.convertedManaCost END) >               MAX(CASE WHEN c.name = 'Shrine Keeper' THEN c.convertedManaCost END)         THEN 'Serra Angel'         ELSE 'Shrine Keeper'     END AS CardWithHigherManaCost FROM      cards c 
SELECT c.artist  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.flavorName = 'Battra, Dark Destroyer'; 
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.mcmName WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian'; 
SELECT COUNT(*)  FROM cards  JOIN sets ON cards.mcmId = sets.mcmId  JOIN set_translations ON sets.code = set_translations.setCode  WHERE cards.name = 'Angel of Mercy'; 
SELECT c.faceName FROM cards c JOIN set_translations st ON c.mcmMetaId = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT      c.name AS card_name,     f.name AS korean_name FROM      cards c JOIN      sets s ON c.name = 'Ancestor''s Chosen' LEFT JOIN      foreign_data f ON c.uuid = f.uuid AND f.language = 'Korean' WHERE      s.code = f.setCode; 
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'; 
SELECT SUM(s.baseSetSize) AS total_cards_in_base_set FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.code = (SELECT code FROM sets WHERE name = 'Eighth Edition') AND st.language = 'Chinese'; 
SELECT COUNT(DISTINCT c.id) AS card_count FROM cards c JOIN sets s ON c.cardKingdomId = s.code WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL; 
SELECT sets.releaseDate FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Ancestor''s Chosen'; 
SELECT sets.code AS expansion_code FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'; 
SELECT      c.name AS CardName,     s.name AS SetName,     s.isForeignOnly FROM      cards c JOIN      sets s ON c.setCode = s.code WHERE      c.name = 'Adarkar Valkyrie' AND      s.isForeignOnly = 1; 
SELECT COUNT(*) FROM sets WHERE id IN (     SELECT s.id     FROM sets s     JOIN set_translations st ON s.code = st.setCode     WHERE st.language = 'Italian' AND s.baseSetSize < 10 ); 
SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black'; 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT DISTINCT a.name FROM artists a JOIN cards c ON a.uuid = c.uuid JOIN sets s ON c.setCode = s.code WHERE s.code = 'Coldsnap' AND a.name IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy'); 
SELECT `cards`.`name` FROM `cards` JOIN `sets` ON `cards`.`setCode` = `sets`.`code` WHERE `sets`.`name` = 'Coldsnap' AND `cards`.`number` = '4'; 
SELECT COUNT(*) FROM cards C JOIN sets S ON C.setCode = S.code WHERE C.convertedManaCost > 5 AND S.name = 'Coldsnap' AND (C.power = '*' OR C.power IS NULL); 
SELECT f.flavorText FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE f.language = 'Italian' AND c.name = 'Ancestor''s Chosen'; 
SELECT DISTINCT f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Ancestor''s Chosen' AND f.flavorText IS NOT NULL; 
SELECT t.translation  FROM cards c JOIN set_translations st ON c.code = st.setCode JOIN sets s ON c.code = s.code JOIN foreign_data fd ON c.uuid = fd.uuid JOIN cards c_fd ON fd.uuid = c_fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'German' AND s.name = st.translation; 
SELECT c.name, st.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND st.language = 'Italian'; 
SELECT t.translation AS ItalianName FROM cards c JOIN set_translations t ON c.setCode = t.setCode JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND t.language = 'Italian' AND c.convertedManaCost = (     SELECT MAX(convertedManaCost)     FROM cards     JOIN set_translations t ON cards.setCode = t.setCode     JOIN sets s ON cards.setCode = s.code     WHERE s.name = 'Coldsnap' AND t.language = 'Italian' ); 
SELECT rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'; 
SELECT      (SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM      cards JOIN      sets ON cards.setCode = sets.code WHERE      sets.name = 'Coldsnap' 
SELECT      ROUND((SUM(CASE WHEN cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS incrediblyPowerfulPercentage FROM      cards JOIN      sets ON cards.setCode = sets.code WHERE      sets.name = 'Coldsnap'; 
SELECT code  FROM sets  WHERE releaseDate = '2017-07-14'; 
SELECT keyruneCode  FROM sets  WHERE code = 'PKHC'; 
SELECT mcmId FROM sets WHERE code = 'SS2'; 
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'; 
SELECT type  FROM sets  WHERE name LIKE '%From the Vault: Lore%'; 
SELECT parentCode  FROM sets  WHERE name = 'Commander 2014 Oversized'; 
SELECT c.name, r.text AS ruling_text,         (c.artist = 'Jim Pavelec' AND c.hasContentWarning = 1) AS has_missing_or_degraded_properties FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec'; 
SELECT s.releaseDate  FROM sets s  JOIN cards c ON s.code = c.setCode  WHERE c.name = 'Evacuation'; 
SELECT s.baseSetSize  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.translation = 'Rinascita di Alara'; 
SELECT `type` FROM `sets` JOIN `set_translations` ON `sets`.`code` = `set_translations`.`setCode` WHERE `translation` = 'Huitième édition'; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.name = 'Tendo Ice Bridge' AND st.language = 'French'; 
SELECT COUNT(*) FROM set_translations WHERE translation IS NOT NULL AND setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011'); 
SELECT s.translation AS set_japanese_name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.code = (     SELECT setCode     FROM cards c     JOIN foreign_data fd ON c.uuid = fd.uuid     JOIN set_translations st ON c.setCode = st.setCode     WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese' ); 
SELECT faceName, MAX(convertedManaCost) as highestManaCost FROM cards WHERE faceName = 'Journey into Nyx Hero''s Path' GROUP BY faceName ORDER BY highestManaCost DESC LIMIT 1; 
SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío'; 
SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim'; 
SELECT COUNT(*) FROM cards WHERE `setCode` = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND `convertedManaCost` = 3; 
SELECT translation  FROM set_translations  JOIN sets ON sets.code = set_translations.setCode  WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'; 
SELECT      ROUND((SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN c.language = 'Japanese' THEN 1 ELSE 0 END), 2) AS percentage_non_foil_japanese FROM      cards c JOIN      set_translations st ON c.uuid = st.uuid WHERE      st.language = 'Japanese' AND      c.isNonFoilOnly = 1 
SELECT      (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN c.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS percentage_online_only_brazil_portuguese FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Portuguese (Brazil)'; 
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Aleksi Briclot' AND c.isTextless = 1; 
SELECT s.id FROM sets s WHERE s.baseSetSize = (SELECT MAX(baseSetSize) FROM sets) 
SELECT c.artist FROM cards c WHERE c.side IS NULL AND c.convertedManaCost = (     SELECT MAX(convertedManaCost)     FROM cards     WHERE side IS NULL ) ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT MAX(frameEffects) AS most_common_frame_effect FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a'; 
SELECT s.id FROM sets s WHERE s.types LIKE '%Commander%' AND s.totalSetSize IS NOT NULL AND s.totalSetSize > 0 ORDER BY s.totalSetSize DESC LIMIT 1; 
SELECT      c.name,      c.manaCost,      c.convertedManaCost FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      l.format = 'duel' ORDER BY      c.convertedManaCost DESC LIMIT 10; 
SELECT MIN(originalReleaseDate), legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'legal' GROUP BY cards.uuid ORDER BY MIN(originalReleaseDate) LIMIT 1; 
SELECT COUNT(c.id)  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.artist = 'Volkan Baga' AND fd.language = 'French'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal'; 
SELECT      legalities.format,      cards.name  FROM      legalities  JOIN      cards ON legalities.uuid = cards.uuid  WHERE      legalities.status = 'banned'  GROUP BY      legalities.format  ORDER BY      COUNT(*) DESC  LIMIT 1; 
SELECT language  FROM set_translations  JOIN sets ON sets.code = set_translations.setCode  WHERE sets.name = 'Battlebond'; 
SELECT      c.artist,     GROUP_CONCAT(DISTINCT l.format) AS formats FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.artist IN (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY      c.artist; 
SELECT cards.name, legalities.format, cards.hasContentWarning FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND (cards.hasContentWarning = 1 OR legalities.format = 'Wizards of the Coast'); 
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned'; 
SELECT      COUNT(*) / (SELECT COUNT(DISTINCT YEAR(releaseDate)) FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') AS annualAverageSets,     (SELECT MAX(COUNT(language)) FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') AS commonLanguage FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'; 
SELECT DISTINCT artist FROM cards WHERE `borderColor` = 'black' AND `availability` = 'arena'; 
SELECT l.uuid FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted'); 
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'; 
SELECT r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC; 
SELECT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal'; 
SELECT s.name FROM sets s WHERE NOT EXISTS (     SELECT 1     FROM set_translations st     WHERE st.language = 'Japanese' AND st.setCode = s.code ) AND EXISTS (     SELECT 1     FROM set_translations st     WHERE st.language = 'Korean' AND st.setCode = s.code ); 
SELECT c.frameVersion FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.name = 'Allen Williams' UNION SELECT frameVersion FROM cards WHERE artist = 'Allen Williams' UNION SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned'; 
SELECT      CASE          WHEN u1.Reputation > u2.Reputation THEN u1.DisplayName          WHEN u1.Reputation < u2.Reputation THEN u2.DisplayName          ELSE 'Equal Reputation'      END AS HigherReputationUser FROM      users u1  JOIN      users u2 ON u1.DisplayName = 'Harlan' AND u2.DisplayName = 'Jarrod Dixon' 
SELECT `DisplayName` FROM `users` WHERE YEAR(`CreationDate`) = 2014; 
SELECT COUNT(DISTINCT Id)  FROM users  WHERE LastAccessDate > '2014-09-01 00:00:00'; 
SELECT DisplayName  FROM users  WHERE Views = (SELECT MAX(Views) FROM users); 
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 1 AND v.PostId IS NOT NULL GROUP BY u.Id HAVING SUM(v.VoteTypeId = 1) > 100 AND SUM(v.VoteTypeId = -2) > 1; 
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u WHERE u.Views > 10 AND YEAR(u.CreationDate) > 2013; 
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT u.DisplayName AS OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Title FROM posts p WHERE p.OwnerDisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts); 
SELECT SUM(c.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' 
SELECT p.AnswerCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.AnswerCount DESC LIMIT 1; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' AND p.LastEditorUserId IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL; 
SELECT DISTINCT u.DisplayName  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.ClosedDate IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (     SELECT Id     FROM users     WHERE Age > 65 ) AND Score >= 20; 
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts' 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian'; 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.Id LIMIT 1; 
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011; 
SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id GROUP BY badges.UserId ORDER BY COUNT(badges.Id) DESC LIMIT 1; 
SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'; 
SELECT AVG(COUNT(b.Id) / COUNT(DISTINCT u.DisplayName)) AS avg_badges_per_user FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200; 
SELECT      (SELECT COUNT(*) FROM posts WHERE Score > 20 AND OwnerUserId IN (SELECT Id FROM users WHERE Age > 65)) /      (SELECT COUNT(*) FROM posts WHERE Score > 20) * 100 AS ElderUserOwnershipPercentage 
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND CreationDate = '2010-07-19'; 
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1; 
SELECT COUNT(`Id`)  FROM `badges`  WHERE `Name` = 'Revival'; 
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments); 
SELECT COUNT(c.Id) AS CommentCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount = 1910; 
SELECT SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS FavoriteCount FROM comments c JOIN votes v ON c.Id = v.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND c.CommentCount = 1; 
SELECT      p.Id AS PostId,     p.CreationDate,     p.LasActivityDate,     p.ClosedDate,     CASE          WHEN p.ClosedDate IS NULL THEN 'Not Well-Finished'         ELSE 'Well-Finished'     END AS PostStatus FROM      posts p JOIN      comments c ON p.Id = c.PostId JOIN      users u ON c.UserId = u.Id WHERE      c.CreationDate = '2013-07-12 09:08:18.0'     AND u.Id = 23853     AND p.ClosedDate IS NULL; 
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041; 
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'Tiago Pasqualini'; 
SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347; 
SELECT SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE -1 END) AS NetVotes FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data visualization%'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms' 
SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostsCount,     (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VotesCount,     (SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) FROM posts JOIN votes ON posts.OwnerUserId = 24 AND votes.UserId = 24) AS PostsToVotesRatio FROM      posts WHERE      OwnerUserId = 24; 
SELECT p.ViewCount FROM posts p WHERE p.OwnerDisplayName = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; 
SELECT `Text` FROM `comments` WHERE `Score` = 17; 
SELECT u.DisplayName FROM users u WHERE u.WebsiteUrl = 'http://stackoverflow.com'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost'; 
SELECT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93' AND u.DisplayName = 'user93'; 
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion'; 
SELECT      u.DisplayName,      u.Reputation  FROM      posts p  JOIN      users u ON p.OwnerUserId = u.Id  WHERE      p.Body LIKE '%Understanding what Dassault iSight is doing%' 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'; 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10; 
SELECT p.LastEditorUserId FROM posts p JOIN posts pp ON p.Id = pp.ParentId WHERE pp.Title = 'Open source tools for visualizing multi-dimensional data' 
SELECT p.Title FROM posts p WHERE p.LastEditorDisplayName = 'Vebjorn Ljosa'; 
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY p.LastEditorUserId; 
SELECT c.Text, c.CreationDate, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.OwnerDisplayName = 'Why square the difference instead of taking the absolute value in standard deviation?' AND c.UserId = p.LastEditorUserId; 
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%'; 
SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id JOIN posts p ON v.PostId = p.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%' 
SELECT AVG(p.ViewCount) AS AvgViewCount, p.Title, c.Text AS Comment, c.Score FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Tags LIKE '%humor%' GROUP BY p.Id, c.Id 
SELECT COUNT(`Id`) AS TotalComments FROM `comments` WHERE `UserId` = 13; 
SELECT `Id`  FROM `users`  ORDER BY `Reputation` DESC  LIMIT 1; 
SELECT `Id`, `Views` FROM `users` ORDER BY `Views` ASC LIMIT 1; 
SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Supporter' AND YEAR(b.Date) = 2011; 
SELECT COUNT(DISTINCT b.UserId) AS UsersWithMoreThan5Badges FROM badges b WHERE (SELECT COUNT(*) FROM badges WHERE UserId = b.UserId) > 5; 
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name IN ('Teacher', 'Supporter')  AND u.Location = 'New York'; 
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1; 
SELECT p.OwnerUserId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId GROUP BY p.Id, p.OwnerUserId HAVING COUNT(ph.Id) = 1 AND p.ViewCount >= 1000; 
SELECT u.DisplayName, u.Reputation, b.Name AS Badge FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId WHERE c.Id IN (     SELECT MAX(c2.Id)     FROM comments c2     GROUP BY c2.UserId ) GROUP BY u.Id, b.Name ORDER BY COUNT(c.Id) DESC; 
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name = 'Teacher' AND u.Location = 'India'; 
SELECT      ROUND(         (             (COUNT(CASE WHEN b.Date BETWEEN '2010-01-01' AND '2010-12-31' THEN b.Id END) -              (COUNT(CASE WHEN b.Date BETWEEN '2011-01-01' AND '2011-12-31' THEN b.Id END) *              (COUNT(CASE WHEN b.Date BETWEEN '2010-01-01' AND '2010-12-31' THEN b.Id END) /              COUNT(b.Id))) * 100         ) /          (             (COUNT(CASE WHEN b.Date BETWEEN '2010-01-01' AND '2010-12-31' THEN b.Id END) +              (COUNT(CASE WHEN b.Date BETWEEN '2011-01-01' AND '2011-12-31' THEN b.Id END) *              (COUNT(CASE WHEN b.Date BETWEEN '2010-01-01' AND '2010-12-31' THEN b.Id END) /              COUNT(b.Id)))         ), 2     ) AS PercentageDifference FROM badges b WHERE b.Name = 'Students' 
SELECT `PostHistoryTypeId` FROM `postHistory` WHERE `PostId` = 3720;  SELECT COUNT(DISTINCT `UserId`) FROM `comments` WHERE `PostId` = 3720; 
SELECT      p.Id AS PostId,      p.ViewCount AS Popularity FROM      posts p JOIN      postLinks pl ON p.Id = pl.PostId WHERE      pl.RelatedPostId = 61217; 
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395; 
SELECT p.Id, p.OwnerUserId FROM posts p WHERE p.Score > 60; 
SELECT SUM(p.FavoriteCount) AS TotalFavoriteCountGained FROM posts p WHERE p.OwnerUserId = 686 AND YEAR(p.CreationDate) = 2011; 
SELECT AVG(u.UpVotes) AS avg_up_votes, AVG(u.Age) AS avg_age FROM users u JOIN (     SELECT OwnerUserId     FROM posts     GROUP BY OwnerUserId     HAVING COUNT(*) > 10 ) p ON u.Id = p.OwnerUserId; 
SELECT COUNT(DISTINCT `UserId`)  FROM `badges`  WHERE `Name` = 'Announcer'; 
SELECT b.`Id`, b.`UserId`, b.`Name` FROM badges b JOIN `users` u ON b.`UserId` = u.`Id` WHERE b.CreationDate = '2010-07-19 19:39:08'; 
SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60; 
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'; 
SELECT COUNT(`posts.Id`) AS PostCountWithScore10 FROM `posts` WHERE `posts.Score` = 10; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT u.Id AS UserId, SUM(v.VoteValue) AS Reputation FROM users u JOIN badges b ON u.Id = b.UserId JOIN votes v ON u.Id = v.UserId WHERE b.CreationDate = '2010-07-19 19:39:08.0' GROUP BY u.Id; 
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'Pierre'; 
SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'; 
SELECT      (SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Teacher') /      (SELECT COUNT(DISTINCT `UserId`) FROM `badges`) * 100 AS PercentageOfUsersWithTeacherBadge 
SELECT      ROUND(         (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id END) * 100.0) / COUNT(DISTINCT b.UserId),         2     ) AS Teenager_Percentage FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer'; 
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0'; 
SELECT c.Text AS DetailedContent FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'; 
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'; 
SELECT COUNT(DISTINCT u.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65; 
SELECT COUNT(DISTINCT p.Id) AS ViewCount FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId WHERE b.Id = (SELECT Id FROM badges WHERE CreationDate = '2010-07-19 19:39:08.0') AND p.ViewCount IS NOT NULL; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users); 
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'Sharpie'; 
SELECT COUNT(DISTINCT b.UserId)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Supporter' AND u.Age > 65; 
SELECT `DisplayName` FROM `users` WHERE `Id` = 30; 
SELECT COUNT(*) FROM users WHERE Location = 'New York'; 
SELECT COUNT(*)  FROM votes  WHERE YEAR(CreationDate) = 2010; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT `users.DisplayName`, MAX(`users.Views`) as MaxViews FROM `users` GROUP BY `users.DisplayName` ORDER BY MaxViews DESC LIMIT 1; 
SELECT      DIVIDE(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 END), COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 END)) FROM votes; 
SELECT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer'; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo'); 
SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'Harlan'; 
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1; 
SELECT      (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky') AS HarveyMotulskyViewCount,     (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Noah Snyder') AS NoahSnyderViewCount,     CASE          WHEN (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky') >               (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Noah Snyder') THEN 'Harvey Motulsky'         ELSE 'Noah Snyder'     END AS MorePopularUser 
SELECT COUNT(p.Id)  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Id IN (     SELECT PostId      FROM votes     GROUP BY PostId      HAVING COUNT(*) > 4 ); 
SELECT COUNT(c.Id) AS NegativeCommentCount FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60; 
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.Id = p.Id JOIN posts user_posts ON p.Id = user_posts.Id JOIN users u ON user_posts.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0; 
SELECT DISTINCT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer'; 
SELECT      (COUNT(CASE WHEN p.Tags LIKE '%r%' THEN p.Id END) / COUNT(CASE WHEN u.DisplayName = 'Community' THEN p.Id END)) * 100 AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id 
SELECT      (SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) -       SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName IN ('Mornington', 'Amos') 
SELECT COUNT(DISTINCT `UserId`)  FROM `badges`  WHERE `Name` = 'commentator'  AND YEAR(`Date`) = 2014; 
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59'; 
SELECT u.DisplayName, u.Age FROM users u WHERE u.Id = (     SELECT MAX(u2.ViewCount)     FROM users u2 ); 
SELECT p.LastEditDate, p.LastEditorUserId FROM posts p WHERE p.Title = 'Detecting a given face in a database of facial images' ORDER BY p.LastEditDate DESC LIMIT 1; 
SELECT COUNT(*)  FROM comments  WHERE UserId = 13 AND Score < 60; 
SELECT      p.Title,      c.UserDisplayName FROM      comments c JOIN      posts p ON c.PostId = p.Id WHERE      c.Score > 60; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND YEAR(b.Date) = 2011; 
SELECT u.DisplayName, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount > 150; 
SELECT      COUNT(*) AS PostHistoryCount,     MAX(`CreationDate`) AS LastEditDate FROM      `postHistory` JOIN      `posts` ON `postHistory.PostId` = `posts.Id` WHERE      `posts.Title` = 'What is the best introductory Bayesian statistics textbook?'; 
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers' ORDER BY u.LastAccessDate DESC; 
SELECT p.Title AS RelatedPostTitle FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time' AND pl.RelatedPostId = p.Id; 
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN badges b ON b.UserId = p.OwnerUserId JOIN users u ON u.DisplayName = 'Samuel' AND YEAR(b.Date) = 2013 WHERE p.CreaionDate BETWEEN '2013-01-01' AND '2013-12-31' AND u.DisplayName = 'Samuel' AND YEAR(p.CreaionDate) = 2013; 
SELECT `OwnerDisplayName`  FROM `posts`  ORDER BY `ViewCount` DESC  LIMIT 1; 
SELECT u.DisplayName, u.Location FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN users u ON p.OwnerUserId = u.Id WHERE t.TagName = 'hypothesis-testing'; 
SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?'; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.Id = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND p.ParentId IS NOT NULL; 
SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1; 
SELECT p.Title, p.ViewCount FROM posts p ORDER BY p.ViewCount DESC LIMIT 5; 
SELECT COUNT(*) FROM tags JOIN posts ON tags.ExcerptPostId = posts.Id GROUP BY tags.Id HAVING COUNT(posts.Id) BETWEEN 5000 AND 7000; 
SELECT `OwnerUserId` FROM `posts` ORDER BY `FavoriteCount` DESC LIMIT 1; 
SELECT MAX(Reputation) AS MaxReputation, users.DisplayName, users.Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50; 
SELECT Id  FROM users  WHERE Age = (SELECT MIN(Age) FROM users); 
SELECT p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.Score DESC LIMIT 1; 
SELECT      COUNT(pl.Id) / 12 AS AverageMonthlyLinks FROM      postLinks pl JOIN      posts p ON pl.PostId = p.Id WHERE      YEAR(pl.CreationDate) = 2010     AND p.AnswerCount <= 2 GROUP BY      YEAR(pl.CreationDate); 
SELECT PostId FROM posts WHERE OwnerUserId = 1465 ORDER BY FavoriteCount DESC LIMIT 1; 
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks) 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.DisplayName ORDER BY COUNT(b.Name) DESC LIMIT 1; 
SELECT MIN(CreationDate)  FROM votes  WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'chl')  AND VoteTypeId IN (SELECT Id FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'chl'))) 
SELECT MIN(u.CreationDate)  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE u.Age = (SELECT MIN(Age) FROM users); 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1; 
SELECT COUNT(DISTINCT u.Id)  FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4; 
SELECT AVG(v.PostId)  FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users); 
SELECT `DisplayName` FROM `users` ORDER BY `Reputation` DESC LIMIT 1; 
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000; 
SELECT DISTINCT DisplayName FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND YEAR(CreationDate) = 2010; 
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.Id, p.Title FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts); 
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner'; 
SELECT DISTINCT p.OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011; 
SELECT p.Id, u.DisplayName AS OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT      (COUNT(CASE WHEN p.CreationDate BETWEEN '2011-01-01' AND '2011-12-31' THEN 1 END)       / COUNT(p.Id)) * 100 AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation > 1000; 
SELECT      ROUND((COUNT(CASE WHEN users.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(users.Id), 2) AS percentage_of_teens FROM      users; 
SELECT      p.ViewCount AS TotalViews,      u.DisplayName AS LastEditorDisplayName FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Title = 'Computer Game Datasets' 
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts); 
SELECT COUNT(c.Id) AS CommentCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts); 
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0; 
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1; 
SELECT Name  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett')  ORDER BY Date DESC  LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) AS AdultUsersWithOver5000Upvotes FROM users u WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000; 
SELECT     DATEDIFF(b.Date, u.CreationDate) AS TimeToGetBadge FROM     badges b JOIN     users u ON b.UserId = u.Id WHERE     u.DisplayName = 'Zolomon' 
SELECT      u.Id AS UserId,     (SELECT COUNT(*) FROM posts WHERE posts.OwnerUserId = u.Id) AS PostCount,     (SELECT COUNT(*) FROM comments WHERE comments.UserId = u.Id) AS CommentCount FROM      users u WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users); 
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1; 
SELECT COUNT(DISTINCT badges.UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Citizen Patrol'; 
SELECT COUNT(p.Id)  FROM posts p  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.TagName = 'careers'; 
SELECT `users.Reputation`, `posts.ViewCount` FROM `users` JOIN `posts` ON `users.Id` = `posts.OwnerUserId` WHERE `users.DisplayName` = 'Jarrod Dixon'; 
SELECT      (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) +      (SELECT COUNT(*) FROM posts WHERE Id = p.Id AND PostTypeId = 1) AS TotalCommentsAndAnswers FROM      posts p WHERE      p.Title = 'Clustering 1D data'; 
SELECT CreationDate  FROM users  WHERE DisplayName = 'IrishStat'; 
SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30; 
SELECT      (COUNT(CASE WHEN posts.Score >= 50 THEN posts.Id END) * 100.0) /      COUNT(posts.Id) AS PercentageOfHighScorePosts FROM      posts INNER JOIN      users ON posts.OwnerUserId = users.Id WHERE      users.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM posts WHERE Score < 20; 
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20; 
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'; 
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)' 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?'; 
SELECT c.Text, MAX(c.Score) as MaxScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 GROUP BY c.Id ORDER BY MaxScore DESC LIMIT 1; 
SELECT      c.CreationDate,      u.Age  FROM      comments c  JOIN      users u  ON      c.UserId = u.Id  WHERE      c.Text LIKE '%http://%' 
SELECT COUNT(DISTINCT p.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5; 
SELECT COUNT(*) FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.CommentCount = 1 AND c.Score = 0; 
SELECT COUNT(DISTINCT u.Id)  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE c.Score = 0 AND u.Age = 40; 
SELECT      p.Id AS PostId,      c.Text AS CommentText FROM      posts p JOIN      comments c ON p.Id = c.PostId WHERE      p.Title = 'Group differences on a five point Likert item'; 
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.' 
SELECT c.Text  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'Harvey Motulsky'; 
SELECT DISTINCT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0; 
SELECT      (COUNT(CASE WHEN u.UpVotes = 0 THEN u.Id END) / COUNT(CASE WHEN c.Score BETWEEN 5 AND 10 THEN c.UserId END)) * 100 AS percentage FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Score BETWEEN 5 AND 10; 
SELECT s.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower s ON hp.power_id = s.id WHERE su.superhero_name = '3-D Man'; 
SELECT COUNT(DISTINCT h.id)  FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength'; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200; 
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15; 
SELECT COUNT(DISTINCT s.id) AS num_superheroes_with_blue_eyes FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue'; 
SELECT c.colour  FROM superhero AS s JOIN colour AS c ON s.skin_colour_id = c.id  WHERE s.superhero_name = 'Apocalypse'; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  JOIN superpower sp ON s.id = hp.hero_id  JOIN hero_power hp ON hp.power_id = sp.id  WHERE c.attribute_name = 'Blue' AND sp.power_name = 'Agility'; 
SELECT s.superhero_name FROM superhero s JOIN colour eye_colour ON s.eye_colour_id = eye_colour.id AND eye_colour.colour = 'Blue' JOIN colour hair_colour ON s.hair_colour_id = hair_colour.id AND hair_colour.colour = 'Blond'; 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT superhero.full_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1; 
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.superhero_name = 'Sauron'; 
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'; 
SELECT AVG(height_cm) AS average_height FROM superhero WHERE publisher_id IN (     SELECT id     FROM publisher     WHERE publisher_name = 'Marvel Comics' ); 
SELECT      ROUND((SUM(CASE WHEN sp.power_name = 'Super Strength' THEN 1 ELSE 0 END) / COUNT(s.id)) * 100, 2) AS percentage_super_strength FROM      superhero s JOIN      hero_power hp ON s.id = hp.hero_id JOIN      superpower sp ON hp.power_id = sp.id WHERE      s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'); 
SELECT p.publisher_name, MIN(ha.attribute_value) AS slowest_speed FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' GROUP BY p.publisher_name ORDER BY slowest_speed DESC LIMIT 1; 
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics'; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Blue Beetle II'; 
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'; 
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1; 
SELECT `race`.`race` FROM `superhero` JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`superhero_name` = 'Copycat'; 
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch'; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN gender g ON s.gender_id = g.id WHERE g.gender_name = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100; 
SELECT superhero_name  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  GROUP BY superhero_name  ORDER BY COUNT(power_id) DESC  LIMIT 1; 
SELECT COUNT(*)  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE `race` = 'Vampire'); 
SELECT      ROUND((SUM(CASE WHEN a.alignment_id = 2 THEN 1 ELSE 0 END) / COUNT(s.id)) * 100, 2) AS percentage_bad_alignment,     COUNT(CASE WHEN s.publisher_id = 1 THEN 1 END) AS count_marvel_comics_bad_heroes FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id WHERE      a.alignment_name = 'Bad' 
SELECT      SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) -      SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS diff_in_heroes FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id 
SELECT `publisher_id`  FROM `publisher`  WHERE `publisher_name` = 'Star Trek'; 
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute; 
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL; 
SELECT c.colour  FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = 75; 
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.superhero_name = 'Deathlok'; 
SELECT AVG(weight_kg)  FROM superhero  WHERE gender_id = 2; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 5; 
SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien'); 
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL; 
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.id = 56; 
SELECT `superhero.full_name` FROM `superhero` WHERE `superhero.race_id` = (SELECT `race.id` FROM `race` WHERE `race_name` = 'Demi-God') LIMIT 5; 
SELECT COUNT(*)  FROM superhero  WHERE alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad'); 
SELECT `race`.`id` AS `race_id`, `race`.`race_name` FROM `superhero` JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`weight_kg` = 169; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.hair_colour_id = c.id JOIN race AS r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human'; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero); 
SELECT      ROUND(         (SUM(CASE WHEN s.publisher_id = 13 THEN 1 ELSE 0 END) * 100.0) / COUNT(*),         2     ) AS percentage_marvel_heroes FROM superhero s WHERE s.height_cm BETWEEN 150 AND 180; 
SELECT superhero.full_name FROM superhero WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender_name = 'Male') AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) 
SELECT sp.power_name, COUNT(hp.power_id) AS power_count FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1; 
SELECT ha.attribute_value FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination'; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.id = 1; 
SELECT COUNT(DISTINCT hero_id)  FROM hero_power  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'stealth'; 
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' AND ha.attribute_value = (     SELECT MAX(ha2.attribute_value)     FROM hero_attribute ha2     JOIN attribute a2 ON ha2.attribute_id = a2.id     WHERE a2.attribute_name = 'strength' ) 
SELECT AVG(COUNT(s.superhero_id)) / SUM(CASE WHEN c.id = 1 THEN 1 ELSE 0 END) AS average FROM superhero s LEFT JOIN colour c ON s.skin_colour_id = c.id; 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics'); 
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1; 
SELECT c.colour  FROM superhero AS s  JOIN colour AS c ON s.eye_colour_id = c.id  WHERE s.full_name = 'Abraham Sapien'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight'; 
SELECT      s.full_name,      c_e.colour_name AS eye_colour,      c_h.colour_name AS hair_colour,      c_s.colour_name AS skin_colour FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id JOIN      colour c_e ON s.eye_colour_id = c_e.id JOIN      colour c_h ON s.hair_colour_id = c_h.id JOIN      colour c_s ON s.skin_colour_id = c_s.id WHERE      g.gender_name = 'Female' AND      p.publisher_name = 'Dark Horse Comics'; 
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN colour c_eyes ON s.eye_colour_id = c_eyes.id JOIN colour c_hair ON s.hair_colour_id = c_hair.id JOIN colour c_skin ON s.skin_colour_id = c_skin.id JOIN publisher p ON s.publisher_id = p.id WHERE c_eyes.colour = c_hair.colour AND c_hair.colour = c_skin.colour; 
SELECT race.race_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'; 
SELECT      (COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) * 100.0) / COUNT(*) AS percentage_blue_female FROM      superhero s JOIN      colour c ON s.eye_colour_id = c.id OR s.hair_colour_id = c.id OR s.skin_colour_id = c.id WHERE      s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') 
SELECT s.superhero_name, r.race_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler'; 
SELECT g.gender_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE s.superhero_name = 'Agent 13'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation'; 
SELECT COUNT(*)  FROM superhero sp  JOIN hero_power hp ON sp.id = hp.hero_id  WHERE sp.superhero_name = 'Amazo'; 
SELECT sp.power_name FROM superhero AS sz JOIN hero_power AS hp ON sz.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sz.full_name = 'Hunter Zolomon'; 
SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'; 
SELECT superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black'; 
SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE c.colour = 'Gold' JOIN colour ec ON s.eye_colour_id = ec.id; 
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire'; 
SELECT superhero_name FROM superhero WHERE alignment_id IN (     SELECT id     FROM alignment     WHERE alignment = 'Neutral' ); 
SELECT COUNT(DISTINCT h.id)  FROM superhero h  JOIN hero_attribute ha ON h.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name = 'Strength'  AND ha.attribute_value = (SELECT MAX(attribute_value)                             FROM hero_attribute ha2                             JOIN attribute a2 ON ha2.attribute_id = a2.id                             WHERE a2.attribute_name = 'Strength'); 
SELECT r.race_name, a.alignment_name FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = g.id THEN 1 ELSE 0 END) * 100.0) /          SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END),         2     ) AS percentage_female_heroes_published_by_marvel FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND g.attribute_name = 'Female' 
SELECT AVG(`superhero`.`weight_kg`) AS `average_weight` FROM `superhero` JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`id` = (SELECT `id` FROM `race` WHERE `race` = 'Alien'); 
SELECT      (SUM(CASE WHEN s.full_name = 'Emil Blonsky' THEN s.weight_kg ELSE 0 END) -      SUM(CASE WHEN s.full_name = 'Charles Chandler' THEN s.weight_kg ELSE 0 END)) AS weight_difference FROM superhero s; 
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name; 
SELECT sp.power_name FROM superhero AS sup JOIN hero_power AS hp ON sup.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sup.superhero_name = 'Abomination'; 
SELECT COUNT(*)  FROM superhero  WHERE race_id = 21 AND gender_id = 1; 
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1; 
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3; 
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man'; 
SELECT s.superhero_name FROM superhero s JOIN colour eye_colour ON s.eye_colour_id = eye_colour.id JOIN colour hair_colour ON s.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'brown'; 
SELECT publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'); 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IS NULL OR publisher_id != 1; 
SELECT      ROUND((SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id), 2) AS percentage_blue_eyed_heroes FROM superhero s; 
SELECT      (SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0)) AS male_female_ratio FROM superhero; 
SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero WHERE height_cm IS NOT NULL ORDER BY tallest_height DESC LIMIT 1; 
SELECT id FROM superpower WHERE power_name = 'cryokinesis'; 
SELECT superhero_name  FROM superhero  WHERE id = 294; 
SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL; 
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan'; 
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.full_name = 'Helen Parr'; 
SELECT race_id  FROM superhero  WHERE weight_kg = 108 AND height_cm = 188; 
SELECT p.publisher_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.id = 38; 
SELECT s.race_id FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = (     SELECT MAX(attribute_value)     FROM hero_attribute ) 
SELECT a.alignment_name, sp.power_name FROM superhero AS sh JOIN alignment AS a ON sh.alignment_id = a.id JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Atom IV'; 
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5; 
SELECT AVG(ha.attribute_value)  FROM hero_attribute ha  JOIN superhero s ON ha.hero_id = s.id  WHERE s.alignment_id = 3; 
SELECT      s.full_name,     c.colour AS skin_colour FROM      superhero s JOIN      colour c ON s.skin_colour_id = c.id JOIN      hero_attribute ha ON s.id = ha.hero_id JOIN      attribute a ON ha.attribute_id = a.id WHERE      ha.attribute_value = 100; 
SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND alignment_id = 1; 
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_id WHERE attribute_value BETWEEN 75 AND 80; 
SELECT s.full_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE c.colour = 'blue' AND g.gender = 'male'; 
SELECT      MULTIPLY(         DIVIDE(             SUM(CASE WHEN a.gender_id = 2 THEN 1 ELSE 0 END),             SUM(CASE WHEN a.alignment_id = 2 THEN 1 ELSE 0 END)         ),         100.0     ) AS percentage_female_bad_heroes FROM      superhero a; 
SELECT      (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7 AND weight_kg IS NULL OR weight_kg = 0) -      (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 1 AND weight_kg IS NULL OR weight_kg = 0) AS blue_eyes_minus_no_eye_color_difference FROM superhero; 
SELECT attribute_value  FROM hero_attribute  INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'Strength'  AND hero_attribute.hero_id IN (     SELECT id      FROM superhero      WHERE superhero_name = 'Hulk' ); 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Ajax'; 
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad'; 
SELECT COUNT(*)  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')  AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC; 
SELECT s.gender_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force'; 
SELECT superhero_name, MAX(weight_kg) as max_weight FROM superhero WHERE publisher_name = 'DC Comics' GROUP BY superhero_name ORDER BY max_weight DESC LIMIT 1; 
SELECT AVG(superhero.height_cm)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.race_id <> (SELECT id FROM race WHERE race_name = 'Human')  AND publisher.publisher_name = 'Dark Horse Comics'; 
SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100 ORDER BY s.id LIMIT 1; 
SELECT      (SELECT COUNT(*)       FROM superhero       WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) -       (SELECT COUNT(*)        FROM superhero        WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference 
SELECT a.attribute_name FROM attribute a JOIN hero_attribute ha ON a.id = ha.attribute_id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Abomination'; 
SELECT superhero_name, full_name, height_cm  FROM superhero  WHERE height_cm = (SELECT MAX(height_cm) FROM superhero); 
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender_name = 'Female')                    AND p.publisher_name = 'George Lucas' THEN 1 ELSE 0 END)          / COUNT(*)) * 100, 2) AS percentage_female_superheroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id; 
SELECT      ROUND(         (SUM(CASE WHEN s.alignment_id = a.id THEN 1 ELSE 0 END) * 100.0) / COUNT(*),         2     ) AS good_superhero_percentage FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id WHERE      s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND      a.attribute_name = 'Good'; 
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'; 
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute) GROUP BY hero_id ORDER BY hero_id LIMIT 1; 
SELECT `superhero`.`full_name` FROM `superhero` WHERE `superhero_name` = 'Alien'; 
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.attribute_name = 'Brown'; 
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy'; 
SELECT `weight_kg`, `race_id` FROM `superhero` WHERE `id` = 40; 
SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral'); 
SELECT hero_id  FROM hero_power  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Intelligence'; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Blackwulf'; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero); 
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 18 AND q.q1 = (     SELECT MAX(q1)     FROM qualifying     WHERE raceId = 18     GROUP BY raceId     ORDER BY MAX(q1) DESC     LIMIT 5 ); 
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19) 
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Shanghai'; 
SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya'; 
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Germany'; 
SELECT c.name, c.positionText FROM circuits c JOIN constructorStandings cs ON c.circuitId = cs.circuitId JOIN constructors co ON cs.constructorId = co.constructorId WHERE co.name = 'Renault'; 
SELECT COUNT(r.raceId)  FROM races AS r  JOIN circuits AS c ON r.circuitId = c.circuitId  WHERE r.year = 2010  AND c.location NOT IN ('Asia', 'Europe'); 
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Australian Grand Prix'; 
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit'; 
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit' AND MONTH(r.date) = 9 AND DAY(r.date) = 23; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Abu Dhabi Grand Prix'; 
SELECT c.name, c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE cr.points = 1.0 AND r.raceId = 24; 
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Bruno Senna') AND raceId = 354; 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:40' AND q.qualifyId = 355; 
SELECT q.number FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.q3 = '0:01:54' AND q.raceId = (SELECT raceId FROM races WHERE raceId = 903); 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.statusId NOT IN (SELECT statusId FROM status WHERE name = 'Finished' OR name = 'Completed') 
SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT r.driverId)  FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished'); 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1; 
SELECT d.driverRef, d.url FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = 8727 AND lt.raceId = 161; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN (     SELECT raceId, MAX(fastestLapSpeed) AS max_speed     FROM results     WHERE raceId = 933     GROUP BY raceId ) AS max_speed_race ON r.raceId = max_speed_race.raceId AND r.fastestLapSpeed = max_speed_race.max_speed WHERE r.resultId = (     SELECT resultId     FROM results     WHERE raceId = 933     ORDER BY fastestLapSpeed DESC     LIMIT 1 ); 
SELECT `name`, `lat`, `lng` FROM `circuits` WHERE `name` = 'Malaysian Grand Prix'; 
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.raceId = 9 AND cs.points = (SELECT MAX(points) FROM constructorStandings WHERE raceId = 9) 
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lucas di Grassi') AND raceId = (SELECT raceId FROM races WHERE raceId = 345); 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE q.q2 = '0:01:15' AND r.raceId = 347; 
SELECT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q3 = '0:01:33' AND qualifying.raceId = (SELECT raceId FROM races WHERE raceId = 45); 
SELECT      r.time  FROM      races r  JOIN      results rs ON r.raceId = rs.raceId  JOIN      drivers d ON rs.driverId = d.driverId  WHERE      d.surname = 'McLaren' AND      d.forename = 'Bruce' AND      r.raceId = 743; 
SELECT      d.driverRef,      d.surname,      d.forename FROM      results AS r JOIN      drivers AS d ON r.driverId = d.driverId JOIN      races AS ra ON r.raceId = ra.raceId WHERE      ra.name = 'San Marino Grand Prix'      AND ra.year = 2006      AND r.position = 2 ORDER BY      r.positionOrder LIMIT      1; 
SELECT s.year FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT r.driverId) AS finished_drivers_count FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2015 AND ra.url = '2015-11-29' AND r.statusId NOT IN (SELECT statusId FROM status WHERE statusId NOT IN ('Retired', 'Did Not Start', 'Did Not Qualify')); 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE raceId = 872 AND position IS NOT NULL) ORDER BY d.dob ASC LIMIT 1; 
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348); 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN (     SELECT driverId, MAX(fastestLapSpeed) AS max_speed     FROM results     WHERE fastestLap IS NOT NULL     GROUP BY driverId ) AS fastest ON d.driverId = fastest.driverId WHERE fastest.max_speed = r.fastestLapSpeed; 
SELECT      (SUBTRACT(         (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE name = 'Fastest Lap'),         (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND statusId = (SELECT statusId FROM status WHERE name = 'Fastest Lap')     ) / (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE name = 'Fastest Lap')     ) * 100 AS percentage_difference FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta') AND raceId IN (853, 854) 
SELECT      (COUNT(CASE WHEN results.time IS NOT NULL THEN results.driverId END) * 100.0) /      COUNT(results.driverId) AS completionRate FROM      results JOIN      races ON results.raceId = races.raceId WHERE      races.date = '1983-07-16'; 
SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE name = 'Singapore Grand Prix'; 
SELECT COUNT(*) AS TotalRaces, r.name AS RaceName FROM races r WHERE r.year = 2005 GROUP BY r.name ORDER BY r.name DESC; 
SELECT r.name, r.date FROM races r WHERE MONTH(r.date) = MONTH((SELECT MIN(date) FROM races))   AND YEAR(r.date) = YEAR((SELECT MIN(date) FROM races)) ORDER BY r.date; 
SELECT r.name, r.date FROM races r JOIN (     SELECT MAX(round) AS max_round     FROM races     WHERE year = 1999 ) AS max_rounds ON r.round = max_rounds.max_round AND r.year = 1999; 
SELECT `year`, COUNT(`year`) AS `race_count` FROM `races` GROUP BY `year` ORDER BY `race_count` DESC LIMIT 1; 
SELECT DISTINCT r.name FROM races r WHERE r.year = 2017 AND r.circuitId NOT IN (     SELECT c.circuitId     FROM circuits c     JOIN races r2 ON c.circuitId = r2.circuitId     WHERE r2.year = 2000 ); 
SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = (SELECT MIN(year) FROM seasons WHERE name LIKE 'European Grand Prix') AND c.country = 'Europe'; 
SELECT MAX(r.year) AS last_season FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'United Kingdom' AND c.name = 'Brands Hatch'; 
SELECT COUNT(DISTINCT r.year) AS seasons_hosted FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'United Kingdom' AND r.name = 'British Grand Prix'; 
SELECT d.driverRef, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position; 
SELECT d.forename, d.surname, MAX(r.points) as max_points FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY max_points DESC LIMIT 1; 
SELECT d.driverId, d.name, SUM(rs.points) AS total_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId JOIN seasons s ON r.year = s.year JOIN results rs ON d.driverId = rs.driverId AND ds.raceId = rs.raceId WHERE s.year = 2017 AND r.raceId = (     SELECT raceId     FROM races     WHERE year = 2017 AND circuitId = (         SELECT circuitId         FROM circuits         WHERE name = 'Chinese Grand Prix'     ) ) GROUP BY d.driverId, d.name ORDER BY total_points DESC LIMIT 3; 
SELECT d.driverRef, d.surname, r.name AS raceName, lt.time AS bestLapTime FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (     SELECT MIN(milliseconds)     FROM lapTimes ) ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT AVG(T3.milliseconds) as averageLapTime FROM `races` AS T1 JOIN `results` AS T2 ON T1.raceId = T2.raceId JOIN `lapTimes` AS T3 ON T2.driverId = T3.driverId AND T1.raceId = T3.raceId JOIN `drivers` AS T4 ON T2.driverId = T4.driverId WHERE T4.forename = 'Sebastian' AND T1.year = 2009 AND T1.name = 'Chinese Grand Prix'; 
SELECT     (COUNT(CASE WHEN d.surname = 'Hamilton' THEN r.raceId END AND r.position > 1) * 100.0) /      COUNT(CASE WHEN d.surname = 'Hamilton' THEN r.raceId END) AS percentage FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.surname = 'Hamilton' AND r.year >= 2010; 
SELECT d.forename, d.surname, d.nationality, AVG(rs.points) AS avg_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN results r ON ds.driverId = r.driverId WHERE ds.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY d.driverId ORDER BY d.driverId LIMIT 1; 
SELECT d.forename, d.surname, 2022 - STRFTIME('%Y', d.dob) + 1 AS age FROM drivers d WHERE d.nationality = 'Japanese' ORDER BY d.dob DESC LIMIT 1; 
SELECT c.circuitId, c.country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId, c.country HAVING COUNT(r.raceId) = 4; 
SELECT c.name AS circuit_name, c.location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006; 
SELECT r.name AS raceName, c.name AS circuitName, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE MONTH(r.date) = 9 AND YEAR(r.date) = 2005; 
SELECT r.name AS raceName FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.driverRef = 'Alex Yoong' AND res.position < 10; 
SELECT COUNT(DISTINCT r.raceId) FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.surname = 'Schumacher' AND r.name = 'Sepang International Circuit' AND ds.wins = 1; 
SELECT r.name AS race, r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE d.driverRef = 'Michael Schumacher' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT AVG(points) AS average_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Irvine' AND YEAR(races.year) = 2000 
SELECT      r.name AS RaceName,     res.points FROM      results AS res JOIN      drivers AS drv ON res.driverId = drv.driverId JOIN      races AS r ON res.raceId = r.raceId WHERE      drv.surname = 'Hamilton' AND     res.points IS NOT NULL ORDER BY      r.year LIMIT 1; 
SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date; 
SELECT      r.name AS RaceName,     s.year AS RaceYear,     c.location AS CircuitLocation,     MAX(res.laps) AS MostLaps FROM      results res JOIN      races r ON res.raceId = r.raceId JOIN      circuits c ON r.circuitId = c.circuitId GROUP BY      r.raceId, r.name, s.year, c.location ORDER BY      MostLaps DESC LIMIT 1; 
SELECT      (COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0) / COUNT(c.circuitId) AS percentage_of_german_european_grand_prix FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId WHERE      r.name = 'European Grand Prix' AND      c.country = 'Germany'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Silverstone Circuit'; 
SELECT      c1.location AS circuit,     MAX(c1.latitude) AS max_latitude FROM      circuits c1 WHERE      c1.location IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') GROUP BY      c1.location ORDER BY      max_latitude DESC LIMIT 1; 
SELECT `circuitRef`  FROM `circuits`  WHERE `name` = 'Marina Bay Street Circuit'; 
SELECT `country` FROM `circuits` WHERE `alt` = (SELECT MAX(`alt`) FROM `circuits`); 
SELECT COUNT(*) FROM drivers WHERE code IS NULL; 
SELECT d.nationality FROM drivers d WHERE d.dob = (SELECT MIN(dob) FROM drivers) 
SELECT d.surname FROM drivers d JOIN constructors c ON d.constructorId = c.constructorId WHERE c.nationality = 'italian'; 
SELECT url  FROM drivers  WHERE driverRef = 'Anthony Davidson'; 
SELECT driverRef  FROM drivers  WHERE surnames = 'Hamilton' AND forename = 'Lewis'; 
SELECT `circuit` FROM `circuits` JOIN `races` ON `circuits.circuitId` = `races.circuitId` WHERE `races.year` = 2009 AND `races.name` = 'Spanish Grand Prix'; 
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'United Kingdom' AND c.name = 'Silverstone Circuit'; 
SELECT      r.raceId,     r.year,     r.round,     r.name AS raceName,     c.name AS circuitName,     c.url AS circuitUrl FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      c.name = 'Silverstone Circuit'; 
SELECT r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year BETWEEN 2010 AND 2019 AND c.country = 'Abu Dhabi' 
SELECT COUNT(DISTINCT r.raceId) AS total_races FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy'; 
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Barcelona-Catalunya'; 
SELECT url FROM circuits WHERE name = 'Spanish Grand Prix' AND year = 2009; 
SELECT MIN(fastestLapTime) AS fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton') 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races ra ON r.raceId = ra.raceId WHERE lt.time = (     SELECT MIN(time) FROM lapTimes ) 
SELECT d.driverRef FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1; 
SELECT DISTINCT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis'; 
SELECT r.name AS race_name, MIN(r.rank) AS highest_rank FROM results AS res JOIN drivers AS dr ON res.driverId = dr.driverId JOIN races AS r ON res.raceId = r.raceId WHERE dr.forename = 'Lewis' AND dr.surname = 'Hamilton' GROUP BY r.raceId, r.name ORDER BY highest_rank DESC LIMIT 1; 
SELECT MAX(`fastestLapSpeed`) AS fastest_lap_speed FROM `results` WHERE `raceId` IN (     SELECT `raceId`     FROM `races`     WHERE `name` = 'Spanish Grand Prix' AND `year` = 2009 ); 
SELECT DISTINCT r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.driverRef = 'HamiltonLewis'; 
SELECT r.rank FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.driverRef = 'Lewis Hamilton' AND r.raceId IN (     SELECT raceId     FROM races     WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND r.positionOrder = (     SELECT MAX(positionOrder)     FROM results     WHERE raceId = r.raceId AND driverId = r.driverId ); 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.grid = 4 AND ra.year = 2008 AND ra.name = 'Australian Grand Prix'; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL; 
SELECT lap.lap, lap.time FROM lapTimes lap JOIN drivers driv ON lap.driverId = driv.driverId JOIN races r ON lap.raceId = r.raceId WHERE driv.driverRef = 'Lewis Hamilton' AND r.year = 2008 AND r.raceId = (     SELECT r2.raceId     FROM races r2     JOIN circuits c ON r2.circuitId = c.circuitId     WHERE c.name = 'Australian Grand Prix' ) ORDER BY lap.time ASC LIMIT 1; 
SELECT r.time  FROM races r  JOIN results rs ON r.raceId = rs.raceId  JOIN drivers d ON rs.driverId = d.driverId  WHERE r.year = 2008  AND r.name = 'Australian Grand Prix'  AND rs.positionOrder = 2; 
SELECT d.driverRef, d.url FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE s.year = 2008 AND r.name = 'Australian Grand Prix' AND ds.position = 1 AND ds.positionText = '1' AND ds.status NOT LIKE '%DNF%' AND ds.status NOT LIKE '%Ret%' AND ds.status NOT LIKE '%Not Classified%' AND ds.status NOT LIKE '%Retired%' AND r.time IS NOT NULL AND r.time LIKE '%:%%' ORDER BY ds.position ASC LIMIT 1; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE d.nationality = 'American' AND r.name = 'Australian Grand Prix' AND r.year = 2008; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.position IS NOT NULL; 
SELECT SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'; 
SELECT AVG(TIMESTAMPDIFF(SECOND, '00:00:00', REPLACE(REPLACE(REPLACE(fastestLapTime, 'M', ''), 'S', ''), 'm', ''))) AS avgFastestLapTimeInSeconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'; 
SELECT      (COUNT(CASE WHEN r.position IS NOT NULL THEN r.raceId END) * 1.0) / COUNT(r.raceId) AS completionRate FROM      results r JOIN      races r2 ON r.raceId = r2.raceId WHERE      r2.year = 2008 AND r2.name = 'Australian Grand Prix'; 
SELECT      (TIMESTAMPDIFF(SECOND,          SUBSTR(MAX(LEAST(time, '23:59:59.999')), 1, 8),          SUBSTR(MAX(LEAST(time, '23:59:59.999')), 10, 12) +          SUBSTR(MAX(LEAST(time, '23:59:59.999')), 13, 14) +          SUBSTR(MAX(LEAST(time, '23:59:59.999')), 16, 17) / 1000) /      TIMESTAMPDIFF(SECOND,          SUBSTR(MAX(CASE WHEN position = 1 THEN time ELSE NULL END), 1, 8),          SUBSTR(MAX(CASE WHEN position = 1 THEN time ELSE NULL END), 10, 12) +          SUBSTR(MAX(CASE WHEN position = 1 THEN time ELSE NULL END), 13, 14) +          SUBSTR(MAX(CASE WHEN position = 1 THEN time ELSE NULL END), 16, 17) / 1000) * 100 AS percentage_faster FROM      results JOIN      races ON results.raceId = races.raceId WHERE      races.year = 2008 AND      races.name = 'Australian Grand Prix' AND      results.statusId = 1 AND      results.position IS NOT NULL GROUP BY      results.driverId HAVING      position = 1 OR      position = (SELECT MAX(position) FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.statusId = 1 AND results.position IS NOT NULL) 
SELECT COUNT(*)  FROM circuits  WHERE country = 'Australia' AND location = 'Melbourne'; 
SELECT `circuitRef`, `name`, `lat`, `country` FROM `circuits` WHERE `country` = 'USA'; 
SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND dob > '1980-01-01'; 
SELECT AVG(c.points) AS average_points FROM constructors AS c JOIN constructorStandings AS cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'British'; 
SELECT      c.name AS ConstructorName,      SUM(cr.points) AS TotalPoints FROM      constructors c JOIN      constructorResults cr ON c.constructorId = cr.constructorId GROUP BY      c.constructorId ORDER BY      TotalPoints DESC LIMIT 1; 
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE cs.points = 0 AND r.raceId = 291; 
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points = 0 GROUP BY c.constructorId HAVING COUNT(DISTINCT cs.raceId) = 2; 
SELECT c.constructorId, c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1; 
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE c.nationality = 'France' AND EXISTS (     SELECT 1     FROM lapTimes lt     WHERE lt.driverId IN (         SELECT driverId         FROM drivers         WHERE constructorId = c.constructorId     ) AND lt.lap > 50 ); 
SELECT      (COUNT(CASE WHEN d.nationality = 'Japanese' AND r.year BETWEEN 2007 AND 2009 AND r.time IS NOT NULL THEN d.driverId END) * 100.0) /      COUNT(CASE WHEN d.nationality = 'Japanese' AND r.year BETWEEN 2007 AND 2009 THEN d.driverId END) AS completion_percentage FROM      drivers d JOIN      results r ON d.driverId = r.driverId; 
SELECT      r.year,      AVG(UNIX_TIMESTAMP(SUBSTR(r.time, 1, 2), 'HH:MM:SS') * 3600 + UNIX_TIMESTAMP(SUBSTR(r.time, 4, 2), 'HH:MM:SS') * 60 + UNIX_TIMESTAMP(SUBSTR(r.time, 7, 2), 'HH:MM:SS') + UNIX_TIMESTAMP(SUBSTR(r.time, 10, 3), 'SSS') / 1000) AS average_time_seconds FROM      results r JOIN      constructorStandings cs ON r.constructorId = cs.constructorId AND r.raceId = cs.raceId WHERE      cs.position = 1 AND cs.status = 'Finished' GROUP BY      r.year; 
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob > '1975-01-01' AND ds.position = 2; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d  JOIN driverStandings ds ON d.driverId = ds.driverId  JOIN constructors c ON ds.constructorId = c.constructorId  WHERE d.nationality = 'Italian'  AND ds.points IS NULL; 
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (     SELECT MIN(time)     FROM lapTimes ); 
SELECT MIN(lap) AS fastestLapNumber FROM lapTimes WHERE raceId IN (     SELECT raceId     FROM results     WHERE year = 2009 AND position = 1 ) ORDER BY milliseconds ASC LIMIT 1; 
SELECT AVG(`fastestLapSpeed`) AS averageFastestLapSpeed FROM `results` JOIN `races` ON `results.raceId` = `races.raceId` WHERE `races.name` = 'Spanish Grand Prix' AND `races.year` = 2009; 
SELECT r.name, r.year FROM races r JOIN (     SELECT raceId, MIN(milliseconds) AS MinMilliseconds     FROM results     WHERE milliseconds IS NOT NULL     GROUP BY raceId ) AS min_milliseconds ON r.raceId = min_milliseconds.raceId ORDER BY min_milliseconds.MinMilliseconds ASC LIMIT 1; 
SELECT      (COUNT(CASE WHEN d.dob < '1985-01-01' THEN d.driverId END) * 100.0) /      COUNT(d.driverId) AS percentage FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year BETWEEN 2000 AND 2005     AND d.dob < '1985-01-01'     AND r.laps > 50; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.forename LIKE '%France%' AND lt.milliseconds < 120; 
SELECT d.code  FROM drivers d  WHERE d.nationality = 'America'; 
SELECT raceId  FROM races  WHERE year = 2009; 
SELECT COUNT(DISTINCT driverId) AS numberOfDrivers FROM results WHERE raceId = 18; 
SELECT d.driverId, d.forename, d.surname, MIN(YEAR(d.dob)) AS min_dob FROM drivers d WHERE d.nationality = 'Dutch' GROUP BY d.driverId, d.forename, d.surname ORDER BY min_dob ASC LIMIT 3; 
SELECT `drivers.driverRef` FROM `drivers` WHERE `drivers.forename` = 'Robert' AND `drivers.surname` = 'Kubica'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australia' AND dob LIKE '1980%'; 
SELECT      d.driverRef,      d.forename,      d.surname,      MIN(lt.milliseconds) AS EarliestLapTime FROM      drivers d JOIN      lapTimes lt ON d.driverId = lt.driverId WHERE      d.nationality = 'German'      AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY      d.driverId ORDER BY      EarliestLapTime ASC LIMIT 3; 
SELECT d.driverRef FROM drivers d JOIN (     SELECT MIN(YEAR(dob)) AS min_dob     FROM drivers     WHERE nationality = 'German' ) AS oldest_german ON d.nationality = 'German' AND d.dob = oldest_german.min_dob; 
SELECT d.driverId, d.code FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.dob BETWEEN '1971-01-01' AND '1971-12-31' AND lt.fastestLapTime IS NOT NULL GROUP BY d.driverId, d.code HAVING MAX(lt.milliseconds) = lt.milliseconds; 
SELECT d.driverId, d.driverRef, d.forename, d.surname, d.nationality, lt.milliseconds FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01' ORDER BY lt.milliseconds DESC LIMIT 10; 
SELECT races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLap IS NOT NULL ORDER BY STR_TO_DATE(results.fastestLapTime, '%H:%i:%s') ASC LIMIT 1; 
SELECT r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.milliseconds = (SELECT MAX(lt.milliseconds) FROM lapTimes lt) GROUP BY r.year ORDER BY r.year; 
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5; 
SELECT COUNT(DISTINCT r.resultId) FROM results r JOIN status s ON r.statusId = s.statusId WHERE r.raceId BETWEEN 50 AND 100 AND s.status = 'Disqualified' AND r.time IS NULL; 
SELECT COUNT(DISTINCT circuitId), c.name, c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria' GROUP BY c.circuitId, c.name, c.lat, c.lng; 
SELECT      r.round,      COUNT(DISTINCT r.raceId) AS finishers_count FROM      races r JOIN      results rs ON r.raceId = rs.raceId WHERE      rs.time IS NOT NULL GROUP BY      r.round ORDER BY      finishers_count DESC LIMIT 1; 
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23; 
SELECT      r.year,     r.name,     r.date,     r.time FROM      races r JOIN      qualifying q ON r.raceId = q.raceId JOIN      drivers d ON q.driverId = d.driverId WHERE      d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY      r.year ASC LIMIT 1; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.statusId = 2; 
SELECT c.name, c.url  FROM constructors c  JOIN constructorStandings cs ON c.constructorId = cs.constructorId  JOIN seasons s ON cs.raceId IN (SELECT raceId FROM races WHERE year = (SELECT MAX(year) FROM seasons))  WHERE c.nationality = 'Italian'  ORDER BY cs.points DESC  LIMIT 1; 
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN (     SELECT constructorId, SUM(wins) AS total_wins     FROM constructorStandings     GROUP BY constructorId     ORDER BY total_wins DESC     LIMIT 1 ) AS topConstructor ON c.constructorId = topConstructor.constructorId; 
SELECT d.driverRef, d.surname, lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.time DESC LIMIT 1; 
SELECT r.name, r.circuitId, MIN(lt.milliseconds) as fastestLapTime FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.lap = 1 GROUP BY r.raceId ORDER BY fastestLapTime ASC LIMIT 1; 
SELECT AVG(lapTime.milliseconds) AS averageFastestLapTime FROM (     SELECT lt.milliseconds     FROM lapTimes lt     JOIN results r ON lt.driverId = r.driverId     JOIN races ra ON lt.raceId = ra.raceId     WHERE ra.year = 2006 AND ra.name = 'United States Grand Prix'     AND r.rank < 11     ORDER BY r.rank ASC     LIMIT 10 ) AS lapTime; 
SELECT d.driverRef, d.surname, AVG(p.duration) AS avg_pitstop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverRef, d.surname ORDER BY avg_pitstop_duration ASC LIMIT 5; 
SELECT      d.forename,      d.surname,      r.time FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.name = 'Canadian Grand Prix'      AND ra.year = 2008     AND r.position = 1     AND r.positionOrder = 1     AND r.time LIKE '%:%:%.%'; 
SELECT c.constructorRef, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND cs.position = 1 ORDER BY cs.points DESC LIMIT 1; 
SELECT d.forename, d.surname, d.dob FROM drivers d WHERE d.nationality = 'Austrian' AND d.dob BETWEEN '1981-01-01' AND '1991-12-31'; 
SELECT      CONCAT(d.forename, ' ', d.surname) AS fullName,      d.url AS wikiPageLink,      d.dob AS dateOfBirth FROM      drivers d WHERE      d.nationality = 'German' AND     d.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY      d.dob DESC; 
SELECT `location`, `country`, `lat`, `lng` FROM `circuits` WHERE `circuitRef` = 'hungaroring'; 
SELECT      c.name,      c.nationality,      SUM(cr.points) AS total_points FROM      constructorResults cr JOIN      constructors c ON cr.constructorId = c.constructorId JOIN      races r ON cr.raceId = r.raceId WHERE      r.name = 'Monaco Grand Prix' AND      r.year BETWEEN 1980 AND 2010 GROUP BY      c.name,      c.nationality ORDER BY      total_points DESC LIMIT 1; 
SELECT AVG(r.points) AS average_score FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis Hamilton' AND r.name = 'Turkish Grand Prix'; 
SELECT AVG(COUNT(raceId)) AS average_races_per_year FROM races WHERE year BETWEEN 2000 AND 2010; 
SELECT nationality, COUNT(*) as count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1; 
SELECT      SUM(CASE WHEN ds.position = 91 THEN cs.points ELSE 0 END) AS points_acquired_by_91st FROM      driverStandings ds JOIN      constructorStandings cs ON ds.constructorId = cs.constructorId JOIN      constructors c ON cs.constructorId = c.constructorId WHERE      ds.positionText = 'Retired' AND     c.nationality = 'YourDesiredNationality' AND     cs.wins > 0; 
SELECT r.name AS race_name FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN (     SELECT raceId, MIN(fastestLapTime) AS min_time     FROM results     WHERE fastestLap IS NOT NULL     GROUP BY raceId ) AS min_time_races ON r.raceId = min_time_races.raceId WHERE min_time_races.min_time = rs.fastestLapTime; 
SELECT c.circuitId, c.name AS circuit_name, ct.name AS country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races) ORDER BY r.date DESC LIMIT 1; 
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Marina Bay Street Circuit' AND r.year = 2008 AND q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = q.raceId) AND q.number = 3; 
SELECT      d.forename,      d.surname,      d.nationality,      r.name AS raceName FROM      drivers d JOIN      (SELECT           MIN(dob) AS youngest_dob      FROM           drivers) AS youngest ON      d.dob = youngest.youngest_dob JOIN      results r ON      d.driverId = r.driverId WHERE      d.driverId = (SELECT                       driverId                  FROM                       results                  WHERE                       driverId = d.driverId                  ORDER BY                       raceId                  LIMIT 1); 
SELECT      COUNT(r.resultId) AS accident_count FROM      results r JOIN      races ra ON r.raceId = ra.raceId JOIN      drivers d ON r.driverId = d.driverId WHERE      ra.name = 'Canadian Grand Prix'     AND r.statusId = 3     AND d.driverId = (         SELECT              driverId         FROM              results r2         JOIN              races ra2 ON r2.raceId = ra2.raceId         WHERE              ra2.name = 'Canadian Grand Prix'         GROUP BY              d.driverId         ORDER BY              COUNT(r2.resultId) DESC         LIMIT 1     ); 
SELECT d.forename, d.surname, COUNT(*) AS wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.driverId = (     SELECT driverId     FROM drivers     ORDER BY STR_TO_DATE(dob, '%Y-%m-%d')     LIMIT 1 ) GROUP BY d.driverId; 
SELECT      driverId,      MAX(duration) AS longestPitStopDuration FROM      pitStops GROUP BY      driverId ORDER BY      longestPitStopDuration DESC LIMIT 1; 
SELECT MIN(milliseconds) AS fastestLapTime FROM lapTimes ORDER BY milliseconds ASC LIMIT 1; 
SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Hamilton'); 
SELECT lap FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE drivers.driverRef = 'Lewis Hamilton' AND races.year = 2011 AND races.raceId = (SELECT raceId FROM races WHERE year = 2011 AND circuitId = (SELECT circuitId FROM races WHERE raceId = (SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton')))); 
SELECT d.driverRef, d.nationality, p.driverId, p.lap, p.time, p.duration FROM pitStops p JOIN drivers d ON p.driverId = d.driverId JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix'; 
SELECT d.driverRef, lt.lap, lt.time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.driverRef = 'Lewis Hamilton' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) AND lt.raceId IN (SELECT raceId FROM races) ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT lt.position FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE d.forename = 'Lewis Hamilton' AND lt.time = (SELECT MIN(time) FROM lapTimes lt2 WHERE lt2.raceId = lt.raceId) AND r.name = 'Formula_1'; 
SELECT      MIN(l.milliseconds) AS fastestLapMilliseconds FROM      lapTimes l JOIN      circuits c ON l.raceId IN (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') WHERE      l.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes l2 WHERE l2.raceId = l.raceId); 
SELECT lt.raceId, lt.driverId, lt.lap, lt.position, lt.time, lt.milliseconds FROM lapTimes lt JOIN circuits c ON lt.raceId = c.circuitId WHERE c.country = 'Italy' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT r.name AS RaceName FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE c.name = 'Austrian Grand Prix' AND lt.milliseconds = (     SELECT MIN(milliseconds)     FROM lapTimes lt2     JOIN races r2 ON lt2.raceId = r2.raceId     WHERE r2.circuitId = c.circuitId ); 
SELECT ps.duration FROM pitStops ps JOIN results r ON ps.raceId = r.raceId JOIN races ra ON ps.raceId = ra.raceId JOIN drivers d ON ps.driverId = d.driverId WHERE ra.name = 'Austrian Grand Prix' AND ps.duration IS NOT NULL AND r.fastestLap = ps.lap AND r.driverId = d.driverId; 
SELECT c.circuitId, c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.circuitId WHERE lt.time = '1:29.488'; 
SELECT AVG(T2.milliseconds) AS average_pit_stop_time FROM `pitStops` AS T1 JOIN `drivers` AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'Lewis Hamilton'; 
SELECT AVG(milliseconds)  FROM lapTimes  WHERE raceId IN (     SELECT raceId      FROM races      WHERE circuitId IN (         SELECT circuitId          FROM circuits          WHERE country = 'Italy'     ) ); 
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes); 
SELECT `Player.player_name`, MAX(`Player.height`) AS max_height FROM `Player` WHERE `Player.height` = (SELECT MAX(`Player.height`) FROM `Player`) LIMIT 1; 
SELECT `Player_Attributes`.`preferred_foot` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`) 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating BETWEEN 60 AND 65 AND pa.defensive_work_rate = 'low' 
SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `crossing` DESC LIMIT 5; 
SELECT `League`.`name`, SUM(`Match`.`home_team_goal` + `Match`.`away_team_goal`) AS total_goals FROM `League` JOIN `Match` ON `League`.`id` = `Match`.`league_id` WHERE `Match`.`season` = '2015/2016' GROUP BY `League`.`name` ORDER BY total_goals DESC LIMIT 1; 
SELECT home_team_api_id, COUNT(*) AS lost_matches FROM Match WHERE season = '2015/2016' AND (home_team_goal < away_team_goal) GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1; 
SELECT p.player_name, SUM(CASE WHEN pa.penalties IS NOT NULL THEN pa.penalties ELSE 0 END) AS total_penalties FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_api_id ORDER BY total_penalties DESC LIMIT 10; 
SELECT T1.team_long_name, SUM(CASE WHEN T4.away_team_goal > T4.home_team_goal THEN 1 ELSE 0 END) AS wins FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id JOIN League AS T3 ON T3.id = T2.league_id JOIN (     SELECT *     FROM Match     WHERE season = '2009/2010' ) AS T4 ON T2.id = T4.id WHERE T3.name = 'Scotland Premier League' GROUP BY T1.team_long_name ORDER BY wins DESC LIMIT 1; 
SELECT      T1.team_long_name,     T1.buildUpPlaySpeed FROM      Team_Attributes T1 JOIN      (SELECT team_api_id, MAX(buildUpPlaySpeed) AS max_speed      FROM Team_Attributes      GROUP BY team_api_id      ORDER BY max_speed DESC      LIMIT 4) T2 ON T1.team_api_id = T2.team_api_id JOIN      Team T3 ON T1.team_api_id = T3.team_api_id ORDER BY      T2.max_speed DESC; 
SELECT `League`.`name`, COUNT(*) AS `draw_matches` FROM `Match` JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `Match`.`season` = '2015/2016' AND `Match`.`home_team_goal` = `Match`.`away_team_goal` GROUP BY `League`.`name` ORDER BY `draw_matches` DESC LIMIT 1; 
SELECT      P.player_name,      TIMESTAMPDIFF(YEAR, P.birthday, CURRENT_DATE) AS age_at_present FROM      Player P JOIN      Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE      PA.sprint_speed >= 97     AND PA.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'; 
SELECT `League`.`name`, COUNT(`Match`.`league_id`) AS `total_matches` FROM `League` JOIN `Match` ON `League`.`id` = `Match`.`league_id` GROUP BY `League`.`name` ORDER BY `total_matches` DESC LIMIT 1; 
SELECT AVG(height) AS average_height FROM Player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'; 
SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' GROUP BY player_api_id HAVING overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') ORDER BY overall_rating DESC LIMIT 1; 
SELECT `team_fifa_api_id` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` BETWEEN 51 AND 59; 
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.date = '2012' AND Team_Attributes.buildUpPlayPassing >      (SELECT AVG(TA.buildUpPlayPassing)      FROM Team_Attributes TA      WHERE TA.date = '2012' AND TA.buildUpPlayPassing IS NOT NULL); 
SELECT      (SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0) / COUNT(DISTINCT p.player_api_id) AS left_foot_percentage FROM      Player_Attributes pa JOIN      Player p ON pa.player_api_id = p.player_api_id WHERE      p.birthday BETWEEN '1987-01-01' AND '1992-12-31'; 
SELECT      L.id AS league_id,      L.team_long_name,      SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM      Match M JOIN      League L ON M.league_id = L.id GROUP BY      L.id, L.team_long_name ORDER BY      total_goals ASC LIMIT 5; 
SELECT AVG(CAST(SUM(`Player_Attributes`.`long_shots`) AS REAL) / COUNT(`Player`.`player_fifa_api_id`)) FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_fifa_api_id` = `Player`.`player_fifa_api_id` WHERE `Player`.`player_name` = 'Ahmed Samir Farag'; 
SELECT      P.player_name,      AVG(PA.heading_accuracy) AS avg_heading_accuracy FROM      Player P JOIN      Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE      P.height > 180 GROUP BY      P.player_name ORDER BY      avg_heading_accuracy DESC LIMIT      10; 
SELECT T2.team_long_name FROM Team_Attributes AS TA JOIN Team AS T2 ON TA.team_api_id = T2.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND buildUpPlayDribblingClass = 'Normal') ORDER BY TA.chanceCreationPassing DESC; 
SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2009/2010' GROUP BY League.name HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal) 
SELECT `team_short_name` FROM `Team` WHERE `team_long_name` = 'Queens Park Rangers' 
SELECT p.player_name FROM Player p WHERE SUBSTR(p.birthday, 1, 4) = '1970' AND SUBSTR(p.birthday, 6, 2) = '10'; 
SELECT `Player_Attributes`.`defensive_work_rate` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player`.`player_fifa_api_id` = (SELECT `player_fifa_api_id` FROM `Player` WHERE `Player`.`player_fifa_api_id` = 'franco_zennaro_api_id'); 
SELECT     Team_Attributes.buildUpPlayPositioningClass AS FreedomOfMovement FROM     Team_Attributes JOIN     Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE     Team.team_long_name = 'ADO Den Haag' AND     Team_Attributes.date LIKE '2023-%-01%' 
SELECT `Player_Attributes`.`heading_accuracy` AS header_finishing_rate FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player`.`player_name` = 'Francois Affolter' AND `Player_Attributes`.`date` = '2014-09-18 00:00:00'; 
SELECT `Player_Attributes`.`overall_rating` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player`.`player_name` = 'Gabriel Tamas' AND strftime('%Y', `Player_Attributes`.`date`) = '2011'; 
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016'; 
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY pa.date DESC LIMIT 1; 
SELECT `player_name`, `potential` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_api_id` = `Player.player_api_id` WHERE `potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`) 
SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left' AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE `preferred_foot` = 'left'); 
SELECT `team_short_name` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` WHERE `Team_Attributes`.`chanceCreationPassingClass` = 'Risky'; 
SELECT `Player_Attributes`.`defensive_work_rate` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player`.`player_name` = 'David Wilson'; 
SELECT p.birthday  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) 
SELECT `League.name` FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `Country.name` = 'Netherlands'; 
SELECT AVG(home_team_goal)  FROM Match  WHERE country_id = (SELECT id FROM Country WHERE name = 'Poland')  AND season = '2010/2011'; 
SELECT p.player_name, pa.overall_rating, pa.finishing, p.height FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height = (SELECT MAX(height) FROM Player)    OR p.height = (SELECT MIN(height) FROM Player)    AND pa.finishing = (SELECT MAX(AVG(finishing)) FROM Player_Attributes pa2 JOIN Player p2 ON pa2.player_api_id = p2.player_api_id) ORDER BY pa.finishing DESC, p.height LIMIT 1; 
SELECT player_name FROM Player WHERE height > 180; 
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170; 
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010'; 
SELECT `potential`  FROM `Player_Attributes`  WHERE `player_api_id` = (     SELECT `player_api_id`      FROM `Player`      WHERE `player_fifa_api_id` = (         SELECT `player_fifa_api_id`          FROM `Player`          WHERE `player_long_name` = 'Aaron Doran'     ) ); 
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.preferred_foot = 'left'; 
SELECT DISTINCT T.team_long_name FROM Team_Attributes T JOIN Team TM ON T.team_api_id = TM.team_api_id OR T.team_fifa_api_id = TM.team_fifa_api_id WHERE T.buildUpPlaySpeedClass = 'Fast'; 
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_api_id` IN (     SELECT `team_api_id`     FROM `Team`     WHERE `team_short_name` = 'CLB' ); 
SELECT `team_short_name` FROM `Team_Attributes` WHERE `buildUpPlayPassing` > 70; 
SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE overall_rating > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015'; 
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player); 
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A'; 
SELECT team_short_name  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id  WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32; 
SELECT AVG(overall_rating)  FROM Player_Attributes  WHERE player_fifa_api_id = (     SELECT player_fifa_api_id      FROM Player      WHERE player_name = 'Aaron Doran' ); 
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'; 
SELECT `Team.team_short_name` FROM `Team` JOIN `Match` ON `Team.team_api_id` = `Match.home_team_api_id` WHERE `Match.home_team_goal` = 10; 
SELECT p.player_name, pa.balance, pa.potential FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = 61 ORDER BY pa.balance DESC LIMIT 1; 
SELECT      (AVG(PA1.ball_control) - AVG(PA2.ball_control)) AS ball_control_difference FROM      Player_Attributes PA1 JOIN      Player P1 ON PA1.player_api_id = P1.player_api_id JOIN      Player_Attributes PA2 ON PA2.player_api_id = P2.player_api_id JOIN      Player P2 ON PA2.player_api_id = P2.player_api_id WHERE      P1.player_name = 'Abdou Diallo' AND      P2.player_name = 'Aaron Appindangoye' 
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'; 
SELECT      P1.player_name AS Older_Player,     P2.player_name AS Younger_Player,     CASE          WHEN P1.birthday < P2.birthday THEN 'Aaron Lennon'         ELSE 'Abdelaziz Barrada'     END AS Oldest_Player FROM      Player P1 JOIN      Player P2 ON P1.player_api_id < P2.player_api_id WHERE      P1.player_name = 'Aaron Lennon' AND P2.player_name = 'Abdelaziz Barrada'; 
SELECT `player_name`, `height` FROM `Player` WHERE `height` = (SELECT MAX(`height`) FROM `Player`); 
SELECT COUNT(DISTINCT pa.player_fifa_api_id) FROM Player_Attributes pa JOIN Player p ON pa.player_fifa_api_id = p.player_fifa_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low'; 
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League'; 
SELECT name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany'; 
SELECT player_name, MAX(overall_rating) AS strongest_overall_strength FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id GROUP BY Player.player_api_id ORDER BY strongest_overall_strength DESC LIMIT 1; 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high' 
SELECT      p.player_name,      pa.crossing FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY      pa.crossing DESC LIMIT 1; 
SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_api_id` = (         SELECT `player_api_id`         FROM `Player`         WHERE `player_fifa_api_id` = (             SELECT `player_fifa_api_id`             FROM `Player`             WHERE `player_api_id` = (                 SELECT `player_api_id`                 FROM `Player`                 WHERE `player_fifa_api_id` = (                     SELECT `player_fifa_api_id`                     FROM `Player`                     WHERE `player_api_id` = (                         SELECT `player_api_id`                         FROM `Player`                         WHERE `player_fifa_api_id` = (                             SELECT `player_fifa_api_id`                             FROM `Player`                             WHERE `player_api_id` = (                                 SELECT `player_api_id`                                 FROM `Player`                                 WHERE `player_fifa_api_id` = (                                     SELECT `player_fifa_api_id`                                     FROM `Player`                                     WHERE `player_api_id` = (                                         SELECT `player_api_id`                                         FROM `Player`                                         WHERE `player_fifa_api_id` = (                                             SELECT `player_fifa_api_id`                                             FROM `Player`                                             WHERE `player_api_id` = (                                                 SELECT `player_api_id`                                                 FROM `Player`                                                 WHERE `player_fifa_api_id` = (                                                     SELECT `player_fifa_api_id`                                                     FROM `Player`                                                     WHERE `player_api_id` = (                                                         SELECT `player_api_id`                                                         FROM `Player`                                                         WHERE `player_fifa_api_id` = (                                                             SELECT `player_fifa_api_id`                                                             FROM `Player`                                                             WHERE `player_api_id` = (                                                                 SELECT `player_api_id`                                                                 FROM `Player`                                                                 WHERE `player_fifa_api_id` = (                                                                     SELECT `player_fifa_api_id`                                                                     FROM `Player`                                                                     WHERE `player_api_id` = (                                                                         SELECT `player_api_id`                                                                         FROM `Player`                                                                         WHERE `player_fifa_api_id` = (                                                                             SELECT `player_fifa_api_id`                                                                             FROM `Player`                                                                             WHERE `player_api_id` = (                                                                                 SELECT `player_api_id`                                                                                 FROM `Player`                                                                                 WHERE `player_fifa_api_id` = (                                                                                     SELECT `player_fifa_api_id`                                                                                     FROM `Player`                                                                                     WHERE `player_api_id` = (                                                                                         SELECT `player
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70; 
SELECT `Player.player_name` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_api_id` = `Player.player_api_id` WHERE `Player_Attributes.volleys` > 70 AND `Player_Attributes.dribbling` > 70; 
SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009'; 
SELECT pa.long_passing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (     SELECT MIN(birthday)     FROM Player ) 
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04'; 
SELECT      L.name AS LeagueName,      COUNT(M.id) AS NumberOfMatches FROM      League L JOIN      Match M ON L.id = M.league_id WHERE      M.season = '2008/2009' GROUP BY      L.name ORDER BY      NumberOfMatches DESC LIMIT 1; 
SELECT AVG(overall_rating) AS avg_overall_rating FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986' 
SELECT      ROUND(         (             (                 (SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` IN (                     SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Ariel Borysiuk'                 )             ) -              (SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` IN (                     SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Paulin Puel'                 )             )         ) /          (SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` IN (                 SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Paulin Puel'             )         )     ) * 100, 2 
SELECT AVG(`buildUpPlaySpeed`) AS average_build_up_play_speed FROM `Team_Attributes` WHERE `team_long_name` = 'Heart of Midlothian'; 
SELECT AVG(T1.overall_rating) AS average_rating FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'; 
SELECT SUM(PA.crossing) AS total_crossing_score FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Lennox' 
SELECT MAX(`chanceCreationPassing`) AS highest_chance_creation_passing_score, `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Ajax' GROUP BY `chanceCreationPassingClass` ORDER BY `chanceCreationPassing` DESC LIMIT 1; 
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (     SELECT player_api_id     FROM Player     WHERE player_name = 'Abdou Diallo' ); 
SELECT MAX(`overall_rating`) AS highest_rating FROM `Player_Attributes` WHERE `player_name` = 'Dorlan Pabon'; 
SELECT AVG(`away_team_goal`) AS avg_away_goals FROM `Match` JOIN `Team` ON `Match.home_team_api_id` = `Team.team_api_id` OR `Match.away_team_api_id` = `Team.team_api_id` WHERE `Team.team_long_name` = 'Parma' AND `Country.name` = 'Italy'; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1; 
SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_name` = 'Aaron Mooy' AND `date` = '2016-02-04 00:00:00'; 
SELECT `potential` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Parravicini' AND `date` = '2010-08-30 00:00:00'; 
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Migliore' AND `date` = '2015-05-01 00:00:00'; 
SELECT defensive_work_rate  FROM Player_Attributes  WHERE player_api_id IN (     SELECT player_api_id      FROM Player      WHERE player_name = 'Kevin Berigaud' ) AND date = '2013-02-22 00:00:00'; 
SELECT MAX(date) AS highest_crossing_date FROM Player_Attributes WHERE player_name = 'Kevin Constant' AND crossing = (     SELECT MAX(crossing)     FROM Player_Attributes     WHERE player_name = 'Kevin Constant' ); 
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Willem II' AND `date` = '2012-02-22 00:00:00' 
SELECT `buildUpPlayDribblingClass` FROM `Team_Attributes` WHERE `team_short_name` = 'LEI' AND `date` = '2015-09-10 00:00:00'; 
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'FC Lorient' AND `date` = '2010-02-22'; 
SELECT `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'PEC Zwolle' AND `date` = '2013-09-20 00:00:00'; 
SELECT `chanceCreationCrossingClass` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_api_id` = `Team.team_api_id` WHERE `Team.team_long_name` = 'Hull City' AND `Team_Attributes.date` = '2010-02-22 00:00:00'; 
SELECT `defenceAggressionClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hannover 96' AND `date` = '2015-09-10 00:00:00' 
SELECT AVG(`overall_rating`) AS average_overall_rating FROM `Player_Attributes` WHERE `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00' AND `player_name` = 'Marko Arnautovic'; 
SELECT      (         (SUBTRACT(PA1.overall_rating, PA2.overall_rating) / PA1.overall_rating) * 100     ) AS percentage_difference FROM      Player_Attributes PA1 JOIN      Player P1 ON PA1.player_api_id = P1.player_api_id JOIN      Player_Attributes PA2 ON PA1.player_api_id = PA2.player_api_id AND PA2.player_name = 'Jordan Bowery' WHERE      P1.player_name = 'Landon Donovan' AND     PA1.date = '2013/7/12' AND     PA2.date = '2013/7/12' 
SELECT p.player_name FROM Player p WHERE p.height = (     SELECT MAX(height)     FROM Player     ORDER BY height DESC     LIMIT 5 ); 
SELECT player_api_id  FROM Player  ORDER BY weight DESC  LIMIT 10; 
SELECT p.player_name FROM Player p WHERE DATEDIFF(year, p.birthday, CURRENT_TIMESTAMP) >= 35; 
SELECT SUM(`home_team_goal`) AS total_home_goals FROM `Match` JOIN `Player` ON `Player`.`player_api_id` = `Match`.`home_player_1` WHERE `Player`.`player_name` = 'Aaron Lennon' OR `Player`.`player_api_id` = `Match`.`home_player_2` OR `Player`.`player_api_id` = `Match`.`home_player_3` OR `Player`.`player_api_id` = `Match`.`home_player_4` OR `Player`.`player_api_id` = `Match`.`home_player_5` OR `Player`.`player_api_id` = `Match`.`home_player_6` OR `Player`.`player_api_id` = `Match`.`home_player_7` OR `Player`.`player_api_id` = `Match`.`home_player_8` OR `Player`.`player_api_id` = `Match`.`home_player_9` OR `Player`.`player_api_id` = `Match`.`home_player_10` OR `Player`.`player_api_id` = `Match`.`home_player_11`; 
SELECT SUM(`away_team_goal`) AS total_away_goals FROM `Match` WHERE `away_player_1` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_2` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_3` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_4` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_5` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_6` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_7` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_8` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_9` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_10` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) OR `away_player_11` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Daan Smith' ) AND `away_player_1` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_2` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_3` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_4` IN (     SELECT `
SELECT SUM(`home_team_goal`) AS total_home_goals FROM `Match` WHERE      (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', `Player`.`birthday`)) <= 30     AND `home_team_api_id` = `Player`.`team_api_id`     AND `Player`.`player_api_id` IN (         SELECT `player_api_id`         FROM `Player_Attributes`         WHERE `overall_rating` IS NOT NULL     ); 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY p.player_name LIMIT 10; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes); 
SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Match M ON P.player_api_id = M.home_player_X1 OR P.player_api_id = M.home_player_X2 OR P.player_api_id = M.home_player_X3 OR P.player_api_id = M.home_player_X4 OR P.player_api_id = M.home_player_X5 OR P.player_api_id = M.home_player_X6 OR P.player_api_id = M.home_player_X7 OR P.player_api_id = M.home_player_X8 OR P.player_api_id = M.home_player_X9 OR P.player_api_id = M.home_player_X10 OR P.player_api_id = M.home_player_X11 OR P.player_api_id = M.away_player_X1 OR P.player_api_id = M.away_player_X2 OR P.player_api_id = M.away_player_X3 OR P.player_api_id = M.away_player_X4 OR P.player_api_id = M.away_player_X5 OR P.player_api_id = M.away_player_X6 OR P.player_api_id = M.away_player_X7 OR P.player_api_id = M.away_player_X8 OR P.player_api_id = M.away_player_X9 OR P.player_api_id = M.away_player_X10 OR P.player_api_id = M.away_player_X11 WHERE PA.attacking_work_rate = 'high' AND (M.home_team_goal > M.away_team_goal OR (M.home_team_goal = M.away_team_goal AND M.home_player_X1 IS NOT NULL AND M.away_player_X1 IS NOT NULL)) AND (     (M.home_player_X1 IS NOT NULL AND M.away_player_X1 IS NOT NULL AND (M.home_player_X1 = M.home_player_X2 OR M.home_player_X1 = M.home_player_X3 OR M.home_player_X1 = M.home_player_X4 OR M.home_player_X1 = M.home_player_X5 OR M.home_player_X1 = M.home_player_X6 OR M.home_player_X1 = M.home_player_X7 OR M.home_player_X1 = M.home_player_X8 OR M.home_player_X1 = M.home_player_X9 OR M.home_player_X1 = M.home_player_X10 OR M.home_player_X1 = M.home_player_X11))     OR (M.home_player_X2 IS NOT NULL AND M.away_player_X2 IS NOT NULL AND (M.home_player
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.finishing = 1 ORDER BY p.birthday ASC LIMIT 1; 
SELECT DISTINCT P.player_name FROM Player P JOIN Country C ON P.player_fifa_api_id = C.id WHERE C.name = 'Belgium'; 
SELECT p.player_name, c.name AS country_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Country c ON p.country_id = c.id WHERE pa.vision > 89; 
SELECT `Country`.`id`, `Country`.`name`, AVG(`Player`.`weight`) as avg_weight FROM `Player` JOIN `Country` ON `Player`.`country_id` = `Country`.`id` GROUP BY `Country`.`id`, `Country`.`name` ORDER BY avg_weight DESC LIMIT 1; 
SELECT `team_long_name` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_api_id` = `Team.team_api_id` WHERE `Team_Attributes.buildUpPlaySpeedClass` = 'Slow' 
SELECT T.team_short_name FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'; 
SELECT AVG(`height`) AS average_height FROM `Player` JOIN `Country` ON `Player`.`player_fifa_api_id` = `Country`.`id` WHERE `Country`.`name` = 'Italy'; 
SELECT player_name  FROM Player  WHERE height > 180  ORDER BY player_name ASC  LIMIT 3; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990' 
SELECT      (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 6) - (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 23) AS `jumping_difference` 
SELECT pa.player_api_id FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MIN(potential) FROM Player_Attributes WHERE preferred_foot = 'right') AND pa.preferred_foot = 'right' ORDER BY pa.potential ASC LIMIT 3; 
SELECT COUNT(DISTINCT pa.player_api_id) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND pa.preferred_foot = 'left'; 
SELECT      ROUND(         (COUNT(*) FILTER (WHERE `Player_Attributes`.`strength` > 80 AND `Player_Attributes`.`stamina` > 80) * 100.0) / COUNT(*),         2     ) AS `percentage_of_athletic_players` FROM      `Player_Attributes`; 
SELECT Country.name  FROM Country  JOIN League ON Country.id = League.country_id  JOIN Match ON League.id = Match.league_id  WHERE League.name = 'Ekstraklasa' AND Country.name = 'Poland'; 
SELECT      M.home_team_goal AS HomeScore,      M.away_team_goal AS AwayScore FROM      Match M JOIN      League L ON M.league_id = L.id WHERE      M.date = '2008-09-24%' AND      L.country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND      L.name = 'Jupiler League'; 
SELECT      pa.sprint_speed,      pa.agility,      pa.acceleration  FROM      Player_Attributes pa  JOIN      Player p ON pa.player_api_id = p.player_api_id  WHERE      p.player_name = 'Alexis Blin'; 
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_long_name` = 'KSV Cercle Brugge'; 
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Serie A') AND season = '2015/2016'; 
SELECT MAX(home_team_goal) AS highest_home_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie' AND country_id = (SELECT id FROM Country WHERE name = 'Netherlands')) 
SELECT pa.player_fifa_api_id, pa.overall_rating, pa.free_kick_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player) 
SELECT      L.name,      COUNT(M.id) AS game_count FROM      Match M JOIN      League L ON M.league_id = L.id WHERE      M.season = '2015/2016' GROUP BY      L.name ORDER BY      game_count DESC LIMIT 1; 
SELECT T3.team_long_name FROM `Match` AS T1 JOIN `Team` AS T2 ON T1.away_team_api_id = T2.team_api_id JOIN `Team` AS T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id WHERE T1.away_team_goal > 0 GROUP BY T3.team_long_name ORDER BY SUM(T1.away_team_goal) DESC LIMIT 1; 
SELECT `Player.player_name` FROM `Player` JOIN `Player_Attributes` ON `Player.player_api_id` = `Player_Attributes.player_api_id` WHERE `Player_Attributes.overall_rating` = (     SELECT MAX(`overall_rating`)     FROM `Player_Attributes` ) 
SELECT     (COUNT(CASE WHEN P.height < 180 AND PAt.overall_rating > 70 THEN 1 END) * 100.0) / COUNT(P.id) AS percentage_of_players FROM Player P JOIN Player_Attributes PAt ON P.player_api_id = PAt.player_api_id 
SELECT   SUM(CASE WHEN P.SEX = 'M' AND E.Admission = '+' THEN 1 ELSE 0 END) AS MaleInPatients,   SUM(CASE WHEN P.SEX = 'M' AND E.Admission = '-' THEN 1 ELSE 0 END) AS MaleOutPatients,   ((SUM(CASE WHEN P.SEX = 'M' AND E.Admission = '+' THEN 1 ELSE 0 END) -     SUM(CASE WHEN P.SEX = 'M' AND E.Admission = '-' THEN 1 ELSE 0 END)) /    SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) * 100) AS MalePatientDeviation FROM   Patient P JOIN   Examination E ON P.ID = E.ID; 
SELECT      (COUNT(CASE WHEN p.SEX = 'F' AND YEAR(p.Birthday) > '1930' THEN 1 END) * 100.0) /      COUNT(CASE WHEN p.SEX = 'F' THEN 1 END) AS PercentageOfFemalesBornAfter1930 FROM      Patient p; 
SELECT      ROUND((COUNT(CASE WHEN P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND E.Admission = '+' THEN 1 END) * 100.0) /            COUNT(CASE WHEN P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' THEN 1 END), 2) AS PercentageOfInpatients FROM      Patient P JOIN      Examination E ON P.ID = E.ID WHERE      P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' 
SELECT      (SELECT COUNT(DISTINCT E.ID)      FROM Examination E      JOIN Patient P ON E.ID = P.ID      WHERE E.Diagnosis = 'SLE' AND P.Admission = '+') /      (SELECT COUNT(DISTINCT E.ID)      FROM Examination E      JOIN Patient P ON E.ID = P.ID      WHERE E.Diagnosis = 'SLE' AND P.Admission = '-') AS Ratio 
SELECT      P.Diagnosis AS Patient_Diagnosis,     L.Date AS Laboratory_Date FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.ID = 30609; 
SELECT      p.SEX,      p.Birthday,      e.`Examination Date`,      e.Symptoms FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      p.ID = 163109; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT > 500; 
SELECT      p.ID,      TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.RVVT = '+'; 
SELECT      p.ID,      p.SEX,      e.Diagnosis FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.Thrombosis = 2; 
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1937 AND l.TAT2 >= 250; 
SELECT      p.ID,      p.SEX,      p.Diagnosis FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.GPT < 3.5; 
SELECT      (COUNT(CASE WHEN p.SEX = 'F' AND e.TP < 6.0 OR e.TP > 8.5 THEN p.ID END) * 100.0) / COUNT(p.ID) AS PercentageOfFemalesWithAbnormalTP FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.SEX = 'F' 
SELECT AVG(`aCL IgG`)  FROM `Examination`  WHERE `Patient.ID` = `Examination.ID`  AND `Patient.Admission` = '+'  AND (`Patient.Birthday` IS NOT NULL AND SUBSTR(`Patient.Birthday`, 6, 2) - SUBSTR(CURRENT_DATE, 6, 2) >= 50); 
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND YEAR(P.Description) = 1997 AND E.Admission = '-'; 
SELECT      MIN(YEAR(`First Date`) - YEAR(`Birthday`)) AS YoungestAgeAtAdmission FROM      Patient; 
SELECT COUNT(*)  FROM Examination AS E JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND YEAR(P.First Date) = 1997 AND P.SEX = 'F'; 
SELECT      MAX(YEAR(Birthday)) - MIN(YEAR(Birthday)) AS AgeGap FROM      Patient  WHERE      ID IN (         SELECT              Patient.ID          FROM              Patient          JOIN Laboratory ON Patient.ID = Laboratory.ID          WHERE              Laboratory.T-BIL >= 200     ); 
SELECT p.SEX, p.Birthday, e.Symptoms, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY p.Birthday; 
SELECT     MONTH(L.Date) AS Month,     CAST(COUNT(DISTINCT E.ID) AS REAL) / 12 AS AvgMalePatients FROM     Laboratory L JOIN     Patient P ON L.ID = P.ID JOIN     Examination E ON P.ID = E.ID WHERE     L.Date BETWEEN '1998-01-01' AND '1998-12-31'     AND P.SEX = 'M' GROUP BY     MONTH(L.Date); 
SELECT      L.Date AS LaboratoryWorkDate,     P.Birthday AS BirthDate,     (YEAR(P.FirstDate) - YEAR(P.Birthday)) AS AgeAtAdmission FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Diagnosis = 'SJS' AND     P.Birthday = (SELECT MAX(Birthday) FROM Patient) ORDER BY      P.Birthday ASC LIMIT 1; 
SELECT      (SUM(CASE WHEN SEX = 'M' AND `aCL IgG` <= 8.0 THEN 1 ELSE 0 END) /      SUM(CASE WHEN SEX = 'F' AND `aCL IgM` <= 6.5 THEN 1 ELSE 0 END)) AS male_to_female_ratio FROM Examination JOIN Patient ON Examination.ID = Patient.ID; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  LEFT JOIN Examination e ON p.ID = e.ID  WHERE e.Examination_Date IS NULL OR SUBDATE(e.Examination_Date, INTERVAL 1 YEAR) > p.First_Date; 
SELECT COUNT(DISTINCT E.ID)  FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday < '1974-01-01' -- Underage patients are those born before 1974 AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.T-BIL > 2.0; 
SELECT      `Diagnosis`,      COUNT(`Diagnosis`) as DiagnosisCount FROM      `Examination` WHERE      `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY      `Diagnosis` ORDER BY      DiagnosisCount DESC LIMIT 1; 
SELECT AVG(DATEDIFF('1991-10-31', `Patient`.`Birthday`)) AS AverageAge FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`Date` BETWEEN '1991-10-01' AND '1991-10-30'; 
SELECT      P.Birthday,      P.Diagnosis,     (YEAR(CURDATE()) - YEAR(P.Birthday)) - (RIGHT(CURDATE(), 5) < RIGHT(P.Birthday, 5)) AS Age,     MAX(E.aCL_IgG) AS HighestHemoglobin FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      E.aCL_IgG = (SELECT MAX(aCL_IgG) FROM Examination) 
SELECT `ANA Pattern` FROM Examination WHERE `ID` = 3605340 AND `Examination Date` = '1996-12-02'; 
SELECT      CASE          WHEN T-BIL < 250 THEN 'Normal'         ELSE 'Abnormal'     END AS TotalCholesterolStatus FROM      Laboratory WHERE      ID = (SELECT ID FROM Patient WHERE ID = 2927464)     AND Date = '1995-09-04'; 
SELECT p.SEX  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Diagnosis = 'AORTITIS'  ORDER BY e.Examination Date ASC  LIMIT 1; 
SELECT Examination.aCL_IgM  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  WHERE Patient.Description = '1993-11-12'  AND Patient.Description = '1994-02-19'; 
SELECT P.Description, P.First_Date FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' OR P.SEX = 'F' AND E.GPT = '9' AND E.Date = '1992-06-12'; 
SELECT      p.ID,     (EXTRACT(YEAR FROM '1991-10-21') - EXTRACT(YEAR FROM p.Birthday)) -      (CASE          WHEN EXTRACT(MONTH FROM '1991-10-21') < EXTRACT(MONTH FROM p.Birthday) THEN 1          WHEN EXTRACT(MONTH FROM '1991-10-21') = EXTRACT(MONTH FROM p.Birthday) AND EXTRACT(DAY FROM '1991-10-21') < EXTRACT(DAY FROM p.Birthday) THEN 1          ELSE 0      END) AS AgeAtTestDate FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.Date = '1991-10-21' AND      l.SC170 = '8.4'; 
SELECT COUNT(Lab.ID)  FROM Laboratory Lab  JOIN Patient Pat ON Lab.ID = Pat.ID  WHERE Pat.First_Date = '1991-06-13'  AND Pat.Diagnosis = 'SJS'  AND YEAR(Lab.Date) = 1995; 
SELECT p.Diagnosis AS OriginalDiagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.`First Date` = '1997-01-27'; 
SELECT `Symptoms` FROM `Examination` WHERE `Examination Date` = '1993-09-27' AND `ID` IN (     SELECT `ID`     FROM `Patient`     WHERE `Birthday` = '1959-03-01' ); 
SELECT      (SUM(CASE WHEN E.Date LIKE '1981-11-%' THEN L.TAT2 ELSE 0 END) -      SUM(CASE WHEN E.Date LIKE '1981-12-%' THEN L.TAT2 ELSE 0 END)) AS DecreaseRate FROM Examination E JOIN Laboratory L ON E.ID = L.ID JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = '1959-02-18'; 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'Behcet' AND e.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'; 
SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.`aCL IgG` > 30 AND L.`SC170` < 4 AND L.Date BETWEEN '1987-07-06' AND '1996-01-31'; 
SELECT P.ID FROM Patient P WHERE P.SEX = 'F' AND YEAR(P.Birthday) = 1964 AND P.Admission = '+' ORDER BY P.ID; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.`Thrombosis` = 2 AND E.`ANA Pattern` = 'S' AND E.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2; 
SELECT      MULTIPLY(         DIVIDE(COUNT(CASE WHEN T.UA <= 6.5 THEN 1 ELSE NULL END),                 COUNT(CASE WHEN T.U-PRO > 0 AND T.U-PRO < 30 THEN 1 ELSE NULL END)),          100     ) AS PercentageOfPatients FROM     Examination AS E JOIN     Laboratory AS L ON E.ID = L.ID JOIN     Patient AS P ON L.ID = P.ID CROSS JOIN     (SELECT UA, U-PRO FROM Examination) AS T WHERE     T.UA <= 6.5 AND T.U-PRO > 0 AND T.U-PRO < 30 
SELECT      ROUND((SUM(CASE WHEN p.SEX = 'M' AND YEAR(e.`First Date`) = 1981 THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN p.SEX = 'M' AND YEAR(p.`First Date`) = 1981 THEN 1 END), 2) AS percentage_Behcet FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      p.SEX = 'M' AND      YEAR(p.`First Date`) = 1981 AND      e.`Diagnosis` = 'BEHCET'; 
SELECT DISTINCT P.ID, P.SEX, P.Description, P.First_Date, P.Admission, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.T_BIL < 2.0; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.ANA_Pattern != 'p' AND P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'; 
SELECT p.Description FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Symptoms LIKE '%PSS%' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123; 
SELECT AVG(ALB) AS AverageAlbuminLevel FROM Examination WHERE `ID` IN (     SELECT `ID`     FROM Patient     WHERE SEX = 'F' ) AND `Symptoms` LIKE '%SLE%' AND `ID` IN (     SELECT `ID`     FROM Laboratory     WHERE PLT > 400 ); 
SELECT Symptoms, COUNT(*) as frequency FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY frequency DESC LIMIT 1; 
SELECT p.`Birthday`, e.`Diagnosis` FROM `Patient` p JOIN `Examination` e ON p.`ID` = e.`ID` WHERE p.`ID` = 48473 ORDER BY e.`Examination Date` LIMIT 1; 
SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS'; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(l.Date) = 1997 AND l.T-BIL > 6 AND l.T-BIL < 8.5; 
SELECT      (SUM(CASE WHEN `Symptoms` LIKE '%ITP%' THEN 1 ELSE 0 END) * 1.0) /      SUM(CASE WHEN `Diagnosis` LIKE '%SLE%' THEN 1 ELSE 0 END) * 100 AS proportion_of_thrombocytopenia_patients_with_SLE FROM      Examination  JOIN      Patient ON Examination.ID = Patient.ID; 
SELECT      (COUNT(CASE WHEN p.SEX = 'F' THEN 1 END) * 100.0) / COUNT(*) FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      YEAR(p.Birthday) = 1980 AND      p.Diagnosis = 'RA' 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND e.`Diagnosis` = 'BEHCET' AND p.Admission = '-' 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.WBC < 3.5; 
SELECT      DATEDIFF(`Examination.Date`, p.`First Date`) AS DaysUntilEvaluation FROM      `Examination` JOIN      `Patient` p ON `Examination.ID` = p.ID WHERE      p.ID = 821298; 
SELECT      p.SEX,      lab.UA,      CASE          WHEN p.SEX = 'M' THEN lab.UA > 8.0         WHEN p.SEX = 'F' THEN lab.UA > 6.5         ELSE FALSE     END AS is_within_normal_range FROM      Patient p JOIN      Laboratory lab ON p.ID = lab.ID WHERE      p.ID = 57266 AND     lab.UA IS NOT NULL; 
SELECT L.Date FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 48473 AND L.GOT >= 60; 
SELECT p.ID, p.sex, p.birthday FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.aCL_IgG < 60 AND e.aCL_IgM < 60 AND e.aCL_IgA < 60 AND e.Thrombosis < 60 AND YEAR(l.Date) = 1994; 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.GPT >= 60; 
SELECT p.ID, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GPT > 60 ORDER BY p.Birthday ASC; 
SELECT AVG(`aCL IgG`) as avg_ldh_index FROM Examination WHERE `aCL IgG` < 500; 
SELECT      p.ID,     TIMESTAMPDIFF(YEAR, p.First_Date, CURDATE()) AS Age FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.aCL_IgG BETWEEN 100 AND 300     AND e.aCL_IgM BETWEEN 600 AND 800; 
SELECT p.Admission, COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG < 300 OR e.aCL_IgM < 300 OR e.aCL_IgA < 300 GROUP BY p.Admission; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Description = '1982-04-01' AND e.aCL_IgG < 300; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 6.0; 
SELECT      p.ID,     p.SEX,     l.TP,     (l.TP - 8.5) AS TP_Deviation FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.SEX = 'F' AND      l.TP > 8.5; 
SELECT P.ID, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB <= 3.5 OR L.ALB >= 5.5 GROUP BY P.ID, P.Birthday ORDER BY P.Birthday DESC; 
SELECT      P.ID,     CASE          WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'         ELSE 'Out of Normal Range'     END AS Albumin_Status FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      YEAR(P.Birthday) = 1982; 
SELECT      (SELECT COUNT(*)       FROM Examination e       JOIN Patient p ON e.ID = p.ID       WHERE p.SEX = 'F' AND (e.aCL_IgG > 8.0 OR e.aCL_IgM > 6.5))      * 100.0 /      (SELECT COUNT(*)       FROM Patient       WHERE SEX = 'F') AS Percentage_Female_UA_Beyond_Normal; 
SELECT AVG(Lab.UA) AS Average_UA FROM Laboratory Lab JOIN Patient Pat ON Lab.ID = Pat.ID WHERE (Pat.SEX = 'M' AND Lab.UA < 8.0) OR (Pat.SEX = 'F' AND Lab.UA < 6.5) GROUP BY Pat.ID ORDER BY Lab.Date DESC LIMIT 1; 
SELECT      p.ID,      p.SEX,      p.Birthday  FROM      Patient p  JOIN      Laboratory l ON p.ID = l.ID  WHERE      l.GPT = 29; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'RA' AND p.Description < 30; 
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5; 
SELECT      (SUM(CASE WHEN p.SEX = 'M' AND l.CRE >= 1.5 THEN 1 ELSE 0 END) >       SUM(CASE WHEN p.SEX = 'F' AND l.CRE >= 1.5 THEN 1 ELSE 0 END)) AS more_male_out_of_normal FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID 
SELECT      L.ID,      P.SEX,      P.Birthday FROM      Laboratory L JOIN      Patient P ON L.ID = P.ID WHERE      L.T-BIL = (SELECT MAX(`T-BIL`) FROM Laboratory); 
SELECT      P.SEX,     COUNT(*) AS TotalPatients FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      L.T_BIL >= 2.0 GROUP BY      P.SEX; 
SELECT      p.ID,      l.T_BIL AS T_CHO FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.Birthday = (SELECT MIN(Birthday) FROM Patient)     AND l.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory) 
SELECT AVG(DIVIDE(SUBTRACT(YEAR(NOW()), YEAR(P.Birthday)), COUNT(P.ID))) AS AverageAge FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.T-CHO >= 250; 
SELECT p.ID, p.Description, p.First_Date FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG > 300 OR e.aCL_IgM > 300 OR e.aCL_IgA > 300; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50; 
SELECT DISTINCT `Patient.ID` FROM `Patient` JOIN `Laboratory` ON `Patient.ID` = `Laboratory.ID` WHERE `Laboratory.CPK` < 250 AND `Patient.Admission` = '-'; 
SELECT COUNT(*)  FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.First_Date BETWEEN '1936-01-01' AND '1956-12-31' AND P.sex = 'M' AND E.CPK >= 250; 
SELECT      p.ID,      p.SEX,      (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.GPT >= 180 AND      l.TAT2 < 250 
SELECT      p.ID,     e.GLU FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.GLU < 180 AND YEAR(p.Description) >= 1991; 
SELECT      p.ID,      p.SEX,      p.Birthday FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      (l.HCT < 3.5 OR l.HCT >= 9.0) GROUP BY      p.SEX ORDER BY      p.Birthday; 
SELECT p.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.RBC < 3.5; 
SELECT      P.ID,      P.SEX,      TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) AS Age,      P.Admission FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.SEX = 'F' AND      TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) >= 50 AND      (L.HGB <= 3.5 OR L.HGB >= 6.0) AND      P.Admission = '+' 
SELECT DISTINCT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.HGB < 10; 
SELECT      P.ID,      P.SEX  FROM      Patient P  JOIN      Examination E  ON      P.ID = E.ID  WHERE      P.Diagnosis = 'SLE'      AND E.HGB BETWEEN 10 AND 17  ORDER BY      P.Birthday ASC  LIMIT 1; 
SELECT      p.ID,      (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.HCT >= 52 GROUP BY      p.ID HAVING      COUNT(l.ID) > 2; 
SELECT AVG(L.HCT) AS AverageHematocritLevel FROM Laboratory L WHERE L.Date LIKE '1991%' AND L.HCT < 29; 
SELECT   SUM(CASE WHEN `Thrombosis` = 0 THEN 1 ELSE 0 END) AS 'LowerThanNormalRange',   SUM(CASE WHEN `Thrombosis` = 1 THEN 1 ELSE 0 END) AS 'HigherThanNormalRange' FROM Examination WHERE `aCL IgG` IS NOT NULL AND `aCL IgM` IS NOT NULL; 
SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%'   AND p.Birthday IS NOT NULL   AND TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) < 50   AND l.PLT BETWEEN 100 AND 400; 
SELECT      (COUNT(CASE WHEN `Examination`.PT >= 14 AND `Patient`.SEX = 'F' THEN 1 END) * 1.0) /      COUNT(CASE WHEN `Examination`.PT >= 14 THEN 1 END) * 100 AS percentage_female_abnormal_PT FROM      `Patient` JOIN      `Examination` ON `Patient`.ID = `Examination`.ID WHERE      (`Patient`.Birthday <= DATE_SUB(CURRENT_DATE, INTERVAL 55 YEAR) AND       `Patient`.SEX = 'F' AND       `Examination`.PT >= 14) 
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.FirstDate, p.Admission FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.FirstDate > '1992-12-31' AND e.`PT` < 14; 
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45; 
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.`aCL IgG` IS NOT NULL AND E.`aCL IgM` IS NOT NULL AND E.`aCL IgA` IS NOT NULL AND E.`Symptoms` IS NOT NULL AND E.Thrombosis = 3 AND E.aCL_IgG > 45 AND E.aCL_IgM > 45 AND E.aCL_IgA > 45; 
SELECT COUNT(DISTINCT E.ID)  FROM Examination E  JOIN Patient P ON E.ID = P.ID  WHERE P.SEX = 'M'  AND E.HCT BETWEEN 3.5 AND 9.0  AND (E.FG <= 150 OR E.FG >= 450); 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday > '1980-01-01' AND l.FG < 150 OR l.FG > 450; 
SELECT DISTINCT p.`Diagnosis` FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`U-PRO` >= 30; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'SLE' AND e.U-PRO BETWEEN 0 AND 30; 
SELECT COUNT(DISTINCT E.ID)  FROM Examination E  JOIN Patient P ON E.ID = P.ID  WHERE E.aCL_IgG < 900 AND P.Symptoms = 'abortion'; 
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL; 
SELECT p.Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgA BETWEEN 80 AND 500 AND e.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination WHERE aCL_IgA BETWEEN 80 AND 500) 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.IGA BETWEEN 80 AND 500 AND YEAR(p.FirstDate) >= 1990; 
SELECT      T1.Diagnosis,      COUNT(T1.Diagnosis) AS DiagnosisCount FROM      Examination AS T1 WHERE      T1.aCL_IgM NOT BETWEEN 40 AND 400 GROUP BY      T1.Diagnosis ORDER BY      DiagnosisCount DESC LIMIT      1; 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE (Examination.CRP LIKE '+' OR Examination.CRP LIKE '-' OR Examination.CRP < 1.0)  AND Examination.Description IS NULL; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP NOT IN ('+-', '-')  AND l.CRP >= 1.0  AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 18; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgG IN('-', '+-') AND e.aCL_IgA IS NOT NULL AND e.aCL_IgA > 0 AND e.Thrombosis = '+'; 
SELECT DISTINCT E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday > '1995-01-01' AND E.RA IN('-', '+-'); 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG < 20 AND (YEAR(CURDATE()) - YEAR(p.Birthday)) > 60; 
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG < 20 AND E.Thrombosis = 0; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.ANA = 1 AND e.ANA_Pattern = 'P' AND l.C3 > 35; 
SELECT e.ID FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Description IS NOT NULL AND NOT (29 < p.Description < 52) AND e.aCL_IgA = (SELECT MAX(e2.aCL_IgA) FROM Examination e2 WHERE e2.ID = e.ID) AND p.Description IS NOT NULL AND NOT (29 < p.Description < 52) GROUP BY e.ID ORDER BY e.aCL_IgA DESC LIMIT 1; 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.C4 > 10  AND EXISTS (     SELECT 1      FROM Examination      WHERE Examination.ID = Patient.ID      AND Examination.Thrombosis = 1 ); 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.ANA_Pattern IN ('-', '+-') AND p.Admission = '+'; 
SELECT p.First_Date AS Date_of_Birth FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.RNP NOT IN('-', '+-') ORDER BY p.First_Date ASC LIMIT 1; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG IN('-', '+-') AND E.Thrombosis = 1; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ANA_Pattern LIKE '%SM%' AND e.ANA_Pattern NOT IN ('-', '+-') ORDER BY p.Birthday DESC LIMIT 3; 
SELECT DISTINCT E.ID FROM Examination E WHERE E.Examination_Date >= '1997-01-01' AND E.SC170 IN('-', '+-'); 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.SC170 IN('-', '+-')  AND p.SEX = 'M'  AND p.Symptoms = 'vertigo'; 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.SSA IN('-','+-') AND YEAR(Patient.First Date) < 1990; 
SELECT      p.ID  FROM      Examination e  JOIN      Patient p ON e.ID = p.ID  WHERE      e.aCL_IgG NOT IN ('-', '+-')  ORDER BY      p.First_Date  LIMIT 1; 
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.SSB IN('-', '+-') AND Examination.Diagnosis = 'SLE'; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.SSB IN('-', '+-') AND e.Symptoms IS NOT NULL; 
SELECT COUNT(DISTINCT P.ID)  FROM Patient P  JOIN Examination E ON P.ID = E.ID  WHERE E.aCL_IgG IN ('-', '+-')  AND E.aCL_IgM IN ('-', '+-')  AND P.Sex = 'M'; 
SELECT DISTINCT e.Diagnosis FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.DNA >= 8; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID AND l.DNA < 8 WHERE p.Description IS NULL AND l.DNA IS NULL; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.DNA-II >= 8 AND p.Admission = '+'; 
SELECT      MULTIPLY(DIVIDE(COUNT(E.ID), COUNT(DISTINCT E.ID))) AS percentage_abnormal_GOT_SLE FROM      Examination E WHERE      E.aCL_IgG >= 60 AND E.aCL_IgM >= 60     AND EXISTS (         SELECT 1         FROM Examination E2         JOIN Patient P ON E2.ID = P.ID         WHERE              E2.aCL_IgG >= 60 AND E2.aCL_IgM >= 60             AND P.Description = 'SLE'     ); 
SELECT COUNT(*)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Patient.Sex = 'M' AND Examination.GOT < 60; 
SELECT p.Birthday  FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG >= 60 OR e.aCL_IgM >= 60 ORDER BY p.Birthday ASC LIMIT 1; 
SELECT p.ID, p.Date, e.aCL_IgG, e.aCL_IgM, e.Thrombosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG < 60 ORDER BY e.aCL_IgG DESC LIMIT 3; 
SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.aCL_IgG < 60 AND P.Sex = 'M'; 
SELECT MIN(Laboratory.Date) as FirstRecordDate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.DNA-II < 500 ORDER BY Laboratory.DNA-II DESC LIMIT 1; 
SELECT MAX(Laboratory.Date) AS LatestRecordDate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.LDH >= 500 AND Patient.First_Date = (     SELECT MAX(First_Date)     FROM Patient ) 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.ALP >= 300 AND e.Admission = '+'; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.GPT < 300; 
SELECT DISTINCT p.ID, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T-BIL < 6.0; 
SELECT COUNT(*)  FROM Examination E  JOIN Laboratory L ON E.ID = L.ID  JOIN Patient P ON E.ID = P.ID  WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5; 
SELECT Examination.Examination_Date  FROM Examination  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Laboratory.GPT > 3.5 AND Laboratory.GPT < 5.5  ORDER BY Laboratory.GPT DESC  LIMIT 1; 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5; 
SELECT E.aCL_IgG, E.aCL_IgM, E.aCL_IgA FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN (     SELECT L.ID, MAX(L.T_BIL) AS MaxTBIL     FROM Laboratory L     WHERE L.T_BIL BETWEEN 6.50 AND 8.50 ) AS NormTBIL ON P.ID = NormTBIL.ID WHERE P.Description = 'F' ORDER BY NormTBIL.MaxTBIL DESC LIMIT 1; 
SELECT MAX(`aCL IgG`) AS highest_anti_nucleus_anti_body_level FROM `Examination` WHERE `ANA Pattern` IS NOT NULL AND `aCL IgG` IS NOT NULL AND EXISTS (     SELECT 1     FROM `Laboratory` lab     JOIN `Patient` pat ON lab.ID = pat.ID     WHERE lab.ID = `Examination.ID`     AND pat.ID = `Examination.ID`     AND lab.T-BIL < 1.5 ) 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination WHERE aCL_IgA < 1.5) AND e.aCL_IgA < 1.5; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.T_BIL >= 2.0 AND E.ANA_Pattern LIKE '%P%'; 
SELECT E.aCL_IgG AS ANA FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG IS NOT NULL AND P.Description IS NOT NULL AND E.T_BIL < 2.0 AND E.T_BIL = (SELECT MAX(T_BIL) FROM Examination WHERE T_BIL < 2.0) 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.aCL_IgG = '-' AND E.T_CHO >= 250; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis LIKE '%Total Cholesterol%' AND p.Diagnosis LIKE '%< 250%' AND e.ANA_Pattern = 'P'; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgG < 200 AND e.aCL_IgM < 200 AND e.ANA_Pattern IS NOT NULL AND e.Symptoms IS NOT NULL; 
SELECT p.`Diagnosis`  FROM `Patient` p  JOIN `Examination` e ON p.`ID` = e.`ID` WHERE e.`aCL IgG` < 200 AND e.`aCL IgG` = (     SELECT MAX(e2.`aCL IgG`)     FROM `Examination` e2     WHERE e2.`aCL IgG` < 200 ) 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 0 AND e.aCL_IgG < 250 OR e.aCL_IgM < 250; 
SELECT COUNT(*) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.aCL_IgG IS NOT NULL AND E.aCL_IgM IS NOT NULL AND L.TAT2 IS NOT NULL AND L.DNA_II IS NOT NULL AND L.TAT2 < 250 AND L.DNA_II < 250 AND (E.Thrombosis = 1 OR E.Thrombosis = '1'); 
SELECT p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GLU > 180 ORDER BY p.Birthday ASC LIMIT 1; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.`aCL IgG` < 180 AND E.`aCL IgM` < 180 AND E.Thrombosis = 0; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '+' AND l.HGB BETWEEN 3.5 AND 9.0; 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  JOIN Laboratory l ON e.ID = l.ID  WHERE p.Diagnosis = 'SLE' AND l.HGB BETWEEN 3.5 AND 9.0; 
SELECT DISTINCT E.ID FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Admission = '-' AND      (E.HCT < 3.5 OR E.HCT > 6.0 OR E.HCT IS NULL) 
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG IS NOT NULL OR E.aCL_IgM IS NOT NULL OR E.ANA_Pattern IS NOT NULL AND E.aCL_IgA IS NOT NULL AND P.Diagnosis IS NOT NULL AND E.aCL_IgG > 100 AND E.aCL_IgG < 400 AND E.aCL_IgA > 100 AND E.aCL_IgA < 400; 
SELECT      p.ID,      p.Description,      p.First_Date,      e.aCL_IgG,      e.aCL_IgM,      e.aCL_IgA,      e.Symptoms,      e.Thrombosis  FROM      Patient p  JOIN      Examination e ON p.ID = e.ID  WHERE      p.Description = 'MCTD'      AND e.aCL_IgG IS NOT NULL      AND e.aCL_IgM IS NOT NULL      AND e.aCL_IgA IS NOT NULL      AND e.Symptoms IS NOT NULL      AND e.Thrombosis IS NOT NULL      AND e.aCL_IgA > 100      AND e.aCL_IgA < 400; 
SELECT AVG(T-BIL) AS AverageProthrombinTime FROM Examination WHERE SEX = 'M' AND `T-BIL` < 14; 
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis IN (1, 2) AND P.ID IN (SELECT L.ID FROM Laboratory L WHERE L.Date < '2023-01-01' AND L.Date > '2022-01-01'); 
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'; 
SELECT COUNT(DISTINCT m.member_id)  FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN college co ON ma.college = co.college_name WHERE co.college_name = 'College of Engineering'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Art and Design'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Student_Club'; 
SELECT m.phone  FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'Medium'; 
SELECT      e.event_name,      COUNT(a.link_to_member) AS total_attendance FROM      event e JOIN      attendance a ON e.event_id = a.link_to_event JOIN      member m ON a.link_to_member = m.member_id WHERE      m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club') GROUP BY      e.event_id ORDER BY      total_attendance DESC LIMIT 1; 
SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President' AND ma.college = 'Student Club'; 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'; 
SELECT COUNT(DISTINCT e.event_id)  FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha'  AND m.last_name = 'Harrison' AND e.event_name = 'Student_Club' AND YEAR(e.event_date) = 2019; 
SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Meeting' AND m.position = 'Student_Club' GROUP BY e.event_id HAVING COUNT(DISTINCT a.link_to_member) > 10; 
SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Student_Club' GROUP BY event.event_name HAVING COUNT(attendance.link_to_member) > 20; 
SELECT      (COUNT(DISTINCT e.event_id) / COUNT(DISTINCT e.event_name)) AS average_attendance FROM      event e JOIN      attendance a ON e.event_id = a.link_to_event WHERE      e.type = 'Meeting'      AND YEAR(e.event_date) = 2020; 
SELECT expense_description, MAX(cost) AS max_cost FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'club')) GROUP BY expense_description ORDER BY max_cost DESC LIMIT 1; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud'; 
SELECT m.last_name  FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies'; 
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.member_id = (SELECT member_id FROM member WHERE name = 'Sherri Ramsey'); 
SELECT m.college  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE m.member_id = 'Tyler Hewitt'; 
SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President'; 
SELECT SUM(b.spent) AS total_food_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Food'; 
SELECT      z.city,      z.state FROM      member m JOIN      zip_code z ON m.zip = z.zip_code JOIN      major ma ON m.link_to_major = ma.major_id JOIN      event e ON ma.department = e.event_name -- Assuming 'department' in major table refers to the club's department WHERE      m.position = 'President' 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois'; 
SELECT SUM(b.spent) AS total_spent_on_advertisement FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement'; 
SELECT m.major_id, ma.department FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id WHERE m.member_id IN ('Pierce', 'Guidi'); 
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'; 
SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08' AND e.approved = 'True'; 
SELECT SUM(e.cost) / COUNT(e.expense_id) AS avg_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND MONTH(e.expense_date) IN (9, 10); 
SELECT     (SUM(CASE WHEN YEAR(e.event_date) = 2019 THEN b.spent ELSE 0 END) -      SUM(CASE WHEN YEAR(e.event_date) = 2020 THEN b.spent ELSE 0 END)) AS total_spent_difference FROM     event e JOIN     budget b ON e.event_id = b.link_to_event JOIN     member m ON e.event_id = b.link_to_event WHERE     m.position = 'Student_Club'; 
SELECT location FROM event WHERE event_name = 'Spring Budget Review'; 
SELECT SUM(b.amount) AS total_cost FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name LIKE '%Posters%' AND e.event_date = '2019-09-04' AND b.category = 'Posters'; 
SELECT b.remaining  FROM budget b  WHERE b.category = 'Food'  ORDER BY b.amount DESC  LIMIT 1; 
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'; 
SELECT COUNT(DISTINCT major_id)  FROM major  WHERE college = 'College of Humanities and Social Sciences'; 
SELECT phone  FROM member  WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; 
SELECT `county` FROM `member` JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `first_name` = 'Adela' AND `last_name` = 'O''Gallagher'; 
SELECT COUNT(*) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0; 
SELECT SUM(b.amount)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.event_name = 'September Speaker'; 
SELECT e.status  FROM event e JOIN expense ex ON e.event_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20'; 
SELECT `major_name` FROM `major` WHERE `major_id` IN (     SELECT `link_to_major`     FROM `member`     WHERE `first_name` = 'Brent' AND `last_name` = 'Thomason' ); 
SELECT COUNT(*) FROM member WHERE `link_to_major` IN (     SELECT `major_id`     FROM major     WHERE `major_name` = 'Human Development and Family Studies' ) AND `t_shirt_size` = 'Large'; 
SELECT `zip_code` FROM `member` JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `member`.`member_id` = 'Christof_Nielsen'; 
SELECT m.link_to_major, ma.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President'; 
SELECT `state` FROM `member` JOIN `zip_code` ON `member.zip` = `zip_code.zip_code` WHERE `first_name` = 'Sacha' AND `last_name` = 'Harrison'; 
SELECT m.link_to_major, m.first_name, m.last_name, m.position, m.email, m.phone, m.t_shirt_size, m.zip, m.zip_code.city, m.major_name, m.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'President' JOIN zip_code zc ON m.zip = zc.zip_code; 
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues'; 
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.source = 'Dues' AND i.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') LIMIT 1; 
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) /      SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END)) AS ratio FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      b.event_status = 'Advertisement' 
SELECT      (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) / SUM(b.amount)) * 100 AS parking_percentage FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'November Speaker'; 
SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE e.expense_description = 'Pizza'; 
SELECT COUNT(DISTINCT city)  FROM zip_code  WHERE county = 'Orange' AND short_state = 'VA'; 
SELECT m.major_id  FROM major  JOIN member m ON m.link_to_major = major.major_id  WHERE m.college = 'Humanities and Social Sciences'; 
SELECT      z.city,      z.county,      z.state FROM      member m JOIN      zip_code z ON m.zip = z.zip_code WHERE      m.first_name = 'Amy' AND m.last_name = 'Firth'; 
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget); 
SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting'; 
SELECT college, COUNT(member_id) AS member_count FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY college ORDER BY member_count DESC LIMIT 1; 
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'; 
SELECT `event_name`, MAX(`amount`) AS highest_budget FROM `event` JOIN `budget` ON `event.event_id` = `budget.link_to_event` WHERE `budget.amount` IS NOT NULL GROUP BY `event_name` ORDER BY highest_budget DESC LIMIT 1; 
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'; 
SELECT COUNT(DISTINCT a.link_to_member)  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer'; 
SELECT income.date_received  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'; 
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.county = 'Maryland'; 
SELECT COUNT(DISTINCT e.event_id)  FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240'; 
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education'; 
SELECT event_id, event_name,         MAX(DIVIDE(spent, amount)) AS spend_to_budget_ratio FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' GROUP BY event.event_id, event.event_name ORDER BY spend_to_budget_ratio DESC LIMIT 1; 
SELECT COUNT(*)  FROM member  WHERE position = 'President'; 
SELECT MAX(spent) AS highest_budget_spent FROM budget; 
SELECT COUNT(*)  FROM event  WHERE type = 'Meeting' AND YEAR(event_date) = 2020; 
SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Food'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7; 
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON m.zip = e.location WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater'; 
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'; 
SELECT SUM(i.amount) AS total_income FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount > 40; 
SELECT SUM(e.cost) AS total_expense FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff'; 
SELECT m.member_id, m.t_shirt_size FROM member m JOIN budget b ON m.member_id = b.link_to_member JOIN event e ON b.link_to_event = e.event_id WHERE e.event_id = 'Yearly Kickoff' AND b.event_status = 'Budget Management'; 
SELECT m.first_name, m.last_name, i.source, MAX(i.amount) AS highest_income FROM member m JOIN income i ON m.member_id = i.link_to_member GROUP BY m.member_id ORDER BY highest_income DESC LIMIT 1; 
SELECT `event_name`, MIN(`amount`) AS lowest_cost FROM `event` JOIN `budget` ON `event.event_id` = `budget.link_to_event` WHERE `budget.category` = 'Cost' GROUP BY `event.event_id` ORDER BY `amount` ASC LIMIT 1; 
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS Yearly_Kickoff_Percentage FROM      event e; 
SELECT      (SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance') THEN 1 ELSE 0 END) * 1.0) /      (SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics') THEN 1 ELSE 0 END) * 1.0) AS finance_to_physics_ratio FROM      member m; 
SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1; 
SELECT m.first_name, m.last_name, m.email FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Student Club' AND m.position = 'Secretary'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching'; 
SELECT COUNT(DISTINCT a.link_to_member)  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019; 
SELECT COUNT(e.event_id) AS num_events_attended, m.major_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.major_name; 
SELECT AVG(spent) AS average_food_spent FROM budget WHERE category = 'Food' AND event_status = 'Closed' GROUP BY event_id ORDER BY average_food_spent DESC LIMIT 1; 
SELECT event_name  FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE budget.category = 'Advertisement'  ORDER BY budget.spent DESC  LIMIT 1; 
SELECT 1  FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women's Soccer'  AND m.first_name = 'Maya' AND m.last_name = 'Mclean'; 
SELECT      (SUM(CASE WHEN e.type = 'Community Service' THEN 1 ELSE 0 END) * 100.0) / COUNT(e.event_id) AS community_service_percentage FROM      event e WHERE      e.event_date BETWEEN '2019-01-01' AND '2019-12-31' AND e.event_name = 'Student_Club'; 
SELECT SUM(e.cost) AS total_poster_cost FROM expense e JOIN event ev ON e.link_to_budget IN (     SELECT b.budget_id     FROM budget b     JOIN event ev ON b.link_to_event = ev.event_id     WHERE ev.event_name = 'September Speaker' AND b.category = 'Posters' ); 
SELECT `t_shirt_size`, COUNT(`t_shirt_size`) AS `size_count` FROM `member` GROUP BY `t_shirt_size` ORDER BY `size_count` DESC LIMIT 1; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1; 
SELECT      e.event_name,      e.type,      SUM(e.cost) AS total_approved_value FROM      expense e JOIN      event ev ON e.link_to_event = ev.event_id WHERE      ev.event_name = 'October Meeting' AND      e.approved = 'Yes' GROUP BY      e.event_name,      e.type; 
SELECT      b.category,     SUM(b.amount) AS total_amount FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'April Speaker' GROUP BY      b.category ORDER BY      total_amount ASC; 
SELECT `budget_id`, `amount` FROM `budget` WHERE `category` = 'Food' ORDER BY `amount` DESC LIMIT 1; 
SELECT `budget_id`, `amount` FROM `budget` WHERE `category` = 'Advertising' ORDER BY `amount` DESC LIMIT 3; 
SELECT SUM(e.cost) AS total_parking_cost FROM expense e WHERE e.expense_description = 'Parking'; 
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large'; 
SELECT DISTINCT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50; 
SELECT major_name FROM major WHERE major_id IN (     SELECT link_to_major     FROM member     WHERE first_name = 'Phillip' AND last_name = 'Cullen' ); 
SELECT m.position FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business'; 
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'; 
SELECT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30; 
SELECT `event_name`, `type` FROM `event` WHERE `location` = 'MU 215'; 
SELECT event.event_name, major.major_name FROM event JOIN major ON event.link_to_major = major.major_id WHERE event.event_date = '2020-03-24T12:00:00'; 
SELECT m.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President'; 
SELECT      (SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100) / COUNT(T1.member_id) AS percentage_math_major_members FROM      member T1 JOIN      major T2 ON T1.link_to_major = T2.major_id WHERE      T1.position = 'Member'; 
SELECT event_name FROM event WHERE location = 'MU 215'; 
SELECT COUNT(*)  FROM income  WHERE amount = 50; 
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'; 
SELECT COUNT(DISTINCT major.major_id) FROM major JOIN member ON major.major_id = member.link_to_major WHERE major.college = 'School of Applied Sciences, Technology and Education' AND member.zip IN (SELECT zip_code FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE college = 'College of Agriculture and Applied Sciences'))); 
SELECT      m.last_name,      m.department,      m.college FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      ma.major_name = 'Environmental Engineering'; 
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0; 
SELECT DISTINCT z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE ma.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member'; 
SELECT e.event_name FROM event e JOIN member m ON e.event_id = (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Vice' AND last_name = 'President' AND position = 'Vice President')) WHERE e.type = 'Social' AND e.location = '900 E. Washington St.'; 
SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10'; 
SELECT m.last_name FROM member m JOIN event e ON m.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member'; 
SELECT      (COUNT(CASE WHEN income.amount = 50 THEN 1 END) / COUNT(member.member_id)) * 100 AS percentage_of_50 FROM      member JOIN      income ON member.member_id = income.link_to_member WHERE      member.t_shirt_size = 'Medium' AND      member.position = 'Member' AND      income.amount = 50; 
SELECT DISTINCT zc.state FROM zip_code zc WHERE zc.type = 'PO Box'; 
SELECT DISTINCT zc.zip_code FROM zip_code zc JOIN member m ON zc.zip_code = m.zip JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'San Juan Municipio' AND maj.state = 'Puerto Rico' AND zc.city LIKE '%PO Box%'; 
SELECT event_name  FROM event  WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'; 
SELECT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget JOIN member m ON ex.link_to_member = m.member_id WHERE ex.cost > 50; 
SELECT      m.member_id,      m.first_name,      m.last_name,      e.event_id,      e.event_name FROM      member m JOIN      attendance a ON m.member_id = a.link_to_member JOIN      event e ON a.link_to_event = e.event_id JOIN      expense ex ON m.member_id = ex.link_to_member WHERE      ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'     AND e.event_date BETWEEN '2019-01-10' AND '2019-11-19'     AND ex.expense_description = 'approved' GROUP BY      m.member_id, e.event_id; 
SELECT m.link_to_major, ma.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Katy' AND ma.major_id = 'rec1N0upiVLy5esTO'; 
SELECT m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN college co ON ma.college = co.college_name WHERE ma.major_name = 'Business' AND co.college_name = 'College of Agriculture and Applied Sciences'; 
SELECT DISTINCT m.email FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'education' AND ma.college = 'College of Education & Human Services'; 
SELECT      (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) / COUNT(e.event_id)) * 100 AS over_budget_percentage FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      b.remaining < 0; 
SELECT event.event_id, event.location, budget.event_status FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31'; 
SELECT expense_id, expense_description, expense_date, cost FROM expense WHERE cost > (SELECT AVG(cost) FROM expense) 
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'; 
SELECT      ROUND((SUM(CASE WHEN zc.type = 'PO Box' THEN 1 ELSE 0 END) / COUNT(zc.zip_code)) * 100, 2) AS percentage_po_box_zip_codes FROM      zip_code zc; 
SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount - budget.spent > 0; 
SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100; 
SELECT      CONCAT(m.first_name, ' ', m.last_name) AS full_name,      ma.major_name FROM      member m JOIN      expense e ON m.member_id = e.link_to_member JOIN      major ma ON m.link_to_major = ma.major_id WHERE      e.cost > 100; 
SELECT e.location, z.city, z.short_state FROM event e JOIN income i ON e.event_id = i.link_to_member JOIN member m ON i.link_to_member = m.member_id JOIN zip_code z ON m.zip = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 50; 
SELECT m.member_id, m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id IN (     SELECT link_to_member     FROM expense     GROUP BY link_to_member     HAVING COUNT(DISTINCT e.event_id) > 1 ) GROUP BY m.member_id, m.first_name, m.last_name ORDER BY total_cost DESC LIMIT 1; 
SELECT AVG(i.amount) AS average_amount_paid FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position != 'Member' 
SELECT event_name  FROM event  WHERE cost < (SELECT AVG(cost)               FROM budget               WHERE category = 'Parking'               AND link_to_event = event.event_id) 
SELECT      DIVIDE(SUM(e.cost), COUNT(e.event_id)) * 100 AS game_event_cost_percentage FROM      event e WHERE      e.type = 'Game' 
SELECT b.budget_id, SUM(e.cost) AS total_cost FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description IN ('Water', 'Chips', 'Cookies') GROUP BY b.budget_id ORDER BY total_cost DESC LIMIT 1; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5; 
SELECT      m.first_name,      m.last_name,      m.phone FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      e.cost > (SELECT AVG(cost) FROM expense) 
SELECT      (SUM(CASE WHEN `state` = 'Maine' THEN 1 ELSE 0 END) / COUNT(`member_id`)) -      (SUM(CASE WHEN `state` = 'Vermont' THEN 1 ELSE 0 END) / COUNT(`member_id`)) FROM      `member` WHERE      `link_to_major` IN (SELECT `major_id` FROM `major` WHERE `major_name` = 'Maine' OR `major_name` = 'Vermont') 
SELECT major_name, department  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE first_name = 'Garrett' AND member.last_name = 'Gerke'; 
SELECT      m.first_name,      m.last_name,      SUM(e.cost) AS total_spent FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      e.expense_description LIKE '%Water%'     AND e.expense_description LIKE '%Veggie tray%'     AND e.expense_description LIKE '%supplies%' GROUP BY      m.member_id 
SELECT m.last_name, m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Elementary Education'; 
SELECT b.event_status, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker'; 
SELECT DISTINCT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food'; 
SELECT      m.first_name,      m.last_name,      i.amount  FROM      member m  JOIN      income i ON m.member_id = i.link_to_member  WHERE      i.date_received = '2019-09-09'; 
SELECT b.category  FROM budget b  JOIN expense e ON b.budget_id = e.link_to_budget  WHERE e.expense_description = 'Posters'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.major_id, m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Secretary'; 
SELECT      e.event_name,      SUM(b.spent) AS total_spent_on_gifts FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      b.category = 'Speaker Gifts' GROUP BY      e.event_name; 
SELECT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke'; 
SELECT m.first_name, m.last_name FROM member m JOIN zip_code zc ON m.zip = zc.zip_code WHERE zc.city = 'Lincolnton' AND zc.state = 'North Carolina' AND zc.short_state = 'NC' AND zc.zip_code = 28092; 
SELECT COUNT(DISTINCT GasStationID)  FROM gasstations  WHERE Country = 'CZE'  AND EXISTS (     SELECT 1      FROM products      WHERE products.ProductID = gasstations.ProductID      AND Description = 'Premium gas' ); 
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) / NULLIF(COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END), 0)) AS EUR_to_CZK_ratio FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      c.Currency IN ('EUR', 'CZK'); 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID ORDER BY SUM(ym.Consumption) ASC LIMIT 1; 
SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE CustomerID IN (     SELECT CustomerID     FROM customers     WHERE Segment = 'SME' ) AND Date BETWEEN '201301' AND '201312'; 
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gas_usage gu ON c.Currency = gu.Currency WHERE gu.Currency = 'CZK' AND gu.YearMonth BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY SUM(gu.GasUsage) DESC LIMIT 1; 
SELECT COUNT(DISTINCT c.CustomerID) AS CustomersWithLowConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' AND ym.Consumption < 30000; 
SELECT      (SELECT SUM(gu.GasUsage)       FROM gas_usage gu       JOIN customers c ON gu.Currency = c.Currency       WHERE c.Currency = 'CZK' AND gu.YearMonth BETWEEN '201201' AND '201212') -      (SELECT SUM(gu.GasUsage)       FROM gas_usage gu       JOIN customers c ON gu.Currency = c.Currency       WHERE c.Currency = 'EUR' AND gu.YearMonth BETWEEN '201201' AND '201212') AS DifferenceInConsumption 
SELECT YearMonth, SUM(GasUsage) as TotalGasUsage FROM gas_usage WHERE Currency = 'EUR' GROUP BY YearMonth ORDER BY TotalGasUsage DESC LIMIT 1; 
SELECT Segment, SUM(Consumption) as TotalConsumption FROM yearmonth GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT      SUBSTR(`Date`, 1, 4) AS Year,     SUM(`Consumption`) AS TotalConsumption FROM      `yearmonth` WHERE      `Currency` = 'CZK' GROUP BY      Year ORDER BY      TotalConsumption DESC LIMIT      1; 
SELECT      SUBSTR(Date, 6, 2) AS Month,     SUM(Consumption) AS TotalConsumption FROM      yearmonth JOIN      customers ON yearmonth.CustomerID = customers.CustomerID WHERE      customers.Currency = 'SME' AND      SUBSTR(yearmonth.Date, 1, 4) = '2013' GROUP BY      Month ORDER BY      TotalConsumption DESC LIMIT 1; 
SELECT      (SUM(gu.SME_AnnualAvg) - SUM(gu.LAM_AnnualAvg)) AS LAM_KAM_Diff,     (SUM(gu.LAM_AnnualAvg) - SUM(gu.KAM_AnnualAvg)) AS KAM_SME_Diff FROM (     SELECT          CASE              WHEN c.Segment = 'SME' THEN (gu.GasUsage / COUNT(c.CustomerID))             ELSE 0          END AS SME_AnnualAvg,         CASE              WHEN c.Segment = 'LAM' THEN (gu.GasUsage / COUNT(c.CustomerID))             ELSE 0          END AS LAM_AnnualAvg,         CASE              WHEN c.Segment = 'KAM' THEN (gu.GasUsage / COUNT(c.CustomerID))             ELSE 0          END AS KAM_AnnualAvg     FROM gas_usage gu     JOIN yearmonth ym ON gu.YearMonth = ym.Date     JOIN customers c ON ym.CustomerID = c.CustomerID     WHERE gu.Currency = 'CZK'       AND gu.YearMonth BETWEEN '201301' AND '201312'     GROUP BY c.Segment ) gu; 
WITH Consumption2012 AS (     SELECT          g.Country,         g.Segment,         SUM(t.Amount) AS Consumption2012     FROM gas_usage g     JOIN transactions_1k t ON g.Currency = 'EUR' AND SUBSTR(t.Date, 1, 4) = '2012' AND g.YearMonth = SUBSTR(t.Date, 1, 6)     JOIN gasstations g ON t.GasStationID = g.GasStationID     GROUP BY g.Country, g.Segment ), Consumption2013 AS (     SELECT          g.Country,         g.Segment,         SUM(t.Amount) AS Consumption2013     FROM gas_usage g     JOIN transactions_1k t ON g.Currency = 'EUR' AND SUBSTR(t.Date, 1, 4) = '2013' AND g.YearMonth = SUBSTR(t.Date, 1, 6)     JOIN gasstations g ON t.GasStationID = g.GasStationID     GROUP BY g.Country, g.Segment ), IncreaseDecrease AS (     SELECT          c2013.Country,         c2013.Segment,         (c2013.Consumption2013 - c2012.Consumption2012) AS IncreaseDecrease     FROM Consumption2012 c2012     JOIN Consumption2013 c2013 ON c2013.Country = c2012.Country AND c2013.Segment = c2012.Segment ), PercentageIncrease AS (     SELECT          Segment,         (IncreaseDecrease / Consumption2013) * 100 AS PercentageIncrease     FROM IncreaseDecrease     JOIN Consumption2013 ON IncreaseDecrease.Country = Consumption2013.Country     WHERE Consumption2013 > 0 ), SegmentStats AS (     SELECT          Segment,         MAX(PercentageIncrease) AS MaxPercentageIncrease,         MIN(PercentageIncrease) AS MinPercentageIncrease     FROM PercentageIncrease     WHERE Segment IN ('SME', 'LAM', 'KAM')     GROUP BY Segment ) SELECT      MAX(MaxPercentageIncrease) AS MaxPercentageIncrease,     MIN(MinPercentageIncrease) AS MinPercentageIncrease FROM SegmentStats; 
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE c.CustomerID = 6 AND gu.YearMonth BETWEEN '201308' AND '201311'; 
SELECT      (SELECT COUNT(*)       FROM gasstations AS gs       JOIN gas_usage AS gu ON gs.Country = gu.Currency       WHERE gu.Currency = 'Czech Republic' AND gs.Segment = 'Discount')      -      (SELECT COUNT(*)       FROM gasstations AS gs       JOIN gas_usage AS gu ON gs.Country = gu.Currency       WHERE gu.Currency = 'Slovakia' AND gs.Segment = 'Discount')  AS DifferenceInDiscountGasStations; 
SELECT      SUM(CASE WHEN c.CustomerID = 7 THEN gu.GasUsage ELSE 0 END) -      SUM(CASE WHEN c.CustomerID = 5 THEN gu.GasUsage ELSE 0 END) AS Difference FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID JOIN      gas_usage gu ON ym.Date = gu.YearMonth WHERE      c.CustomerID IN (7, 5) AND      gu.Currency = c.Currency AND      ym.Date BETWEEN '201304' AND '201304'; 
SELECT      SUM(CASE WHEN cu.Currency = 'CZK' THEN 1 ELSE 0 END) -      SUM(CASE WHEN cu.Currency = 'EUR' THEN 1 ELSE 0 END) AS MoreCZKThanEUR FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID JOIN      gasstations g ON t.GasStationID = g.GasStationID WHERE      g.Segment = 'SME' 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201310' AND c.Currency = 'Euro' AND c.Segment = 'LAM' ORDER BY ym.Consumption DESC LIMIT 1; 
SELECT      c.CustomerID,     SUM(y.Consumption) AS TotalConsumption FROM      customers c JOIN      yearmonth y ON c.CustomerID = y.CustomerID WHERE      c.CustomerID IN (SELECT GasStationID FROM gasstations) GROUP BY      c.CustomerID ORDER BY      TotalConsumption DESC LIMIT 1; 
SELECT SUM(gu.GasUsage) AS TotalGasConsumption FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND gu.YearMonth = '201305'; 
SELECT     ROUND((COUNT(CASE WHEN `Consumption` > 46.73 THEN 1 END) * 100.0) / COUNT(*), 2) AS PercentageOfLAMCustomersConsumingMoreThan4673 FROM     `yearmonth` WHERE     `CustomerID` IN (SELECT `CustomerID` FROM `customers` WHERE `Segment` = 'LAM'); 
SELECT      gasstations.Country,     COUNT(*) AS TotalValueForMoneyGasStations FROM      gasstations JOIN      (         SELECT              GasStationID         FROM              transactions_1k         GROUP BY              GasStationID         HAVING              SUM(Amount * Price) / COUNT(TransactionID) > (SELECT AVG(Amount * Price) / COUNT(TransactionID) FROM transactions_1k)     ) AS ValuableGasStations ON      gasstations.GasStationID = ValuableGasStations.GasStationID GROUP BY      gasstations.Country ORDER BY      TotalValueForMoneyGasStations DESC; 
SELECT     ROUND(         (SUM(CASE WHEN c.Segment = 'KAM' AND t1.Currency = 'EUR' THEN 1 ELSE 0 END) /           SUM(CASE WHEN c.Segment = 'KAM' THEN 1 ELSE 0 END)) * 100,         2     ) AS PercentageOfKAMPayingInEUR FROM     customers c JOIN     transactions_1k t1 ON c.CustomerID = t1.CustomerID 
SELECT      (SELECT COUNT(*)       FROM yearmonth       WHERE SUBSTR(Date, 6, 2) = '02'         AND Consumption > 528.3) * 100.0 /      (SELECT COUNT(*)       FROM yearmonth       WHERE SUBSTR(Date, 6, 2) = '02') AS PercentageCustomersAbove5283; 
SELECT      (COUNT(CASE WHEN g.Country = 'Slovakia' THEN 1 END) * 100.0) / COUNT(g.GasStationID) AS PremiumGasStationPercentage FROM      gasstations g WHERE      g.Country = 'Slovakia' AND     g.Segment = 'Premium'; 
SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1; 
SELECT c.Segment, SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN yearmonth ym ON gu.YearMonth = ym.Date JOIN customers c ON ym.CustomerID = c.CustomerID WHERE gu.YearMonth = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' AND c.Segment = 'SME' ORDER BY ym.Consumption ASC LIMIT 1; 
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE LEFT(Date, 4) = '2012'; 
SELECT MAX(Consumption) as MaxMonthlyConsumption FROM (     SELECT SUM(`yearmonth.Consumption`) / 12 AS Consumption     FROM `yearmonth`     INNER JOIN `customers` ON `yearmonth.CustomerID` = `customers.CustomerID`     INNER JOIN `gas_usage` ON `yearmonth.CustomerID` = `gas_usage.CustomerID`     WHERE `customers.Currency` = 'Euro'     GROUP BY `yearmonth.CustomerID` ) AS MonthlyConsumptionGrouped 
SELECT DISTINCT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y%m', t.Date) = '201309'; 
SELECT DISTINCT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE SUBSTR(t.Date, 1, 6) = '201306'; 
SELECT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price IS NOT NULL AND t.Price < 1000 -- Assuming that transactions below 1000 are considered in euro GROUP BY g.ChainID; 
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Currency = 'EUR'; 
SELECT AVG(`Price`) AS AverageTotalPrice FROM `transactions_1k` WHERE `Date` LIKE '2012-01%'; 
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gas_usage gu ON c.Currency = gu.Currency WHERE gu.Currency = 'EUR' AND gu.GasUsage > 1000 GROUP BY c.CustomerID; 
SELECT p.Description FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE'; 
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11 ORDER BY Time; 
SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Price > 1000; 
SELECT COUNT(*) FROM transactions_1k AS t1 JOIN gasstations AS g ON t1.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t1.Date > '2012-01-01'; 
SELECT AVG(t.Price * t.Amount) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE gs.Country = 'CZE'; 
SELECT AVG(T.Price * T.Amount) AS AvgTotalPrice FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' 
SELECT c.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' GROUP BY t.CustomerID ORDER BY TotalSpent DESC LIMIT 1; 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' AND t.Amount IS NOT NULL ORDER BY t.TransactionID ASC LIMIT 1; 
SELECT GasUsage.Currency FROM transactions_1k JOIN gas_usage ON GasUsage.YearMonth = DATE_FORMAT(transactions_1k.Date, '%Y-%m') WHERE transactions_1k.Time = '16:25:00' AND GasUsage.YearMonth = '2012-08-24' AND transactions_1k.CustomerID = GasUsage.CustomerID AND transactions_1k.GasStationID = GasUsage.GasStationID; 
SELECT      p.ProductID,     p.Price,     g.Country,     g.GasStationID FROM      transactions_1k t JOIN      products p ON t.ProductID = p.ProductID JOIN      gasstations g ON t.GasStationID = g.GasStationID WHERE      t.CustomerID = (         SELECT              CustomerID          FROM              yearmonth          WHERE              Date = '2012-08-23'     ) AND      t.Time = '21:20:00'; 
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND EXISTS (     SELECT 1     FROM gas_usage     WHERE gas_usage.YearMonth = CONCAT(SUBSTRING(transactions_1k.Date, 1, 7), '-01')     AND gas_usage.Currency = 'EUR' ) AND gas_usage.Currency = 'EUR'; 
SELECT c.Segment  FROM customers c  JOIN (     SELECT MIN(Date) as EarliestDate      FROM transactions_1k ) AS t1 ON c.CustomerID = (     SELECT CustomerID      FROM transactions_1k      WHERE Date = t1.EarliestDate ); 
SELECT g.GasStationID, g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00'; 
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'; 
SELECT      ym.Consumption AS Jan2012_Expense,     ym.Date AS Jan2012_Date FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      t.Amount = 124.05     AND t.Date = '2012-08-24'     AND ym.Date LIKE '2012-01-%'; 
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Time >= '08:00' AND t.Time < '09:00' AND t.Date = '2012-08-26' AND g.Country = 'CZE'; 
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306' AND ym.Consumption = 214582.17; 
SELECT g.Country FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.CardID = g.GasStationID WHERE t.TransactionID = 667467; 
SELECT c.Country FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24'; 
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 100.0) / COUNT(*) FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID WHERE      ym.Date = '2012-08-25'; 
SELECT      (SUM(CASE WHEN ym.Date BETWEEN '2012-01-01' AND '2012-12-31' THEN ym.Consumption ELSE 0 END) -       SUM(CASE WHEN ym.Date BETWEEN '2013-01-01' AND '2013-12-31' THEN ym.Consumption ELSE 0 END)) /       SUM(CASE WHEN ym.Date BETWEEN '2012-01-01' AND '2012-12-31' THEN ym.Consumption ELSE 0 END) AS ConsumptionDecreaseRate FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.Amount = 634.8 AND t.Date = '2012-08-25'; 
SELECT g.GasStationID, SUM(t.Amount * t.Price) AS TotalRevenue FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID GROUP BY g.GasStationID ORDER BY TotalRevenue DESC LIMIT 1; 
SELECT      (SELECT SUM(CASE WHEN p.Description LIKE '%Premium%' THEN t.Amount ELSE 0 END)       FROM transactions_1k t       JOIN products p ON t.ProductID = p.ProductID       JOIN gasstations g ON t.GasStationID = g.GasStationID       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE g.Country = 'SVK') /      (SELECT SUM(t.Amount)       FROM transactions_1k t       JOIN gasstations g ON t.GasStationID = g.GasStationID       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE g.Country = 'SVK') * 100 AS PercentageOfPremiumInSVK; 
SELECT SUM(t.Amount * t.Price) AS TotalSpent FROM transactions_1k t WHERE t.CustomerID = 38508;  SELECT SUM(t.Amount * t.Price) AS Jan2012Spent FROM transactions_1k t WHERE t.CustomerID = 38508 AND LEFT(t.Date, 6) = '201201'; 
SELECT p.Description AS ProductFullName, SUM(t.Amount) AS TotalAmountSold FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalAmountSold DESC LIMIT 5; 
SELECT      c.CustomerID,      AVG(t.Price / t.Amount) AS AvgPricePerItem,      c.Currency FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID GROUP BY      c.CustomerID ORDER BY      SUM(t.Amount) DESC LIMIT 1; 
SELECT      g.Country,     MAX(t.Price) AS MaxPrice FROM      transactions_1k t JOIN      gasstations g ON t.GasStationID = g.GasStationID WHERE      t.ProductID = 2 GROUP BY      g.Country ORDER BY      MaxPrice DESC LIMIT 1; 
SELECT ym.CustomerID,         CASE             WHEN ym.Consumption > (SELECT SUM(gu.GasUsage)                                   FROM gas_usage gu                                   WHERE gu.Currency = 'USD'                                   AND gu.YearMonth = '201208') / 2 THEN 'Above Average'            WHEN ym.Consumption <= (SELECT SUM(gu.GasUsage)                                     FROM gas_usage gu                                     WHERE gu.Currency = 'USD'                                     AND gu.YearMonth = '201208') / 2 THEN 'Below Average'        END AS ConsumptionStatus FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE t.ProductID = 5  AND t.Price / t.Amount > 29.00  AND ym.Date LIKE '201208%'; 

SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `Academic Year` = '2022-23' AND `County Code` = 'Alameda'; 
SELECT      AcademicYear,      SchoolCode,      Percent_Eligible_Free_Ages_5_17 FROM      frpm WHERE      SchoolType = 'Continuation School' ORDER BY      Percent_Eligible_Free_Ages_5_17 ASC LIMIT 3; 
SELECT s.Zip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.County Name = 'Fresno County Office of Education' AND f.Charter School (Y/N) = 1; 
SELECT      s.MailStreet,      s.MailCity,      s.MailState,      s.MailZip FROM      frpm f JOIN      schools s ON f.School Code = s.CDSCode WHERE      f.FRPM Count (K-12) = (SELECT MAX(FRPM Count (K-12)) FROM frpm) 
SELECT DISTINCT s.Phone FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.'Charter School (Y/N)' = 1 AND f.'Charter Funding Type' = 'Direct' AND s.OpenDate > '2000-01-01'; 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.sname = schools.NCESSchool WHERE satscores.AvgScrMath < 400 AND schools.DOCType = 'V' AND schools.GSserved = 'F'; 
SELECT s.NCESSchool FROM schools s JOIN satscores sat ON s.NCESSchool = sat.enroll12 WHERE sat.NumGE1500 > 500 AND s.Magnet = 1; 
SELECT t1.SchoolPhone FROM test_takers t1 JOIN schools t2 ON t1.SchoolPhone = t2.SchoolPhone WHERE t1.SATScore > 1500 GROUP BY t1.SchoolPhone ORDER BY COUNT(t1.SATScore) DESC LIMIT 1; 
SELECT COUNT(DISTINCT takers.SchoolPhone) FROM test_takers takers JOIN schools schools ON takers.SchoolPhone = schools.NCESDist JOIN frpm frpm ON schools.NCESDist = frpm.NCESDist WHERE frpm.'FRPM Count (K-12)' = (     SELECT MAX('FRPM Count (K-12)')     FROM frpm ) 
SELECT COUNT(DISTINCT s.NCESSchool) FROM schools s JOIN test_takers tt ON s.NCESSchool = tt.SchoolPhone JOIN school_scores ss ON s.NCESSchool = ss.CDSCode WHERE ss.Subject = 'Math' AND ss.Score > 560 AND s.Charter = 1; 
SELECT frpm.'Free Meal Count (Ages 5-17)' FROM frpm JOIN schools ON frpm.NCESDist = schools.NCESDist JOIN test_takers ON schools.NCESDist = test_takers.SchoolPhone JOIN school_scores ON school_scores.Subject = 'Reading' WHERE school_scores.Score = (SELECT MAX(Score) FROM school_scores WHERE Subject = 'Reading') AND frpm.'Enrollment (Ages 5-17)' > 0 ORDER BY school_scores.Score DESC LIMIT 1; 
SELECT DISTINCT s.CDSCode FROM frpm f JOIN schools s ON f.SchoolCode = s.NCESSchool WHERE f.'Enrollment (K-12)' + f.'Enrollment (Ages 5-17)' > 500; 
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE `Percent (%) Eligible FRPM (Ages 5-17)` > 0.3 AND `Enrollment (Ages 5-17)` > 0 AND `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL; 
SELECT s.SchoolPhone FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.rtype = 'Total' AND st.NumGE1500 IS NOT NULL AND st.NumTstTakr IS NOT NULL ORDER BY (st.NumGE1500 * 1.0 / st.NumTstTakr) DESC LIMIT 3; 
SELECT      s.NCESDist,      s.NCESSchool FROM      schools s JOIN      frpm f ON s.NCESDist = f.'School Code' ORDER BY      f.'Enrollment (Ages 5-17)' DESC LIMIT 5; 
SELECT      s.'NCESDist',      AVG(sc.'Score') AS AvgScore FROM      schools s JOIN      school_scores sc ON s.'CDSCode' = sc.'CDSCode' WHERE      sc.'Subject' = 'Reading' GROUP BY      s.'NCESDist' ORDER BY      AvgScore DESC LIMIT 1; 
SELECT COUNT(DISTINCT s.NCESSchool) AS SchoolCount FROM schools s JOIN frpm f ON s.NCESSchool = f.School Code WHERE s.State = 'CA' AND s.GSserved = 'Merged Alameda' AND s.NCESSchool IN (SELECT NCESSchool FROM test_takers WHERE SchoolPhone IN (SELECT SchoolPhone FROM schools WHERE GSserved = 'Merged Alameda')) GROUP BY s.NCESSchool HAVING SUM(CASE WHEN s.NCESSchool IN (SELECT NCESSchool FROM test_takers) THEN 1 ELSE 0 END) < 100; 
SELECT s.'Charter School Number' FROM frpm f JOIN schools s ON f.'School Code' = s.'NCESDist' JOIN school_scores ss ON s.'CDSCode' = ss.'CDSCode' WHERE ss.'Subject' = 'Writing' AND ss.'Score' = 499; 
SELECT COUNT(DISTINCT s.NCESSchool)  FROM schools s JOIN satscores ss ON s.NCESDist = ss.enroll12 WHERE s.State = 'CA' AND s.GSserved = 'Contra Costa' AND s.FundingType = 'Direct Funded' AND ss.NumGE1500 <= 250; 
SELECT s.Phone FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' GROUP BY s.CDSCode ORDER BY AVG(ss.Score) DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE District = 'Amador' AND Low_Grade = '9' AND High_Grade = '12'; 
SELECT COUNT(*) FROM frpm f JOIN schools s ON f.NCESSchool = s.NCESSchool WHERE s.NCESDist = 'Los Angeles' AND f.'Free Meal Count (K-12)' > 500 AND f.'Free Meal Count (K-12)' < 700; 
SELECT s.NCESSchool, COUNT(t.SATScore) AS TestTakerCount FROM schools s JOIN test_takers t ON s.NCESSchool = t.SchoolPhone WHERE s.GSserved = 'Contra Costa' GROUP BY s.NCESSchool ORDER BY TestTakerCount DESC LIMIT 1; 
SELECT s.School, s.Street, s.StreetAbr, s.City, s.Zip, s.State FROM frpm f JOIN schools s ON f.SchoolCode = s.School WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30; 
SELECT s.'NCESDist' FROM frpm JOIN schools ON frpm.'2013-14 CALPADS Fall 1 Certification Status' = schools.'NCESDist' JOIN test_takers ON schools.'NCESDist' = test_takers.'SchoolPhone' WHERE frpm.'Percent (%) Eligible Free (K-12)' > 10 AND test_takers.'SATScore' >= 1500; 
SELECT s.NCESSchool, s.FundingType FROM schools s JOIN (     SELECT t1.enroll12, AVG(t2.Score) AS AvgScore     FROM satscores t1     JOIN school_scores t2 ON t1.enroll12 = t2.CDSCode AND t2.Subject = 'Math'     GROUP BY t1.enroll12 ) AS avg_scores ON s.NCESDist = avg_scores.enroll12 WHERE s.State = 'Riverside' AND avg_scores.AvgScore > 400; 
SELECT      s.'School Name',      s.'MailStreet',      s.'MailCity',      s.'MailState',      s.'MailZip' FROM      'frpm' f JOIN      'schools' s ON f.'School Code' = s.'NCESSchool' WHERE      f.'School Name' LIKE '%High School%'     AND f.'Percent (%) Eligible Free (Ages 5-17)' > 0     AND CAST(f.'Free Meal Count (Ages 5-17)' AS REAL) > 800     AND s.'State' = 'Monterey'; 
SELECT s.School, ss.Score, s.Phone FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Writing' AND (s.OpenDate > '1991-12-31' OR s.LastUpdate < '1999-12-31'); 
SELECT      s.School,      s.DOCType FROM      schools s JOIN      frpm f ON s.CDSCode = f.School Code WHERE      f.'Charter School (Y/N)' = 0 -- Assuming locally funded schools are not charter schools     AND f.'Enrollment (K-12)' IS NOT NULL     AND f.'Enrollment (Ages 5-17)' IS NOT NULL GROUP BY      s.School,      s.DOCType HAVING      ABS(f.'Enrollment (K-12)' - f.'Enrollment (Ages 5-17)') > (         SELECT              AVG(ABS(f2.'Enrollment (K-12)' - f2.'Enrollment (Ages 5-17)'))         FROM              frpm f2         WHERE              f2.'Charter School (Y/N)' = 0 -- Assuming locally funded schools are not charter schools             AND f2.'Enrollment (K-12)' IS NOT NULL             AND f2.'Enrollment (Ages 5-17)' IS NOT NULL     ) ORDER BY      ABS(f.'Enrollment (K-12)' - f.'Enrollment (Ages 5-17)') DESC; 
SELECT MIN(s.LastUpdate) as FirstOpenDate FROM schools s JOIN frpm f ON s.NCESSchool = f.NCESSchool WHERE f.'Enrollment (K-12)' IS NOT NULL AND f.'Enrollment (K-12)' = (SELECT MAX('Enrollment (K-12)')                                                                  FROM frpm                                                                  WHERE 'Enrollment (K-12)' IS NOT NULL) 
SELECT      s.State,      s.NCESDist FROM      frpm f JOIN      schools s ON f.NCESDist = s.NCESDist WHERE      f.'Enrollment (K-12)' IS NOT NULL ORDER BY      f.'Enrollment (K-12)' ASC LIMIT 5; 
SELECT      frpm.'Percent (%) Eligible Free (K-12)'  FROM      frpm  JOIN      (         SELECT              'frpm'.'School Code',              'frpm'.'Enrollment (K-12)'          FROM              frpm          ORDER BY              'frpm'.'Enrollment (K-12)' DESC          LIMIT 10     ) AS top10schools  ON      frpm.'School Code' = top10schools.'School Code'  JOIN      (         SELECT              'frpm'.'School Code',              'frpm'.'Enrollment (K-12)'          FROM              frpm          ORDER BY              'frpm'.'Enrollment (K-12)' DESC          LIMIT 10, 10     ) AS top11schools  ON      frpm.'School Code' = top11schools.'School Code'  WHERE      frpm.'School Code' IN (SELECT 'School Code' FROM top10schools) AND frpm.'School Code' IN (SELECT 'School Code' FROM top11schools); 
SELECT      frpm.School Name,      (frpm.FRPM Count (K-12) / frpm.Enrollment (K-12)) AS EligibleFreeMealRate FROM      frpm JOIN      schools ON frpm.School Code = schools.CDSCode WHERE      schools.NCESDist = '66' ORDER BY      frpm.FRPM Count (K-12) DESC LIMIT 5; 
SELECT      s.Website,      s.School FROM      frpm f JOIN      schools s ON f.SchoolCode = s.CDSCode WHERE      f.FreeMealCount_Ages5_17 BETWEEN 1900 AND 2000; 
SELECT      s.NCESSchool,     f.`Percent (%) Eligible Free (Ages 5-17)` AS Free_Rate FROM      frpm f JOIN      schools s ON f.School Code = s.NCESDist WHERE      s.AdmFName1 = 'Kacey Gibson' OR     s.AdmLName1 = 'Gibson' OR     s.AdmFName2 = 'Kacey Gibson' OR     s.AdmLName2 = 'Gibson' OR     s.AdmFName3 = 'Kacey Gibson' OR     s.AdmLName3 = 'Gibson'; 
SELECT schools.AdmEmail1, schools.AdmEmail2, schools.AdmEmail3 FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.'Charter School (Y/N)' = 1 ORDER BY frpm.'Enrollment (K-12)' ASC LIMIT 1; 
SELECT      s.AdmFName1,      s.AdmLName1,      s.AdmFName2,      s.AdmLName2,      s.AdmFName3,      s.AdmLName3 FROM      schools s JOIN      satscores sc ON s.NCESDist = sc.sname WHERE      sc.NumGE1500 IS NOT NULL GROUP BY      s.NCESDist ORDER BY      SUM(sc.NumGE1500) DESC LIMIT 1; 
SELECT      s.Street,      s.City,      s.Zip,      s.State FROM      schools s JOIN      (SELECT           s.CDSCode,           s.NCESDist,           s.NCESSchool,           (t.NumGE1500 * 1.0) / t.NumTstTakr AS ExcellenceRate      FROM           schools s      JOIN satscores t ON s.CDSCode = t.cds      WHERE           t.rtype = 'Total' AND t.sname IS NULL AND t.dname IS NULL AND t.cname IS NULL     ) AS ranked_schools ON      s.CDSCode = ranked_schools.CDSCode ORDER BY      ranked_schools.ExcellenceRate ASC LIMIT 1; 
SELECT schools.'StatusType', schools.'StreetAbr', schools.'MailStreet', schools.'MailState' FROM schools JOIN test_takers ON schools.'NCESSchool' = test_takers.'SchoolPhone' WHERE schools.'GSserved' = 'Los Angeles County' GROUP BY schools.'NCESSchool' HAVING COUNT(test_takers.'SATScore') BETWEEN 2000 AND 3000; 
SELECT AVG(test_takers.SATScore) AS AverageSATScore FROM frpm JOIN schools ON frpm.School Code = schools.NCESSchool JOIN test_takers ON schools.NCESSchool = test_takers.SchoolPhone WHERE frpm.Academic Year = '1980-1981' AND schools.LastUpdate BETWEEN '1980-01-01' AND '1980-12-31' AND frpm.County Code = 'Fresno'; 
SELECT s.Phone FROM schools s JOIN satscores sc ON s.CDSCode = sc.cname WHERE sc.rtype = 'Reading' AND s.District = 'Fresno Unified' ORDER BY sc.AvgScrRead ASC LIMIT 1; 
SELECT s.CDSCode, s.NCESSchool, AVG(s.SATScore) AS AvgReadScore FROM schools s JOIN satscores sat ON s.CDSCode = sat.cname WHERE s.Virtual = 'F' AND sat.Subject = 'Read' GROUP BY s.CDSCode, s.NCESSchool ORDER BY AvgReadScore DESC LIMIT 5; 
SELECT frpm.'Enrollment (K-12)' FROM frpm JOIN school_scores ON frpm.'Subject' = school_scores.Subject WHERE school_scores.Subject = 'Math' ORDER BY AVG(frpm.'Enrollment (K-12)') DESC LIMIT 1; 
WITH SubjectScores AS (     SELECT         s.CDSCode,         (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) AS AvgScore     FROM satscores s ), LowestAverage AS (     SELECT         MIN(AvgScore) AS MinScore     FROM SubjectScores ), SchoolWithLowestAverage AS (     SELECT         ss.CDSCode     FROM SubjectScores ss     JOIN LowestAverage la ON ss.AvgScore = la.MinScore ), SchoolAndCounty AS (     SELECT         f.County Code,         s.CDSCode     FROM frpm f     JOIN SchoolWithLowestAverage s ON f.CDSCode = s.CDSCode ) SELECT     f.County Name,     s.AvgScrMath FROM SchoolAndCounty s JOIN frpm f ON s.CDSCode = f.CDSCode; 
SELECT s.NCESSchool, s.NCESDist, AVG(sc.Score) AS AvgWritingScore FROM schools s JOIN test_takers tt ON s.NCESDist = tt.SchoolPhone JOIN school_scores sc ON tt.SchoolPhone = sc.CDSCode AND sc.Subject = 'Writing' JOIN (     SELECT SchoolPhone     FROM test_takers     WHERE SATScore >= 1500     GROUP BY SchoolPhone     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS top_test_takers ON s.NCESDist = top_test_takers.SchoolPhone GROUP BY s.NCESSchool, s.NCESDist; 
SELECT      s.School,      AVG(scores.Score) AS AvgWritingScore FROM      schools s JOIN      school_scores scores ON s.CDSCode = scores.CDSCode JOIN      test_takers tt ON s.CDSCode = tt.SchoolPhone JOIN      (SELECT           AdmFName1,           AdmLName1      FROM           schools      WHERE           AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich'     ) admin ON s.AdmFName1 = admin.AdmFName1 AND s.AdmLName1 = admin.AdmLName1 WHERE      scores.Subject = 'Writing' GROUP BY      s.School; 
SELECT      s.State,      fpm.'Enrollment (K-12)' AS EnrollmentCount FROM      frpm fpm JOIN      schools s ON fpm.'School Code' = s.CDSCode WHERE      fpm.'School Type' = 'State Special School'      AND fpm.'DOCType' = '31' ORDER BY      fpm.'Enrollment (K-12)' DESC LIMIT 1; 
SELECT      COUNT(DISTINCT s.CDSCode) / 12 AS MonthlyAverageSchoolsOpened FROM      schools s WHERE      s.County = 'Alameda' AND      s.District = 'Elementary School District' AND      s.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND      s.DOCType = '52' 
SELECT      (COUNT(CASE WHEN s.DOCType = '54' THEN 1 END) * 1.0) /      COUNT(CASE WHEN s.DOCType = '52' THEN 1 END) AS Ratio FROM      schools s WHERE      s.County = 'Orange' AND     s.District IS NOT NULL AND     s.DOCType IN ('52', '54') 
SELECT      frpm.County Name,     COUNT(s.CDSCode) AS ClosedSchoolCount,     s.School,     s.ClosedDate FROM      frpm JOIN      schools s ON frpm.County Code = s.State AND frpm.District Code = s.NCESDist AND frpm.School Code = s.NCESSchool WHERE      s.StatusType = 'Closed' GROUP BY      frpm.County Name ORDER BY      ClosedSchoolCount DESC LIMIT 1; 
SELECT s.School, s.Street AS PostalStreet FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' ORDER BY ss.Score DESC LIMIT 1 OFFSET 5; 
SELECT s.MailStreet, s.MailCity, s.MailZip, s.MailState, s.School FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Reading' ORDER BY ss.Score ASC LIMIT 1; 
SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Lakeport'  AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500; 
SELECT COUNT(DISTINCT test_takers.SchoolPhone) AS TotalTestTakers FROM test_takers JOIN schools ON test_takers.SchoolPhone = schools.Phone WHERE schools.MailCity = 'Fresno'; 
SELECT DISTINCT s.NCESSchool, s.NCESDist FROM schools s JOIN test_takers tt ON s.NCESSchool = tt.SchoolPhone JOIN school_scores ss ON tt.SchoolPhone = ss.NCESSchool WHERE s.District = 'Avetik Atoian'; 
SELECT      (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND 'County Code' = 'Colusa')     /      (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND 'County Code' = 'Humboldt') AS Ratio; 
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND District = 'San Joaquin' AND StatusType = 'Active'; 
SELECT t1.SchoolPhone, s1.GSserved FROM test_takers t1 JOIN schools s1 ON t1.SchoolPhone = s1.NCESDist JOIN school_scores s2 ON s1.NCESDist = s2.CDSCode WHERE s2.Subject = 'Writing' ORDER BY s2.Score DESC LIMIT 1 OFFSET 332; 
SELECT s.Phone, s.Phone || ' x' || SUBSTRING_INDEX(s.Phone, '-', -1) AS Extension, s.School FROM schools s WHERE s.Zip = '95203-3704'; 
SELECT s.Website FROM schools s JOIN (     SELECT CDSCode     FROM schools     WHERE (AdmFName1 = 'Mike Larson' OR AdmLName1 = 'Larson' OR AdmFName2 = 'Mike Larson' OR AdmLName2 = 'Larson' OR AdmFName3 = 'Mike Larson' OR AdmLName3 = 'Larson') OR           (AdmFName1 = 'Dante Alvarez' OR AdmLName1 = 'Alvarez' OR AdmFName2 = 'Dante Alvarez' OR AdmLName2 = 'Alvarez' OR AdmFName3 = 'Dante Alvarez' OR AdmLName3 = 'Alvarez') ) AS admins ON s.CDSCode = admins.CDSCode; 
SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P'; 
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND County = 'Hickman' AND DOC = '52'; 
SELECT COUNT(*) AS TotalNonCharteredSchools FROM frpm WHERE `Percent (%) Eligible Free (K-12)` < 0.18 AND `School Code` IN (SELECT `School Code` FROM schools WHERE `State` = 'CA' AND `Charter` = 0) AND `School Code` IN (SELECT `School Code` FROM frpm); 
SELECT      s.School,      s.City,      a.AdmFName1,      a.AdmLName1,      a.AdmFName2,      a.AdmLName2,      a.AdmFName3,      a.AdmLName3 FROM      schools s JOIN      test_takers tt ON s.CDSCode = tt.SchoolPhone JOIN      school_scores ss ON s.CDSCode = ss.CDSCode JOIN      frpm f ON s.CDSCode = f.School Code WHERE      s.Charter = 1      AND s.CharterNum = '00D2'     AND (a.AdmFName1 IS NOT NULL OR a.AdmLName1 IS NOT NULL)     AND (a.AdmFName2 IS NOT NULL OR a.AdmLName2 IS NOT NULL)     AND (a.AdmFName3 IS NOT NULL OR a.AdmLName3 IS NOT NULL); 
SELECT COUNT(DISTINCT s.CDSCode) AS TotalSchools FROM schools s WHERE s.City = 'Hickman' AND s.CharterNum = '00D4'; 
SELECT      (COUNT(CASE WHEN schools.FundingType = 'Locally Funded' THEN 1 END) * 100.0) /      COUNT(schools.FundingType) AS PercentageLocallyFunded FROM      schools WHERE      schools.State = 'CA' AND schools.District = 'Santa Clara'; 
SELECT COUNT(*) FROM schools WHERE '2000-01-01' <= OpenDate AND OpenDate <= '2005-12-31' AND FundingType = 'Directly Funded' AND District = 'Stanislaus'; 
CREATE TABLE 'district_closures'  (     'ClosureYear'	TEXT	NOT NULL,     'City'	TEXT	NOT NULL,     'DistrictClosureCount'	INTEGER	NOT NULL ); 
SELECT      frpm.County,      COUNT(*) AS 'ClosureCount' FROM      frpm JOIN      schools ON frpm.SchoolCode = schools.School WHERE      SUBSTR(frpm.Academic Year, 1, 4) BETWEEN '1980' AND '1989'      AND schools.SOCType = '11' GROUP BY      frpm.County ORDER BY      ClosureCount DESC LIMIT 1; 
SELECT DISTINCT s.NCESDist FROM schools s WHERE s.StatusType = 'School Ownership Code' AND s.SOC = 31; 
SELECT COUNT(*) FROM frpm WHERE County = 'Alpine' AND District Name = 'Community Day School' AND (StatusType = 'Active' OR StatusType = 'Closed'); 
SELECT DISTINCT DistrictCode FROM frpm JOIN schools ON frpm.SchoolCode = schools.School WHERE schools.City = 'Fresno' AND schools.Magnet = 0; 
SELECT frpm.'Enrollment (Ages 5-17)' FROM frpm JOIN schools ON frpm.'School Code' = schools.'School' WHERE frpm.'Academic Year' = '2014-2015' AND schools.'EdOpsCode' = 'SSS' AND schools.'County' = 'Fremont' AND schools.'School' = 'State Special School'; 
SELECT frpm.'Free Meal Count (Ages 5-17)' FROM frpm JOIN schools ON frpm.'School Code' = schools.'School' WHERE schools.'Mailing Street' = 'PO Box 1040' AND schools.'School Type' = 'Youth Authority'; 
SELECT MIN('frpm.' || 'High Grade') AS LowestGrade FROM 'frpm' JOIN 'schools' ON 'frpm.' || 'School Code' = 'schools.' || 'School' WHERE 'schools.' || 'EdOpsCode' = 'SPECON' AND 'schools.' || 'NCESDist' = '613360'; 
SELECT frpm.School Name, frpm.Educational Option Type FROM frpm JOIN schools ON frpm.School Code = schools.School WHERE frpm.County Code = '37' AND frpm.NSLP Provision Status = 'Breakfast Provision 2'; 
SELECT s.City FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.EILCode = 'HS' AND f.LowGrade = '09' AND f.HighGrade = '12' AND f.County Name = 'Merced' AND f.NSLP Provision Status = 'Lunch Provision 2'; 
SELECT      f.School Name,      f.'Percent (%) Eligible FRPM (Ages 5-17)' FROM      frpm f JOIN      schools s ON f.School Code = s.CDSCode WHERE      s.State = 'CA' AND     s.'NCESDist' = 'Los Angeles' AND     f.'High Grade' = '09' 
SELECT      GSserved AS 'Grade Span Served',      COUNT(*) AS 'Count' FROM      schools WHERE      City = 'Adelanto' GROUP BY      GSserved ORDER BY      'Count' DESC LIMIT      1; 
SELECT      County,      COUNT(*) AS 'Number of Schools Without Physical Buildings' FROM      schools WHERE      County IN ('San Diego', 'Santa Barbara')     AND Virtual = 'F' GROUP BY      County ORDER BY      COUNT(*) DESC LIMIT 1; 
SELECT s.NCESDist, st.SchoolType, s.Latitude FROM schools s JOIN school_types st ON s.NCESDist = st.NCESDist JOIN (     SELECT MAX(Latitude) AS MaxLatitude     FROM schools ) max_lat ON s.Latitude = max_lat.MaxLatitude; 
SELECT      s.City,      s.School,      frpm.LowestGrade FROM      schools s JOIN      frpm ON s.CDSCode = frpm.CDSCode WHERE      s.State = 'CA'     AND frpm.LowestGrade = (SELECT MIN(LowestGrade) FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE State = 'CA')) 
SELECT      s.Latitude,      s.Longitude,      s.GSoffered,      s.GSserved  FROM      schools AS s  ORDER BY      s.Longitude DESC  LIMIT 1; 
SELECT      s.District,     COUNT(DISTINCT s.CDSCode) AS NumberOfSchools FROM      schools s WHERE      s.GSoffered LIKE '%K-8%'     AND s.Magnet = 1 GROUP BY      s.District; 
SELECT      AdmLName1,      COUNT(AdmLName1) AS NameCount,      District FROM      schools WHERE      AdmLName1 IS NOT NULL GROUP BY      AdmLName1, District ORDER BY      NameCount DESC,      District LIMIT 2; 
SELECT frpm.'Percent (%) Eligible Free (K-12)', schools.'District' FROM frpm JOIN schools ON frpm.'School Code' = schools.'NCESDist' JOIN schools AS adm ON schools.'AdmFName1' = 'Alusine' OR schools.'AdmLName1' = 'Alusine' WHERE schools.'AdmLName1' = 'Alusine'; 
SELECT      s.'AdmLName1' AS AdminLastName,     s.'District',     f.'County Code' AS CountyCode,     f.'School Name' AS SchoolName FROM      schools s JOIN      frpm f ON s.'NCESSchool' = f.'School Code' WHERE      f.'Charter School Number' = '40'; 
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE NCESSchool IN (     SELECT NCESSchool     FROM frpm     WHERE 'San Bernardino' = 'County Name'     AND 'San Bernardino City Unified' = 'District Name'     AND 'between 1/1/2009 to 12/31/2010' BETWEEN 'Academic Year'     AND 'Public' = 'School Type'     AND ('62' = 'SOC' OR '54' = 'DOC') ) AND 'Public Intermediate/Middle Schools' = 'School Type' AND 'Unified Schools' = 'School Type'; 
SELECT t.SchoolPhone, t.SATScore FROM test_takers t JOIN school_scores s ON t.SchoolPhone = s.SchoolPhone WHERE t.SATScore >= 1500 GROUP BY t.SchoolPhone ORDER BY COUNT(*) DESC LIMIT 1;  SELECT a.Email FROM school_scores s JOIN test_takers t ON s.SchoolPhone = t.SchoolPhone JOIN administrators a ON s.SchoolPhone = a.SchoolPhone WHERE t.SATScore >= 1500 GROUP BY s.SchoolPhone ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND a.frequency = 'POPLATEK PO OBRATU'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Prague' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = a.account_id     AND l.status = 'eligible' ); 
SELECT   CASE     WHEN AVG(A12) > AVG(A13) THEN '1995'     ELSE '1996'   END AS higher_unemployment_year FROM   account; 
SELECT COUNT(DISTINCT d.district_id) AS districts_with_female_salary_range FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000; 
WITH GenderAndAge AS (     SELECT         c.gender,         c.birth_date,         (SELECT A11 FROM district WHERE district.A7 = c.district_id) AS average_salary     FROM         client c     WHERE         c.gender = 'F' ), OldestAndYoungest AS (     SELECT         MIN(average_salary) AS min_salary,         MAX(average_salary) AS max_salary     FROM         GenderAndAge ), LowestSalaryAccount AS (     SELECT         a.account_id     FROM         account a     JOIN         GenderAndAge ga ON a.frequency = ga.gender     JOIN         OldestAndYoungest os ON ga.average_salary = os.min_salary ), AccountNumbers AS (     SELECT         c.account_id     FROM         client c     JOIN         LowestSalaryAccount lsa ON c.account_id = lsa.account_id ) SELECT     a.account_id FROM     AccountNumbers a; 
SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.account_id JOIN disp d ON a.account_id = d.account_id JOIN (     SELECT client_id, AVG(amount) AS avg_salary     FROM loan     GROUP BY client_id ) l ON c.client_id = l.client_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client ) ORDER BY l.avg_salary DESC LIMIT 1; 
SELECT COUNT(DISTINCT c.district_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.account_id = c.district_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'Owner'; 
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN trans t ON d.disp_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU'; 
SELECT l.account_id FROM loan AS l WHERE YEAR(l.date) = 1997 AND l.amount = (SELECT MIN(amount) FROM loan WHERE YEAR(date) = 1997) AND EXISTS (     SELECT 1     FROM account AS a     JOIN disp AS d ON a.account_id = d.account_id     JOIN district AS dt ON d.district_id = dt.A2     WHERE a.frequency = 'POPLATEK TYDNE' ) ORDER BY l.account_id; 
SELECT DISTINCT l.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'monthly' AND l.duration > 12 AND YEAR(a.date) = 1993 ORDER BY l.amount DESC LIMIT 1; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov'; 
SELECT a.account_id FROM account a WHERE a.date = (SELECT MIN(date) FROM account WHERE YEAR(a.date) = 1995) 
SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id WHERE a.date < '1997-01-01' AND a.frequency = 'USD' AND a.A13 > 3000; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.issued = '1994-03-03'; 
SELECT a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.date = '1998-10-14' AND t.account_id = (SELECT account_id FROM trans WHERE date = '1998-10-14' AND amount = 840); 
SELECT d.A8 FROM loan l JOIN disp d ON d.account_id = l.account_id JOIN district dt ON dt.A8 = d.account_id WHERE l.date = '1994-08-25'; 
SELECT MAX(amount) AS max_transaction_amount FROM `order` JOIN `account` ON `order.account_id` = `account.account_id` JOIN `card` ON `account.account_id` = `card.account_id` JOIN `client` ON `account.district_id` = `client.district_id` WHERE `card.issued` = '1996-10-21'; 
SELECT c.gender FROM client c JOIN district d ON c.district_id = d.district_id JOIN (     SELECT district_id, AVG(A11) as avg_salary     FROM district     GROUP BY district_id     ORDER BY avg_salary DESC     LIMIT 1 ) AS highest_avg_salary_district ON c.district_id = highest_avg_salary_district.district_id JOIN (     SELECT client_id, MIN(birth_date) as oldest_birth_date     FROM client     GROUP BY district_id ) AS oldest_client ON c.client_id = oldest_client.client_id WHERE c.birth_date = oldest_client.oldest_birth_date ORDER BY c.birth_date ASC LIMIT 1; 
SELECT t1.amount FROM loan JOIN trans t1 ON t1.account_id = l.account_id JOIN account ON account.account_id = l.account_id JOIN disp ON disp.account_id = account.account_id JOIN card ON card.disp_id = disp.disp_id WHERE l.amount = (SELECT MAX(amount) FROM loan) ORDER BY t1.date ASC LIMIT 1; 
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN district dt ON d.district_id = dt.district_id  WHERE dt.A2 = 'Jesenik' AND c.gender = 'F'; 
SELECT d.disp_id FROM disp d JOIN client c ON d.client_id = c.client_id JOIN trans t ON d.disp_id = t.disp_id WHERE t.k_symbol = '5100 USD' AND t.date = '1998-09-02'; 
SELECT COUNT(a.district_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996; 
SELECT d.A2 AS district_name FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29' AND EXISTS (     SELECT 1     FROM account a     WHERE a.account_id = c.client_id ); 
SELECT c.birth_date FROM client c JOIN loan l ON c.client_id = l.client_id WHERE l.amount = 98832 AND l.duration = 1 AND l.payments = 3.0 AND l.date = '1996-01-03'; 
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'Prague' ORDER BY c.birth_date ASC LIMIT 1; 
SELECT      (SELECT COUNT(client_id)       FROM client       JOIN district ON client.district_id = district.district_id       WHERE district.A3 = 'South Bohemia' AND client.gender = 'M') * 100.0 /      (SELECT COUNT(client_id)       FROM client       JOIN district ON client.district_id = district.district_id       WHERE district.A3 = 'South Bohemia') AS male_client_percentage FROM      district  WHERE      A3 = 'South Bohemia'  ORDER BY      A8 DESC  LIMIT 1; 
WITH FirstLoanDate AS (     SELECT client_id     FROM loan     WHERE date = '1993-07-05'     GROUP BY client_id ), AccountBalance AS (     SELECT a.account_id,             (SELECT SUM(amount) FROM loan WHERE account_id = a.account_id AND date BETWEEN '1993-03-22' AND '1998-12-27') AS balance_19930222_19981227     FROM account a     JOIN FirstLoanDate fl ON a.client_id = fl.client_id ), BalanceBeforeFirstLoan AS (     SELECT a.account_id,             (SELECT SUM(amount) FROM loan WHERE account_id = a.account_id AND date < '1993-07-05') AS balance_before_first_loan     FROM account a     JOIN FirstLoanDate fl ON a.client_id = fl.client_id ) SELECT      (ab.balance_19930222_19981227 - (bbfl.balance_before_first_loan + ab.balance_19930222_19981227)) / (bbfl.balance_before_first_loan + ab.balance_19930222_19981227) * 100 AS increase_rate FROM AccountBalance ab JOIN BalanceBeforeFirstLoan bbfl ON ab.account_id = bbfl.account_id; 
SELECT      ROUND((SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100, 2) AS percentage_paid FROM      loan l; 
SELECT      ROUND((COUNT(CASE WHEN l.status = 'C' THEN 1 ELSE NULL END) * 100.0) / COUNT(*), 2) AS running_no_issue_percentage FROM      loan l WHERE      l.amount < 100000; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND t.k_symbol = 'POPLATEK PO OBRATU'; 
SELECT a.account_id, a.frequency FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON a.district_id = c.district_id WHERE c.district_id = (SELECT district_id FROM district WHERE name = 'east Bohemia') AND a.date BETWEEN '1995-01-01' AND '2000-12-31'; 
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice'; 
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN district dt ON d.district_id = dt.district_id WHERE l.loan_id = 4990; 
SELECT a.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.amount > 300000; 
SELECT l.loan_id, d.A3, d.A11 FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60; 
SELECT c.district_id,         ((SELECT rate_2016 FROM unemployment_rates WHERE year = 2016) - (SELECT rate_2015 FROM unemployment_rates WHERE year = 2015)) / (SELECT rate_2015 FROM unemployment_rates WHERE year = 2015) * 100 AS unemployment_rate_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client cl ON d.district_id = cl.district_id WHERE l.status = 'D' AND l.amount > l.payments; 
SELECT      (COUNT(CASE WHEN d.A2 = 'Decin' THEN 1 END) * 100.0) / COUNT(*) FROM      account a JOIN      district d ON a.district_id = d.district_id WHERE      a.date BETWEEN '1993-01-01' AND '1993-12-31'; 
SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE c.issued >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') AND c.issued < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') + INTERVAL 1 MONTH; 
SELECT d.district_id, COUNT(c.client_id) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 10; 
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id JOIN card c ON a.account_id = c.account_id WHERE t.date LIKE '1996-01%' AND c.type = 'VYDAJ' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND a.account_id NOT IN (     SELECT c.account_id     FROM card c ); 
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1; 
SELECT AVG(l.amount) AS avg_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'M'; 
SELECT d.A2 AS branch_location, d.A13 AS unemployment_rate FROM district d WHERE d.A13 = (     SELECT MAX(district.A13)     FROM district     WHERE d.A12 = '1996' ) AND d.A12 = '1996'; 
SELECT COUNT(DISTINCT a.district_id) FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.A16 = (SELECT MAX(A16) FROM district WHERE A16 IS NOT NULL) 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK MESICNE' AND t.k_symbol = 'VYBER KARTOU' AND a.balance < 0; 
SELECT COUNT(DISTINCT l.account_id) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE' AND l.issued BETWEEN '1995-01-01' AND '1997-12-31'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN district dt ON d.district_id = dt.district_id WHERE dt.A16 = 1 AND (a.status = 'C' OR a.status = 'D'); 
SELECT COUNT(c.gender) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A15 = (     SELECT A15     FROM district     WHERE A15 = (         SELECT MAX(A15)         FROM district         WHERE A15 < (             SELECT MAX(A15) FROM district         )     ) ) AND d.A11 = '1995'; 
SELECT COUNT(*)  FROM card c JOIN disp d ON c.card_id = d.account_id JOIN account a ON d.account_id = a.account_id WHERE c.type = 'gold' AND a.frequency = 'high'; 
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Pisek'; 
SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN order o ON d.A2 = o.bank_to WHERE o.amount > 10000 AND d.A13 = 1997; 
SELECT DISTINCT o.account_id FROM order o JOIN account a ON o.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Pisek' AND o.k_symbol = 'SIPO'; 
SELECT ac.account_id FROM account ac JOIN card c1 ON ac.account_id = c1.disp_id AND c1.type = 'gold' JOIN card c2 ON ac.account_id = c2.disp_id AND c2.type = 'junior' GROUP BY ac.account_id; 
SELECT AVG(amount) AS average_credit_card_amount FROM order WHERE k_symbol = 'VYBER KARTOU' AND date >= '2021-01-01' AND date < '2022-01-01'; 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1998-01-01' AND '1998-12-31' AND t.k_symbol = 'VYBER KARTOU' GROUP BY a.account_id HAVING SUM(t.amount) < (     SELECT AVG(t2.amount)     FROM trans t2     WHERE t2.account_id = a.account_id     AND t2.date BETWEEN '1998-01-01' AND '1998-12-31'     AND t2.k_symbol = 'VYBER KARTOU' ); 
SELECT DISTINCT a.frequency, a.date FROM account a JOIN client c ON a.frequency = c.gender JOIN disp d ON a.frequency = d.account_id JOIN loan l ON a.frequency = l.account_id JOIN card cr ON d.account_id = cr.card_id WHERE c.gender = 'F' AND cr.type = 'credit'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN district dt ON d.district_id = dt.district_id WHERE c.gender = 'F' AND dt.A3 = 'south Bohemia'; 
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Tabor' AND a.frequency = 'OWNER'; 
SELECT a.account_id FROM account a WHERE a.account_id NOT IN (     SELECT l.account_id     FROM loan l ) AND a.district_id IN (     SELECT c.district_id     FROM client c     JOIN account ac ON c.district_id = ac.district_id     GROUP BY c.district_id     HAVING AVG(a11) > 8000 AND AVG(a11) <= 9000 ) AND a.account_type = 'OWNER'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'North Bohemia' AND EXISTS (     SELECT 1     FROM trans t     WHERE t.account_id = a.account_id     AND t.bank = 'AB' ); 
SELECT d.A2 AS district_name FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'VYDAJ'; 
SELECT AVG(o.A15) AS avg_crimes FROM district d JOIN (     SELECT c.district_id     FROM card c     JOIN account a ON c.district_id = a.district_id     WHERE a.date >= '1997-01-01' ) AS district_accounts_since_1997 ON d.district_id = district_accounts_since_1997.district_id WHERE d.A15 > 4000; 
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND account.frequency = 'OWNER'; 
SELECT COUNT(c.client_id)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha'; 
SELECT     ROUND(         (COUNT(CASE WHEN c.type = 'Gold' AND c.issued < '1998-01-01' THEN 1 END) * 100.0) /         COUNT(c.card_id),         2     ) AS gold_card_percentage FROM     card c; 
SELECT c.gender, c.birth_date FROM account a JOIN client c ON a.account_id = c.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan) 
SELECT d.A15 FROM district d JOIN account a ON d.district_id = a.district_id WHERE a.account_id = 532 AND d.A15 IS NOT NULL; 
SELECT account.district_id FROM account JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333; 
SELECT o.amount, o.k_symbol, o.date FROM order o JOIN account a ON o.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 3356 AND o.k_symbol = 'VYBER'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.client_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 13539; 
SELECT d.A3 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.client_id = 3541; 
SELECT district, COUNT(*) AS account_count FROM accounts JOIN contracts ON accounts.account_id = contracts.account_id WHERE contracts.status = 'A' GROUP BY district ORDER BY account_count DESC LIMIT 1; 
SELECT c.gender, c.birth_date FROM account a JOIN client c ON a.district_id = c.district_id JOIN disp d ON a.district_id = d.account_id JOIN order o ON d.account_id = o.account_id WHERE o.order_id = 32423; 
SELECT t.account_id, t.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id WHERE district.A2 = '5'; 
SELECT COUNT(a.district_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Jesenik'; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id WHERE cr.issued >= '1997-01-01' AND cr.type = 'junior'; 
SELECT      ROUND((COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(c.client_id), 2) AS women_percentage FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A11 > 10000; 
SELECT      ((SUM(l1.amount) - SUM(l2.amount)) / SUM(l2.amount)) * 100 AS growth_rate FROM      loan l1 JOIN      loan l2 ON l1.account_id = l2.account_id AND               (CASE WHEN l1.date BETWEEN '1997-01-01' AND '1997-12-31' THEN l1.date ELSE NULL END) =               (CASE WHEN l2.date BETWEEN '1996-01-01' AND '1996-12-31' THEN l2.date ELSE NULL END) JOIN      client c ON l1.account_id IN (SELECT account_id FROM disp WHERE client_id = c.client_id) WHERE      c.gender = 'M'; 
SELECT COUNT(*) FROM trans WHERE k_symbol = 'VYBER KARTOU' AND date > '1995-12-31'; 
SELECT      (SUM(CASE WHEN d.A3 = 'North Bohemia' THEN d.A16 ELSE 0 END) -       SUM(CASE WHEN d.A3 = 'East Bohemia' THEN d.A16 ELSE 0 END)) AS crime_difference FROM      district d WHERE      d.A3 IN ('North Bohemia', 'East Bohemia') AND     d.A10 = '1996'; 
SELECT COUNT(DISTINCT d.disp_id) AS total_dispositions FROM disp d JOIN account a ON d.account_id = a.account_id WHERE a.account_id BETWEEN 1 AND 10; 
SELECT      COUNT(*) AS 'StatementRequests' FROM      account a JOIN      trans t ON a.account_id = t.account_id WHERE      a.account_id = 3 AND t.k_symbol = 'Account Statement';  SELECT      SUM(t.amount) AS 'TotalDebitAmount' FROM      account a JOIN      trans t ON a.account_id = t.account_id WHERE      a.account_id = 3 AND t.k_symbol = 'Debit'; 
SELECT YEAR(client.birth_date) AS birth_year FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.account_id = 130; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND t.k_symbol = 'ZALOZENI'; 
SELECT      SUM(l.amount) AS total_debt,     AVG(l.payments) AS average_payments FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.disp_id = c.client_id WHERE      c.client_id = 992; 
SELECT      SUM(t.amount) AS total_sum,     c.gender FROM      trans t JOIN      account a ON t.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      t.account_id = (SELECT account_id FROM account WHERE account_id = 851)     AND c.client_id = 4 GROUP BY      c.gender; 
SELECT c.card_id FROM card c JOIN client cl ON c.disp_id = cl.client_id WHERE cl.client_id = 9; 
SELECT SUM(amount) AS total_spent FROM order JOIN client ON order.account_id = client.client_id JOIN disp ON order.account_id = disp.account_id WHERE client.client_id = 617 AND disp.disp_id IS NOT NULL; 
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.district_id = (SELECT district_id FROM district WHERE district = 'East Bohemia'); 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3; 
SELECT COUNT(DISTINCT c.account_id)  FROM client c JOIN disp d ON c.account_id = d.account_id JOIN trans t ON d.account_id = t.account_id WHERE c.gender = 'M' AND t.k_symbol = 'SIPO' AND t.amount > 4000 AND t.date BETWEEN '1974-01-01' AND '1976-12-31'; 
SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN district dt ON d.A4 = dt.A4 WHERE dt.A5 = 'Beroun' AND a.date > '1996-12-31'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior'; 
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(c.client_id) AS percentage_female_clients FROM     account a JOIN     disp d ON a.account_id = d.account_id JOIN     client c ON d.client_id = c.client_id JOIN     district d2 ON c.district_id = d2.district_id WHERE     d2.A3 = 'Prague'; 
SELECT      (COUNT(DISTINCT c.client_id) * 100.0) / COUNT(DISTINCT o.account_id) AS male_clients_weekly_statement_percentage FROM      client c JOIN      disp d ON c.client_id = d.client_id JOIN      account a ON d.account_id = a.account_id JOIN      order o ON a.account_id = o.account_id WHERE      c.gender = 'M' AND      a.frequency = 'POPLATEK TYDNE'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE'; 
SELECT l.account_id FROM loan l WHERE l.duration > 24 AND l.account_id IN (     SELECT d.account_id     FROM disp d     JOIN account a ON d.account_id = a.account_id     WHERE a.date < '1997-01-01' ) ORDER BY l.amount ASC LIMIT 1; 
SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A11 = (SELECT MIN(A11) FROM district d2 JOIN client c2 ON d2.district_id = c2.district_id WHERE c2.gender = 'F') ORDER BY c.birth_date DESC LIMIT 1; 
SELECT COUNT(c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND d.A3 = 'East Bohemia'; 
SELECT COUNT(DISTINCT l.account_id) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE' AND l.status = 'PRE-PAYMENT'; 
SELECT AVG(l.amount) AS avg_running_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status IN ('C', 'D') AND a.frequency = 'POPLATEK PO OBRATU'; 
SELECT c.client_id, c.district_id FROM client c JOIN account a ON c.client_id = a.account_id WHERE a.account_id IN (     SELECT account_id FROM disp ) OR a.account_id IN (     SELECT account_id FROM loan ); 
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cr ON a.account_id = cr.card_id JOIN loan l ON a.account_id = l.account_id WHERE cr.type = 'gold' AND l.amount > 10000; 
SELECT bond_type, COUNT(bond_type) as bond_count FROM bond GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1; 
SELECT COUNT(DISTINCT a.molecule_id) FROM atom a JOIN connected c ON a.molecule_id = c.atom_id2 WHERE a.element = 'cl' AND c.atom_id2 NOT IN (SELECT molecule_id FROM atom WHERE element = 'carcinogenic'); 
SELECT AVG(CASE WHEN c.atom_id IN (SELECT a.atom_id FROM atom a WHERE a.element = 'O') THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'; 
SELECT AVG(CASE WHEN c.molecule_id IN (SELECT m.molecule_id FROM molecule m WHERE m.molecule_id = c.molecule_id AND m.label = '+')                 AND b.bond_type = '-' THEN 1 ELSE 0 END)  FROM connected c JOIN bond b ON c.bond_id = b.bond_id; 
SELECT COUNT(c.molecule_id) FROM connected AS c JOIN atom AS a ON c.atom_id = a.molecule_id JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.molecule_id IN (     SELECT m2.molecule_id     FROM molecule AS m2     JOIN atom AS a2 ON m2.molecule_id = a2.molecule_id     WHERE a2.element = 'na' AND a2.molecule_id IN (         SELECT b.molecule_id         FROM bond AS b         WHERE b.molecule_id NOT IN (             SELECT c2.atom_id             FROM connected AS c2             WHERE c2.atom_id = 'na' AND c2.atom_id2 = 'na'         )     ) ) 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' JOIN connected c ON b.bond_id = c.bond_id JOIN connected c2 ON c.atom_id = c2.atom_id2 AND c.bond_id = c2.bond_id JOIN connected c3 ON c2.atom_id2 = c3.atom_id JOIN bond b2 ON c3.bond_id = b2.bond_id AND b2.molecule_id = m.molecule_id WHERE b2.bond_type = '#' JOIN connected c4 ON b2.bond_id = c4.bond_id JOIN connected c5 ON c4.atom_id = c5.atom_id2 AND c4.bond_id = c5.bond_id JOIN bond b3 ON c5.bond_id = b3.bond_id AND b3.molecule_id = m.molecule_id WHERE b3.bond_type = '#' JOIN connected c6 ON b3.bond_id = c6.bond_id JOIN connected c7 ON c6.atom_id = c7.atom_id2 AND c6.bond_id = c7.bond_id JOIN bond b4 ON c7.bond_id = b4.bond_id AND b4.molecule_id = m.molecule_id WHERE b4.bond_type = '#'; 
SELECT      (SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) / COUNT(a.atom_id)) * 100 AS percentage_carbon FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = ' = ' 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id LEFT JOIN bond b ON c.bond_id = b.bond_id LEFT JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element <> 'br' 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND EXISTS (     SELECT 1     FROM bond     INNER JOIN connected ON bond.molecule_id = molecule.molecule_id     WHERE connected.atom_id = molecule.molecule_id     AND bond.bond_type = '+' ); 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 = 'TR004_8_9'; 
SELECT DISTINCT element FROM atom WHERE bond_type = ' = ' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      CASE          WHEN c.bond_type = '+' THEN 'carcinogenic'         WHEN c.bond_type = '-' THEN 'non-carcinogenic'         ELSE 'unknown'     END AS label,     COUNT(*) AS label_count FROM      atom a JOIN      connected c ON a.molecule_id = c.molecule_id WHERE      a.element = 'h' GROUP BY      c.bond_type ORDER BY      label_count DESC LIMIT 1; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'te' UNION SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'te'; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id LIKE '-%' 
SELECT element, COUNT(*) AS count FROM molecules WHERE label = '-' GROUP BY element ORDER BY count ASC LIMIT 1; 
SELECT bond_type FROM bond JOIN connected ON bond.molecule_id = connected.molecule_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR       (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8'); 
SELECT c.bond_type FROM connected AS con JOIN bond AS bo ON con.bond_id = bo.bond_id LEFT JOIN atom AS at1 ON con.atom_id = at1.molecule_id LEFT JOIN atom AS at2 ON con.atom_id2 = at2.molecule_id WHERE at1.element != 'sn' OR at2.element != 'sn' AND c.bond_id NOT IN (     SELECT bond_id     FROM bond     JOIN connected AS con2 ON bond.bond_id = con2.bond_id     JOIN atom AS at3 ON con2.atom_id = at3.molecule_id     WHERE at3.element = 'sn' ) 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-'; 
SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b1 ON c1.bond_id = b1.bond_id WHERE b1.bond_type = '#' UNION SELECT DISTINCT a2.atom_id FROM connected c2 JOIN bond b2 ON c2.bond_id = b2.bond_id JOIN atom a2 ON a2.atom_id = c2.atom_id2 WHERE b2.bond_type = '#'; 
SELECT DISTINCT c.atom_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR181'; 
SELECT      ROUND(         (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END AND a.element != 'f') * 100.0) /          SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END),         2     ) AS percentage_not_containing_fluorine FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+' 
SELECT      ROUND(         (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) / COUNT(DISTINCT b.bond_id)) * 100, 2     ) AS percent_carcinogenic_in_triple_bonds FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = '#' 
SELECT element  FROM atom  WHERE element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')  AND element LIKE 'TR000%'  ORDER BY element ASC  LIMIT 3; 
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = 'TR001'; 
SELECT ABS(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM connected; 
SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR_000_2_5'; 
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'; 
SELECT      m.molecule_id,     COUNT(b.bond_id) AS double_bond_count FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      b.bond_type = ' = ' GROUP BY      m.molecule_id ORDER BY      double_bond_count DESC, m.molecule_id ASC LIMIT 5; 
SELECT      (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) / COUNT(bond_id)) * 100 AS percent FROM      bond WHERE      molecule_id = 'TR008'; 
SELECT      CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT m.molecule_id) * 100 AS percent FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE      a.element LIKE '%carcinogenic%' 
SELECT      ROUND(DIVIDE(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END), COUNT(a.atom_id)) * 100, 2) AS hydrogen_percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id WHERE      c.molecule_id = 'TR206' 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000'; 
SELECT element  FROM atom  WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')  AND element IS NOT NULL AND element LIKE '%TR060%' AND EXISTS (     SELECT 1      FROM atom AS a2      WHERE a2.element = 'c' AND a2.label = '+'     OR a2.element = 'h' AND a2.label = '+'     OR a2.element = 'o' AND a2.label = '+'     OR a2.element = 's' AND a2.label = '+'     OR a2.element = 'n' AND a2.label = '+'     OR a2.element = 'p' AND a2.label = '+'     OR a2.element = 'na' AND a2.label = '+'     OR a2.element = 'br' AND a2.label = '+'     OR a2.element = 'f' AND a2.label = '+'     OR a2.element = 'i' AND a2.label = '+'     OR a2.element = 'sn' AND a2.label = '+'     OR a2.element = 'pb' AND a2.label = '+'     OR a2.element = 'te' AND a2.label = '+'     OR a2.element = 'ca' AND a2.label = '+' ) 
SELECT bond_type, COUNT(bond_type) AS bond_count FROM bond WHERE molecule_id = 'TR018' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;  SELECT m.molecule_id, m.label FROM molecule m WHERE m.molecule_id = 'TR018'; 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.atom_id     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.atom_id) = 2 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.atom_id) = 2 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT b.bond_type) = 1 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_type = '-'     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.atom_id) = 2 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     WHERE b.bond_type = '-'     GROUP BY m.molecule_id     HAVING COUNT(b.bond_id) = 2 ) AND m.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.bond_id) = 2 ) AND m.molecule_id NOT IN (     SELECT m.molecule_id     FROM molecule m     JOIN connected c ON m.molecule_id = c.molecule_id     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_type = '-'     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT c.atom_id) = 2 
SELECT bond.atom_id, bond.atom_id2 FROM bond JOIN connected ON bond.atom_id = connected.atom_id OR bond.atom_id = connected.atom_id2 JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.atom_id, bond.atom_id2 ASC LIMIT 2; 
SELECT COUNT(*) FROM bond WHERE bond_type LIKE 'TR009_%' AND (atom_id LIKE 'TR009_12' OR atom_id2 LIKE 'TR009_12'); 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON m.molecule_id = c.atom_id OR m.molecule_id = c.atom_id2 WHERE a.element = 'br' AND EXISTS (     SELECT 1     FROM molecule m2     JOIN connected c2 ON m2.molecule_id = c2.atom_id OR m2.molecule_id = c2.atom_id2     JOIN atom a2 ON c2.atom_id = a2.atom_id OR c2.atom_id2 = a2.atom_id     WHERE a2.element = '+' AND m2.molecule_id = m.molecule_id ); 
SELECT b.bond_type, a.atom_id, a.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE b.bond_id = 'TR001_6_9'; 
SELECT m.molecule_id, CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS carcinogenicity FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#'; 
SELECT COUNT(DISTINCT c.bond_id)  FROM connected c  WHERE c.atom_id = 'TR%_19' OR c.atom_id2 = 'TR%_19'; 
SELECT element FROM atom WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND element = 'TR004'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN bond b ON m.molecule_id = b.molecule_id LEFT JOIN connected c ON b.molecule_id = c.atom_id OR b.molecule_id = c.atom_id2 WHERE m.molecule_id NOT IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     JOIN connected c ON b.molecule_id = c.atom_id OR b.molecule_id = c.atom_id2     JOIN atom a ON a.molecule_id = m.molecule_id AND a.molecule_id LIKE '%-%' ) 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND EXISTS (     SELECT 1     FROM bond b     JOIN connected c ON b.bond_id = c.bond_id     WHERE c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id     AND b.bond_type = '+' ); 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.element OR c.atom_id2 = a.element WHERE a.element IN ('p', 'n'); 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' JOIN (     SELECT connected.atom_id, COUNT(*) AS double_bond_count     FROM connected     JOIN bond ON connected.bond_id = bond.bond_id     WHERE bond.bond_type = ' = '     GROUP BY connected.atom_id ) c ON m.molecule_id = c.atom_id WHERE EXISTS (     SELECT 1     FROM connected     JOIN bond ON connected.bond_id = bond.bond_id     WHERE bond.bond_type = ' = ' AND connected.atom_id = c.atom_id     GROUP BY connected.atom_id     HAVING COUNT(*) = (SELECT MAX(double_bond_count) FROM (         SELECT COUNT(*) AS double_bond_count         FROM connected         JOIN bond ON connected.bond_id = bond.bond_id         WHERE bond.bond_type = ' = '         GROUP BY connected.atom_id     ) AS max_double_bonds) ) AND EXISTS (     SELECT 1     FROM molecule     WHERE molecule.molecule_id = m.molecule_id AND molecule.label = '+' ); 
SELECT      AVG(COUNT(b.bond_id) OVER (PARTITION BY a.atom_id)) AS average_bonds FROM      atom a LEFT JOIN      connected c ON a.atom_id = c.atom_id LEFT JOIN      bond b ON c.bond_id = b.bond_id WHERE      a.element = 'i'; 
SELECT b.bond_id, b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE SUBSTR(c.atom_id, 7, 2) + 0 = 45 OR SUBSTR(c.atom_id2, 7, 2) + 0 = 45; 
SELECT a.element FROM atom a LEFT JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 IS NULL; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR447' AND b.bond_type = '#'; 
SELECT DISTINCT a.element  FROM atom a  JOIN connected c ON a.element = c.atom_id2  WHERE c.atom_id2 = 'TR144_8_19'; 
SELECT      m.molecule_id,      COUNT(b.bond_type) AS double_bond_count FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      m.molecule_id IN (SELECT molecule_id FROM atom WHERE element = '+') AND     b.bond_type = ' = ' GROUP BY      m.molecule_id ORDER BY      double_bond_count DESC LIMIT 1; 
SELECT a.element, COUNT(*) as count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (     SELECT molecule_id     FROM molecule     JOIN bond b ON molecule.molecule_id = b.molecule_id     WHERE molecule.label = '+' ) GROUP BY a.element ORDER BY count ASC LIMIT 1; 
SELECT DISTINCT c.atom_id2 FROM connected AS c JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'pb'; 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE a.element IN ('c', 's', 'p', 'n', 'o', 'f', 'cl', 'br', 'i', 'sn', 'pb', 'te', 'ca') AND c.atom_id2 = '#'; 
SELECT      (COUNT(bond_id) /      (SELECT COUNT(DISTINCT atom_id)       FROM connected       WHERE (SELECT COUNT(*)              FROM connected AS c2              WHERE c2.atom_id = connected.atom_id AND c2.atom_id2 = connected.atom_id2) = 1)     ) * 100 AS percentage_of_common_bond_elements FROM bond; 
SELECT     SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')) /      COUNT(bond_id) AS proportion_carcinogenic_single_bonds FROM     bond; 
SELECT COUNT(DISTINCT c.atom_id) AS total_carbon_hydrogen_atoms FROM atom c JOIN connected con ON c.atom_id = con.atom_id JOIN connected con2 ON c.atom_id = con2.atom_id2 WHERE c.element = 'c' AND con2.atom_id2 = 'h'; 
SELECT DISTINCT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 's'; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'sn'; 
SELECT COUNT(DISTINCT a.element)  FROM atom a  JOIN bond b ON a.atom_id = b.atom_id  JOIN connected c ON b.bond_id = c.bond_id  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE b.bond_type = '-'  GROUP BY a.molecule_id; 
SELECT COUNT(DISTINCT a.atom_id) AS total_triple_bond_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br') AND EXISTS (     SELECT 1     FROM connected c2     JOIN bond b2 ON c2.bond_id = b2.bond_id     WHERE c2.atom_id = c.atom_id2     AND b2.bond_type = '#' ); 
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.molecule_id NOT IN (     SELECT m.molecule_id     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     JOIN connected c ON b.bond_id = c.bond_id     JOIN bond b2 ON c.bond_id = b2.bond_id AND b2.bond_type != '-'     GROUP BY m.molecule_id     HAVING COUNT(DISTINCT b2.bond_type) > 0 ); 
SELECT      ROUND((SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(a.atom_id)), 2) AS percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '-' GROUP BY      a.element; 
SELECT atom_id2, CASE                   WHEN label = '+' THEN 'Carcinogenic'                  ELSE 'Non-Carcinogenic'                END AS molecule_label FROM connected WHERE atom_id2 IN ('TR000', 'TR001', 'TR002'); 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = '-' 
SELECT COUNT(DISTINCT m.molecule_id) AS total_carcinogenic_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030' AND b.bond_type = '+'; 
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050'; 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 = 'TR001_10_11'; 
SELECT COUNT(c.bond_id) FROM connected AS c JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'i' AND c.bond_id IS NOT NULL; 
SELECT      CASE          WHEN SUM(CASE WHEN atom.element = 'ca' AND connected.atom_id = atom.molecule_id AND connected.atom_id2 = atom.molecule_id THEN 1 ELSE 0 END) >               SUM(CASE WHEN atom.element = 'ca' AND connected.atom_id = atom.molecule_id AND connected.atom_id2 = atom.molecule_id THEN 0 ELSE 1 END)         THEN '+'          ELSE '-'      END AS predominant_carcinogenicity FROM      atom JOIN      connected ON atom.molecule_id = connected.atom_id OR atom.molecule_id = connected.atom_id2; 
SELECT      COUNT(DISTINCT c1.atom_id) AS chlorine_count,     COUNT(DISTINCT c2.atom_id) AS carbon_count FROM      connected AS c1 JOIN      connected AS c2 ON c1.bond_id = c2.bond_id JOIN      atom AS a1 ON c1.atom_id = a1.atom_id JOIN      atom AS a2 ON c2.atom_id2 = a2.atom_id WHERE      c1.bond_id = 'TR001_1_8' AND     a1.element = 'cl' AND     c2.atom_id2 = a2.atom_id AND     a2.element = 'c'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type = '#' AND EXISTS (     SELECT 1     FROM connected c2     JOIN bond b2 ON c2.bond_id = b2.bond_id     WHERE c2.atom_id2 = a.atom_id     AND b2.bond_type = '#' ) AND EXISTS (     SELECT 1     FROM connected c3     JOIN bond b3 ON c3.bond_id = b3.bond_id     WHERE c3.atom_id = a.atom_id     AND b3.bond_type = '#' ) AND EXISTS (     SELECT 1     FROM molecule m2     JOIN atom a2 ON m2.molecule_id = a2.molecule_id     WHERE m2.molecule_id = m.molecule_id     AND a2.element NOT IN ('h', 'o', 'n') -- Assuming non-carcinogenic criteria includes absence of specific elements ) LIMIT 2; 
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(m.molecule_id)) * 100 AS percentage_cl FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      molecule m ON c.molecule_id = m.molecule_id WHERE      m.label = '+' 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.molecule_id = 'TR001' UNION SELECT a.element FROM atom a JOIN connected c ON a.atom_id2 = c.atom_id WHERE a.molecule_id = 'TR001'; 
SELECT c.molecule_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = '; 
SELECT c1.atom_id AS first_atom_id, c2.atom_id AS second_atom_id FROM connected c1 JOIN connected c2 ON c1.bond_id = c2.bond_id AND c1.atom_id < c2.atom_id JOIN bond b ON c1.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 = 'TR005_16_26'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.molecule_id IN (     SELECT c.molecule_id     FROM connected c     GROUP BY c.molecule_id     HAVING COUNT(c.bond_id) = COUNT(DISTINCT c.bond_id) ); 
SELECT b.bond_type FROM bond AS b JOIN connected AS c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR001' OR c.atom_id2 = 'TR001' AND c.bond_id = 'TR001_10_11'; 
SELECT c.bond_id, m.label FROM bond JOIN connected AS c1 ON bond.bond_id = c1.bond_id JOIN connected AS c2 ON c1.atom_id = c2.atom_id2 AND c2.bond_id = c1.bond_id JOIN connected AS c3 ON c2.atom_id2 = c3.atom_id JOIN molecule ON bond.molecule_id = molecule.molecule_id JOIN (SELECT molecule_id, label FROM molecule) AS m ON bond.molecule_id = m.molecule_id WHERE bond.bond_type = '#' AND m.label = '+'; 
SELECT      atom.element  FROM      connected      JOIN atom ON connected.atom_id2 = atom.element  WHERE      connected.atom_id2 = SUBSTR(atom_id, 7, 1) = 4      AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')     AND connected.atom_id2 LIKE '%+' 
SELECT      (CASE WHEN COUNT(CASE WHEN a.element = 'h' THEN 1 END) > 0 THEN          (SUM(CASE WHEN a.element = 'h' THEN 1 END) / COUNT(*))      ELSE 0      END) AS hydrogen_ratio,     CASE          WHEN COUNT(CASE WHEN m.label = '+' THEN 1 END) > 0 THEN '+'          ELSE '-'      END AS carcinogenic_label FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.molecule_id = 'TR006' GROUP BY      m.label; 
SELECT      a.molecule_id,     CASE          WHEN c.label = '+' THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS carcinogenicity FROM      atom a JOIN      connected c ON a.molecule_id = c.atom_id2 WHERE      a.element = 'ca' 
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'te'; 
SELECT DISTINCT a1.element AS Element1, a2.element AS Element2 FROM atom a1 JOIN connected c ON a1.element = SUBSTR(c.atom_id, 7, 2) JOIN atom a2 ON a2.element = SUBSTR(c.atom_id2, 7, 2) WHERE SUBSTR(c.atom_id, 1, 5) = 'TR001' AND SUBSTR(c.atom_id, 10, 2) = '11' UNION SELECT DISTINCT a1.element AS Element1, a2.element AS Element2 FROM atom a1 JOIN connected c ON a1.element = SUBSTR(c.atom_id2, 7, 2) JOIN atom a2 ON a2.element = SUBSTR(c.atom_id, 7, 2) WHERE SUBSTR(c.atom_id, 1, 5) = 'TR001' AND SUBSTR(c.atom_id2, 10, 2) = '11'; 
SELECT      (SELECT COUNT(*)      FROM bond      WHERE bond_type = '#'      AND bond_id IN (SELECT bond_id FROM connected                      WHERE atom_id = atom.atom_id OR atom_id2 = atom.atom_id)     ) * 100.0 / (SELECT COUNT(*)                   FROM molecule) AS triple_bond_percentage; 
SELECT      COUNT(CASE WHEN b.bond_type = ' = ' THEN 1 END) * 100.0 / COUNT(b.bond_id) AS percent FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.molecule_id = 'TR047'; 
SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR001_1' JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m2 ON m.molecule_id = m2.molecule_id WHERE m2.label = '+'; 
SELECT COUNT(*) > 0 AS IsCarcinogenic FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.molecule_id = connected.molecule_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR151' AND bond.bond_type = '+'; 
SELECT DISTINCT element  FROM atom  WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')  AND element IN (SELECT element FROM atom WHERE element != 'h' AND element != 'o' AND element != 'c' AND molecule = 'TR151'); 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '+'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.molecule_id LIKE 'TR010%' AND m.molecule_id LIKE 'TR050%' 
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '+' ); 
SELECT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE b.bond_type = ' = ' AND m.label = '+'; 
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.element = 'h' AND m.molecule_id IN (     SELECT c.molecule_id      FROM connected c      JOIN bond b ON c.bond_id = b.bond_id      WHERE b.bond_type = '+' ); 
SELECT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR00_1_2' AND c.atom_id = 'TR00_1'; 
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND c.bond_id NOT IN (     SELECT b.bond_id     FROM bond b     WHERE b.bond_type = 'carcinogenic' ) GROUP BY a.atom_id; 
SELECT      ROUND(         (SUM(CASE WHEN C.molecule_id IS NOT NULL AND A.element = 'h' THEN 1 ELSE 0 END) / COUNT(DISTINCT M.molecule_id)) * 100.0,          2     ) AS percentage_of_carcinogenic_molecules_with_hydrogen FROM      atom A JOIN      connected C ON A.atom_id = C.atom_id JOIN      molecule M ON C.molecule_id = M.molecule_id JOIN      bond B ON C.bond_id = B.bond_id WHERE      B.bond_type = '+'; 
SELECT COUNT(*) AS carcinogenic_count FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.molecule_id = 'TR124' AND bond.bond_type = '+'; 
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR186'; 
SELECT bond_type FROM bond WHERE molecule_id = 'TR007_4_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 LIKE 'TR001_2_4%'; 
SELECT      COUNT(b.bond_type) AS double_bond_count,     CASE          WHEN m.label = '+' THEN 'Yes'         ELSE 'No'     END AS is_carcinogenic FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      m.molecule_id = 'TR006' AND     b.bond_type = ' = '; 
SELECT element, 'element' AS molecule FROM atom WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND 'element' LIKE '+%' 
SELECT      c.bond_id,     c.atom_id,     c.atom_id2 FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '-'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 IN (     SELECT atom_id2     FROM connected     GROUP BY atom_id2     HAVING COUNT(*) = 3 ); 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 = 'TR000_2_3'; 
SELECT COUNT(DISTINCT c.bond_id) FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'cl'; 
SELECT      c.atom_id,     COUNT(DISTINCT b.bond_type) AS bond_types_count FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id WHERE      c.atom_id IN (SELECT atom_id FROM connected WHERE molecule_id = 'TR346') GROUP BY      c.atom_id; 
SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bond_molecules,        SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_double_bond_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element IS NOT NULL; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id LEFT JOIN bond b ON c.bond_id = b.bond_id WHERE a.element != 's' AND b.bond_type != '='; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR001' AND c.atom_id2 = '2' AND b.bond_type = '+'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005'; 
SELECT COUNT(*)  FROM bond  WHERE bond_type = '-'; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m2 ON c.atom_id2 = m2.molecule_id WHERE m2.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY m.molecule_id HAVING COUNT(DISTINCT m2.molecule_id) > 0; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.molecule_id NOT IN (     SELECT b.molecule_id     FROM bond b     JOIN connected c ON b.molecule_id = c.atom_id     WHERE c.atom_id2 = c.atom_id ) 
SELECT      (SUM(CASE WHEN m.label = '+' AND a.element = 'Cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentage FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = '+'; 
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'; 
SELECT COUNT(DISTINCT atom.element)  FROM atom  JOIN connected ON atom.element = connected.atom_id2  WHERE connected.atom_id2 = 'TR001_3_4'; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' OR c.atom_id = 'TR000_2' AND (c.atom_id2 = 'TR000_1' OR c.atom_id2 = 'TR000_2'); 
SELECT m.molecule_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN connected c2 ON c1.atom_id2 = c2.atom_id2 AND c1.bond_id = c2.bond_id JOIN molecule m ON c2.molecule_id = m.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4'; 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE c.atom_id2 = 'TR000_1'; 
SELECT CASE WHEN COUNT(DISTINCT m.molecule_id) = 1 THEN 'Carcinogenic'             ELSE 'Non-carcinogenic'        END AS carcinogenic_status FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id OR m.molecule_id = c.atom_id2 WHERE m.molecule_id = 'TR000' AND EXISTS (     SELECT 1     FROM bond b     WHERE b.molecule_id = m.molecule_id AND b.label = '+' ) 
SELECT      (SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) * 100.0) / COUNT(a.atom_id) AS percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id; 
SELECT COUNT(DISTINCT m.'molecule_id') FROM molecule m JOIN atom a ON m.'molecule_id' = a.'molecule_id' WHERE a.'element' = 'n' AND EXISTS (     SELECT 1     FROM bond b     JOIN connected c ON b.'bond_id' = c.'bond_id'     JOIN molecule m2 ON m2.'molecule_id' = c.'atom_id'     WHERE m2.'molecule_id' = m.'molecule_id'     AND m2.'label' = '+' ); 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.atom_id = b.bond_id JOIN connected c ON b.bond_id = c.bond_id WHERE a.element = 's' AND b.bond_type = ' = '; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element LIKE '-%' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; 
SELECT a.element FROM atom a JOIN connected c ON a.element = c.atom_id2 WHERE a.element IN ('c', 'o', 's', 'n', 'p', 'f', 'br', 'i', 'sn', 'pb', 'te', 'ca') AND c.atom_id2 = 'TR024'; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE m.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY m.molecule_id ORDER BY COUNT(a.atom_id) DESC LIMIT 1; 
SELECT      DIVIDE(COUNT(DISTINCT m.molecule_id), COUNT(DISTINCT m.molecule_id)) * 100.0 AS percentage_carcinogenic_triple_bond_hydrogens FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      atom a ON c.atom_id = a.atom_id WHERE      a.element = 'h' AND      b.bond_type = '#' AND      m.molecule_id IN (SELECT molecule_id FROM molecule WHERE molecule_id IS NOT NULL); 
SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = '+'; 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-'; 
SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c'; 
SELECT a.element  FROM atom a  JOIN connected c ON a.element = c.atom_id2  WHERE c.atom_id2 = 'TR004_7'  AND a.element NOT IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND EXISTS (     SELECT 1      FROM connected c2      JOIN atom a2 ON c2.atom_id2 = a2.element      WHERE c2.atom_id2 = 'TR004_7'      AND a2.element = '-' ); 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = ' AND c.atom_id = 'o' AND c.atom_id2 = 'o'; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND NOT EXISTS (     SELECT 1     FROM molecule m2     JOIN bond b2 ON m2.molecule_id = b2.molecule_id     WHERE m2.molecule_id = m.molecule_id     AND b2.bond_type = '-'  ); 
SELECT atom.element, connected.bond_type FROM atom JOIN connected ON atom.element = connected.atom_id2 WHERE connected.atom_id2 = 'TR016'; 
SELECT c1.atom_id FROM atom c1 JOIN connected con1 ON c1.atom_id = con1.atom_id JOIN bond b1 ON con1.bond_id = b1.bond_id JOIN connected con2 ON con1.atom_id2 = con2.atom_id JOIN bond b2 ON con2.bond_id = b2.bond_id WHERE c1.element = 'c' AND b1.bond_type = ' = ' AND b2.bond_type = ' = ' AND c1.molecule_id = (SELECT molecule_id FROM molecule WHERE molecule_id = 'TR012'); 
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id IN (     SELECT molecule_id     FROM bond     JOIN molecule ON bond.molecule_id = molecule.molecule_id     WHERE molecule.label = '+' ) AND a.element = 'o'; 
SELECT name, artist, cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT c.name FROM cards c WHERE c.borderColor IS NULL AND (c.cardKingdomFoilId IS NULL OR c.cardKingdomId IS NULL) AND c.hasFoil = 0; 
SELECT name FROM cards WHERE convertedManaCost < faceConvertedManaCost ORDER BY faceConvertedManaCost DESC; 
SELECT name FROM cards WHERE edhrecRank < 100 AND frameVersion = '2015'; 
SELECT c.name, c.cardKingdomId FROM cards c JOIN legalities l ON c.cardKingdomId = l.cardKingdomId WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator'; 
SELECT DISTINCT c.name, l.format, l.status FROM cards c JOIN legalities l ON c.mtgoCode = l.format WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage'; 
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.mtgoId = l.mtgoId WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal'; 
SELECT      c.name,     r.text AS ruling_text,     c.hasContentWarning AS has_content_warning FROM      cards c JOIN      foreign_data fd ON c.uuid = fd.uuid JOIN      rulings r ON fd.uuid = r.uuid WHERE      c.artist = 'Stephen Daniel' AND     c.hasContentWarning = 1; 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s'; 
SELECT c.name, c.artist, COUNT(r.uuid) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.isPromo = 1 GROUP BY c.name, c.artist ORDER BY ruling_count DESC LIMIT 1; 
SELECT fd.language FROM cards c JOIN foreign_data fd ON c.mtgoId = fd.multiverseid WHERE c.name = 'Annul' AND c.number = '29'; 
SELECT c.name FROM cards c JOIN foreign_data fd ON c.mtgojsonV4Id = fd.uuid WHERE fd.language = 'Japanese'; 
SELECT   (SUM(CASE WHEN f.language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS percentage_chinese_simplified FROM cards c JOIN foreign_data f ON c.mtgoId = f.multiverseid 
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian'; 
SELECT COUNT(DISTINCT type)  FROM cards  WHERE artist = 'Aaron Boyd'; 
SELECT keywords  FROM cards  WHERE name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards WHERE power = '*'; 
SELECT promoTypes  FROM cards  WHERE name = 'Duress'; 
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'; 
SELECT originalType  FROM cards  WHERE name = 'Ancestor''s Chosen'  AND type = 'Card'; 
SELECT DISTINCT sct.language FROM cards c JOIN sets s ON c.mcmId = s.mcmId JOIN set_translations sct ON s.code = sct.setCode WHERE c.name = 'Angel of Mercy'; 
SELECT COUNT(c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0; 
SELECT rulings.text FROM cards JOIN rulings ON cards.mtgjsonV4Id = rulings.uuid WHERE cards.name = 'Condemn'; 
SELECT COUNT(c.id) AS restricted_cards_in_starter FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isStarter = 1; 
SELECT legalities.status FROM cards JOIN legalities ON cards.multiverseId = legalities.multiverseId WHERE cards.faceName = 'Cloudchaser Eagle'; 
SELECT type  FROM cards  WHERE name = 'Benalish Knight'; 
SELECT r.text FROM cards c JOIN legalities l ON c.cardKingdomId = l.cardKingdomId JOIN rulings r ON l.uuid = r.uuid WHERE c.name = 'Benalish Knight' AND l.format = 'commander'; 
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian' AND c.name = fd.name; 
SELECT      (COUNT(CASE WHEN cards.borderColor = 'borderless' THEN cards.id END) * 100.0) / COUNT(cards.id) AS percentage_borderless_cards FROM      cards; 
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1; 
SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian'; 
SELECT      (COUNT(CASE WHEN f.language = 'French' THEN 1 END) * 100.0) / COUNT(CASE WHEN c.isStorySpotlight = 1 THEN 1 END) AS percentage_French_StorySpotlight FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.isStorySpotlight = 1; 
SELECT COUNT(*) FROM cards WHERE toughness = '99'; 
SELECT name FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'; 
SELECT id FROM cards WHERE convertedManaCost = 0; 
SELECT layout  FROM cards  WHERE keywords LIKE '%flying%' 
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'; 
SELECT c.id FROM cards c WHERE c.hasFoil = 1 AND c.hasNonFoil = 1 AND (c.cardKingdomFoilId IS NOT NULL OR c.cardKingdomId IS NOT NULL) 
SELECT id FROM cards WHERE duelDeck = 'a'; 
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'; 
SELECT DISTINCT f.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'Chinese Simplified' AND f.name IS NOT NULL; 
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese'; 
SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white'; 
SELECT c.uuid, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy'; 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality'; 
SELECT      COUNT(*) AS total_cards_with_future_frame_version,     GROUP_CONCAT(DISTINCT l.status ORDER BY l.status) AS legality_status FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.frameVersion = 'future' AND      l.status = 'legal'; 
SELECT cards.name, cards.colors FROM cards JOIN sets ON cards.set_code = sets.code WHERE sets.code = 'OGW'; 
SELECT      c.name,      f.language FROM      cards c JOIN      set_translations st ON c.uuid = st.uuid JOIN      sets s ON c.cardKingdomId = s.code WHERE      s.code = '10E'      AND c.convertedManaCost = 5; 
SELECT cards.name, rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf'; 
SELECT c.colors, l.format FROM cards c JOIN legalities l ON c.mtgoId = l.mtgoId WHERE c.id BETWEEN 1 AND 20; 
SELECT c.name, c.colors, f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B' AND f.language <> 'en'; 
SELECT c.name FROM cards c JOIN legalities l ON c.mtgoFoilId = l.id WHERE c.rarity = 'uncommon' AND l.status = 'legal' AND c.uuid IN (     SELECT rt.uuid     FROM rulings r     JOIN set_translations st ON r.uuid = st.uuid     ORDER BY r.date ASC     LIMIT 3 ); 
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND power = '0' AND cardKingdomId = cardKingdomFoilId; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1' AND type IN ('Enchantment', 'Instant', 'Sorcery', 'Artifact', 'Permanent'); 
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1; 
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%'; 
SELECT SUM(convertedManaCost) AS totalUnconvertedManaCost FROM cards WHERE artist = 'Rob Alexander'; 
SELECT DISTINCT type FROM cards WHERE availability = 'arena'; 
SELECT s.code FROM cards c JOIN set_translations st ON c.scryfallId = st.scetCode JOIN sets s ON c.scryfallId = s.id WHERE st.language = 'Spanish'; 
SELECT      ROUND((COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) * 100.0) / COUNT(cards.id), 2) AS percentage FROM      cards WHERE      cards.frameEffects = 'legendary'; 
SELECT      c.id,      ROUND(         (SUM(CASE WHEN c.isStorySpotlight = 1 AND c.isTextless = 0 THEN 1 ELSE 0 END) * 100.0) /          SUM(CASE WHEN c.isStorySpotlight = 1 THEN 1 ELSE 0 END),          2     ) AS percentage FROM      cards c WHERE      c.isStorySpotlight = 1 GROUP BY      c.id ORDER BY      percentage DESC; 
SELECT c.name,         (SUM(CASE WHEN f.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS percentage_spanish FROM cards c LEFT JOIN foreign_data f ON c.uuid = f.uuid GROUP BY c.name ORDER BY percentage_spanish DESC; 
SELECT DISTINCT st.language FROM sets s JOIN set_translations st ON s.code = st.set_code WHERE s.baseSetSize = 309; 
SELECT COUNT(DISTINCT s.id) FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)'; 
SELECT id FROM cards WHERE type LIKE '%Creature%' AND uuid IN (     SELECT uuid     FROM legalities     WHERE status = 'legal' ); 
SELECT DISTINCT t.type FROM cards c JOIN set_translations st ON c.set_code = st.set_code JOIN foreign_data fd ON c.uuid = fd.uuid AND st.set_code = fd.multiverseid AND st.language = 'German' WHERE c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL AND fd.type = 'type'; 
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND flavorText IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE type LIKE '%Mana%' AND text LIKE '%triggered mana ability%' AND side IS NULL AND id NOT IN (     SELECT id     FROM cards     WHERE side IS NOT NULL ); 
SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper'; 
SELECT cards.colorIdentity FROM cards WHERE cards.colorIdentity = (     SELECT sets.colorIdentity     FROM sets     WHERE sets.isForeignOnly = 1     AND sets.colorIdentity IN (         SELECT legalities.format         FROM legalities         WHERE legalities.format = 'Modern'     ) ) AND cards.scryfallIllustrationId = (     SELECT illustrations.scryfallIllustrationId     FROM illustrations     WHERE illustrations.illustrationText = 'Das perfekte Gegenmittel zu einer dichten Formation' ); 
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.name = fd.name WHERE c.artist = 'Matthew D. Wilson' AND fd.language = 'French' AND c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.scryfallId = legalities.id JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10'; 
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica'; 
SELECT      ROUND(         (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) / COUNT(c.id)) * 100, 2     ) AS percentageWithoutContentWarning FROM      cards c JOIN      legalities l ON c.scryfallId = l.scryfallId WHERE      c.format = 'commander' AND l.status = 'legal'; 
SELECT      (COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END AND f.language = 'French') * 100.0) /      COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END) AS percentage_of_french_cards_without_power FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.power IS NULL OR c.power = '*' 
SELECT      (SELECT COUNT(*)       FROM sets       WHERE type = 'expansion' AND id IN       (SELECT setCode        FROM set_translations        WHERE language = 'Japanese')) /      (SELECT COUNT(*)       FROM set_translations       WHERE language = 'Japanese') * 100 AS percentage 
SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader'; 
SELECT COUNT(*) FROM cards WHERE colorIdentity IS NOT NULL AND borderColor = 'borderless' AND edhrecRank > 12000; 
SELECT      COUNT(*) AS TotalCards FROM      cards WHERE      isOversized = 1      AND isReprint = 1      AND isPromo = 1; 
SELECT name, 'cards' AS source_table FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3; 
SELECT language FROM foreign_data WHERE multiverseid = 149934; 
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3; 
SELECT      ROUND(         (COUNT(CASE WHEN cards.isTextless = 1 AND cards.layout = 'normal' THEN 1 END) / COUNT(cards.id)) * 100,         2     ) AS proportion FROM      cards; 
SELECT c.id FROM cards c WHERE c.subtypes LIKE '%Angel%' AND c.subtypes LIKE '%Wizard%' AND c.otherFaceIds IS NULL; 
SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3; 
SELECT DISTINCT language FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC'; 
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.set_code WHERE s.id = 5; 
SELECT s.name AS SetName, st.language, s.type AS ExpansionType FROM sets s JOIN set_translations st ON s.code = st.set_code WHERE s.id = 206; 
SELECT s.keyruneCode, s.name, COUNT(*) AS cardCount FROM cards c JOIN set_translations st ON c.scryfallId = st.scetCode JOIN sets s ON c.mtgoCode = s.mtgoCode WHERE st.language = 'Italian' AND s.name LIKE '%Shadowmoor%' GROUP BY s.keyruneCode, s.name ORDER BY cardCount DESC, s.name ASC LIMIT 2; 
SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND s.isForeignOnly = 1 AND s.isFoilOnly = 1; 
SELECT s.name, MAX(s.baseSetSize) AS max_cards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' GROUP BY s.name ORDER BY max_cards DESC LIMIT 1; 
SELECT     ROUND((COUNT(CASE WHEN cards.isOnlineOnly = 1 THEN 1 END) * 100.0) / COUNT(*), 2) AS online_only_percentage FROM     cards JOIN     set_translations ON cards.setCode = set_translations.setCode WHERE     set_translations.language = 'Chinese Simplified'; 
SELECT COUNT(*)  FROM sets  WHERE name IN (SELECT translation FROM set_translations WHERE language = 'Japanese' AND setCode = sets.code) AND (mtgoCode IS NULL OR mtgoCode = ''); 
SELECT id  FROM cards  WHERE borderColor = 'black'; 
SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id; 
SELECT c.name FROM cards c WHERE c.borderColor = 'black' AND c.isFullArt = 1; 
SELECT language FROM set_translations WHERE setCode = '174'; 
SELECT name FROM sets WHERE code = 'ALL'; 
SELECT fd.language FROM cards c JOIN foreign_data fd ON c.mcmMetaId = fd.mcmMetaId WHERE c.asciiName = 'A Pedra Fellwar'; 
SELECT code  FROM sets  WHERE releaseDate = '2007-07-13'; 
SELECT s.baseSetSize, s.code FROM sets s WHERE s.block IN ('Masques', 'Mirage'); 
SELECT code FROM sets WHERE type = 'expansion'; 
SELECT      f.name AS foreignName,     c.type AS cardType FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.watermark = 'Boros'; 
SELECT      f.language,      f.flavorText,      c.type FROM      cards c JOIN      foreign_data f ON c.watermark = f.name WHERE      c.watermark = 'Colorpie'; 
SELECT      ROUND((COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_with_mana_cost_10 FROM      cards c JOIN      sets s ON c.cardKingdomId = s.code WHERE      s.name = 'Abyssal Horror'; 
SELECT DISTINCT sets.code FROM sets JOIN cards ON sets.code = cards.code WHERE cards.type LIKE '%Commander%'; 
SELECT fd.name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'Abzan'; 
SELECT      f.language,      c.type FROM      cards c JOIN      foreign_data f ON c.watermark = f.name WHERE      f.language = 'Azorius' 
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%' 
SELECT name FROM cards WHERE isTextless = 0; 
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'W' AND (power = '*' OR power IS NULL); 
SELECT c.name FROM cards c JOIN sets s ON c.cardKingdomId = s.code WHERE c.isPromo = 1 AND c.side IS NOT NULL GROUP BY c.name HAVING COUNT(*) > 1; 
SELECT      s.supertypes,     s.subtypes FROM      cards c JOIN      sets s ON c.cardKingdomId = s.code WHERE      c.name = 'Molimo, Maro-Sorcerer' 
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'; 
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'Black' AND availability LIKE '%arena,mtgo%'; 
SELECT      CASE          WHEN MAX(c1.convertedManaCost) > MAX(c2.convertedManaCost) THEN 'Serra Angel'         WHEN MAX(c1.convertedManaCost) < MAX(c2.convertedManaCost) THEN 'Shrine Keeper'         ELSE 'Both have the same converted mana cost'     END AS cardWithHigherManaCost FROM      cards c1 JOIN      cards c2 ON c1.name = 'Serra Angel' AND c2.name = 'Shrine Keeper' WHERE      c1.uuid = c1.uuid AND c2.uuid = c2.uuid; 
SELECT c.artist FROM cards c WHERE c.flavorName = 'Battra, Dark Destroyer'; 
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3; 
SELECT st.translation  FROM sets s  JOIN set_translations st ON s.name = st.setCode  JOIN cards c ON s.name = c.set WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian'; 
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.name = set_translations.translation WHERE cards.name = 'Angel of Mercy'; 
SELECT c.faceName FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT fd.name, fd.text FROM cards c JOIN sets s ON c.mtgoCode = s.mtgoCode JOIN foreign_data fd ON c.name = fd.name WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean'; 
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'; 
SELECT sets.baseSetSize  FROM sets  WHERE sets.name = (SELECT translation FROM set_translations WHERE translation = 'Hauptset Zehnte Edition'); 
SELECT st.translation FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE s.setCode = (SELECT setCode FROM sets WHERE name = 'Eighth Edition') AND st.language = 'Chinese'; 
SELECT      c.cardKingdomId FROM      cards c JOIN      sets s ON c.cardKingdomId = s.tcgplayerGroupId WHERE      c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL; 
SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen'; 
SELECT sets.mtgoCode FROM sets JOIN set_translations ON sets.mtgoCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'; 
SELECT COUNT(DISTINCT s.id) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Ice Age' AND st.language = 'Italian'; 
SELECT      c.name AS card_name,      s.name AS set_name,      s.isForeignOnly FROM      cards c JOIN      sets s ON c.mcmId = s.mcmId WHERE      c.name = 'Adarkar Valkyrie' AND      s.isForeignOnly = 1; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10; 
SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black'; 
SELECT c.name FROM cards c JOIN sets s ON c.mtgoId = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT DISTINCT a.name FROM artists a JOIN cards c ON a.id = c.artist_id JOIN sets s ON c.set_id = s.id WHERE s.name = 'Coldsnap' AND a.name IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy'); 
SELECT *  FROM cards  WHERE name = 'Coldsnap' AND number = '4'; 
SELECT COUNT(*) FROM cards C JOIN sets S ON C.name = S.name WHERE S.name = 'Coldsnap' AND C.convertedManaCost > 5 AND (C.power = '*' OR C.power IS NULL); 
SELECT flavorText FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen'; 
SELECT DISTINCT f.language FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND f.flavorText IS NOT NULL; 
SELECT foreign_data.type FROM cards JOIN foreign_data ON cards.name = foreign_data.name WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'; 
SELECT cards.name, rulings.text AS italian_ruling FROM cards JOIN set_translations ON cards.scryfallId = set_translations.scetCode JOIN rulings ON cards.uuid = rulings.uuid WHERE set_translations.language = 'Italian' AND set_translations.translation = 'Coldsnap' AND cards.name = 'Coldsnap'; 
SELECT f.name FROM cards c JOIN set_translations st ON c.mtgoId = st.mtgoId JOIN foreign_data f ON c.mtgoId = f.mtgoId WHERE st.language = 'Italian' AND c.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 10; 
SELECT r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Reminisce'; 
SELECT      (SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM      cards JOIN      sets ON cards.mtgoId = sets.mtgoId WHERE      sets.name = 'Coldsnap'; 
SELECT      (SUM(CASE WHEN cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) /      (SELECT COUNT(*) FROM cards WHERE cards.name = 'Coldsnap') AS percentage_incredibly_powerful_cards FROM      cards WHERE      cards.name = 'Coldsnap'; 
SELECT code  FROM sets  WHERE releaseDate = '2017-07-14'; 
SELECT keyruneCode FROM sets WHERE code = 'PKHC'; 
SELECT mcmId  FROM sets  WHERE code = 'SS2'; 
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'; 
SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'; 
SELECT parentCode  FROM sets  WHERE name = 'Commander 2014 Oversized'; 
SELECT      c.name,     r.text AS ruling_text,     CASE          WHEN c.hasContentWarning = 1 THEN 'Yes'         ELSE 'No'     END AS has_content_warning,     CASE          WHEN c.artist IS NULL OR c.artist = '' THEN 'Yes'         ELSE 'No'     END AS missing_artist,     CASE          WHEN c.manaCost IS NULL OR c.manaCost = '' THEN 'Yes'         ELSE 'No'     END AS missing_mana_cost,     CASE          WHEN c.power IS NULL OR c.power = '' THEN 'Yes'         ELSE 'No'     END AS missing_power,     CASE          WHEN c.toughness IS NULL OR c.toughness = '' THEN 'Yes'         ELSE 'No'     END AS missing_toughness FROM      cards c LEFT JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Jim Pavelec'; 
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.mcmId WHERE c.name = 'Evacuation'; 
SELECT sets.baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara'; 
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Huitième édition'; 
SELECT st.translation FROM cards c JOIN set_translations st ON c.set_code = st.set_code AND st.language = 'French' JOIN sets s ON c.set_code = s.code WHERE c.name = 'Tendo Ice Bridge'; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.mcmId WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese'; 
SELECT faceName, MAX(convertedManaCost) AS maxCMC FROM cards JOIN sets ON cards.mtgoCode = sets.mtgoCode WHERE sets.mcmName = 'Journey into Nyx Hero''s Path' GROUP BY faceName ORDER BY maxCMC DESC LIMIT 1; 
SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.keyruneCode = set_translations.setCode WHERE set_translations.translation = 'Ola de frío'; 
SELECT s.type FROM sets s JOIN cards c ON s.code = c.mtgoCode WHERE c.name = 'Samite Pilgrim'; 
SELECT COUNT(*) FROM cards WHERE name = 'World Championship Decks 2004' AND convertedManaCost = 3; 
SELECT t.translation FROM sets JOIN set_translations t ON sets.name = t.translation WHERE sets.name = 'Mirrodin' AND t.language = 'Chinese Simplified'; 
SELECT      (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN c.language = 'Japanese' THEN 1 ELSE 0 END) AS percentage_japanese_non_foil FROM      cards c JOIN      set_translations st ON c.setcode = st.setcode WHERE      st.language = 'Japanese'; 
SELECT      (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS onlineOnlyPercentage FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Portuguese (Brazil)' 
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Aleksi Briclot' AND c.isTextless = 1; 
SELECT s.id FROM sets s ORDER BY s.baseSetSize DESC LIMIT 1; 
SELECT      c.artist  FROM      cards c  WHERE      c.side IS NULL      AND c.convertedManaCost = (SELECT MAX(convertedManaCost)                                  FROM cards                                  WHERE side IS NULL) 
SELECT MAX(frameEffects) AS most_common_frame_effect FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'; 
SELECT s.id FROM sets s WHERE s.name IN (     SELECT st.translation     FROM set_translations st     WHERE st.setCode = s.name AND st.language = 'en' AND st.translation LIKE '%Commander%' ) ORDER BY s.totalSetSize DESC LIMIT 1; 
SELECT name, MAX(convertedManaCost) as highestManaCost FROM cards WHERE format = 'duel' GROUP BY name ORDER BY highestManaCost DESC LIMIT 10; 
SELECT      c.originalReleaseDate,      l.format FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.rarity = 'mythic' AND      l.status = 'legal' AND      c.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic') ORDER BY      c.originalReleaseDate ASC LIMIT 1; 
SELECT COUNT(c.cardKingdomId) FROM cards c JOIN foreign_data fd ON c.name = fd.name WHERE c.artist = 'Volkan Baga' AND fd.language = 'French'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.mtgoCode = legalities.format WHERE cards.rarity = 'rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal'; 
SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'banned' GROUP BY legalities.format, cards.name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT language FROM sets WHERE name = 'Battlebond'; 
SELECT      artist,     COUNT(*) AS artist_card_count FROM      cards GROUP BY      artist ORDER BY      artist_card_count ASC LIMIT 1; 
SELECT c.name, c.rarity, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND l.format = 'legacy' AND (c.hasContentWarning = 1 OR l.format = 'Wizards of the Coast'); 
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned'; 
SELECT AVG(COUNT(DISTINCT s.id)) / (2015 - 2012 + 1) AS annual_avg_sets FROM sets s WHERE s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY s.releaseDate UNION ALL SELECT MAX(language) AS common_language FROM cards c WHERE c.language IS NOT NULL; 
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'; 
SELECT DISTINCT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted'); 
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'; 
SELECT r.id, r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.mtgjsonV4Id WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC; 
SELECT c.name AS CardName, l.format AS LegalFormat FROM cards c JOIN sets s ON c.mcmId = s.mcmId JOIN legalities l ON c.mtgoId = l.mtgoId WHERE s.name = 'Hour of Devastation' AND l.status = 'legal'; 
SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language != 'Japanese' AND st.language = 'Korean'; 
SELECT DISTINCT c.frameVersion FROM cards c JOIN foreign_data fd ON c.name = fd.name WHERE c.artist = 'Allen Williams';  SELECT c.name FROM cards c JOIN legalities l ON c.mtgoId = l.mtgoId WHERE l.status = 'banned'; 
SELECT      CASE          WHEN u1.Reputation > u2.Reputation THEN u1.DisplayName          WHEN u1.Reputation < u2.Reputation THEN u2.DisplayName          ELSE 'Equal Reputation'      END AS HigherReputationUser FROM      users u1 JOIN      users u2 ON u1.DisplayName = 'Harlan' OR u2.DisplayName = 'Harlan' WHERE      u1.DisplayName = 'Harlan' AND u2.DisplayName = 'Jarrod Dixon' 
SELECT DISTINCT u.DisplayName FROM users u WHERE YEAR(u.CreationDate) = 2014; 
SELECT COUNT(DISTINCT Id)  FROM users  WHERE LastAccessDate > '2014-09-01 00:00:00'; 
SELECT u.DisplayName FROM users u ORDER BY u.Views DESC LIMIT 1; 
SELECT COUNT(DISTINCT u.AccountId) FROM users u WHERE u.UpVotes > 100 AND u.DownVotes > 1; 
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013; 
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts); 
SELECT SUM(c.CommentCount) AS TotalComments FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT      p.Id,      p.AnswerCount FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName = 'csgillespie' ORDER BY      p.AnswerCount DESC LIMIT 1; 
SELECT p.LastEditorDisplayName FROM posts p WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' AND p.LastEditorUserId IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL 
SELECT DISTINCT p.OwnerDisplayName FROM posts p WHERE p.ClosedDate IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (     SELECT Id     FROM users     WHERE Age > 65 ) AND Score >= 20; 
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian'; 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY t.Count DESC LIMIT 1; 
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT COUNT(*) FROM badges WHERE UserId = (     SELECT Id     FROM users     WHERE DisplayName = 'csgillespie' ) AND YEAR(Date) = 2011; 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.DisplayName ORDER BY COUNT(b.Id) DESC LIMIT 1; 
SELECT AVG(posts.Score) AS average_score FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'; 
SELECT AVG(b.Count) / COUNT(DISTINCT u.DisplayName) AS AvgBadgesPerUser FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.ViewCount > 200; 
SELECT      (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0) / COUNT(p.Id) AS ElderUserPercentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 20; 
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND CreationDate = '2010-07-19'; 
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1; 
SELECT COUNT(*)  FROM badges  WHERE Name = 'Revival'; 
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments) 
SELECT COUNT(c.Id) AS CommentCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount = 1910; 
SELECT SUM(p.FavoriteCount) AS TotalFavoriteCount FROM posts p WHERE p.Id = (     SELECT c.PostId     FROM comments c     WHERE c.UserId = 3025     AND c.CreationDate = '2014/4/23 20:29:39.0' ); 
SELECT Text FROM comments WHERE PostId = 107829 ORDER BY Id LIMIT 1; 
SELECT      p.PostId,     p.CreationDate,     p.LasActivityDate,     p.ClosedDate,     CASE          WHEN p.ClosedDate IS NULL THEN 'Open'         ELSE 'Closed'     END AS PostStatus FROM      posts p JOIN      comments c ON p.PostId = c.PostId JOIN      users u ON c.UserId = u.Id WHERE      c.UserId = 23853 AND      c.CreationDate = '2013-07-12 09:08:18.0' 
SELECT Reputation  FROM users  WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041); 
SELECT COUNT(p.PostId) AS Posts_owned FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Tiago Pasqualini'; 
SELECT UserDisplayName FROM votes WHERE Id = 6347; 
SELECT SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE -1 END) AS NetVotes FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data visualization%'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'; 
SELECT      (COUNT(posts.Id) / COUNT(votes.Id)) AS post_to_vote_ratio FROM      posts LEFT JOIN      votes ON posts.Id = votes.PostId WHERE      posts.OwnerUserId = 24; 
SELECT SUM(p.ViewCount) AS TotalViews FROM posts p WHERE p.PostTypeId = 1 AND p.ViewCount IS NOT NULL AND EXISTS (     SELECT 1     FROM postLinks pl     JOIN tags t ON pl.PostId = t.WikiPostId     WHERE t.TagName = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' ) 
SELECT Text FROM comments WHERE Score = 17; 
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com' 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost'; 
SELECT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93'; 
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion'; 
SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Body LIKE '%Understanding what Dassault iSight is doing%' AND u.DisplayName = (SELECT DisplayName FROM users WHERE Id = p.OwnerUserId); 
SELECT c.Text AS CommentText FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'; 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' GROUP BY u.DisplayName LIMIT 10; 
SELECT p.UserDisplayName AS EditorDisplayName FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data'; 
SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa' 
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY u.Id; 
SELECT      c.Id,     c.Text,     c.CreationDate,     u.DisplayName FROM      comments c JOIN      posts p ON c.PostId = p.Id JOIN      users u ON c.UserId = u.Id WHERE      p.OwnerDisplayName = 'Why square the difference instead of taking the absolute value in standard deviation?' 
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%'; 
SELECT u.DisplayName FROM posts p JOIN votes v ON p.Id = v.PostId JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%' 
SELECT      p.Title,      c.Text AS Comment,      c.Score AS CommentScore,      AVG(p.ViewCount) AS AvgViewCount FROM      posts p JOIN      postLinks pl ON p.Id = pl.PostId JOIN      tags t ON pl.TagName = t.TagName LEFT JOIN      comments c ON p.Id = c.PostId WHERE      t.TagName = 'humor' GROUP BY      p.Id, c.Id ORDER BY      p.ViewCount DESC; 
SELECT COUNT(c.Id) AS TotalComments FROM comments c WHERE c.UserId = 13; 
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT Id, Views FROM users ORDER BY Views ASC LIMIT 1; 
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'; 
SELECT COUNT(DISTINCT b.UserId) AS UsersWithMoreThanFiveBadges FROM badges b WHERE (SELECT COUNT(*) FROM badges AS b2 WHERE b2.UserId = b.UserId) > 5; 
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name IN ('Teacher', 'Supporter') AND u.Location = 'New York'; 
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1; 
SELECT u.DisplayName, COUNT(DISTINCT ph.PostId) AS PostCount FROM users u JOIN postHistory ph ON u.Id = ph.UserId JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000 GROUP BY u.Id HAVING COUNT(DISTINCT ph.PostId) = 1; 
SELECT      u.DisplayName,      u.ProfileImageUrl,      b.Name AS BadgeName FROM      users u JOIN      comments c ON u.Id = c.UserId JOIN      badges b ON u.Id = b.UserId GROUP BY      u.Id, b.Name ORDER BY      COUNT(c.Id) DESC LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher' AND u.Location = 'India'; 
SELECT      ((COUNT(CASE WHEN badges.Date BETWEEN '2010-01-01' AND '2010-12-31' THEN 1 END) / COUNT(badges.Name)) * 100 -       (COUNT(CASE WHEN badges.Date BETWEEN '2011-01-01' AND '2011-12-31' THEN 1 END) / COUNT(badges.Name))) * 100 AS PercentageDifference FROM badges 
SELECT PostHistoryTypeId, COUNT(DISTINCT UserId) AS UniqueCommentersCount FROM postHistory WHERE PostId = 3720 GROUP BY PostHistoryTypeId; 
SELECT      p.Id AS PostId,      p.ViewCount AS Popularity FROM      posts p JOIN      postLinks pl ON p.Id = pl.PostId WHERE      pl.RelatedPostId = 61217; 
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395; 
SELECT p.Id AS PostId, p.OwnerUserId FROM posts p WHERE p.Score > 60; 
SELECT SUM(p.FavoriteCount) AS TotalFavoriteCount FROM posts p WHERE p.OwnerUserId = 686 AND YEAR(p.CreationDate) = 2011 
SELECT      AVG(u.UpVotes) AS AverageUpVotes,     AVG(u.Age) AS AverageAge FROM      users u JOIN      posts p ON u.Id = p.OwnerUserId GROUP BY      u.Id HAVING      COUNT(p.Id) > 10; 
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'Announcer'; 
SELECT DISTINCT b.BadgeName FROM badges AS b JOIN postHistory AS ph ON b.GiverUserId = ph.UserDisplayName WHERE ph.CreationDate = '2010-07-19 19:39:08' AND ph.PostHistoryTypeId = 1; -- Assuming PostHistoryTypeId 1 corresponds to badge award events 
SELECT COUNT(*)  FROM comments  WHERE Score > 60; 
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'; 
SELECT COUNT(*)  FROM posts  WHERE Score = 10; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT DISTINCT c.UserDisplayName FROM comments c JOIN postHistory ph ON c.UserDisplayName = ph.UserDisplayName WHERE ph.CreationDate = '2010-07-19 19:39:08.0'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'; 
SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY' ORDER BY b.Date; 
SELECT      (COUNT(CASE WHEN b.Name = 'Teacher' THEN b.UserId END) * 100.0) / COUNT(DISTINCT b.UserId) AS PercentageOfTeacherBadgeUsers FROM badges b; 
SELECT      (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(u.Id) AS TeenagerPercentage FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer'; 
SELECT c.Score FROM comments c JOIN postHistory ph ON c.UserId = ph.UserId JOIN posts p ON ph.PostId = p.PostId WHERE p.CreationDate = '2010-07-19 19:19:56.0' 
SELECT c.Text FROM comments c JOIN postHistory ph ON c.Text = ph.Text WHERE ph.CreationDate = '2010-07-19 19:37:33.0' AND ph.PostId = (     SELECT p.Id     FROM posts p     WHERE p.LasActivityDate = '2010-07-19 19:37:33.0' ); 
SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria' AND badges.Name = 'Obtained'; 
SELECT COUNT(DISTINCT u.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65; 
SELECT p.ViewCount FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE ph.CreationDate = '2010-07-19 19:39:08.0' AND ph.PostHistoryTypeId =  -- Assuming a known ID for badge achievement GROUP BY p.ViewCount; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users) ORDER BY b.Name; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie'; 
SELECT COUNT(DISTINCT badges.UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65; 
SELECT DisplayName FROM users WHERE Id = 30; 
SELECT COUNT(*)  FROM users  WHERE Location = 'New York'; 
SELECT COUNT(*)  FROM votes  WHERE YEAR(CreationDate) = 2010; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT DisplayName, MAX(Views) as MaxViews FROM users GROUP BY DisplayName ORDER BY MaxViews DESC LIMIT 1; 
SELECT      (COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 END) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 END)) AS VoteRatio FROM votes 
SELECT TagName FROM tags WHERE Id IN (     SELECT TagId     FROM posts     WHERE Tags LIKE '%[John Stauffer]' ); 
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo'; 
SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'Harlan'; 
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1; 
SELECT      CASE          WHEN SUM(CASE WHEN OwnerDisplayName = 'Harvey Motulsky' THEN ViewCount ELSE 0 END) >               SUM(CASE WHEN OwnerDisplayName = 'Noah Snyder' THEN ViewCount ELSE 0 END)          THEN 'Harvey Motulsky'          ELSE 'Noah Snyder'      END AS MorePopularUser,     MAX(SUM(CASE WHEN OwnerDisplayName = 'Harvey Motulsky' THEN ViewCount ELSE 0 END)) AS HarveyMotulskyViewCount,     MAX(SUM(CASE WHEN OwnerDisplayName = 'Noah Snyder' THEN ViewCount ELSE 0 END)) AS NoahSnyderViewCount FROM      posts WHERE      OwnerDisplayName = 'Harvey Motulsky' OR      OwnerDisplayName = 'Noah Snyder' GROUP BY      OwnerDisplayName ORDER BY      CASE          WHEN SUM(CASE WHEN OwnerDisplayName = 'Harvey Motulsky' THEN ViewCount ELSE 0 END) >               SUM(CASE WHEN OwnerDisplayName = 'Noah Snyder' THEN ViewCount ELSE 0 END)          THEN 1          ELSE 2      END; 
SELECT COUNT(p.Id)  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Score > 4; 
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score < 0 AND u.DisplayName = 'Neil McGuigan'; 
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.Id = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.Id NOT IN (     SELECT PostId     FROM comments ); 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'; 
SELECT      (COUNT(CASE WHEN p.Tags LIKE '%r%' THEN p.Id ELSE NULL END) * 100.0) /      COUNT(CASE WHEN u.DisplayName = 'Community' THEN p.Id ELSE NULL END) AS PercentageRLanguagePostsByCommunity FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName = 'Community'; 
SELECT      (SUM(CASE WHEN p.OwnerDisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) -       SUM(CASE WHEN p.OwnerDisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM      posts p; 
SELECT COUNT(DISTINCT u.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Commentator'  AND YEAR(b.Date) = 2014; 
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59'; 
SELECT u.DisplayName, u.Age FROM users u WHERE u.Id = (     SELECT OwnerUserId     FROM posts     ORDER BY Views DESC     LIMIT 1 ); 
SELECT      p.LastEditDate,      p.LastEditorUserId  FROM      posts p  WHERE      p.Title = 'Detecting a given face in a database of facial images'; 
SELECT COUNT(*)  FROM comments  WHERE UserId = 13 AND Score < 60; 
SELECT      p.Title,      c.UserDisplayName FROM      comments c JOIN      posts p ON c.PostId = p.Id WHERE      c.Score > 60; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND YEAR(b.Date) = 2011; 
SELECT      p.OwnerDisplayName,      u.WebsiteUrl FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.FavoriteCount > 150; 
SELECT      p.Title,     COUNT(ph.Id) AS PostHistoryCount,     MAX(ph.LastEditDate) AS LastEditDate FROM      posts p JOIN      postHistory ph ON p.Id = ph.PostId WHERE      p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY      p.Id; 
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers'; 
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time' AND pl.RelatedPostId IS NOT NULL; 
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId JOIN users u ON p.OwnerUserId = u.Id WHERE u.UserDisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) 
SELECT u.DisplayName, u.Location FROM users u JOIN tags t ON u.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing'; 
SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?'; 
SELECT p.OwnerDisplayName AS ParentDisplayName FROM posts p WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1; 
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8); 
SELECT TOP 5 p.Title FROM posts p ORDER BY p.ViewCount DESC; 
SELECT COUNT(*) AS tag_count FROM postHistory GROUP BY PostHistoryTypeId HAVING COUNT(*) BETWEEN 5000 AND 7000; 
SELECT OwnerUserId  FROM posts  ORDER BY FavoriteCount DESC  LIMIT 1; 
SELECT Id, DisplayName, MAX(Reputation) AS HighestReputation FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY Reputation DESC LIMIT 1; 
SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE YEAR(posts.CreationDate) = 2011 AND votes.BountyAmount = 50; 
SELECT MIN(Age) FROM users 
SELECT p.Score FROM posts p JOIN tags t ON p.Tags LIKE CONCAT('% ', t.TagName, ' %') WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT      COUNT(pl.Id) / 12 AS avg_monthly_links FROM      postLinks pl JOIN      posts p ON pl.PostId = p.Id WHERE      YEAR(pl.CreationDate) = 2010     AND p.AnswerCount <= 2 GROUP BY      YEAR(pl.CreationDate); 
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (     SELECT MIN(pl2.CreationDate)     FROM postLinks pl2 ) 
SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id GROUP BY badges.UserId ORDER BY COUNT(badges.Name) DESC LIMIT 1; 
SELECT MIN(v.CreationDate)  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE u.DisplayName = 'chl'  AND v.VoteTypeId IN (2, 3) -- Assuming 2 is for upvote and 3 is for downvote ORDER BY v.CreationDate ASC  LIMIT 1; 
SELECT MIN(p.CreaionDate) as YoungestFirstPostDate FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age = (SELECT MIN(Age) FROM users) 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'); 
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4; 
SELECT AVG(v.PostId) AS AvgPostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users); 
SELECT DisplayName  FROM users  WHERE Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000; 
SELECT DISTINCT u.DisplayName  FROM users u  WHERE u.Age BETWEEN 19 AND 65 
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010; 
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.Id, p.Title FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts) 
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner' 
SELECT DISTINCT p.OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011; 
SELECT      p.Id,     u.DisplayName AS OwnerDisplayName FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      YEAR(p.CreationDate) = 2010 ORDER BY      p.FavoriteCount DESC LIMIT 1; 
SELECT      ROUND((COUNT(CASE WHEN p.OwnerUserId IN (SELECT Id FROM users WHERE Reputation > 1000 AND CreationDate BETWEEN '2011-01-01' AND '2011-12-31') THEN p.Id ELSE NULL END) / COUNT(p.Id)) * 100, 2) AS percentage FROM      posts p 
SELECT      DIVIDE(COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END), COUNT(u.Id)) AS percentage FROM      users u; 
SELECT      p.ViewCount AS TotalViews,      u.DisplayName AS LastEditorDisplayName FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Title = 'Computer Game Datasets' 
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts); 
SELECT COUNT(c.Id) AS CommentCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts); 
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0; 
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 AND p.LastEditDate = (     SELECT MAX(LastEditDate)     FROM posts     WHERE Id = 183 ); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) AS AdultUsersWithOver5000Upvotes FROM users u WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000; 
SELECT      (SELECT MAX(Date) FROM badges WHERE Name = 'Zolomon') - (SELECT CreationDate FROM users WHERE DisplayName = 'Zolomon') AS TimeToGetBadge WHERE      Name = 'Zolomon' AND      UserId = (SELECT Id FROM users WHERE DisplayName = 'Zolomon') 
SELECT      u.DisplayName,      COUNT(p.Id) AS PostCount,      COUNT(c.Id) AS CommentCount FROM      users u LEFT JOIN      posts p ON u.Id = p.OwnerUserId LEFT JOIN      comments c ON u.Id = c.UserId WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users) GROUP BY      u.Id; 
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' AND c.CreationDate = (SELECT MAX(CreationDate) FROM comments WHERE PostId = p.Id); 
SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Citizen Patrol'; 
SELECT COUNT(p.Id)  FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId OR p.Id = t.WikiPostId WHERE t.TagName = 'careers'; 
SELECT Reputation, ViewCount FROM users WHERE DisplayName = 'Jarrod Dixon'; 
SELECT     COALESCE(COUNT(c.Id), 0) AS CommentCount,     COALESCE(COUNT(a.Id), 0) AS AnswerCount FROM     posts p LEFT JOIN comments c ON p.Id = c.PostId AND p.Title = 'Clustering 1D data' LEFT JOIN (     SELECT         pa.PostId     FROM         posts pa     INNER JOIN posts p ON pa.ParentId = p.Id     WHERE         p.Title = 'Clustering 1D data' ) AS a ON p.Id = a.PostId WHERE     p.Title = 'Clustering 1D data'; 
SELECT CreationDate  FROM users  WHERE DisplayName = 'IrishStat'; 
SELECT COUNT(*) FROM posts WHERE PostTypeId = 1 AND BountyAmount >= 30; 
SELECT      (COUNT(CASE WHEN p.Score >= 50 THEN p.Id ELSE NULL END) * 100.0) / COUNT(p.Id) AS PercentageOfHighScorePosts FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM posts WHERE Score < 20; 
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20; 
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'; 
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)' 
SELECT ph.Text FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?' AND ph.Text IS NOT NULL; 
SELECT      c.Id,      c.Text,      c.Score FROM      comments c JOIN      posts p ON c.PostId = p.PostId WHERE      p.ViewCount BETWEEN 100 AND 150 ORDER BY      c.Score DESC LIMIT 1; 
SELECT c.CreationDate, u.Age FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text LIKE '%http://%' 
SELECT COUNT(DISTINCT p.Id) AS PostsWithLowViewCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5; 
SELECT COUNT(c.Id) AS ZeroScoreCommentsCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.CommentCount = 1 AND c.Score = 0; 
SELECT COUNT(DISTINCT u.Id)  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE c.Score = 0 AND u.Age = 40; 
SELECT      p.Id AS PostId,      c.Text AS Comment FROM      posts p JOIN      comments c ON p.Id = c.PostId WHERE      p.Title = 'Group differences on a five point Likert item'; 
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.'; 
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky'; 
SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0 
SELECT      ROUND(         (COUNT(CASE WHEN v.UserId IN (SELECT c.UserId FROM comments c WHERE c.Score BETWEEN 5 AND 10) AND v.UpVotes = 0 THEN 1 END) * 100.0) /          COUNT(CASE WHEN c.Score BETWEEN 5 AND 10 THEN 1 END),          2     ) AS PercentageUsersWith0UpVotes FROM      votes v JOIN      comments c ON v.UserId = c.UserId WHERE      c.Score BETWEEN 5 AND 10; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man'; 
SELECT COUNT(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength'; 
SELECT COUNT(DISTINCT superhero.hero_id)  FROM superhero  JOIN hero_power ON superhero.hero_id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200; 
SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING COUNT(hero_power.power_id) > 15; 
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue'; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse'; 
SELECT COUNT(DISTINCT superhero.superhero_name) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superpower ON superhero.id = hero_power.hero_id JOIN superpower AS sp ON hero_power.power_id = sp.id WHERE attribute.attribute_name = 'Eye Colour' AND attribute.attribute_value = (SELECT id FROM attribute WHERE attribute_name = 'Eye Colour' AND attribute_value = 'Blue') AND sp.power_name = 'Agility'; 
SELECT s.superhero_name FROM superhero s JOIN colour eye_col ON s.eye_colour_id = eye_col.id AND eye_col.colour = 'Blue' JOIN colour hair_col ON s.hair_colour_id = hair_col.id AND hair_col.colour = 'Blond'; 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1; 
SELECT p.publisher_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.superhero_name = 'Sauron'; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  JOIN publisher p ON s.publisher_id = p.id  WHERE p.publisher_name = 'Marvel Comics' AND c.colour = 'Blue'; 
SELECT AVG(height_cm)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT      ROUND(         (SUM(CASE WHEN hp.power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') THEN 1 ELSE 0 END)           / COUNT(DISTINCT s.id)) * 100, 2     ) AS percentage_of_heroes_with_super_strength FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'DC Comics'; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN attribute a ON s.alignment_id = a.id WHERE a.attribute_name = 'Speed' AND s.weight_kg = (     SELECT MIN(weight_kg)     FROM superhero     WHERE alignment_id = (         SELECT id         FROM attribute         WHERE attribute_name = 'Speed'     ) ) GROUP BY p.publisher_name ORDER BY s.weight_kg ASC LIMIT 1; 
SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND c.colour = 'Gold' JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Blue Beetle II'; 
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.hair_colour_id = colour.id  WHERE colour.colour = 'Blond'; 
SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1; 
SELECT r.race  FROM superhero AS s JOIN race AS r ON s.race_id = r.id  WHERE s.superhero_name = 'Copycat'; 
SELECT COUNT(DISTINCT superhero_name) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Durability' AND attribute_value < 50; 
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'; 
SELECT COUNT(DISTINCT s.superhero_name) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.gender_id = (SELECT id FROM attribute WHERE attribute_name = 'Female') AND a.attribute_name = 'Strength' AND ha.attribute_value = 100; 
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(power_id) DESC LIMIT 1; 
SELECT COUNT(*)  FROM superhero  WHERE race_id IN (SELECT id FROM race WHERE 'Vampire' = race_name); 
SELECT      ROUND(         (SUM(CASE WHEN s.alignment_id = 2 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id),         2     ) AS percentage_bad_all,     SUM(CASE WHEN s.alignment_id = 2 THEN 1 ELSE 0 END) AS count_bad_marvel,     SUM(CASE WHEN s.alignment_id = 2 AND p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS count_bad_marvel FROM      superhero s LEFT JOIN      publisher p ON s.publisher_id = p.id WHERE      s.alignment_id = 2; 
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))     -      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference 
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'; 
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha; 
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = 75; 
SELECT s.power_name FROM superhero su JOIN hero_power hp ON su.superhero_name = 'Deathlok' AND su.superhero_name = hp.hero_id JOIN superpower s ON hp.power_id = s.id; 
SELECT AVG(weight_kg)  FROM superhero  WHERE gender_id = 2; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 5; 
SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien'); 
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = 56; 
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race_name = 'Demi-God' LIMIT 5; 
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad'); 
SELECT s.race_id FROM superhero s WHERE s.weight_kg = 169; 
SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human'; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero); 
SELECT      ROUND((SUM(CASE WHEN p.publisher_id = 13 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS percentage_marvel_heroes FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id WHERE      s.height_cm BETWEEN 150 AND 180; 
SELECT superhero.full_name FROM superhero WHERE superhero.gender_id IS NOT NULL AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) AND superhero.gender_id = 1; 
SELECT sp.power_name, COUNT(hp.power_id) AS power_count FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1; 
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination'; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.id = 1; 
SELECT COUNT(DISTINCT h.id) FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth'; 
SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1; 
SELECT AVG(superhero.id)  FROM superhero  WHERE skin_colour_id IS NULL OR skin_colour_id != 1; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE p.publisher_name = 'Dark Horse Comics'; 
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'durability' AND p.publisher_name = 'Dark Horse Comics' GROUP BY s.superhero_name ORDER BY MAX(ha.attribute_value) DESC LIMIT 1; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight'; 
SELECT s.full_name, a1.attribute_name AS eye_colour, a2.attribute_name AS hair_colour, a3.attribute_name AS skin_colour FROM superhero s JOIN attribute a1 ON s.eye_colour_id = a1.id JOIN attribute a2 ON s.hair_colour_id = a2.id JOIN attribute a3 ON s.skin_colour_id = a3.id JOIN publisher p ON s.publisher_id = p.publisher_name WHERE s.gender_id = (SELECT id FROM attribute WHERE attribute_name = 'Female') AND p.publisher_name = 'Dark Horse Comics'; 
SELECT      s.superhero_name,      p.publisher_name FROM      superhero s JOIN      colour AS c_eye ON s.eye_colour_id = c_eye.id JOIN      colour AS c_hair ON s.hair_colour_id = c_hair.id JOIN      colour AS c_skin ON s.skin_colour_id = c_skin.id JOIN      publisher p ON s.publisher_id = p.id WHERE      c_eye.colour = c_hair.colour AND      c_eye.colour = c_skin.colour; 
SELECT r.id, r.race_name FROM superhero AS s JOIN race AS r ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb'; 
SELECT      ROUND((SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN s.gender_id = 1 THEN 1 ELSE NULL END), 2) AS percentage_blue_female FROM superhero s JOIN colour c ON s.eye_colour_id = c.id OR s.hair_colour_id = c.id OR s.skin_colour_id = c.id WHERE s.gender_id = 1 
SELECT superhero_name, race FROM superhero WHERE full_name = 'Charles Chandler'; 
SELECT g.gender_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE s.superhero_name = 'Agent 13'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation'; 
SELECT COUNT(*)  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  WHERE superhero.superhero_name = 'Amazo'; 
SELECT sp.power_name FROM superhero AS sz JOIN hero_power AS hp ON sz.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sz.full_name = 'Hunter Zolomon'; 
SELECT s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber'; 
SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black'); 
SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE c.colour = 'Gold' JOIN eye_colour_id = c.id; 
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire'; 
SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral'); 
SELECT COUNT(*) FROM superhero WHERE hero_id IN (     SELECT hero_id     FROM hero_attribute     WHERE attribute_id = (         SELECT id         FROM attribute         WHERE attribute_name = 'Strength'     )     AND attribute_value = (         SELECT MAX(attribute_value)         FROM hero_attribute         WHERE attribute_id = (             SELECT id             FROM attribute             WHERE attribute_name = 'Strength'         )     ) ); 
SELECT r.race_name, a.alignment_name FROM superhero AS sh JOIN race AS r ON sh.race_id = r.id JOIN attribute AS a ON sh.alignment_id = a.id WHERE sh.superhero_name = 'Cameron Hicks'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = 1 THEN 1 ELSE 0 END) / COUNT(s.gender_id = 1)) * 100,         2     ) AS percentage_female_heroes_published_by_marvel FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'; 
SELECT AVG(weight_kg)  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE 'Alien' = colour); 
SELECT      (SUM(CASE WHEN s.full_name = 'Emil Blonsky' THEN s.weight_kg ELSE 0 END) -       SUM(CASE WHEN s.full_name = 'Charles Chandler' THEN s.weight_kg ELSE 0 END)) AS weight_difference FROM superhero s; 
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.superhero_name = 'Abomination' JOIN superpower sp ON hp.power_id = sp.id; 
SELECT COUNT(*)  FROM superhero  WHERE race_id = 21 AND gender_id = 1; 
SELECT superhero_name, full_name FROM superhero WHERE id = (     SELECT hero_id     FROM hero_attribute     JOIN attribute ON hero_attribute.attribute_id = attribute.id     WHERE attribute.attribute_name = 'Speed'     ORDER BY attribute_value DESC     LIMIT 1 ); 
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3; 
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man'; 
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.publisher_id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'); 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IS NULL OR publisher_id != 1; 
SELECT      ROUND((SUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS blue_eyes_percentage FROM superhero; 
SELECT      (SUM(CASE WHEN superhero.gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END)) AS male_female_ratio FROM superhero; 
SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero ORDER BY height_cm DESC LIMIT 1; 
SELECT id  FROM superpower  WHERE power_name = 'cryokinesis'; 
SELECT superhero_name FROM superhero WHERE id = 294; 
SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg IS NULL OR superhero.weight_kg = 0; 
SELECT c.colour  FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan'; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Helen Parr'; 
SELECT s.race_id FROM superhero s WHERE s.weight_kg = 108 AND s.height_cm = 188; 
SELECT p.publisher_name  FROM superhero AS s  JOIN publisher AS p ON s.publisher_id = p.id  WHERE s.id = 38; 
SELECT s.race_id  FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute) 
SELECT      s.alignment_id,      sp.power_name FROM      superhero AS sh JOIN      hero_power AS hp ON sh.id = hp.hero_id JOIN      superpower AS sp ON hp.power_id = sp.id WHERE      sh.superhero_name = 'Atom IV'; 
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5; 
SELECT AVG(ha.attribute_value)  FROM hero_attribute ha  JOIN superhero s ON ha.hero_id = s.id  WHERE s.alignment_id = 3; 
SELECT      s.superhero_name,      c.colour  FROM      superhero s  JOIN      colour c ON s.skin_colour_id = c.id  JOIN      hero_attribute ha ON s.id = ha.hero_id  WHERE      ha.attribute_value = 100; 
SELECT COUNT(*)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN alignment ON superhero.alignment_id = alignment.id  WHERE gender.id = 2 AND alignment.id = 1; 
SELECT superhero_name  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE hero_attribute.attribute_value BETWEEN 75 AND 80; 
SELECT s.superhero_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE c.colour = 'blue' AND g.gender = 'male'; 
SELECT      ROUND(         (SUM(CASE WHEN alignment.id = 2 AND gender.id = 2 THEN 1 ELSE 0 END) * 100.0) /          SUM(CASE WHEN alignment.id = 2 THEN 1 ELSE 0 END)     , 2) AS percentage_female_bad_heroes FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN alignment ON superhero.alignment_id = alignment.id; 
SELECT      (SELECT COUNT(*) FROM superhero AS T1       INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id       INNER JOIN superpower AS T3 ON T2.power_id = T3.id       WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL         AND T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')     ) -      (SELECT COUNT(*) FROM superhero AS T1       INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id       INNER JOIN superpower AS T3 ON T2.power_id = T3.id       WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL         AND T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'No Eye Color')     ) AS eye_colour_difference; 
SELECT SUM(ha.attribute_value) AS total_strength FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE a.attribute_name = 'Strength' AND s.superhero_name = 'Hulk'; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Ajax'; 
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad'; 
SELECT COUNT(*)  FROM superhero  WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female')  AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC; 
SELECT s.gender_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force'; 
SELECT superhero_name, MAX(weight_kg) AS max_weight FROM superhero WHERE publisher_name = 'DC Comics' GROUP BY superhero_name ORDER BY max_weight DESC LIMIT 1; 
SELECT AVG(s.height_cm) AS average_height FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics' AND s.race_id NOT IN (     SELECT id FROM race WHERE id = (SELECT id FROM attribute WHERE attribute_name = 'Human') ); 
SELECT      s.id,     s.superhero_name FROM      superhero s JOIN      hero_attribute ha ON s.id = ha.hero_id JOIN      attribute a ON ha.attribute_id = a.id WHERE      a.attribute_name = 'Speed' AND      ha.attribute_value = 100 ORDER BY      s.height_cm DESC, -- Assuming height_cm represents speed for sorting purposes     s.weight_kg DESC; -- Assuming weight_kg also represents speed for sorting purposes 
SELECT     CASE         WHEN SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) >              SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)         THEN SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -              SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)         ELSE SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) -              SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)     END AS difference FROM     superhero s JOIN     publisher p ON s.publisher_id = p.publisher_id; 
SELECT a.attribute_name, MIN(ha.attribute_value) AS min_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' GROUP BY a.attribute_name ORDER BY min_value ASC LIMIT 1; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Abomination'; 
SELECT superhero_name, full_name, MAX(height_cm) AS tallest_height FROM superhero WHERE height_cm IS NOT NULL GROUP BY superhero_name, full_name ORDER BY tallest_height DESC LIMIT 1; 
SELECT superhero_name  FROM superhero  WHERE full_name = 'Charles Chandler'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0,          2     ) AS female_percentage FROM      superhero s WHERE      s.publisher_id = (         SELECT              p.id         FROM              publisher p         WHERE              p.publisher_name = 'George Lucas'     ); 
SELECT      ROUND(         (SUM(CASE WHEN p.publisher_name = 'Marvel Comics' AND s.alignment_id = 1 THEN 1 ELSE 0 END) /           COUNT(p.publisher_name = 'Marvel Comics')) * 100.0,          2     ) AS percentage_good_heroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id 
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'; 
SELECT ha.hero_id FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE ha.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute) GROUP BY ha.hero_id; 
SELECT full_name  FROM superhero  WHERE superhero_name = 'Alien'; 
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.superhero_name = ha.hero_id JOIN attribute a ON ha.attribute_id = a.attribute_name = 'eye_colour_id' WHERE s.weight_kg < 100 AND a.attribute_value = (SELECT id FROM attribute WHERE attribute_name = 'eye_colour_id' AND attribute_value = 'brown'); 
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy'; 
SELECT `superhero.weight_kg`, `race.race_name` FROM `superhero` JOIN `race` ON `superhero.race_id` = `race.id` WHERE `superhero.id` = 40; 
SELECT AVG(height_cm)  FROM superhero  WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral'); 
SELECT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence'; 
SELECT c.colour  FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf'; 
SELECT s.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower s ON hp.power_id = s.id WHERE su.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero); 
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 18 AND q.q1 IS NOT NULL GROUP BY d.driverRef HAVING COUNT(*) = 5 AND MAX(q.q1) = 5; 
SELECT d.forename, d.surName FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = q.raceId) AND q.raceId = 19; 
SELECT DISTINCT s.year FROM races r JOIN circuits c ON r.name = c.country WHERE c.country = 'Shanghai'; 
SELECT circuits.url FROM circuits JOIN races ON circuits.url = races.url WHERE circuits.name = 'Circuit de Barcelona-Catalunya'; 
SELECT r.name  FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany'; 
SELECT c.name, c.positionText FROM circuits c JOIN constructors co ON c.location = co.url JOIN constructorStandings cs ON co.constructorId = cs.constructorId WHERE co.name = 'Renault' ORDER BY c.positionText; 
SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId NOT IN (     SELECT circuitId     FROM circuits     WHERE location IN ('Japan', 'China', 'Korea', 'Abu Dhabi', 'Bahrain', 'Turkey', 'Russia', 'Singapore', 'Malaysia', 'India', 'Bangladesh', 'Thailand', 'Vietnam', 'Australia', 'New Zealand', 'Indonesia') ) AND circuitId NOT IN (     SELECT circuitId     FROM circuits     WHERE country IN ('Italy', 'Spain', 'France', 'Germany', 'Austria', 'Belgium', 'Netherlands', 'United Kingdom', 'Portugal', 'Monaco', 'Canada', 'United States', 'Mexico', 'Brazil', 'Argentina', 'Uruguay', 'Chile', 'Peru', 'Ecuador', 'Venezuela', 'Colombia', 'Paraguay', 'Bolivia', 'Guyana', 'Suriname', 'French Guiana', 'Martinique', 'Guadeloupe', 'Reunion', 'Mayotte', 'Madagascar', 'Comoros', 'Seychelles', 'Maldives', 'Sri Lanka', 'Myanmar', 'Taiwan', 'Hong Kong', 'Macao', 'South Africa') ); 
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.id  WHERE c.country = 'Spain'; 
SELECT lat, lng FROM circuits WHERE name = 'Australian Grand Prix'; 
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitRef WHERE c.name = 'Sepang International Circuit'; 
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Malaysia'; 
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix'; 
SELECT c.name, co.country FROM constructors c JOIN constructorResults cr ON c.name = cr.constructorId JOIN races r ON cr.raceId = r.raceId JOIN circuits co ON r.circuitId = co.circuitId WHERE cr.points = 1 AND r.raceId = 24; 
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Bruno' AND d.surName = 'Senna' AND q.raceId = 354 AND q.position = 1; 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverRef = q.driverId WHERE q.q2 = '0:01:40' AND q.raceId = 355; 
SELECT d.number FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q3 = '0:01:54' AND q.raceId = 903; 
SELECT COUNT(DISTINCT d.driverId) FROM driverStandings ds JOIN results r ON ds.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND ds.position IS NOT NULL AND ds.points IS NULL; 
SELECT s.year FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.statusId NOT IN (SELECT status FROM status WHERE status NOT LIKE '%Did Not Start%') AND r.statusId NOT IN (SELECT status FROM status WHERE status NOT LIKE '%Did Not Qualify%'); 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1; 
SELECT d.driverRef, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = 8727 AND r.raceId = 161; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933) 
SELECT c.name, c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix'; 
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.raceId = 9 AND cs.points = (     SELECT MAX(points) FROM constructorStandings WHERE raceId = 9 ); 
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345 AND number = 1; 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:15' AND q.raceId = 347; 
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 45 AND q.q3 = '0:01:33'; 
SELECT r.time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'McLaren' AND r.raceId = 743; 
SELECT d.driverRef, d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2; 
SELECT s.year FROM races AS r JOIN seasons AS s ON r.year = s.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT d.driverId) FROM results r JOIN races r2 ON r.raceId = r2.raceId JOIN drivers d ON r.driverId = d.driverId WHERE r2.year = 2015 AND r2.time = '2015-11-29' AND r.positionText = 'Finished'; 
SELECT      d.driverId,      d.forename,      d.surname,      d.dob FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      r.raceId = (SELECT raceId FROM races WHERE number = 872 AND time IS NOT NULL) ORDER BY      d.dob DESC LIMIT 1; 
SELECT d.forename || ' ' || d.surname AS full_name FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348); 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results) 
SELECT      (100 * (SUBTRACT(         (SELECT fastestLapSpeed           FROM results           WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta'),          (SELECT fastestLapSpeed            FROM results            WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta')         )     ))) / (SELECT fastestLapSpeed             FROM results             WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta'))) AS percentage FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta'); 
SELECT      (COUNT(DISTINCT r.driverId)     / COUNT(DISTINCT d.driverId)) * 100 AS completion_rate FROM      results r JOIN      driverStandings d ON r.driverId = d.driverId WHERE      r.raceId IN (         SELECT              raceId          FROM              races          WHERE              date = '1983-07-16'     )     AND r.time IS NOT NULL 
SELECT MIN(year)  FROM races  WHERE name = 'Singapore Grand Prix'; 
SELECT COUNT(*) AS TotalRaces, r.name FROM races r WHERE r.year = 2005 GROUP BY r.name ORDER BY r.name DESC; 
SELECT r.name AS FirstRaceName, r.name AS RaceName FROM races r WHERE r.year = (SELECT MIN(year) FROM races) AND r.month = (SELECT MIN(month FROM races) UNION SELECT r.name FROM races r WHERE r.year = (SELECT MIN(year) FROM races) AND r.month = (SELECT MIN(month) FROM races) AND r.raceId != (SELECT MIN(raceId) FROM races); 
SELECT c.name, r.date FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.year = 1999 ORDER BY r.round DESC LIMIT 1; 
SELECT year, COUNT(*) AS race_count FROM races GROUP BY year ORDER BY race_count DESC LIMIT 1; 
SELECT r.name FROM races r WHERE r.year = 2017 AND r.raceId NOT IN (     SELECT r2.raceId     FROM races r2     WHERE r2.year = 2000 ); 
SELECT c.name AS CircuitName, c.location AS Location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = (SELECT MIN(year) FROM seasons WHERE country = 'Europe') AND c.country = 'Europe'; 
SELECT s.year, r.name, r.date FROM seasons s JOIN races r ON s.year = r.year JOIN circuits c ON r.circuitId = c.id WHERE c.name = 'Brands Hatch' AND s.year = (SELECT MAX(year) FROM seasons WHERE year IN (SELECT year FROM races JOIN circuits ON races.circuitId = circuits.id WHERE circuits.name = 'Brands Hatch')) 
SELECT COUNT(DISTINCT year) FROM races WHERE name = 'British Grand Prix' AND circuitId IN (     SELECT circuitId     FROM circuits     WHERE country = 'United Kingdom' ); 
SELECT d.forename, d.surname, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position; 
SELECT d.forename, d.surname, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1; 
SELECT d.driverId, d.position, ds.points FROM driverStandings ds JOIN driverStandings d ON ds.raceId = d.raceId AND d.position = 1 WHERE ds.raceId = (SELECT raceId FROM races WHERE date = '2017-04-09') AND d.position <= 3 ORDER BY ds.points DESC LIMIT 3; 
SELECT d.forename, d.surname, r.name AS race_name, lt.milliseconds AS best_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT AVG(T3.milliseconds) AS avg_lap_time FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T4.forename = 'Sebastian' AND T4.surname = 'Vettel' AND T2.name = 'Chinese Grand Prix' AND T2.date BETWEEN '2009-03-01' AND '2009-03-31'; 
SELECT     (COUNT(CASE WHEN d.surname = 'Hamilton' AND r.position > 1 THEN r.raceId END) * 100.0) /      COUNT(CASE WHEN d.surname = 'Hamilton' THEN r.raceId END) AS percentage FROM     results r JOIN     drivers d ON r.driverId = d.driverId WHERE     r.year >= 2010 
SELECT      d.forename,      d.surname,      d.nationality,      AVG(cs.points) AS avg_points FROM      drivers d JOIN      driverStandings ds ON d.driverId = ds.driverId JOIN      constructorStandings cs ON ds.constructorId = cs.constructorId WHERE      cs.wins = (SELECT MAX(wins) FROM constructorStandings) GROUP BY      d.driverId ORDER BY      avg_points DESC LIMIT 1; 
SELECT      d.forename,      d.surname,      (2022 - EXTRACT(YEAR FROM d.dob) - (CASE WHEN MONTH(d.dob) > 4 THEN 1 ELSE 0 END)) AS age FROM      drivers d WHERE      d.nationality = 'Japanese' ORDER BY      d.dob DESC LIMIT 1; 
SELECT c.name, COUNT(r.raceId) AS race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceId) = 4; 
SELECT c.name, c.location, r.name AS raceName FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006; 
SELECT r.name AS RaceName, c.name AS CircuitName, c.location AS CircuitLocation FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE EXTRACT(YEAR FROM r.date) = 2005 AND EXTRACT(MONTH FROM r.date) = 9; 
SELECT r.name AS race_name, r.raceId FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND r.position < 10; 
SELECT COUNT(*) FROM races JOIN driverStandings ON races.raceId = driverStandings.raceId JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE drivers.surname = 'Schumacher' AND races.name = 'Sepang International Circuit' AND driverStandings.wins = 1; 
SELECT r.name AS raceName, r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverRef WHERE d.driverRef = 'Michael_Schumacher' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT AVG(points)  FROM driverStandings  JOIN drivers ON driverStandings.driverId = drivers.driverId  WHERE drivers.surname = 'Irvine' AND driverStandings.year = 2000; 
SELECT      r.name AS race_name,     rs.points FROM      drivers d JOIN      driverStandings ds ON d.driverId = ds.driverId JOIN      races r ON ds.raceId = r.raceId JOIN      seasons s ON r.year = s.year WHERE      d.surname = 'Hamilton' AND      d.forename = 'Lewis' AND      s.year = (SELECT MIN(year) FROM seasons) 
SELECT r.name, c.country FROM races r JOIN circuits c ON r.name = c.country WHERE r.year = 2017 ORDER BY r.date; 
SELECT      r.name AS RaceName,     s.year,     c.location AS CircuitLocation,     MAX(r.laps) AS MostLaps FROM      races r JOIN      results res ON r.raceId = res.raceId JOIN      circuits c ON r.circuitId = c.circuitId GROUP BY      r.raceId ORDER BY      MostLaps DESC LIMIT 1; 
SELECT      (COUNT(CASE WHEN c.name = 'Germany' THEN 1 END) * 100.0) / COUNT(c.name) AS percentage FROM      races r JOIN      circuits c ON r.circuitId = c.id WHERE      r.name = 'European Grand Prix' AND      c.country IN ('Germany', 'Europe'); 
SELECT lat, lng FROM circuits WHERE circuitRef = 'Silverstone'; 
SELECT      c.name,      c.location FROM      circuits AS c WHERE      c.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY      STR_TO_NUMBER(SUBSTRING_INDEX(c.location, ',', 1), '0') DESC LIMIT 1; 
SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit'; 
SELECT c.country  FROM circuits c  WHERE c.alt = (SELECT MAX(alt) FROM circuits); 
SELECT COUNT(*) FROM drivers WHERE code IS NULL; 
SELECT d.nationality FROM drivers d WHERE d.dob = (SELECT MIN(dob) FROM drivers) 
SELECT d.surname FROM drivers d WHERE d.nationality = 'italian'; 
SELECT c.url FROM drivers AS d JOIN constructors AS cn ON d.driverRef = cn.name JOIN circuits AS ct ON ct.url = cn.url WHERE d.forename = 'Anthony Davidson'; 
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'; 
SELECT c.name  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix'; 
SELECT DISTINCT s.year FROM races r JOIN circuits c ON r.circuitId = c.id WHERE c.name = 'Silverstone Circuit'; 
SELECT      r.raceId,     r.year,     r.round,     r.name AS raceName,     c.name AS circuitName,     r.date,     r.time,     r.url AS raceUrl,     c.url AS circuitUrl FROM      races r JOIN      circuits c ON r.circuitId = c.circuitRef WHERE      c.name = 'Silverstone Circuit'; 
SELECT r.time FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.round = 21 AND c.country = 'Abu Dhabi'; 
SELECT COUNT(DISTINCT r.raceId)  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Italy'; 
SELECT r.date  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Barcelona-Catalunya'; 
SELECT c.url  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009; 
SELECT MIN(fastestLapTime) AS fastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis Hamilton' AND fastestLap IS NOT NULL; 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN qualifying q ON r.raceId = q.raceId AND r.driverId = q.driverId WHERE q.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM qualifying) AND r.fastestLap IS NOT NULL; 
SELECT d.driverRef FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1; 
SELECT r.name, r.year, r.round, r.date, r.time FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis'; 
SELECT      r.name AS race_name,     d.surname AS driver_name,     MIN(r.rank) AS highest_rank FROM      results r JOIN      drivers d ON r.driverId = d.driverId WHERE      d.surname = 'Hamilton' AND r.rank IS NOT NULL GROUP BY      r.name ORDER BY      highest_rank LIMIT 1; 
SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009); 
SELECT DISTINCT r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis'; 
SELECT r.rank FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ds.positionText = '1' AND ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.driverId = (     SELECT driverRef     FROM drivers     WHERE nationality = 'British' ); 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.grid = 4 AND r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'); 
SELECT COUNT(DISTINCT r.driverId)  FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL; 
SELECT MIN(time) AS fastestLapTime FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton') AND raceId = (SELECT raceId FROM races WHERE date = '2008-03-16'); 
SELECT r.time FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ds.position = 2 AND ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.position = 2; 
SELECT      d.forename,      d.surname,      c.url FROM      driverStandings ds JOIN      drivers d ON ds.driverId = d.driverId JOIN      races r ON ds.raceId = r.raceId JOIN      seasons s ON r.year = s.year WHERE      s.year = 2008 AND      r.name = 'Australian Grand Prix' AND      ds.position = 1 AND      ds.positionText = '1' AND      ds.statusId = 0 AND      d.url IS NOT NULL; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN races r ON d.driverId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE d.nationality = 'American' AND r.year = 2008 AND c.country = 'Australia'; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.position IS NOT NULL; 
SELECT SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.forename = 'Lewis Hamilton'; 
SELECT AVG(TIME_TO_SEC(fastestLapTime)) AS averageFastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'; 
SELECT      (SELECT COUNT(DISTINCT raceId)       FROM results       WHERE raceId IN         (SELECT raceId          FROM races          WHERE name = 'Australian Grand Prix' AND year = 2008)      AND time IS NOT NULL) /      (SELECT COUNT(DISTINCT raceId)       FROM results       WHERE raceId IN         (SELECT raceId          FROM races          WHERE name = 'Australian Grand Prix' AND year = 2008)) AS completion_rate; 
SELECT      ((T1.milliseconds - T2.milliseconds) / T2.milliseconds) * 100 AS percentage_difference FROM      (SELECT milliseconds FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE country = 'Australia')) AND position = 1 AND statusId = 1) AS T1,     (SELECT milliseconds FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE country = 'Australia')) ORDER BY milliseconds DESC LIMIT 1) AS T2; 
SELECT COUNT(*)  FROM circuits  WHERE country = 'Australia' AND location = 'Melbourne'; 
SELECT lat, location FROM circuits WHERE country = 'USA'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'; 
SELECT AVG(cr.points) AS average_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'British' 
SELECT constructorRef, name, MAX(points) AS highest_points FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE points = (SELECT MAX(points) FROM constructorStandings) GROUP BY constructorRef, name; 
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorRef = cs.constructorId WHERE cs.raceId = (SELECT raceId FROM races WHERE raceId = 291) AND cs.points = 0; 
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points = 0 AND cs.raceId IN (     SELECT raceId     FROM constructorStandings     GROUP BY raceId     HAVING COUNT(*) = 2 ); 
SELECT c.name, cs.positionText FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.positionText = '1'; 
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE c.nationality = 'French' AND lt.lap > 50; 
SELECT      (COUNT(CASE WHEN d.nationality = 'Japanese' THEN d.driverId ELSE NULL END AND r.time IS NOT NULL) * 100.0) /      COUNT(CASE WHEN d.nationality = 'Japanese' THEN d.driverId ELSE NULL END) FROM      results r JOIN      driverStandings ds ON r.driverId = ds.driverId JOIN      drivers d ON ds.driverId = d.driverId WHERE      d.nationality = 'Japanese'     AND r.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2007 AND 2009) 
SELECT      r.year,     AVG(TIME_TO_SEC(r.time)) AS avg_time_seconds FROM      results r JOIN      driverStandings ds ON r.driverId = ds.driverId AND r.raceId = ds.raceId WHERE      ds.position = 1 AND r.time IS NOT NULL GROUP BY      r.year; 
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob > '1975-01-01' AND ds.position = 2 AND ds.positionText = '2nd'; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d  JOIN driverStandings ds ON d.driverId = ds.driverId  JOIN races r ON ds.raceId = r.raceId  WHERE d.nationality = 'Italian'  AND ds.time IS NULL; 
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (     SELECT MIN(time) FROM lapTimes ); 
SELECT lap FROM results JOIN driverStandings ON results.driverId = driverStandings.driverId JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE results.year = 2009 AND drivers.driverRef = 'champion_driver_ref' AND results.fastestLap IS NOT NULL ORDER BY CAST(SUBSTRING(results.fastestLapTime, 1, 2) AS INTEGER) * 3600 +          CAST(SUBSTRING(results.fastestLapTime, 4, 2) AS INTEGER) * 60 +          CAST(SUBSTRING(results.fastestLapTime, 7, 2) AS INTEGER) +          CAST(SUBSTRING(results.fastestLapTime, 10, 3) AS REAL) / 1000 LIMIT 1; 
SELECT AVG(fastestLapSpeed) AS averageFastestLapSpeed FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE name = 'Spanish Grand Prix' AND year = 2009 ); 
SELECT r.name, r.year FROM races r JOIN (     SELECT raceId, MIN(milliseconds) AS min_milliseconds     FROM results     WHERE milliseconds IS NOT NULL     GROUP BY raceId ) AS min_times ON r.raceId = min_times.raceId ORDER BY min_times.min_milliseconds ASC LIMIT 1; 
SELECT      (SELECT COUNT(DISTINCT driverId)       FROM drivers       WHERE drivers.dob < '1985-01-01'       AND EXISTS (          SELECT 1           FROM results           JOIN races ON results.raceId = races.raceId           WHERE drivers.driverId = results.driverId           AND races.year BETWEEN 2000 AND 2005           AND results.laps > 50      )     ) * 100.0 /      (SELECT COUNT(DISTINCT driverId)       FROM results       JOIN races ON results.raceId = races.raceId       WHERE races.year BETWEEN 2000 AND 2005)  FROM drivers; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.forename LIKE '%French%' AND CAST(SUBSTRING(lt.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTRING(lt.time, 4, 2) AS INTEGER) < 120; 
SELECT driverRef FROM drivers WHERE nationality = 'America'; 
SELECT raceId FROM races WHERE year = 2009; 
SELECT COUNT(DISTINCT d.driverId)  FROM driverStandings ds  JOIN results r ON ds.driverId = r.driverId  WHERE r.raceId = 18; 
SELECT d.driverId, d.number, d.forename, d.surname, d.dob FROM drivers d WHERE d.nationality = 'Dutch' AND d.dob = (     SELECT MIN(dob) FROM drivers     WHERE nationality = 'Dutch' ) ORDER BY d.dob DESC LIMIT 3; 
SELECT driverRef FROM drivers WHERE surnames = 'Kubica'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australia' AND dob BETWEEN '1980-01-01' AND '1980-12-31'; 
SELECT d.driverId, d.forename, d.surname, MIN(lt.milliseconds) AS EarliestLapTime FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId, d.forename, d.surname ORDER BY EarliestLapTime ASC LIMIT 3; 
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1; 
SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN (     SELECT raceId, MIN(fastestLapTime) as MinFastestLapTime     FROM results     WHERE fastestLap IS NOT NULL     GROUP BY raceId ) AS fastest ON ra.raceId = fastest.raceId WHERE d.dob BETWEEN '1971-01-01' AND '1971-12-31' AND r.fastestLapTime = fastest.MinFastestLapTime; 
SELECT d.driverRef, d.forename, d.surname, d.dob, lt.milliseconds AS latestLapTime FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'ESP' AND d.dob < '1982-01-01' GROUP BY d.driverId ORDER BY lt.milliseconds DESC LIMIT 10; 
SELECT races.year  FROM races  JOIN results ON races.raceId = results.raceId  JOIN lapTimes ON results.resultId = lapTimes.raceId  WHERE lapTimes.fastestLapTime IS NOT NULL  ORDER BY lapTimes.fastestLapTime ASC  LIMIT 1; 
SELECT      s.year,      MAX(lt.milliseconds) AS max_milliseconds FROM      races s JOIN      lapTimes lt ON s.raceId = lt.raceId GROUP BY      s.year ORDER BY      max_milliseconds LIMIT      1; 
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5; 
SELECT COUNT(DISTINCT r.resultId) FROM results r JOIN status s ON r.statusId = s.statusId WHERE r.raceId BETWEEN 50 AND 100 AND s.status = 'Disqualified' AND r.time IS NULL; 
SELECT COUNT(*) AS circuitCount,         c.name AS circuitName,         c.location,         c.lat,         c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria' GROUP BY c.circuitId ORDER BY circuitCount DESC; 
SELECT      r.round,      COUNT(DISTINCT r.raceId) AS finisher_count FROM      races r JOIN      results res ON r.raceId = res.raceId WHERE      res.time IS NOT NULL GROUP BY      r.round ORDER BY      finisher_count DESC LIMIT 1; 
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23 AND q.number = 2; 
SELECT      r.year,      r.name,      r.date,      r.time FROM      races r JOIN      driverStandings ds ON r.raceId = ds.raceId JOIN      drivers d ON ds.driverId = d.driverId WHERE      d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY      r.year ASC LIMIT 1; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.statusId = 2; 
SELECT      constructors.name,     constructors.url FROM      constructors JOIN      constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE      constructors.nationality = 'Italian' ORDER BY      constructorStandings.points DESC LIMIT 1; 
SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId WHERE constructorStandings.wins = (     SELECT MAX(wins) FROM constructorStandings ) GROUP BY constructors.url ORDER BY SUM(constructorStandings.wins) DESC LIMIT 1; 
SELECT d.driverId, d.forename, d.surname, lt.milliseconds FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.milliseconds DESC LIMIT 1; 
SELECT r.raceId, MIN(lt.time) AS fastestLapTime FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId WHERE lt.lap = 1 AND lt.position = 1 GROUP BY lt.raceId ORDER BY fastestLapTime LIMIT 1; 
SELECT AVG(fastestLapTime) FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE year = 2006 AND circuitId IN (         SELECT circuitId         FROM circuits         WHERE country = 'United States'     ) ) AND rank < 11 
SELECT d.driverRef, d.forename, d.surname, AVG(p.duration) AS avg_pitstop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverRef ORDER BY avg_pitstop_duration ASC LIMIT 5; 
SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.position = 1 AND r.statusId = 0 ORDER BY r.positionOrder ASC LIMIT 1; 
SELECT c.constructorRef, c.url FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND cs.position = 1 ORDER BY cs.points DESC LIMIT 1; 
SELECT d.forename || ' ' || d.surname AS fullName, d.dob FROM drivers d WHERE d.nationality = 'Austrian' AND d.dob BETWEEN '1981-01-01' AND '1991-12-31'; 
SELECT CONCAT(d.forename, ' ', d.surname) AS fullName,         d.url AS wikipediaLink,         d.dob AS dateOfBirth FROM drivers d WHERE d.nationality = 'German' AND d.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY d.dob DESC; 
SELECT location, country, lat AS 'lat', 'lng' AS 'lng' FROM circuits WHERE name = 'Hungaroring'; 
SELECT      c.name,     c.nationality,     SUM(cr.points) AS total_points FROM      constructors c JOIN      constructorStandings cs ON c.constructorId = cs.constructorId JOIN      races r ON cs.raceId = r.raceId JOIN      constructorResults cr ON cs.raceId = cr.raceId WHERE      r.name = 'Monaco Grand Prix' AND      r.year BETWEEN 1980 AND 2010 GROUP BY      c.constructorId ORDER BY      total_points DESC LIMIT 1; 
SELECT AVG(results.points) AS average_score FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.forename = 'Lewis Hamilton' AND circuits.country = 'Turkey'; 
SELECT COUNT(*) / 10.0 AS average_races_per_year FROM races WHERE year BETWEEN 2000 AND 2010; 
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT SUM(CASE WHEN ds.position = 1 THEN 1 ELSE 0 END) AS victories FROM driverStandings ds WHERE ds.position = 91 GROUP BY ds.driverId; 
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLap IS NOT NULL ORDER BY res.fastestLapTime LIMIT 1; 
SELECT c.name AS circuitName, co.country AS countryName FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN sqlite_sequence sq ON r.raceId = sq.name WHERE r.date = (SELECT MAX(date) FROM races); 
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.number = 3 AND q.q3 = (     SELECT MIN(q3)     FROM qualifying     WHERE raceId = q.raceId ) AND d.driverRef = (     SELECT driverRef     FROM results     WHERE raceId = r.raceId     AND positionOrder = 1 ); 
SELECT      d.forename || ' ' || d.surname AS fullName,      d.nationality,      r.name AS raceName FROM      drivers d JOIN      (SELECT MIN(dob) AS minDob FROM drivers) youngest ON      d.dob = youngest.minDob JOIN      results r ON      d.driverId = r.driverId JOIN      races ra ON      r.raceId = ra.raceId ORDER BY      d.dob DESC LIMIT 1; 
SELECT      r.driverId,      COUNT(*) AS accident_count FROM      results r JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.name = 'Canadian Grand Prix' AND     r.statusId = 3 GROUP BY      r.driverId ORDER BY      accident_count DESC LIMIT 1; 
SELECT d.forename, d.surname, SUM(CASE WHEN ds.wins > 0 THEN 1 ELSE 0 END) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.driverId = (SELECT driverId FROM drivers ORDER BY MIN(dob) LIMIT 1) GROUP BY d.driverId; 
SELECT      driverId,      MAX(CAST(duration AS REAL)) AS max_duration FROM      pitStops WHERE      duration IS NOT NULL GROUP BY      driverId ORDER BY      max_duration DESC LIMIT 1; 
SELECT MIN(milliseconds) AS fastestLapTime FROM lapTimes WHERE milliseconds = (SELECT MIN(milliseconds) FROM lapTimes); 
SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis Hamilton'); 
SELECT pitStops.lap FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE drivers.driverRef = 'Lewis Hamilton' AND races.name = 'Australian Grand Prix 2011'; 
SELECT d.driverRef, p.time, p.duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix'; 
SELECT      lt.driverId,      d.forename,      d.surname,      lt.lap,      lt.time,      lt.milliseconds FROM      lapTimes lt JOIN      drivers d ON lt.driverId = d.driverId WHERE      d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY      lt.milliseconds ASC LIMIT 1; 
SELECT d.forename || ' ' || d.surname AS driverFullName FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes); 
SELECT c.name AS circuit_name, r.position FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId JOIN lapTimes AS lt ON r.raceId = lt.raceId JOIN driverStandings AS ds ON lt.driverId = ds.driverId JOIN drivers AS d ON ds.driverId = d.driverId WHERE d.driverRef = 'Lewis Hamilton' AND lt.time = (     SELECT MIN(time)     FROM lapTimes     WHERE driverId = d.driverId ) 
SELECT      d.driverId,     d.forename,     d.surname,     lt.position,     lt.time FROM      lapTimes lt JOIN      drivers d ON lt.driverId = d.driverId JOIN      races r ON lt.raceId = r.raceId JOIN      circuits c ON r.circuitId = c.circuitId WHERE      c.name = 'Austrian Grand Prix' AND     lt.milliseconds = (SELECT MIN(lt2.milliseconds) FROM lapTimes lt2 JOIN circuits c2 ON lt2.raceId = c2.circuitId JOIN races r2 ON lt2.raceId = r2.raceId WHERE c2.name = 'Austrian Grand Prix') ORDER BY      lt.milliseconds ASC LIMIT 1; 
SELECT      lt.raceId,      lt.driverId,      lt.lap,      lt.position,      lt.time,      lt.milliseconds FROM      lapTimes lt JOIN      circuits c ON lt.raceId = c.raceId WHERE      c.country = 'Italy' ORDER BY      lt.milliseconds ASC LIMIT 1; 
SELECT r.name  FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE c.name = 'Austrian Grand Prix Circuit' AND lt.milliseconds = (     SELECT MIN(lt2.milliseconds)     FROM lapTimes lt2     JOIN races r2 ON lt2.raceId = r2.raceId     WHERE r2.name = 'Austrian Grand Prix Circuit' ); 
SELECT ps.duration FROM lapTimes lt JOIN pitStops ps ON lt.raceId = ps.raceId AND lt.driverId = ps.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix' AND lt.time = (     SELECT MIN(time)     FROM lapTimes     WHERE raceId = lt.raceId ); 
SELECT c.lat, c.lng  FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.raceId WHERE lt.time = '1:29.488'; 
SELECT AVG(T3.milliseconds) AS average_pit_stop_time FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.driverRef = 'Lewis Hamilton'; 
SELECT AVG(l.milliseconds) AS average_lap_time FROM lapTimes l JOIN circuits c ON l.raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy')); 
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes); 
SELECT p.player_name, p.height  FROM Player p  WHERE p.height = (SELECT MAX(height) FROM Player); 
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MIN(potential) FROM Player_Attributes) 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating BETWEEN 60 AND 65 AND pa.defensive_work_rate = 'low'; 
SELECT pa.player_api_id, p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.crossing = (     SELECT MAX(crossing)     FROM Player_Attributes ) ORDER BY pa.crossing DESC LIMIT 5; 
SELECT L.name, SUM(H.home_team_goal + A.away_team_goal) AS total_goals FROM Match M JOIN League L ON M.league_id = L.id LEFT JOIN Team H ON M.home_team_api_id = H.team_api_id LEFT JOIN Team A ON M.away_team_api_id = A.team_api_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_goals DESC LIMIT 1; 
SELECT      home_team_api_id,      COUNT(*) AS lost_matches FROM      Match WHERE      season = '2015/2016'      AND (home_team_goal < away_team_goal) GROUP BY      home_team_api_id ORDER BY      lost_matches ASC LIMIT 1; 
SELECT p.player_name, SUM(CASE WHEN m.goal = 'penalty' THEN 1 ELSE 0 END) as total_penalties FROM Player p JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.home_player_11 OR  p.player_api_id = m.away_player_1 OR p.player_api_id = m.away_player_2 OR p.player_api_id = m.away_player_3 OR p.player_api_id = m.away_player_4 OR p.player_api_id = m.away_player_5 OR p.player_api_id = m.away_player_6 OR p.player_api_id = m.away_player_7 OR p.player_api_id = m.away_player_8 OR p.player_api_id = m.away_player_9 OR p.player_api_id = m.away_player_10 OR p.player_api_id = m.away_player_11 GROUP BY p.player_api_id ORDER BY total_penalties DESC LIMIT 10; 
SELECT      T1.team_long_name,      COUNT(*) as wins FROM      Team T1 JOIN      Match T2 ON T1.team_api_id = T2.away_team_api_id WHERE      T2.season = '2009/2010' AND     T2.league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND     T2.away_team_goal > T2.home_team_goal GROUP BY      T1.team_long_name ORDER BY      wins DESC LIMIT 1; 
SELECT      Team.team_long_name,     Team_Attributes.buildUpPlaySpeed FROM      Team_Attributes JOIN      Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE      Team_Attributes.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY      Team_Attributes.buildUpPlaySpeed DESC LIMIT 4; 
SELECT League.name, COUNT(*) as draw_matches FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' AND Match.home_team_goal = Match.away_team_goal GROUP BY League.name ORDER BY draw_matches DESC LIMIT 1; 
SELECT      p.player_name,      FLOOR(DATEDIFF(CURRENT_DATE, p.birthday) / 365) AS age FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.sprint_speed >= 97     AND pa.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'; 
SELECT L.name, COUNT(M.id) AS total_matches FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_matches DESC LIMIT 1; 
SELECT AVG(height) AS average_height FROM Player WHERE player_name IN (     SELECT player_name     FROM Player_Attributes     WHERE date >= '1990-01-01 00:00:00' AND date < '1996-01-01 00:00:00' ); 
SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') GROUP BY player_api_id ORDER BY overall_rating DESC LIMIT 1; 
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59; 
SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > (     SELECT AVG(T1.buildUpPlayPassing)     FROM Team_Attributes AS T1     WHERE strftime('%Y', T1.date) = '2012' AND T1.buildUpPlayPassing IS NOT NULL ) AND strftime('%Y', T1.date) = '2012'; 
SELECT      ROUND((SUM(CASE WHEN `Player`.`player_api_id` IS NOT NULL THEN 1 ELSE 0 END) * 1.0) / COUNT(`Player`.`player_api_id`), 2) AS `left_foot_percentage` FROM      `Player` WHERE      `Player`.`player_api_id` IS NOT NULL     AND `Player`.`birthday` BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'     AND `Player_Attributes`.`preferred_foot` = 'left' 
SELECT      L.country_id,      SUM(M.home_team_goal) + SUM(M.away_team_goal) AS total_goals FROM      Match M JOIN      League L ON M.league_id = L.country_id GROUP BY      L.country_id ORDER BY      total_goals ASC LIMIT 5; 
SELECT AVG(TotalLongShots) AS AverageLongShots FROM (     SELECT SUM(`Player_Attributes.long_shots`) AS TotalLongShots     FROM `Player_Attributes`     JOIN `Player` ON `Player_Attributes.player_fifa_api_id` = `Player.player_fifa_api_id`     WHERE `Player.player_name` = 'Ahmed Samir Farag' ) AS LongShotsByAhmed; 
SELECT P.player_name, AVG(PA.heading_accuracy) AS avg_heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 GROUP BY P.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10; 
SELECT T1.team_long_name FROM Team_Attributes T2 JOIN Team T1 ON T2.team_api_id = T1.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND T1.team_long_name IN (     SELECT T1.team_long_name     FROM Team_Attributes T2     JOIN Team T1 ON T2.team_api_id = T1.team_api_id     WHERE T2.buildUpPlayDribblingClass = 'Normal'     AND T2.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00'     AND T2.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00') ) ORDER BY T2.chanceCreationPassing DESC; 
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal) 
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'; 
SELECT pa.player_fifa_api_id, p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_fifa_api_id = p.player_fifa_api_id WHERE SUBSTR(p.player_name, 1, 4) = '1970' AND SUBSTR(p.player_name, 6, 2) = '10'; 
SELECT `overall_rating`, `potential`, `chanceCreationPassing`, `chanceCreationCrossing`, `chanceCreationShooting` FROM `Player_Attributes` WHERE `dribbling` = (     SELECT MAX(`dribbling`)     FROM `Player_Attributes`     JOIN `Player` ON `Player_Attributes`.`overall_rating` = `Player`.`overall_rating`     WHERE `Player`.`birthday` = '1992-06-18' ) 
SELECT      Team_Attributes.buildUpPlayPositioningClass AS FreedomOfMovementInFirstTwoThirds FROM      Team_Attributes JOIN      Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE      Team.team_long_name = 'ADO Den Haag' 
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id IN (     SELECT player_api_id     FROM Player     WHERE player_name = 'Francois Affolter' ) AND date = '2014-09-18 00:00:00'; 
SELECT      p.player_name,      pa.overall_rating  FROM      Player p  JOIN      Player_Attributes pa  ON      p.player_api_id = pa.player_api_id  WHERE      p.player_name = 'Gabriel Tamas'  AND      strftime('%Y', pa.date) = '2011'; 
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016'; 
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) 
SELECT pa.player_api_id, p.player_name, pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes); 
SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left'; 
SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky'; 
SELECT PA.defensive_work_rate FROM Player_Attributes PA JOIN Player P ON PA.id = P.id WHERE P.player_name = 'David Wilson'; 
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1; 
SELECT L.name  FROM League L  JOIN Country C ON L.country_id = C.name  WHERE C.name = 'Netherlands'; 
SELECT AVG(home_team_goal)  FROM Match  WHERE country_id = (SELECT id FROM Country WHERE name = 'Poland')  AND season = '2010/2011'; 
SELECT pa.player_api_id, p.player_name, AVG(pa.finishing) AS avg_finishing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height BETWEEN (SELECT MAX(height) FROM Player) AND (SELECT MIN(height) FROM Player) GROUP BY pa.player_api_id, p.player_name ORDER BY avg_finishing DESC LIMIT 1; 
SELECT player_name FROM Player WHERE height > 180; 
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam %' AND weight > 170; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010'; 
SELECT potential  FROM Player_Attributes  WHERE player_api_id = (     SELECT player_api_id      FROM Player_Attributes      JOIN Team      ON Player_Attributes.player_api_id = Team.team_api_id      WHERE Team.team_long_name = 'Aaron Doran' ); 
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE preferred_foot = 'left'; 
SELECT T.team_long_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_fifa_api_id = T.team_fifa_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast'; 
SELECT      Team_Attributes.buildUpPlayPassingClass  FROM      Team_Attributes  JOIN      Team ON Team_Attributes.team_api_id = Team.team_api_id  WHERE      Team.team_short_name = 'CLB'; 
SELECT T.team_short_name FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > 70; 
SELECT AVG(overall_rating) AS average_rating FROM Player_Attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND overall_rating > 170; 
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player); 
SELECT Country.name  FROM League JOIN Country ON League.country_id = Country.id  WHERE League.name = 'Italy Serie A'; 
SELECT team_short_name  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id  WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32; 
SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Doran'; 
SELECT COUNT(*) FROM Match WHERE league_id IN (     SELECT id     FROM League     WHERE name = 'Germany 1. Bundesliga' ) AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'; 
SELECT T3.team_short_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id JOIN Team AS T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id WHERE T1.home_team_goal = 10; 
SELECT pa.player_fifa_api_id, p.player_name, pa.balance, pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_fifa_api_id = p.player_fifa_api_id WHERE pa.potential = 61 AND pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61); 
SELECT      (AVG(PA.ball_control) FILTER (WHERE P.player_name = 'Abdou Diallo') -       AVG(PA.ball_control) FILTER (WHERE P.player_name = 'Aaron Appindangoye')) AS ball_control_difference FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name IN ('Abdou Diallo', 'Aaron Appindangoye'); 
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'; 
SELECT      P1.player_name AS OlderPlayer,      P2.player_name AS YoungerPlayer FROM      Player P1 JOIN      Player P2 ON P1.player_fifa_api_id != P2.player_fifa_api_id WHERE      (P1.birthday < P2.birthday AND P1.player_name = 'Aaron Lennon') OR      (P2.birthday < P1.birthday AND P2.player_name = 'Abdelaziz Barrada') ORDER BY      CASE          WHEN P1.player_name = 'Aaron Lennon' THEN 1          WHEN P2.player_name = 'Aaron Lennon' THEN 2          ELSE 3      END,      CASE          WHEN P1.player_name = 'Abdelaziz Barrada' THEN 1          WHEN P2.player_name = 'Abdelaziz Barrada' THEN 2          ELSE 3      END LIMIT 1; 
SELECT player_name, height  FROM Player  WHERE height = (SELECT MAX(height) FROM Player); 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low'; 
SELECT League.country_id  FROM League  WHERE League.name = 'Belgium Jupiler League'; 
SELECT DISTINCT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Germany'; 
SELECT player_name, MAX(overall_rating) as max_strength FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id GROUP BY Player.player_name ORDER BY max_strength DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.player_api_id) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high'; 
SELECT p.player_name, pa.crossing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 1; 
SELECT heading_accuracy  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE name = 'Ariel Borysiuk'); 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70; 
SELECT COUNT(*) FROM Match WHERE season = '2008/2009' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium'); 
SELECT pa.long_passing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player); 
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.country_id WHERE League.name = 'Belgium Jupiler League'  AND strftime('%Y', Match.date) = '2009'  AND strftime('%m', Match.date) = '04'; 
SELECT L.name, COUNT(M.id) AS match_count FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY match_count DESC LIMIT 1; 
SELECT AVG(`Player_Attributes`.`overall_rating`)  FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE strftime('%Y', `Player`.`birthday`) < '1986'; 
SELECT      ((         (SELECT overall_rating           FROM Player_Attributes           INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id           WHERE Player.player_name = 'Ariel Borysiuk'     ) -       (SELECT overall_rating        FROM Player_Attributes        INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id        WHERE Player.player_name = 'Paulin Puel')     ) /       (SELECT overall_rating        FROM Player_Attributes        INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id        WHERE Player.player_name = 'Paulin Puel')     ) * 100 
SELECT AVG(`Team_Attributes`.`buildUpPlaySpeed`) AS average_build_up_play_speed FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` WHERE `Team`.`team_long_name` = 'Heart of Midlothian'; 
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'; 
SELECT SUM(PA.crossing) AS total_crossing_score FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Lennox' 
SELECT MAX(`chanceCreationPassing`) AS highest_chance_creation_passing_score, `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Ajax' 
SELECT preferred_foot  FROM Player_Attributes  JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.player_name = 'Abdou Diallo'; 
SELECT MAX(overall_rating)  FROM Player_Attributes  WHERE player_api_id IN (     SELECT player_api_id      FROM Player      WHERE player_name = 'Dorlan Pabon' ); 
SELECT AVG(away_team_goal)  FROM Match  JOIN Team ON Match.away_team_api_id = Team.team_api_id  WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy'; 
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 77 AND PA.date = '2016-06-23' ORDER BY P.birthday ASC LIMIT 1; 
SELECT overall_rating  FROM Player_Attributes  WHERE player_name = 'Aaron Mooy'  AND date = '2016-02-04 00:00:00'; 
SELECT potential FROM Player_Attributes WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00'; 
SELECT attacking_work_rate  FROM Player_Attributes  WHERE player_name = 'Francesco Migliore' AND date = '2015-05-01 00:00:00'; 
SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Kevin Berigaud' AND `date` = '2013-02-22 00:00:00'; 
SELECT MAX(date) AS first_highest_crossing_date FROM Player_Attributes WHERE player_name = 'Kevin Constant' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_name = 'Kevin Constant') LIMIT 1; 
SELECT buildUpPlaySpeedClass  FROM Team_Attributes  WHERE team_long_name = 'Willem II' AND date = '2012-02-22 00:00:00'; 
SELECT buildUpPlayDribblingClass  FROM Team_Attributes  WHERE team_short_name = 'LEI' AND date = '2015-09-10 00:00:00'; 
SELECT buildUpPlayPassingClass FROM Team_Attributes WHERE team_long_name = 'FC Lorient' AND date = '2010-02-22' 
SELECT chanceCreationPassingClass  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id  WHERE Team.team_long_name = 'PEC Zwolle' AND Team_Attributes.date = '2013-09-20 00:00:00'; 
SELECT `chanceCreationCrossingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hull City' AND `date` = '2010-02-22 00:00:00' AND `team_api_id` IN (     SELECT `team_api_id`     FROM `Team`     WHERE `team_long_name` = 'Hull City' ); 
SELECT      Team_Attributes.defenceAggressionClass  FROM      Team_Attributes  JOIN      Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id  WHERE      Team.team_long_name = 'Hannover 96'      AND Team_Attributes.date = '2015-09-10 00:00:00' 
SELECT AVG(overall_rating)  FROM Player_Attributes  WHERE player_name = 'Marko Arnautovic'  AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'; 
SELECT      ((         (SELECT overall_rating           FROM Player_Attributes           WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12')     ) - (         SELECT overall_rating           FROM Player_Attributes           WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12')     )     ) / (         SELECT overall_rating           FROM Player_Attributes           WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12')     )     ) * 100 AS percentage_difference FROM DUAL; 
SELECT p.player_name FROM Player p ORDER BY p.height DESC LIMIT 5; 
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10; 
SELECT p.player_name FROM Player p WHERE (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', p.birthday)) > 34; 
SELECT SUM(home_team_goal) AS home_team_goals_by_Lennon FROM Match JOIN Player ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 WHERE Player.player_name = 'Aaron Lennon'; 
SELECT SUM(a.away_team_goal) AS total_goals FROM Match a JOIN Player p1 ON a.away_player_1 = p1.player_fifa_api_id OR a.away_player_2 = p1.player_fifa_api_id JOIN Player p2 ON a.away_player_2 = p1.player_fifa_api_id OR a.away_player_1 = p2.player_fifa_api_id WHERE p1.player_name = 'Daan Smith' AND p2.player_name = 'Filipe Ferreira'; 
SELECT SUM(home_team_goal) AS total_home_goals FROM Match JOIN Player ON home_team_api_id = Player.player_api_id WHERE strftime('%Y', CURRENT_TIMESTAMP, 'localtime') - strftime('%Y', Player.birthday) < 31 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (     SELECT MAX(overall_rating)     FROM Player_Attributes ) LIMIT 10; 
SELECT P.player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes) 
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Match M ON P.player_api_id = M.home_player_X1 OR P.player_api_id = M.home_player_X2 OR P.player_api_id = M.home_player_X3 OR P.player_api_id = M.home_player_X4 OR P.player_api_id = M.home_player_X5 OR P.player_api_id = M.home_player_X6 OR P.player_api_id = M.home_player_X7 OR P.player_api_id = M.home_player_X8 OR P.player_api_id = M.home_player_X9 OR P.player_api_id = M.home_player_X10 OR P.player_api_id = M.home_player_X11 JOIN Team_Attributes TA ON P.player_api_id = TA.team_api_id WHERE PA.attacking_work_rate = 'high' AND TA.buildUpPlayPassingClass = 'High' UNION SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Match M ON P.player_api_id = M.away_player_X1 OR P.player_api_id = M.away_player_X2 OR P.player_api_id = M.away_player_X3 OR P.player_api_id = M.away_player_X4 OR P.player_api_id = M.away_player_X5 OR P.player_api_id = M.away_player_X6 OR P.player_api_id = M.away_player_X7 OR P.player_api_id = M.away_player_X8 OR P.player_api_id = M.away_player_X9 OR P.player_api_id = M.away_player_X10 OR P.player_api_id = M.away_player_X11 JOIN Team_Attributes TA ON P.player_api_id = TA.team_api_id WHERE PA.attacking_work_rate = 'high' AND TA.buildUpPlayPassingClass = 'High'; 
SELECT      p.player_name,     MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP, 'localtime'), datetime(p.birthday))) AS age FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.finishing = 1 ORDER BY      age DESC LIMIT 1; 
SELECT p.player_name FROM Player p JOIN Country c ON p.player_fifa_api_id = c.id WHERE c.name = 'Belgium'; 
SELECT p.player_name, l.country_id FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN League l ON p.player_fifa_api_id = l.country_id WHERE pa.vision >= 90; 
SELECT League.country_id, AVG(Player.weight) AS avg_weight FROM Player JOIN League ON Player.player_fifa_api_id = League.country_id GROUP BY League.country_id ORDER BY avg_weight DESC LIMIT 1; 
SELECT t.team_long_name FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE ta.buildUpPlaySpeedClass = 'Slow'; 
SELECT T3.team_short_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id JOIN Team_Attributes AS T4 ON T2.team_api_id = T4.team_api_id WHERE T4.chanceCreationPassingClass = 'Safe' 
SELECT AVG(height) AS average_height FROM Player JOIN Country ON Player.player_fifa_api_id = Country.name WHERE Country.name = 'Italy'; 
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990' 
SELECT      (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_score_difference 
SELECT pa.player_api_id FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MIN(potential) FROM Player_Attributes pa2 WHERE pa2.preferred_foot = 'right')   AND pa.preferred_foot = 'right' ORDER BY pa.potential ASC LIMIT 3; 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes WHERE crossing = pa.crossing) AND pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'attacking'; 
SELECT      ROUND((COUNT(*) FILTER (WHERE strength > 80 AND stamina > 80) * 100.0) / COUNT(*), 2) AS percentage_players_strength_stamina_above_80 FROM      Player_Attributes; 
SELECT Country FROM Teams WHERE TeamName = 'Poland Ekstraklasa'; 
SELECT      m.home_team_goal AS home_score,      m.away_team_goal AS away_score  FROM      Match m  JOIN      League l ON m.league_id = l.id  WHERE      m.date = '2008-09-24%'      AND l.country_id = (SELECT id FROM League WHERE country_id = 1 AND league_id = 39) 
SELECT acceleration, agility, sprint_speed  FROM Player_Attributes  WHERE player_name = 'Alexis Blin'; 
SELECT buildUpPlaySpeedClass  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id  WHERE Team.team_long_name = 'KSV Cercle Brugge'; 
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Serie A') AND season = '2015/2016'; 
SELECT MAX(home_team_goal) AS highest_score FROM Match JOIN League ON Match.league_id = League.league_id WHERE League.name = 'Eredivisie'; 
SELECT      pa.player_fifa_api_id,     pa.free_kick_accuracy,     pa.gk_kicking FROM      Player_Attributes pa INNER JOIN      (SELECT           player_fifa_api_id,           MAX(weight) AS max_weight      FROM           Player_Attributes      GROUP BY           player_fifa_api_id) AS pw ON      pa.player_fifa_api_id = pw.player_fifa_api_id 
SELECT L.name, COUNT(M.id) AS total_games FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_games DESC LIMIT 1; 
SELECT T3.team_long_name, MAX(T2.away_team_goal) as highest_goals FROM Match T1 JOIN Team T2 ON T1.away_team_api_id = T2.team_api_id JOIN Team T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id GROUP BY T3.team_long_name ORDER BY highest_goals DESC LIMIT 1; 
SELECT `player_name` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_api_id` = `Player.player_api_id` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes`) LIMIT 1; 
SELECT      ROUND(         (COUNT(CASE WHEN `Player`.`height` < 180 AND `Player_Attributes`.`overall_rating` > 70 THEN 1 END) * 100.0) / COUNT(`Player`.`id`),         2     ) AS percentage_of_players_under_180cm_with_strength_over_70 FROM      `Player` INNER JOIN      `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` 
SELECT      CASE          WHEN SUM(CASE WHEN p.SEX = 'M' AND p.Admission = '+' THEN 1 ELSE 0 END)               > SUM(CASE WHEN p.SEX = 'M' AND p.Admission = '-' THEN 1 ELSE 0 END)          THEN 'In-patient'         ELSE 'Outpatient'     END AS Dominant_Patient_Type,     ABS(SUM(CASE WHEN p.SEX = 'M' AND p.Admission = '+' THEN 1 ELSE 0 END)               - SUM(CASE WHEN p.SEX = 'M' AND p.Admission = '-' THEN 1 ELSE 0 END))      * 100.0 /      SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) AS Percentage_Deviation FROM      Patient p; 
SELECT      (COUNT(P.ID) FILTER (WHERE P.Birthday > '1930' AND P.SEX = 'F'))::FLOAT / COUNT(P.ID) FILTER (WHERE P.SEX = 'F') * 100 AS PercentageOfFemalesBornAfter1930 FROM      Patient P; 
SELECT      (SELECT COUNT(*)       FROM Patient       WHERE YEAR(Birthday) BETWEEN 1930 AND 1940 AND Admission = '+') * 100.0      / (SELECT COUNT(*)         FROM Patient         WHERE YEAR(Birthday) BETWEEN 1930 AND 1940) AS PercentageInpatients; 
SELECT     (COUNT(CASE WHEN P.Admission = '+' THEN E.ID END) * 1.0) /      COUNT(CASE WHEN P.Admission = '-' THEN E.ID END) FROM     Examination E JOIN     Patient P ON E.ID = P.ID WHERE     E.Diagnosis = 'SLE'; 
SELECT p.Diagnosis FROM Patient p WHERE p.ID = 30609;  SELECT l.Date FROM Laboratory l WHERE l.ID IN (SELECT l2.ID FROM Laboratory l2 INNER JOIN Examination e ON l2.ID = e.ID WHERE e.ID IN (SELECT e2.ID FROM Examination e2 WHERE e2.ID IN (SELECT ID FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE ID = 30609)))); 
SELECT P.SEX, P.Birthday, E.'Examination Date', E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.'Examination Date' WHERE P.ID = 163109; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT > 500; 
SELECT P.ID, TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_DATE) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_DATE) > 0; 
SELECT      p.ID,      p.SEX,      p.Diagnosis FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.Thrombosis = 2; 
SELECT p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission FROM Patient p JOIN Examination e ON p.SEX = e.SEX WHERE p.Birthday BETWEEN '1937-01-01' AND '1937-12-31' AND e.T-CHO >= 250; 
SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T-BIL < 3.5; 
SELECT      ROUND((SUM(CASE WHEN P.SEX = 'F' AND E.T-BIL < 6.0 OR E.T-BIL > 8.5 THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT P.SEX), 2) AS Percentage_Female_Out_of_Normal_TP FROM      Patient P JOIN      Laboratory L ON P.First_Date = L.Date JOIN      Examination E ON L.Date = E.Date WHERE      P.SEX = 'F' 
SELECT AVG(Examination.aCL_IgG) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Admission = '+' AND SUBSTR(Patient.Birthday, 1, 4) <= SUBSTR(CURRENT_TIMESTAMP, 1, 4) - 50; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE p.SEX = 'F' AND YEAR(p.Description) = 1997 AND p.Admission = '-'; 
SELECT MIN(YEAR(Birthday) - YEAR(`First Date`)) AS YoungestAgeAtAdmission FROM Patient WHERE `First Date` IS NOT NULL; 
SELECT COUNT(P.SEX)  FROM Patient P  JOIN Examination E ON P.SEX = E.SEX  WHERE P.Description BETWEEN '1997-01-01' AND '1997-12-31'  AND E.Thrombosis = 1  AND P.SEX = 'F'; 
SELECT MAX(YEAR(Birthday)) - MIN(YEAR(Birthday)) AS AgeGap FROM Patient WHERE ID IN (     SELECT DISTINCT P.ID     FROM Patient P     JOIN Examination E ON P.ID = E.ID     JOIN Laboratory L ON E.Examination_Date = L.Date     WHERE L.GLU >= 200 ); 
SELECT p.Symptoms, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient); 
SELECT      EXTRACT(YEAR FROM Date) AS Year,     EXTRACT(MONTH FROM Date) AS Month,     COUNT(DISTINCT P.ID) / 12 AS AverageMalePatients FROM      Laboratory L JOIN      Patient P ON L.Date BETWEEN '1998-01-01' AND '1998-12-31' WHERE      P.SEX = 'M' GROUP BY      Year, Month; 
SELECT      L.Date AS LabWorkDate,     P.Birthday AS Birthday,     (YEAR(P.First Date) - YEAR(P.Birthday)) AS AgeAtAdmission FROM      Examination E JOIN      Patient P ON E.Diagnosis = 'SJS' AND E.ID = P.ID JOIN      Laboratory L ON E.Examination Date = L.Date WHERE      P.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Diagnosis = 'SJS') ORDER BY      P.Birthday ASC LIMIT 1; 
SELECT      (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) * 1.0) /      (SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) * 1.0) AS male_to_female_ratio FROM      Patient P JOIN      Examination E ON P.SEX = 'M' AND E.aCL_IgG <= 8.0 JOIN      Examination E2 ON P.SEX = 'F' AND E2.aCL_IgM <= 6.5; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID WHERE p.FirstDate IS NOT NULL AND        (e.ExaminationDate IS NULL OR         (e.ExaminationDate IS NOT NULL AND          (EXTRACT(YEAR FROM e.ExaminationDate) - EXTRACT(YEAR FROM p.FirstDate) >= 1))) 
SELECT COUNT(*)  FROM Examination  JOIN Patient ON Examination.Examination_Date BETWEEN '1990-01-01' AND '1993-12-31'  WHERE Patient.Birthday < DATE('1990-01-01', '-18 years'); 
SELECT COUNT(P.SEX) FROM Patient P JOIN Examination E ON P.SEX = 'M' AND E.T-BIL > 2.0; 
SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Examination WHERE 'Examination Date' BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1; 
SELECT AVG(YEAR(CURRENT_DATE) - YEAR(Birthday)) AS AverageAge FROM Patient WHERE '1991-10-01' BETWEEN First_Date AND '1991-10-31'; 
SELECT      SUBSTRING('Examination.Birthday', 6, 4) - SUBSTRING('Examination.Examination Date', 6, 4) AS PatientAge,     'Examination.Diagnosis' AS Diagnosis FROM      Examination JOIN      Patient ON Examination.Diagnosis = Patient.Diagnosis JOIN      Laboratory ON Examination.Examination Date = Laboratory.Date WHERE      Laboratory.GPT = (         SELECT MAX(GPT)          FROM Laboratory         WHERE Examination.Examination Date = Laboratory.Date     ) ORDER BY      PatientAge DESC LIMIT 1; 
SELECT `ANA Pattern` FROM Examination WHERE `Examination Date` = '1996-12-02' AND `ID` = 3605340; 
SELECT T1.T-BIL FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.Date = T2.Description WHERE T2.Description = '1995-09-04' AND T2.Admission = '2927464' AND T1.T-BIL < 250; 
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'AORTITIS' ORDER BY p.First Date LIMIT 1; 
SELECT aCL_IgM  FROM Examination  WHERE Symptoms = 'SLE'  AND Description = '1993/11/12'  AND EXISTS (     SELECT 1      FROM Patient      WHERE Patient.Description = '1994-02-19' ); 
SELECT      p.Description AS PatientName,      p.FirstDate,      CASE          WHEN e.aCL_IgG IS NOT NULL THEN 'M'         WHEN e.aCL_IgM IS NOT NULL THEN 'M'         WHEN e.aCL_IgA IS NOT NULL THEN 'M'         ELSE 'F'     END AS Sex,      e.aCL_IgG,      e.aCL_IgM,      e.aCL_IgA,      e.Symptoms,      e.Thrombosis FROM      Examination e JOIN      Patient p ON e.PatientID = p.PatientID WHERE      e.GPT = '9' AND      p.FirstDate = '1992-06-12' 
SELECT      (EXTRACT(YEAR FROM '1991-10-21') - EXTRACT(YEAR FROM P.Birthday)) -      (CASE          WHEN EXTRACT(MONTH FROM '1991-10-21') < EXTRACT(MONTH FROM P.Birthday) OR               (EXTRACT(MONTH FROM '1991-10-21') = EXTRACT(MONTH FROM P.Birthday) AND EXTRACT(DAY FROM '1991-10-21') < EXTRACT(DAY FROM P.Birthday))          THEN 1          ELSE 0      END) AS Age FROM      Patient P WHERE      EXISTS (         SELECT 1          FROM Laboratory L          WHERE L.Date = '1991-10-21' AND L.T-BIL = 8.4 AND P.First Date = L.Date     ); 
SELECT COUNT(Laboratory.ID)  FROM Laboratory  JOIN Patient ON Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31' WHERE Patient.First_Date = '1991-06-13'  AND Patient.Diagnosis = 'SJS'; 
SELECT p.Diagnosis AS OriginalDiagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.FirstDate = '1997-01-27' AND e.Diagnosis = 'SLE'; 
SELECT e.Symptoms FROM Examination e JOIN Patient p ON e.'Examination Date' = p.'First Date' WHERE p.'Birthday' = '1959-03-01' AND e.'Examination Date' = '1993-09-27'; 
SELECT      SUM(CASE WHEN E.aCL_IgG IS NOT NULL AND P.Birthday = '1959-02-18' AND E.Date LIKE '1981-11-%' THEN E.aCL_IgG ELSE 0 END) -      SUM(CASE WHEN E.aCL_IgG IS NOT NULL AND P.Birthday = '1959-02-18' AND E.Date LIKE '1981-12-%' THEN E.aCL_IgG ELSE 0 END) AS Decrease_Rate FROM Examination E JOIN Patient P ON E.PatientID = P.PatientID WHERE P.Birthday = '1959-02-18' AND E.Date BETWEEN '1981-11-01' AND '1981-12-31'; 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'Behcet' AND        e.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31'; 
SELECT P.Description FROM Patient P JOIN Examination E ON P.Description = E.Description WHERE E.GPT > 30 AND E.ALB < 4 AND E.Description BETWEEN '1987-07-06' AND '1996-01-31' ORDER BY P.Description; 
SELECT p.ID FROM Patient p WHERE p.SEX = 'F' AND YEAR(p.Birthday) = 1964 AND p.Admission = '+' ORDER BY p.ID; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.Description = P.Description WHERE E.ANA_Pattern = 'S' AND E.Thrombosis = 2 AND E.aCL_IgM > (SELECT AVG(aCL_IgM) FROM Examination) * 1.2; 
SELECT      ROUND(         (SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) /           SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END)) * 100,         2     ) AS percentage FROM Examination JOIN Laboratory ON Examination.aCL_IgG = Laboratory.TAT2 
SELECT      (SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM      Patient p WHERE      p.SEX = 'M' AND      YEAR(p.First Date) = 1981 AND      p.Diagnosis = 'BEHCET'; 
SELECT DISTINCT P.SEX, P.Description, P.First_Date, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.Diagnosis = L.DNA WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.T_BIL < 2.0; 
SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.First_Date = E.Examination_Date WHERE E.ANA_Pattern != 'p' AND P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'; 
SELECT p.Description FROM Patient p JOIN Examination e ON p.Description = e.Description JOIN Laboratory l ON p.Description = l.Description WHERE e.Symptoms = 'PSS' AND l.GPT = 1 AND l.T_BIL > 2 AND l.DNA = '123'; 
SELECT AVG(ALB) FROM Examination JOIN Patient ON Examination.SEX = Patient.SEX WHERE Patient.SEX = 'F' AND Examination.TAT2 IS NOT NULL AND Examination.TAT2 = 'SLE' AND Examination.PLT > 400; 
SELECT Symptoms, COUNT(*) as frequency FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY frequency DESC LIMIT 1; 
SELECT      p.Description AS FirstDocumentationDate,      e.Diagnosis AS Disease FROM      Patient p JOIN      Examination e ON p.Diagnosis = e.Diagnosis WHERE      p.ID = 48473 ORDER BY      p.Description LIMIT 1; 
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'; 
SELECT COUNT(DISTINCT p.SEX) FROM Patient p JOIN Laboratory l ON p.Description = l.Date WHERE YEAR(p.First Date) = 1997 AND l.T-BIL > 6 AND l.T-BIL < 8.5; 
SELECT      (SUM(CASE WHEN Symptoms LIKE '%ITP%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END)) * 100 AS ProportionOfThrombocytopeniaWithSLE FROM      Examination JOIN      Patient ON Examination.ID = Patient.ID; 
SELECT     (COUNT(CASE WHEN P.SEX = 'F' THEN 1 END) * 100.0) / COUNT(P.SEX) FROM     Patient P WHERE     YEAR(P.Birthday) = 1980     AND P.Diagnosis = 'RA' 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.'Examination Date' BETWEEN '1995-01-01' AND '1997-12-31' WHERE P.'SEX' = 'M' AND E.'Diagnosis' = 'BEHCET' AND P.'Admission' = '-'; 
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND EXISTS (     SELECT 1     FROM Laboratory     WHERE Laboratory.Date = Patient.First_Date     AND 'WBC' IN (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Laboratory' AND COLUMN_NAME LIKE 'WBC\_%')     AND CAST(SUBSTRING(COLUMN_NAME, 4) AS REAL) < 3.5 ); 
SELECT DATEDIFF('Examination.Date', 'Patient.First Date')  FROM Examination  INNER JOIN Patient ON Examination.ID = Patient.ID  WHERE Examination.ID = 821298; 
SELECT      CASE          WHEN p.SEX = 'M' AND e.'aCL IgG' > 8.0 THEN 'Yes'         WHEN p.SEX = 'F' AND e.'aCL IgG' > 6.5 THEN 'Yes'         ELSE 'No'     END AS Uric_Acid_Normal FROM      Patient p JOIN      Examination e ON p.SEX = e.'aCL IgG' WHERE      p.SEX IS NOT NULL AND e.'aCL IgG' IS NOT NULL AND p.First_Date = '57266'; 
SELECT Examination.Date FROM Examination JOIN Laboratory ON Examination.PatientID = Laboratory.PatientID WHERE Examination.PatientID = '48473' AND Examination.GOT >= 60; 
SELECT sex, date_of_birth FROM Patients WHERE GOT < 60 AND year(Date) = 1994; 
SELECT ID FROM Examination WHERE SEX = 'M' AND 'aCL IgG' >= 60 
SELECT * FROM Examination WHERE 'aCL IgG' > 60 OR 'aCL IgM' > 60 OR 'aCL IgA' > 60 OR 'Thrombosis' > 60 ORDER BY MAX(Birthday) ASC; 
SELECT AVG('aCL IgG') AS average_LDH FROM Examination WHERE 'aCL IgG' < 500; 
SELECT      p.Description,      (YEAR(CURRENT_TIMESTAMP) - YEAR(p.First_Date)) AS Age FROM      Patient p JOIN      Examination e ON p.Description = e.aCL_IgG WHERE      e.aCL_IgG BETWEEN 600 AND 800 
SELECT      p.Admission,     COUNT(*) AS TotalPatients FROM      Patient p JOIN      Examination e ON p.Description = e.Description WHERE      e.aCL_IgG < 300 GROUP BY      p.Admission; 
SELECT P.Description  FROM Patient AS P  WHERE P.Description = '1982-04-01'  AND EXISTS (     SELECT 1      FROM Examination AS E      WHERE E.aCL_IgG < 300      OR E.aCL_IgM < 300      OR E.aCL_IgA < 300      OR E.Thrombosis < 300 ); 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.GPT WHERE l.GPT < 6.0; 
SELECT      p.ID,      p.SEX,      l.TP,      l.TP - 8.5 AS TP_Deviation FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.SEX = 'F' AND      l.TP > 8.5; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.ALB < 3.5 OR p.SEX = 'M' AND e.ALB > 5.5 ORDER BY p.Birthday DESC; 
SELECT P.ID,         CASE             WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'            ELSE 'Out of Normal Range'        END AS Albumin_Range FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1982; 
SELECT     ROUND((COUNT(CASE WHEN P.SEX = 'F' AND (L.GPT > 8 OR L.GPT > 6.5) THEN 1 END) * 100.0) / COUNT(P.SEX = 'F'), 2) AS Percentage_Female_UA_Beyond_Normal FROM     Patient P JOIN     Laboratory L ON P.ID = L.GPT WHERE     P.SEX = 'F'; 
SELECT AVG(Laboratory.UA) AS Average_UA_Index FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID JOIN Patient ON Examination.ID = Patient.ID WHERE (Laboratory.UA < 8.0 AND Patient.SEX = 'M') OR        (Laboratory.UA < 6.5 AND Patient.SEX = 'F') GROUP BY Examination.ID ORDER BY Examination.ID; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgG = 29 OR e.aCL_IgM = 29 OR e.aCL_IgA = 29 OR e.Thrombosis = 29; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Diagnosis = 'RA' AND E.aCL_IgG < 30; 
SELECT COUNT(P.ID)  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX = 'M' AND L.CRE >= 1.5; 
SELECT      (SUM(CASE WHEN P.SEX = 'M' AND L.CRE >= 1.5 THEN 1 ELSE 0 END) >       SUM(CASE WHEN P.SEX = 'F' AND L.CRE >= 1.5 THEN 1 ELSE 0 END)) AS MoreMalesThanFemales FROM      Patient P JOIN      Laboratory L ON P.SEX = L.SEX WHERE      L.CRE >= 1.5; 
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.T_BIL = (     SELECT MAX(T_BIL) FROM Laboratory ); 
SELECT P.SEX, COUNT(*) AS TotalPatients FROM Patient P JOIN Laboratory L ON P.SEX = L.SEX WHERE L.T_BIL >= 2.0 GROUP BY P.SEX; 
SELECT P.ID, MAX(E.T-BIL) AS T_Cho FROM Patient P JOIN Examination E ON P.ID = E.aCL_IgG WHERE E.T-BIL IS NOT NULL GROUP BY P.ID ORDER BY P.Birthday ASC, T_Cho DESC LIMIT 1; 
SELECT AVG(DIVIDE(SUBTRACT(YEAR(NOW()), YEAR(P.Birthday)), COUNT(P.ID))) AS AverageAge FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.T-CHO >= 250; 
SELECT P.Description AS PatientName, E.Symptoms, E.Trombosis FROM Patient P JOIN Examination E ON P.Description = E.Description WHERE E.aCL_IgG > 300 OR E.aCL_IgM > 300 OR E.aCL_IgA > 300; 
SELECT COUNT(Patient.SEX) FROM Patient JOIN Laboratory ON Patient.First_Date = Laboratory.Date WHERE Laboratory.T-BIL >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) > 50; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.CRE < 250; 
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.FirstDate BETWEEN '1936-01-01' AND '1956-12-31' AND p.sex = 'M' AND e.CPK >= 250; 
SELECT p.ID, p.SEX,         (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GLU >= 180 AND e.T-CHO < 250; 
SELECT p.'First Date', l.GPT FROM Patient p JOIN Laboratory l ON p.'First Date' = l.'Date' WHERE p.'Description' >= '1991-01-01' AND l.GPT < 180; 
SELECT      p.ID,      p.SEX,      p.Birthday FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.IGG < 3.5 OR l.IGG >= 9.0 GROUP BY      p.SEX ORDER BY      p.Birthday; 
SELECT P.ID, TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) AS Age, E.Diagnosis FROM Patient P JOIN Examination E ON P.Diagnosis = E.Diagnosis WHERE E.HCT < 3.5; 
SELECT      P.ID,      P.SEX,      P.Birthday,      P.Admission FROM      Patient P JOIN      Examination E ON P.ID = E.ID JOIN      Laboratory L ON E.Date = L.Date WHERE      P.SEX = 'F'      AND (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM P.Birthday)) >= 50     AND (L.HGB <= 3.5 OR L.HGB >= 6.0)     AND P.Admission = '+'; 
SELECT DISTINCT p.ID, p.SEX FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE p.Admission = '-' AND e.HGB < 10; 
SELECT      p.ID,      p.SEX  FROM      Patient p  JOIN      Examination e ON p.ID = e.ID  WHERE      p.Diagnosis = 'SLE' AND      e.HGB BETWEEN 10 AND 17  ORDER BY      p.Birthday  LIMIT 1; 
SELECT P.ID, TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.Date) > 2; 
SELECT AVG(HCT)  FROM Laboratory  WHERE '1991%' BETWEEN '1991-01-01' AND '1991-12-31' AND HCT < 29; 
SELECT      (SELECT COUNT(*)       FROM Examination       WHERE 'Thrombosis' IS NOT NULL AND 'aCL IgG' IS NOT NULL AND 'aCL IgM' IS NOT NULL       AND 'Thrombosis' = 1       AND 'aCL IgG' < 100) AS lower_than_normal,     (SELECT COUNT(*)       FROM Examination       WHERE 'Thrombosis' IS NOT NULL AND 'aCL IgG' IS NOT NULL AND 'aCL IgM' IS NOT NULL       AND 'Thrombosis' = 1       AND 'aCL IgG' > 400) AS higher_than_normal FROM Examination; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday LIKE '198%' AND SUBSTR(p.Birthday, 6, 2) < 50 AND l.PLT BETWEEN 100 AND 400 AND l.Date LIKE '1984%'; 
SELECT      ROUND(         (SUM(CASE WHEN T1.PT >= 14 AND T2.SEX = 'F' THEN 1 ELSE 0 END) * 1.0) / SUM(CASE WHEN T1.PT >= 14 THEN 1 ELSE 0 END),          2     ) AS percentage_female_with_abnormal_PT FROM      Examination AS T1 JOIN      Patient AS T2 ON T1.PatientID = T2.PatientID WHERE      (YEAR(CURRENT_TIMESTAMP) - YEAR(T2.Birthday)) > 55; 
SELECT DISTINCT P.SEX, P.Birthday, P.Description, P.First Date, P.Admission FROM Patient P JOIN Examination E ON P.SEX = E.SEX WHERE P.First Date > '1992-12-31' AND E.DNA-II < 14; 
SELECT COUNT(*) FROM Examination WHERE ExaminationDate > '1997-01-01' AND APTT < 45; 
SELECT COUNT(DISTINCT p.PatientID) FROM Examination e JOIN Patient p ON e.PatientID = p.PatientID WHERE e.APTT > 45 AND e.Thrombosis = 3; 
SELECT COUNT(DISTINCT E.PatientID) FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE P.SEX = 'M' AND E.HCT BETWEEN 3.5 AND 9.0 AND (E.FG <= 150 OR E.FG >= 450); 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.Birthday > '1980-01-01'  AND Laboratory.FG < 150 OR Laboratory.FG > 450; 
SELECT DISTINCT P.Diagnosis FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE E.'aCL IgG' >= 30 OR E.'aCL IgM' >= 30; 
SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.'U-PRO' BETWEEN 0 AND 30 AND E.'Diagnosis' = 'SLE'; 
SELECT COUNT(DISTINCT p.SEX) FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE e.'aCL IgG' < 900 AND e.Symptoms = 'abortion'; 
SELECT COUNT(DISTINCT p.SEX) FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE p.Diagnosis IS NOT NULL AND e.'aCL IgG' BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL; 
SELECT P.'Diagnosis' FROM 'Examination' E JOIN 'Patient' P ON E.'Diagnosis' = P.'Diagnosis' WHERE E.'aCL IgA' = (SELECT MAX(E2.'aCL IgA') FROM 'Examination' E2 WHERE E2.'aCL IgA' BETWEEN 80 AND 500); 
SELECT COUNT(*) FROM Patient WHERE YEAR(`First Date`) >= 1990 AND `IGA` BETWEEN 80 AND 500; 
SELECT P.Diagnosis, MAX(COUNT(E.Diagnosis)) as DiseaseFrequency FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE E.IGM NOT BETWEEN 40 AND 400 GROUP BY P.Diagnosis ORDER BY DiseaseFrequency DESC LIMIT 1; 
SELECT COUNT(*) FROM Patient WHERE Description IS NULL AND EXISTS (     SELECT 1     FROM Examination     WHERE Examination.ID = Patient.ID     AND (         'CRP' LIKE '+' OR 'CRP' LIKE '-' OR 'CRP' < 1.0     ) ); 
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP NOT IN ('+-', '-') AND Laboratory.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 18; 
SELECT COUNT(DISTINCT p.SEX) FROM Patient p JOIN Examination e ON p.SEX = e.SEX WHERE e.RA IN('-', '+-') AND e.KCT = '+'; 
SELECT DISTINCT E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday > '1995-01-01' AND E.RA IN('-', '+-'); 
SELECT p.ID FROM Patient p WHERE p.SEX = 'RF' AND p.Birthday < DATE_SUB(CURDATE(), INTERVAL 60 YEAR); 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.SEX = P.SEX WHERE E.'aCL IgG' < 20 AND E.'Thrombosis' = 0; 
SELECT COUNT(DISTINCT Patient.ID) FROM Examination INNER JOIN Patient ON Examination.Diagnosis = Patient.Diagnosis WHERE Examination.C3 > 35 AND Examination.ANA_Pattern = 'P'; 
SELECT p.Description FROM Patient p JOIN Examination e ON p.Description = e.Description WHERE p.Description NOT BETWEEN '29' AND '52' ORDER BY e.aCL_IgA DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.SEX)  FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE p.Diagnosis = 'APS'  AND e.C4 > 10; 
SELECT COUNT(DISTINCT p.SEX) FROM Examination e JOIN Patient p ON e.SEX = p.SEX WHERE e.'ANA Pattern' IN ('-', '+-') AND p.'Admission' = '+'; 
SELECT P.Description AS 'Date of Birth' FROM Patient P JOIN Examination E ON P.Description = E.Description WHERE E.RNP NOT IN('-', '+-') ORDER BY P.Description ASC LIMIT 1; 
SELECT COUNT(*) FROM Examination WHERE '0' = '0' AND Thrombosis = 1 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ANA_Pattern = 'Abnormal' AND p.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE p.Birthday != '-' AND p.Birthday != '+-') ORDER BY p.Birthday ASC LIMIT 3; 
SELECT DISTINCT E.ID FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Examination_Date >= '1997-01-01' AND E.SC170 IN('-', '+-'); 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.Diagnosis = e.Diagnosis  WHERE p.SEX = 'M'  AND e.SC170 IN('-', '+-')  AND e.Symptoms = 'vertigo'; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.SSA IN('-','+-') AND YEAR(p.First Date) < 1990; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ANA_Pattern LIKE '%SSA%' AND e.ANA_Pattern NOT IN ('-', '+-') AND p.First_Date = (     SELECT MIN(First_Date)     FROM Patient     WHERE First_Date IS NOT NULL     AND ID IN (         SELECT ID         FROM Examination         WHERE ANA_Pattern LIKE '%SSA%'         AND ANA_Pattern NOT IN ('-', '+-')     ) ) LIMIT 1; 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.Diagnosis = p.Diagnosis  WHERE e.SSB IN('-', '+-') AND e.SSB = '-' AND p.Diagnosis = 'SLE'; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.SSB IN('-', '+-') AND e.Symptoms IS NOT NULL; 
SELECT COUNT(P.PatientID) FROM Patient P JOIN Examination E ON P.PatientID = E.PatientID WHERE E.aCL_IgG IN ('-', '+-') AND E.aCL_IgM IN ('-', '+-') AND P.Sex = 'M'; 
SELECT p.ID, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA >= 8; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA < 8 AND p.Description IS NULL; 
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.DNA-II WHERE L.DNA-II >= 8 AND P.Admission = '+'; 
SELECT      MULTIPLY(DIVIDE(COUNT(DISTINCT p.ID), COUNT(DISTINCT CASE WHEN e.aCL_IgG >= 60 THEN p.ID END)), 1.0) AS percentage FROM      Patient p JOIN      Examination e ON p.ID = e.PatientID WHERE      e.aCL_IgG >= 60 AND e.Diagnosis = 'SLE'; 
SELECT COUNT(*) FROM Examination WHERE `Sex` = 'M' AND `GOT` < 60; 
SELECT MIN(Birthday) FROM Patients WHERE GOT >= 60 ORDER BY Birthday ASC LIMIT 1; 
SELECT TOP 3 aCL_IgG, aCL_IgM, 'Thrombosis', birthday FROM Examination WHERE aCL_IgG IS NOT NULL AND aCL_IgM IS NOT NULL AND 'Thrombosis' IS NOT NULL AND aCL_IgG < 60 ORDER BY aCL_IgG DESC; 
SELECT COUNT(*)  FROM Examination E  JOIN Patient P ON E.aCL_IgG IS NOT NULL AND P.Description IS NOT NULL  WHERE E.aCL_IgG < 60 AND P.Sex = 'M'; 
SELECT MIN(FirstDate) FROM Examination AS E JOIN Laboratory AS L ON E.LaboratoryID = L.LaboratoryID WHERE E.LDH < 500 ORDER BY E.LDH DESC LIMIT 1; 
SELECT MAX(P.First_Date) as Latest_Medical_Data FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.LDH >= 500; 
SELECT COUNT(P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT >= 300 AND P.Admission = '+'; 
SELECT COUNT(*)  FROM Examination  WHERE 'ALP' < 300 AND EXISTS (     SELECT 1      FROM Patient      WHERE Examination.ID = Patient.ID AND Patient.Admission = '-' ); 
SELECT DISTINCT E.Diagnosis FROM Examination E JOIN Laboratory L ON E.aCL_IgG = L.IGG OR E.aCL_IgM = L.IGM OR E.aCL_IgA = L.IGA WHERE E.Diagnosis IS NOT NULL AND L.T-BIL IS NOT NULL AND L.T-BIL < 6.0; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis JOIN Laboratory L ON E.Date = L.Date WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5; 
SELECT Examination.'Examination Date' FROM Examination JOIN Laboratory ON Examination.'Examination Date' = Laboratory.'Date' WHERE Laboratory.T-BIL BETWEEN 0.3 AND 1.2 AND Examination.aCL IgG BETWEEN 0 AND 2 AND Examination.aCL IgM BETWEEN 0 AND 0.5 AND Examination.aCL IgA BETWEEN 0 AND 3 AND Examination.'ANA Pattern' IS NULL AND Examination.Diagnosis IS NULL AND Examination.Symptoms IS NULL AND Examination.Thrombosis IS NULL AND Examination.'aCL IgG' IS NOT NULL AND Examination.'aCL IgM' IS NOT NULL AND Examination.'aCL IgA' IS NOT NULL AND Examination.'Examination Date' = (     SELECT 'Examination Date'     FROM Examination     JOIN Laboratory ON Examination.'Examination Date' = Laboratory.'Date'     WHERE Laboratory.T-BIL BETWEEN 0.3 AND 1.2     AND Examination.aCL IgG BETWEEN 0 AND 2     AND Examination.aCL IgM BETWEEN 0 AND 0.5     AND Examination.aCL IgA BETWEEN 0 AND 3     AND Examination.'ANA Pattern' IS NULL     AND Examination.Diagnosis IS NULL     AND Examination.Symptoms IS NULL     AND Examination.Thrombosis IS NULL     AND Examination.'aCL IgG' IS NOT NULL     AND Examination.'aCL IgM' IS NOT NULL     AND Examination.'aCL IgA' IS NOT NULL     ORDER BY Laboratory.T-BIL DESC     LIMIT 1 ); 
SELECT COUNT(*)  FROM Patient P  JOIN Laboratory L ON P.First Date = L.Date  WHERE P.SEX = 'M'  AND L.ALB > 3.5 AND L.ALB < 5.5  AND L.TP BETWEEN 6.0 AND 8.5; 
SELECT MAX(Examination.aCL_IgG) AS aCL_IgG,         MAX(Examination.aCL_IgM) AS aCL_IgM,         MAX(Examination.aCL_IgA) AS aCL_IgA FROM Examination JOIN Patient ON Examination.Symptoms = Patient.Description WHERE Patient.Sex = 'F' AND Laboratory.T_BIL > 6.50 GROUP BY Patient.Sex ORDER BY Laboratory.T_BIL DESC LIMIT 1; 
SELECT MAX(Examination.aCL_IgG)  FROM Examination  JOIN Patient ON Examination.Description = Patient.Description  WHERE Examination.aCL_IgG IS NOT NULL AND Patient.CRE < 1.5; 
SELECT Patient.Description FROM Patient JOIN Examination ON Patient.Description = Examination.Description WHERE Examination.aCL_IgA = (     SELECT MAX(aCL_IgA)     FROM Examination     WHERE Examination.aCL_IgG < 1.5 ); 
SELECT COUNT(DISTINCT Patient.SEX) FROM Examination JOIN Patient ON Examination.Diagnosis = Patient.Diagnosis WHERE Examination.T-BIL >= 2.0 AND Examination.ANA Pattern LIKE '%P%'; 
SELECT E.aCL_IgG FROM Examination E JOIN Patient P ON E.PatientID = P.PatientID JOIN Laboratory L ON E.LaboratoryID = L.LaboratoryID WHERE L.T_BIL < 2.0 AND L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory WHERE T_BIL < 2.0); 
SELECT COUNT(*) FROM Examination WHERE 'T-CHO' >= 250 AND 'KCT' = '-'; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE E.ANA_Pattern = 'P' AND P.T_BIL < 250; 
SELECT COUNT(DISTINCT p.SEX) FROM Patient p JOIN Examination e ON p.Diagnosis = e.Diagnosis WHERE e.T-BIL < 200 AND e.Symptoms IS NOT NULL; 
SELECT P.Diagnosis FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE E.aCL_IgG IS NOT NULL AND E.aCL_IgG < 200    OR E.aCL_IgM IS NOT NULL AND E.aCL_IgM < 200    OR E.aCL_IgA IS NOT NULL AND E.aCL_IgA < 200 ORDER BY E.aCL_IgG DESC NULLS LAST,          E.aCL_IgM DESC NULLS LAST,          E.aCL_IgA DESC NULLS LAST LIMIT 1; 
SELECT aCL_IgG, aCL_IgM FROM Examination WHERE Thrombosis = 0 AND 'aCL IgG' < 250 OR 'aCL IgM' < 250; 
SELECT COUNT(*) FROM Examination E JOIN Laboratory L ON E.aCL_IgG IS NOT NULL AND E.aCL_IgM IS NOT NULL AND E.Thrombosis IS NOT NULL WHERE E.aCL_IgG < 250 OR E.aCL_IgM < 250 OR E.Thrombosis < 250 AND (L.TAT2 = '+' OR L.DNA_II = '+' OR L.TAT2 = '+' OR L.DNA_II = '+' OR L.TAT2 = '+' OR L.DNA_II = '+'); 
SELECT p.Birthday FROM Patient p JOIN Examination e ON p.SEX = e.SEX WHERE e.aCL_IgG > 180 OR e.aCL_IgM > 180 ORDER BY p.Birthday ASC LIMIT 1; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.aCL_IgG IS NOT NULL AND E.aCL_IgM IS NOT NULL AND E.Thrombosis = 0 AND E.aCL_IgG < 180 AND E.aCL_IgM < 180 WHERE P.Description IS NOT NULL AND P.First_Date IS NOT NULL; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.First Date = l.Date WHERE p.Admission = '+' AND l.HGB BETWEEN 3.5 AND 9.0; 
SELECT COUNT(DISTINCT Patient.SEX) FROM Patient JOIN Examination ON Patient.Diagnosis = Examination.Diagnosis WHERE Patient.Diagnosis = 'SLE' AND Examination.HGB BETWEEN 3.5 AND 9.0; 
SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.Diagnosis = E.Diagnosis WHERE P.Admission = '-' AND (     (E.aCL_IgG < 3.5 OR E.aCL_IgG >= 6.0) OR     (E.aCL_IgM < 3.5 OR E.aCL_IgM >= 6.0) OR     (E.aCL_IgA < 3.5 OR E.aCL_IgA >= 6.0) ); 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.Diagnosis = P.Diagnosis WHERE E.aCL_IgA > 100 AND E.aCL_IgA < 400 AND P.Diagnosis IS NOT NULL; 
SELECT      p.Description  FROM      Patient p  JOIN      Examination e ON p.Description = e.Description  WHERE      e.'aCL IgG' IS NOT NULL      AND e.'aCL IgM' IS NOT NULL      AND e.'aCL IgA' IS NOT NULL      AND e.'Symptoms' LIKE '%MCTD%'     AND e.'Thrombosis' IS NOT NULL      AND e.'Thrombosis' = 1      AND e.'aCL IgA' BETWEEN 100 AND 400; 
SELECT AVG(T-BIL) AS AverageProthrombinTime FROM Examination JOIN Patient ON Examination.SEX = Patient.SEX WHERE Patient.SEX = 'M' AND (T-BIL IS NOT NULL AND (T-BIL < 14)); 
SELECT COUNT(*) FROM Examination WHERE 'Thrombosis' IN (1, 2) AND 'aCL IgG' IS NULL AND 'aCL IgM' IS NULL AND 'PT' < 14; 
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Engineering'; 
SELECT m.first_name, m.last_name FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.college = 'Art and Design'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Student_Club'; 
SELECT m.phone FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'Medium'; 
SELECT      e.event_name,      COUNT(a.link_to_member) AS total_attendance FROM      event e JOIN      attendance a ON e.event_id = a.link_to_event JOIN      member m ON a.link_to_member = m.member_id WHERE      m.position = 'Student_Club' GROUP BY      e.event_id, e.event_name ORDER BY      total_attendance DESC LIMIT 1; 
SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President' AND ma.college = 'Student Club'; 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'; 
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND e.event_name = 'Student_Club' AND e.event_date BETWEEN '2019-01-01' AND '2019-12-31'; 
SELECT COUNT(*)  FROM event  WHERE type = 'Meeting'  AND event_id IN (     SELECT link_to_event      FROM attendance      GROUP BY link_to_event      HAVING COUNT(link_to_member) > 10 ); 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Student_Club' GROUP BY e.event_name HAVING COUNT(m.member_id) > 20; 
SELECT AVG(attendee_count) as average_attendance FROM (     SELECT COUNT(a.link_to_member) as attendee_count     FROM event e     JOIN attendance a ON e.event_id = a.link_to_event     WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020     GROUP BY e.event_name ) as meeting_attendance; 
SELECT expense_description, MAX(cost) AS highest_cost FROM expense WHERE link_to_event IN (SELECT link_to_event FROM event WHERE type = 'club') GROUP BY expense_description ORDER BY highest_cost DESC LIMIT 1; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud'; 
SELECT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies'; 
SELECT z.county FROM event e JOIN zip_code z ON e.location = z.city WHERE e.location = 'Sherri Ramsey'; 
SELECT m.college FROM major m JOIN member me ON m.college = me.college WHERE me.t_shirt_size = 'Tyler Hewitt'; 
SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President'; 
SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Meeting' AND e.expense_description LIKE '%Food%' AND e.approved = 'Yes'; 
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.member_id IN (     SELECT member_id     FROM member     WHERE position = 'President' ); 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'IL'; 
SELECT SUM(b.spent) AS total_spent_on_advertisement FROM budget AS b JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement' 
SELECT m.department FROM major m JOIN member me ON m.department = me.department WHERE me.name = 'Pierce' OR me.name = 'Guidi'; 
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'; 
SELECT      e.expense_id,      e.expense_description,      e.expense_date,      e.cost,      e.approved FROM      expense e JOIN      event ev ON e.link_to_event = ev.event_id WHERE      ev.event_name = 'October Meeting'      AND ev.event_date = '2019-10-08'      AND e.approved = 'True'; 
SELECT AVG(cost) AS average_cost FROM expense WHERE link_to_member IN (     SELECT member_id     FROM member     WHERE first_name = 'Elijah' AND last_name = 'Allen' ) AND expense_date >= '2023-09-01' AND expense_date <= '2023-10-31'; 
SELECT      (SUM(CASE WHEN YEAR(event_date) = 2019 THEN spent ELSE 0 END) -      SUM(CASE WHEN YEAR(event_date) = 2020 THEN spent ELSE 0 END)) AS total_spent_difference FROM      event JOIN      budget ON event.event_id = budget.link_to_event JOIN      member ON event.event_id = budget.link_to_event WHERE      member.position = 'Student_Club'; 
SELECT location  FROM event  WHERE event_name = 'Spring Budget Review'; 
SELECT SUM(b.amount) AS total_cost FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_date = '2019-09-04' AND b.category = 'Posters'; 
SELECT b.remaining FROM budget b WHERE b.category = 'Food' ORDER BY b.amount DESC LIMIT 1; 
SELECT notes  FROM income  WHERE source = 'Fundraising'  AND date_received = '2019-09-14'; 
SELECT COUNT(*)  FROM major  WHERE college = 'College of Humanities and Social Sciences'; 
SELECT phone  FROM member  WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; 
SELECT z.county  FROM member m JOIN zip_code z ON m.link_to_major = z.zip_code WHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher'; 
SELECT COUNT(*) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0; 
SELECT SUM(b.amount) AS total_budget_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker'; 
SELECT e.status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20'; 
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'; 
SELECT COUNT(*)  FROM member  WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies')  AND t_shirt_size = 'Large'; 
SELECT zip_code.zip_code FROM zip_code JOIN member ON zip_code.zip_code = member.zip_code WHERE member.t_shirt_size = 'Christof Nielson'; 
SELECT m.major_name FROM major JOIN member ON major.major_id = member.major_id WHERE member.position = 'Vice President'; 
SELECT      z.state  FROM      member m  JOIN      zip_code z ON m.link_to_major = z.zip_code  WHERE      m.first_name = 'Sacha' AND      m.last_name = 'Harrison'; 
SELECT m.department FROM member m JOIN major ma ON m.position = 'President' AND m.major_id = ma.major_id; 
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues'; 
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.source = 'Dues' AND i.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') 
SELECT      (SUM(CASE WHEN b.event_status = 'Advertisement' AND e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) /       SUM(CASE WHEN b.event_status = 'Advertisement' AND e.event_name = 'October Meeting' THEN b.amount ELSE 0 END))  FROM      budget b  JOIN      event e ON b.link_to_event = e.event_id 
SELECT     (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) / SUM(b.amount)) * 100 AS parking_budget_percentage FROM     budget b JOIN     event e ON b.link_to_event = e.event_id WHERE     e.event_name = 'November Speaker'; 
SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE e.expense_description = 'Pizza'; 
SELECT COUNT(DISTINCT city)  FROM zip_code  WHERE county = 'Orange' AND short_state = 'VA'; 
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'; 
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.link_to_major = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'; 
SELECT e.expense_description, b.remaining FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget) ORDER BY e.expense_id; 
SELECT DISTINCT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting'; 
SELECT college, COUNT(*) as member_count FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY college ORDER BY member_count DESC LIMIT 1; 
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.phone = '809-555-3360'; 
SELECT event_name, MAX(amount) AS highest_budget FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount IS NOT NULL GROUP BY event_name ORDER BY highest_budget DESC LIMIT 1; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President'; 
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_name  WHERE e.event_name = 'Women''s Soccer'; 
SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason'); 
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN zip_code z ON m.first_name = z.city  WHERE z.county = 'Maryland'; 
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240'; 
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education'; 
SELECT      e.event_id,      e.event_name,      MAX(DIVIDE(b.spent, b.amount)) AS spend_to_budget_ratio FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      e.status = 'Closed' GROUP BY      e.event_id, e.event_name ORDER BY      spend_to_budget_ratio DESC LIMIT 1; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_name JOIN budget b ON e.event_name = b.link_to_event JOIN major ma ON m.position = 'president' AND ma.major_id = m.member_id WHERE m.position = 'president'; 
SELECT MAX(b.spent) AS max_budget_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id; 
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020; 
SELECT SUM(b.cost) AS total_spent_for_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Food'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7; 
SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code zc ON ma.department = zc.city AND ma.college = zc.state WHERE zc.city = 'Georgetown' AND zc.state = 'South Carolina'; 
SELECT SUM(i.amount) AS total_income FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour'; 
SELECT m.first_name || ' ' || m.last_name AS full_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount > 40; 
SELECT SUM(e.cost) AS total_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff'; 
SELECT m.member_id FROM member m JOIN budget b ON m.member_id = b.link_to_budget JOIN event e ON b.link_to_event = e.location WHERE e.location = 'Yearly Kickoff'; 
SELECT      m.first_name || ' ' || m.last_name AS full_name,      i.source  FROM      income i  JOIN      member m ON i.link_to_member = m.member_id  WHERE      i.amount = (SELECT MAX(amount) FROM income) ORDER BY      i.amount DESC; 
SELECT event_name FROM event WHERE cost = (SELECT MIN(cost) FROM event); 
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS Yearly_Kickoff_Percentage FROM      event e; 
SELECT      (SELECT COUNT(*)       FROM member m       JOIN major ma ON m.link_to_major = ma.major_id       WHERE ma.major_name = 'Finance') /      (SELECT COUNT(*)       FROM member m       JOIN major ma ON m.link_to_major = ma.major_id       WHERE ma.major_name = 'Physics') AS finance_to_physics_ratio 
SELECT source, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1; 
SELECT m.first_name, m.last_name, m.email FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'Student Club' AND m.position = 'Secretary'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching'; 
SELECT COUNT(DISTINCT a.link_to_member) FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019; 
SELECT COUNT(DISTINCT e.event_id) AS number_of_events_attended, m.major_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.major_name; 
SELECT      AVG(spent) AS average_spent_on_food_per_event FROM      budget WHERE      category = 'Food'     AND link_to_event IN (         SELECT              event_id         FROM              event         WHERE              event_status = 'Closed'     ); 
SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' GROUP BY event_name ORDER BY SUM(budget.spent) DESC LIMIT 1; 
SELECT EXISTS (     SELECT 1      FROM event      JOIN attendance ON event.event_id = attendance.link_to_event      JOIN member ON member.member_id = attendance.member_id      WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya McLean' ) AS attended; 
SELECT      ROUND((SUM(CASE WHEN e.type = 'Community Service' THEN 1 ELSE 0 END) * 100.0) / COUNT(e.event_id), 2) AS percentage FROM      event e WHERE      e.event_date BETWEEN '2019-01-01' AND '2019-12-31'     AND e.event_name LIKE '%Student_Club%'; 
SELECT SUM(e.cost) AS total_cost_of_posters FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters'; 
SELECT t_shirt_size, COUNT(*) AS size_count FROM member GROUP BY t_shirt_size ORDER BY size_count DESC LIMIT 1; 
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining LIMIT 1; 
SELECT      e.expense_description,      SUM(e.cost) AS total_value FROM      expense e JOIN      event ev ON e.link_to_event = ev.event_id WHERE      ev.event_name = 'October Meeting' AND      e.approved = 'Yes' GROUP BY      e.expense_description; 
SELECT      b.budget_id,      b.amount,      b.event_status FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'April Speaker' ORDER BY      b.amount ASC; 
SELECT budget_id, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1; 
SELECT      b.budget_id,      b.amount  FROM      budget b  WHERE      b.category = 'Advertising'  ORDER BY      b.amount DESC  LIMIT 3; 
SELECT SUM(e.cost) AS total_parking_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.category = 'Parking'; 
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'; 
SELECT      m.first_name || ' ' || m.last_name AS full_name,      SUM(e.cost) AS total_cost FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY      m.member_id; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large'; 
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50; 
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'; 
SELECT m.position FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business' AND m.t_shirt_size = 'Medium'; 
SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30; 
SELECT e.type  FROM event e  WHERE e.location = 'MU 215'; 
SELECT event_name FROM event WHERE event_date = '2020-03-24T12:00:00'; 
SELECT m.major_name FROM major m JOIN member mem ON m.major_id = mem.link_to_major WHERE mem.position = 'Vice President'; 
SELECT      ROUND(         (SUM(CASE WHEN M.position = 'Member' AND M.link_to_major = 'Mathematics' THEN 1 ELSE 0 END) / COUNT(DISTINCT M.member_id)) * 100,         2     ) AS percentage_math_members FROM      member M; 
SELECT event_name, event_date, notes, location, status FROM event WHERE location = 'MU 215'; 
SELECT COUNT(*)  FROM income  WHERE amount = 50; 
SELECT COUNT(*)  FROM member  WHERE position = 'Member' AND t_shirt_size = 'X-Large'; 
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences'; 
SELECT      m.last_name,      ma.department,      ma.college FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      ma.major_name = 'Environmental Engineering'; 
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0; 
SELECT m.link_to_major, z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON ma.department = z.department WHERE ma.department = 'Electrical and Computer Engineering' AND m.position = 'Member'; 
SELECT e.event_name FROM event e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President' AND e.location = '900 E. Washington St.' AND e.type = 'Social'; 
SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10'; 
SELECT m.last_name FROM member m JOIN event e ON m.member_id = (SELECT link_to_member FROM attendance WHERE link_to_event = e.event_id) WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member'; 
SELECT      (COUNT(CASE WHEN amount = 50 THEN 1 END) * 100.0) / COUNT(member_id) AS percentage_of_50 FROM      member WHERE      t_shirt_size = 'Medium'      AND position = 'Member'     AND member_id IN (         SELECT              link_to_member         FROM              attendance         WHERE              link_to_event IN (                 SELECT                      event_id                 FROM                      event                 WHERE                      type = 'Student_Club'             )     ); 
SELECT DISTINCT z.state FROM zip_code z WHERE z.type = 'PO Box'; 
SELECT DISTINCT z.zip_code FROM zip_code z JOIN (     SELECT zip_code     FROM zip_code     WHERE city = 'San Juan' AND state = 'Puerto Rico' ) sjm ON z.zip_code = sjm.zip_code WHERE z.type = 'PO Box'; 
SELECT e.event_name FROM event e WHERE e.type = 'Game'    AND e.status = 'Closed'    AND e.event_date BETWEEN '2019-03-15' AND '2020-03-20'; 
SELECT DISTINCT e.event_id FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget JOIN member m ON ex.link_to_member = m.member_id WHERE ex.cost > 50; 
SELECT      m.member_id,      m.first_name,      m.last_name,      e.event_name,      e.event_id FROM      member m JOIN      attendance a ON m.member_id = a.link_to_member JOIN      event e ON a.link_to_event = e.event_id JOIN      expense ex ON m.member_id = ex.link_to_member WHERE      ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'     AND ex.expense_description = 'approved' 
SELECT m.link_to_major, m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Katy' AND ma.major_name = 'rec1N0upiVLy5esTO'; 
SELECT DISTINCT m.member_id FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON ma.college = 'College of Agriculture and Applied Sciences' AND ma.major_name = 'Business' JOIN attendance a ON e.event_id = a.link_to_event JOIN member_phone mp ON m.member_id = mp.member_id WHERE mp.phone_number IS NOT NULL; 
SELECT DISTINCT m.email FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19'; 
SELECT COUNT(DISTINCT m.member_id)  FROM member m JOIN major ma ON m.position = 'Member' AND ma.major_name = 'Education' WHERE ma.college = 'College of Education & Human Services'; 
SELECT      (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) / COUNT(e.event_id)) * 100 AS over_budget_percentage FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      b.remaining < 0; 
SELECT e.event_id, e.location, b.event_status FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_date BETWEEN '2019-11-01' AND '2020-03-31'; 
SELECT expense_id, expense_description, expense_date, cost FROM expense WHERE cost / COUNT(expense_id) > 50 GROUP BY expense_id, expense_description, expense_date, cost; 
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE t_shirt_size = 'X-Large'; 
SELECT      (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0) / COUNT(zip_code) AS percentage_po_box_zip_codes FROM      zip_code; 
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.spent < b.amount; 
SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100; 
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100; 
SELECT e.location FROM event e JOIN income i ON e.event_id = i.link_to_member WHERE e.event_id IN (     SELECT e.event_id     FROM event e     JOIN income i ON e.event_id = i.link_to_member     GROUP BY e.event_id     HAVING COUNT(i.income_id) > 40 ) JOIN zip_code z ON e.location = z.zip_code JOIN major m ON z.city = m.major_name; 
SELECT m.member_id, m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id IN (     SELECT link_to_member     FROM expense     GROUP BY link_to_member     HAVING COUNT(DISTINCT link_to_event) > 1 ) GROUP BY m.member_id, m.first_name, m.last_name ORDER BY total_cost DESC LIMIT 1; 
SELECT AVG(i.amount) AS average_amount_paid FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position != 'Member'; 
SELECT event_name FROM event WHERE cost < (SELECT SUM(cost) / COUNT(event_id) FROM event WHERE category = 'Parking') AND category = 'Parking'; 
SELECT      (SUM(e.cost) / COUNT(e.event_id)) * 100 AS percentage_cost FROM      event e WHERE      e.type = 'Game'; 
SELECT b.budget_id FROM budget b JOIN expense e ON b.link_to_event = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY SUM(e.cost) DESC LIMIT 1; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5; 
SELECT      m.first_name || ' ' || m.last_name AS full_name,     m.phone AS contact_number FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      e.cost > (SELECT AVG(cost) FROM expense) 
SELECT      (SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) / COUNT(*)) -      (SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(*)) FROM      member 
SELECT major.major_name, major.department FROM major JOIN member ON major.major_id = member.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'; 
SELECT      m.first_name || ' ' || m.last_name AS full_name,      e.cost FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      e.expense_description LIKE '%Water%'      AND e.expense_description LIKE '%Veggie tray%'     AND e.expense_description LIKE '%supplies%' 
SELECT m.last_name, m.email FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Elementary Education'; 
SELECT b.event_status, SUM(b.amount) AS budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker' GROUP BY b.event_status; 
SELECT DISTINCT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food'; 
SELECT      m.first_name,      m.last_name,      i.amount FROM      income i JOIN      member m ON i.link_to_member = m.member_id WHERE      i.date_received = '2019-09-09'; 
SELECT b.category FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters'; 
SELECT m.first_name || ' ' || m.last_name AS full_name, m.link_to_major FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Secretary'; 
SELECT e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name; 
SELECT z.city FROM member m JOIN zip_code z ON m.link_to_major = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke'; 
SELECT m.first_name, m.last_name, m.link_to_major FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code zc ON ma.city = 'Lincolnton' AND ma.state = 'North Carolina' AND zc.zip_code = '28092'; 
SELECT COUNT(DISTINCT gs.GasStationID) FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE' AND p.Description = 'Premium gas'; 
SELECT      COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END) AS Ratio_EUR_to_CZK FROM      customers c; 
SELECT gas_usage.CustomerID FROM gas_usage JOIN yearmonth ON gas_usage.YearMonth = yearmonth.Date WHERE gas_usage.Currency = 'LAM' AND yearmonth.Date BETWEEN '201201' AND '201212' ORDER BY gas_usage.GasUsage LIMIT 1; 
SELECT AVG(Consumption) / 12 AS AvgMonthlyConsumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME'); 
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gas_usage gu ON gu.Currency = c.Currency WHERE gu.Currency = 'CZK' AND gu.YearMonth BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY SUM(gu.GasUsage) DESC LIMIT 1; 
SELECT COUNT(DISTINCT ym.CustomerID) AS CustomersWithLowConsumption FROM yearmonth ym WHERE ym.Country = 'KAM' AND ym.Date BETWEEN '201201' AND '201212' AND ym.Consumption < 30000; 
SELECT      (SELECT SUM(gu.GasUsage)      FROM gas_usage gu      JOIN customers c ON gu.Currency = c.Currency      WHERE c.Currency = 'CZK' AND gu.YearMonth BETWEEN '201201' AND '201212') -     (SELECT SUM(gu.GasUsage)      FROM gas_usage gu      JOIN customers c ON gu.Currency = c.Currency      WHERE c.Currency = 'EUR' AND gu.YearMonth BETWEEN '201201' AND '201212') AS DifferenceInConsumption 
SELECT GasUsage.YearMonth, SUM(gas_usage.GasUsage) AS TotalGasUsage FROM gas_usage JOIN customers ON gas_usage.Currency = customers.Currency WHERE customers.Currency = 'EUR' GROUP BY GasUsage.YearMonth ORDER BY TotalGasUsage DESC LIMIT 1; 
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.Segment = y.Segment GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT      SUBSTR(y.Date, 1, 4) AS Year,     SUM(g.GasUsage) AS TotalGasConsumption FROM      yearmonth y JOIN      gas_usage g ON y.CustomerID = g.CustomerID AND y.Date = g.YearMonth WHERE      g.Currency = 'CZK' GROUP BY      Year ORDER BY      TotalGasConsumption DESC LIMIT 1; 
SELECT      SUBSTR(yearmonth.Date, 6, 2) AS PeakMonth,     SUM(gas_usage.GasUsage) AS TotalGasConsumption FROM      yearmonth JOIN      gas_usage ON yearmonth.CustomerID = gas_usage.CustomerID AND yearmonth.Date LIKE '2013%' WHERE      yearmonth.Date LIKE '2013%' AND     gasstations.Segment = 'SME' GROUP BY      PeakMonth ORDER BY      TotalGasConsumption DESC LIMIT 1; 
WITH CustomerGasUsage AS (     SELECT          ym.CustomerID,         ym.YearMonth,         ym.Consumption,         g.CostInCZK,         g.Segment     FROM yearmonth ym     JOIN (         SELECT              t.TransactionID,             t.CustomerID,             t.GasStationID,             t.ProductID,             SUM(t.Amount * t.Price) AS CostInCZK,             g.Segment         FROM transactions_1k t         JOIN gasstations g ON t.GasStationID = g.GasStationID         WHERE t.Date BETWEEN '201301' AND '201312'         GROUP BY t.TransactionID, t.CustomerID, t.GasStationID, t.ProductID, g.Segment     ) g ON ym.CustomerID = g.CustomerID ), LowestConsumptionPerSegment AS (     SELECT          Segment,         MIN(Consumption) AS MinConsumption,         COUNT(DISTINCT CustomerID) AS CustomerCount     FROM CustomerGasUsage     GROUP BY Segment ), AnnualAverageConsumption AS (     SELECT          CGU.Segment,         AVG(CGU.Consumption) AS AvgAnnualConsumption     FROM CustomerGasUsage CGU     JOIN LowestConsumptionPerSegment LCS     ON CGU.Consumption = LCS.MinConsumption AND CGU.Segment = LCS.Segment     GROUP BY CGU.Segment ), SMEvsLAM AS (     SELECT          AAC.AvgAnnualConsumption - LAC.AvgAnnualConsumption AS Difference     FROM AnnualAverageConsumption AAC     JOIN gasstations GS1 ON AAC.Segment = GS1.Segment AND GS1.Segment = 'SME'     JOIN gasstations GS2 ON AAC.Segment = GS2.Segment AND GS2.Segment = 'LAM'     JOIN AnnualAverageConsumption LAC ON LAC.Segment = GS2.Segment ), LAMvsKAM AS (     SELECT          AAC.AvgAnnualConsumption - KAC.AvgAnnualConsumption AS Difference     FROM AnnualAverageConsumption AAC     JOIN gasstations GS1 ON AAC.Segment = GS1.Segment AND GS1.Segment = 'LAM'     JOIN gasstations GS2 ON AAC.Segment = GS2.Segment AND GS2.Segment = 'KAM'     JOIN AnnualAverageConsumption KAC ON KAC.Segment
SELECT      Segment,      MAX(PercentageIncrease) AS HighestPercentageIncrease,     MIN(PercentageIncrease) AS LowestPercentageIncrease FROM (     SELECT          g.Segment,          ((SUM(yu.GasUsage_2013) - SUM(yu.GasUsage_2012)) / NULLIF(SUM(yu.GasUsage_2013), 0) * 100) AS PercentageIncrease     FROM          (SELECT              Segment,              YearMonth,              GasUsage           FROM              gas_usage           WHERE              Currency = 'EUR' AND              (YearMonth BETWEEN '201201' AND '201212') OR              (YearMonth BETWEEN '201301' AND '201312')         ) yu     GROUP BY          Segment,          YearMonth ) AS MonthlyIncreases GROUP BY      Segment; 
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu WHERE gu.CustomerID = 6 AND gu.YearMonth BETWEEN '201308' AND '201311'; 
SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'Discount')     -      (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'Discount') AS DifferenceInDiscountStations; 
SELECT      (SUM(g.Consumption) FILTER (WHERE y.Date = '201304' AND y.CustomerID = 7)) -      (SUM(g.Consumption) FILTER (WHERE y.Date = '201304' AND y.CustomerID = 5)) AS ConsumptionDifference FROM      yearmonth y JOIN      gas_usage g ON y.CustomerID = g.CustomerID AND y.Date = g.YearMonth WHERE      y.CustomerID IN (7, 5) 
SELECT      SUM(CASE WHEN cu.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN cu.Currency = 'EUR' THEN 1 ELSE 0 END) AS MoreSMEsInCZK FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID JOIN      gasstations gs ON t.GasStationID = gs.GasStationID WHERE      gs.Segment = 'SME' 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'LAM' AND ym.Date = '201310' AND c.Currency = 'Euro' ORDER BY ym.Consumption DESC LIMIT 1; 
SELECT      ym.YearMonth,      SUM(y.Consumption) AS TotalConsumption FROM      yearmonth y JOIN      gas_usage gu ON y.YearMonth = gu.YearMonth GROUP BY      y.YearMonth ORDER BY      TotalConsumption DESC LIMIT 1; 
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN customers c ON gu.Currency = c.Currency WHERE c.Segment = 'KAM' AND gu.YearMonth = '201305'; 
SELECT      (COUNT(CASE WHEN 'Consumption' > 46.73 THEN 1 END) * 100.0) / COUNT(*) AS PercentageOfLAMCustomersConsumedMoreThan4673 FROM      yearmonth WHERE      CustomerID IN (         SELECT CustomerID          FROM customers          WHERE Segment = 'LAM'     ); 
WITH GasStationPricePerUnit AS (     SELECT          g.GasStationID,          g.Country,          AVG(t.Price / t.Amount) AS AvgPricePerUnit     FROM          gasstations g     JOIN          transactions_1k t ON g.GasStationID = t.GasStationID     GROUP BY          g.GasStationID, g.Country ), LowestAvgPricePerUnitPerCountry AS (     SELECT          Country,          MIN(AvgPricePerUnit) AS MinAvgPricePerUnit     FROM          GasStationPricePerUnit     GROUP BY          Country ), ValueForMoneyGasStations AS (     SELECT          g.GasStationID,          g.Country     FROM          GasStationPricePerUnit g     JOIN          LowestAvgPricePerUnitPerCountry lap ON g.Country = lap.Country AND g.AvgPricePerUnit = lap.MinAvgPricePerUnit ) SELECT      Country,      COUNT(*) AS NumValueForMoneyGasStations FROM      ValueForMoneyGasStations GROUP BY      Country ORDER BY      NumValueForMoneyGasStations DESC; 
SELECT     (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 100.0) / COUNT(c.CustomerID) AS EuroPaymentPercentage FROM     customers c JOIN     transactions_1k t ON c.CustomerID = t.CustomerID WHERE     c.Segment = 'KAM' 
SELECT      ROUND((COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) * 100.0) / COUNT(*), 2) AS PercentageConsumedMoreThan5283 FROM      yearmonth WHERE      Date = '201202'; 
SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'Premium') * 100.0      / (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia') AS PremiumGasStationPercentage 
SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY Consumption DESC LIMIT 1; 
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' AND c.Segment = 'SME' ORDER BY ym.Consumption ASC LIMIT 1; 
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE substr(Date, 1, 4) = '2012'; 
SELECT      ym.CustomerID,      (SUM(y.gas_usage) / 12) AS MonthlyConsumption FROM      yearmonth y JOIN      customers c ON y.CustomerID = c.CustomerID WHERE      c.Currency = 'Euro' GROUP BY      y.CustomerID ORDER BY      MonthlyConsumption DESC LIMIT 1; 
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201309%' 
SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE LEFT(t.Date, 6) = '201306'; 
SELECT DISTINCT g ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' OR g.Currency = 'EUR'; 
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Currency = 'EUR'; 
SELECT AVG(T.Amount * T.Price) AS AverageTotalPrice FROM transactions_1k AS T WHERE T.Date LIKE '2012-01%'; 
SELECT COUNT(DISTINCT ym.CustomerID) FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND ym.Consumption > 1000; 
SELECT p.Description FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE'; 
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11; 
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000; 
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01'; 
SELECT AVG(T.Price) AS AverageTotalPrice FROM transactions_1k AS T JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.Country = 'CZE'; 
SELECT AVG(T.Price) AS AverageTotalPrice FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'; 
SELECT c.CustomerID FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1; 
SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.TransactionID ASC LIMIT 1; 
SELECT GasUsage.Currency FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID JOIN gas_usage ON yearmonth.Date = gas_usage.YearMonth WHERE transactions_1k.Time = '16:25:00' AND yearmonth.Date = '2012-08-24'; 
SELECT ym.CustomerID FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00' 
SELECT COUNT(T.TransactionID) FROM transactions_1k T JOIN gas_usage G ON T.GasStationID = G.GasStationID WHERE T.Date = '2012-08-26' AND T.Time < '13:00:00' AND G.Currency = 'EUR'; 
SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = (SELECT MIN(ym.Date) FROM yearmonth ym) LIMIT 1; 
SELECT gu.Currency FROM transactions_1k t1 JOIN yearmonth ym ON t1.Date = ym.Date JOIN gas_usage gu ON ym.Date = gu.YearMonth WHERE t1.Date = '2012-08-24' AND t1.Time = '12:42:00'; 
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'; 
SELECT      ym.Date AS ExpenseDate,     ym.Consumption AS Expenses FROM      yearmonth ym WHERE      ym.CustomerID = (         SELECT              t1.CustomerID         FROM              transactions_1k t1         JOIN gasstations gs ON t1.GasStationID = gs.GasStationID         WHERE              t1.Amount = 124.05 AND              t1.Date = '2012-08-24' AND              gs.Country = (                 SELECT                      gs2.Country                 FROM                      transactions_1k t2                 JOIN gasstations gs2 ON t2.GasStationID = gs2.GasStationID                 WHERE                      t2.Amount = 124.05 AND                      t2.Date = '2012-08-24'             )     ) AND      ym.Date LIKE '2012-01-%' 
SELECT COUNT(*) FROM transactions_1k AS t1 JOIN gasstations AS t2 ON t1.GasStationID = t2.GasStationID WHERE t2.Country = 'CZE' AND t1.Time >= '08:00' AND t1.Time < '09:00' AND t1.Date = '2012-08-26'; 
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201306' AND ym.Consumption = 214582.17; 
SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.Country = t.Country WHERE t.CustomerID = 667467; 
SELECT y.CustomerID FROM yearmonth y JOIN transactions_1k t ON y.CustomerID = t.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24' JOIN gasstations gs ON t.GasStationID = gs.GasStationID JOIN gas_usage gu ON gs.Country = gu.Currency GROUP BY y.CustomerID; 
SELECT      (SELECT COUNT(DISTINCT c.CustomerID)       FROM customers c       JOIN yearmonth ym ON c.CustomerID = ym.CustomerID       WHERE ym.Date = '2012-08-25' AND c.Currency = 'EUR') * 100.0 /      (SELECT COUNT(DISTINCT c.CustomerID)       FROM customers c       JOIN yearmonth ym ON c.CustomerID = ym.CustomerID       WHERE ym.Date = '2012-08-25') AS PercentageOfCustomersUsingEUR; 
SELECT   (     (SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '2012-08-24') -     (SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '2013-08-24')   ) /    (SELECT Consumption FROM yearmonth WHERE CustomerID = c.CustomerID AND Date = '2012-08-24') AS DecreaseRate FROM   transactions_1k t JOIN   yearmonth ym1 ON t.CustomerID = ym1.CustomerID AND ym1.Date = '2012-08-24' JOIN   yearmonth ym2 ON t.CustomerID = ym2.CustomerID AND ym2.Date = '2013-08-24' JOIN   customers c ON t.CustomerID = c.CustomerID WHERE   t.Amount = 634.8 AND   t.Date = '2012-08-25'; 
SELECT gasstations.GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) AS TotalRevenue FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID GROUP BY gasstations.GasStationID ORDER BY TotalRevenue DESC LIMIT 1; 
SELECT      (SELECT SUM(CASE WHEN c.Segment = 'premium' THEN 1 ELSE 0 END)      FROM transactions_1k t1      JOIN customers c ON t1.CustomerID = c.CustomerID      JOIN gasstations gs ON t1.GasStationID = gs.GasStationID      WHERE gs.Country = 'SVK') * 100.0 /      (SELECT COUNT(*)      FROM transactions_1k t1      JOIN customers c ON t1.CustomerID = c.CustomerID      JOIN gasstations gs ON t1.GasStationID = gs.GasStationID      WHERE gs.Country = 'SVK') AS PercentagePremiumInSVK 
SELECT SUM(t.Amount * t.Price) AS TotalAmountSpent FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.CustomerID = 38508;  SELECT SUM(t.Amount * t.Price) AS AmountSpentInJanuary2012 FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.CustomerID = 38508 AND t.Date LIKE '201201%'; 
SELECT      p.Description AS ProductFullName,     SUM(t.Amount) AS TotalAmountSold FROM      transactions_1k t JOIN      products p ON t.ProductID = p.ProductID GROUP BY      p.Description ORDER BY      TotalAmountSold DESC LIMIT 5; 
SELECT      t1.CustomerID,     AVG(t3.Price / t3.Amount) AS AvgPricePerItem,     t1.Currency FROM      transactions_1k AS t1 JOIN      gas_usage AS t2 ON t1.CustomerID = t2.CustomerID JOIN      products AS t3 ON t1.ProductID = t3.ProductID GROUP BY      t1.CustomerID, t1.Currency ORDER BY      SUM(t3.Price / t3.Amount) DESC LIMIT 1; 
SELECT g.Country, MAX(t.Price) as MaxPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 GROUP BY g.Country ORDER BY MaxPrice DESC LIMIT 1; 
SELECT      ym.CustomerID,      CASE          WHEN ym.Consumption > 29.00 * (SELECT SUM(t.Amount) / NULLIF(SUM(t.Amount), 0)                                        FROM transactions_1k t                                        WHERE t.ProductID = 5 AND t.Date LIKE '201208%') THEN 'Above Average'         ELSE 'Below Average'     END AS ConsumptionStatus FROM      yearmonth ym WHERE      ym.Date LIKE '201208%'     AND ym.CustomerID IN (         SELECT              t.CustomerID         FROM              transactions_1k t         WHERE              t.ProductID = 5             AND t.Price / t.Amount > 29.00     ); 

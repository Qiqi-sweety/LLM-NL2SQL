SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Percent (%) Eligible Free (K-12)` IS NOT NULL;	california_schools
SELECT      SchoolName,      Percent__Eligible_Free__Ages_5_17,      (Free_Meal_Count__Ages_5_17 / Enrollment__Ages_5_17) AS Eligible_Free_Rate FROM      frpm WHERE      School_Type = 'Continuation School' ORDER BY      Eligible_Free_Rate ASC LIMIT 3;	california_schools
SELECT schools.Zip FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.'Charter School (Y/N)' = 1 AND schools.County = 'Fresno County Office of Education';	california_schools
SELECT      s.NCESDist,     s.NCESSchool,     s.County,     s.District,     s.School,     s.Street,     s.StreetAbr,     s.City,     s.Zip,     s.State,     s.MailStreet,     s.MailStrAbr,     s.MailCity,     s.MailZip,     s.MailState FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f.FRPM Count (K-12) = (SELECT MAX("FRPM Count (K-12)") FROM frpm)	california_schools
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.'Charter School (Y/N)' = 1 AND s.'FundingType' = 'Charter' AND s.'OpenDate' > '2000-01-01';	california_schools
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F';	california_schools
SELECT s.CDSCode, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr > 500 AND s.Magnet = 1;	california_schools
SELECT s.Phone FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumGE1500 IS NOT NULL AND sc.NumGE1500 > 0 ORDER BY sc.NumGE1500 DESC LIMIT 1;	california_schools
SELECT satscores.NumTstTakr FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.FRPM Count (K-12) = (SELECT MAX(FRPM Count (K-12)) FROM frpm)	california_schools
SELECT COUNT(DISTINCT frpm.CDSCode) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE satscores.AvgScrMath > 560 AND schools.FundingType = 'Charter';	california_schools
SELECT frpm.FRPMA_CountyCode, frpm.FRPMA_CountyName, frpm.FRPMA_DistrictCode, frpm.FRPMA_DistrictName, frpm.FRPMA_SchoolCode, frpm.FRPMA_SchoolName, frpm.FRPMA_Count_Ages_5_17 FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores) ORDER BY frpm.FRPMA_Count_Ages_5_17 DESC LIMIT 1;	california_schools
SELECT CDSCode  FROM frpm  WHERE 'Enrollment (K-12)' + 'Enrollment (Ages 5-17)' > 500;	california_schools
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE `Percent (%) Eligible FRPM (Ages 5-17)` > 0.3 AND `Enrollment (Ages 5-17)` IS NOT NULL AND `Free Meal Count (Ages 5-17)` IS NOT NULL AND `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL;	california_schools
SELECT s.Phone FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.rtype = 'SAT' ORDER BY (st.NumGE1500 / st.NumTstTakr) DESC LIMIT 3;	california_schools
SELECT      s.NCESSchool,      fpm.'Enrollment (Ages 5-17)'  FROM      frpm AS fpm  JOIN      schools AS s ON fpm.CDSCode = s.CDSCode  ORDER BY      fpm.'Enrollment (Ages 5-17)' DESC  LIMIT 5;	california_schools
SELECT      d.District,      AVG(s.AvgScrRead) AS AvgScore FROM      satscores s JOIN      schools sch ON s.cds = sch.CDSCode JOIN      frpm f ON sch.CDSCode = f.CDSCode JOIN      district_closures dc ON sch.District = dc.City WHERE      sch.StatusType = 'Active' GROUP BY      d.District ORDER BY      AvgScore DESC LIMIT 1;	california_schools
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;	california_schools
SELECT s.CharterNum FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Writing' AND ss.Score = 499 AND s.Charter = 1;	california_schools
SELECT COUNT(DISTINCT s.CDSCode)  FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE s.County = 'Contra Costa' AND s.FundingType = 'Directly Funded' AND st.NumTstTakr <= 250;	california_schools
SELECT s.Phone FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' GROUP BY s.CDSCode ORDER BY AVG(ss.Score) DESC LIMIT 1;	california_schools
SELECT COUNT(*) FROM frpm WHERE County = 'Amador' AND Low_Grade = '09' AND High_Grade = '12';	california_schools
SELECT COUNT(*) FROM frpm WHERE CountyName = 'Los Angeles' AND FreeMealCount(K-12) > 500 AND FreeMealCount(K-12) < 700;	california_schools
SELECT s.SchoolName, SUM(satscores.NumTstTakr) AS TotalTestTakers FROM satscores JOIN schools s ON s.CDSCode = satscores.cds WHERE s.County = 'Contra Costa' GROUP BY s.SchoolName ORDER BY TotalTestTakers DESC LIMIT 1;	california_schools
SELECT      s.School,     s.Street,     s.StreetAbr,     s.City,     s.Zip,     s.State FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      ABS(f.Enrollment (K-12) - f.Enrollment (Ages 5-17)) > 30;	california_schools
SELECT s.SchoolName FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.'Percent (%) Eligible Free (K-12)' > 0.1 AND EXISTS (     SELECT 1     FROM satscores sat     JOIN schools s ON sat.cds = s.CDSCode     WHERE s.CDSCode = f.CDSCode     AND sat.NumGE1500 > 0 )	california_schools
SELECT s.School, schools.FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.CDSCode, schools.School, schools.FundingType HAVING AVG(satscores.AvgScrMath) > 400;	california_schools
SELECT      s.SchoolName,      s.Street,      s.City,      s.State,      s.Zip FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f.County = 'Monterey' AND      f.School Type = 'High School' AND      f.FREE MEAL COUNT (Ages 15-17) > 800	california_schools
SELECT      s.School,      ss.Score AS WritingScore,      s.Phone AS CommunicationNumber FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode WHERE      ss.Subject = 'Writing'     AND (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01');	california_schools
SELECT      s.School,      s.DOCType FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.FundingType = 'Local'     AND s.StatusType = 'Active' GROUP BY      s.School,      s.DOCType HAVING      ABS(f.Enrollment('K-12') - f.Enrollment('Ages 5-17')) > (         SELECT              AVG(ABS(f2.Enrollment('K-12') - f2.Enrollment('Ages 5-17')))         FROM              frpm f2         JOIN              schools s2 ON f2.CDSCode = s2.CDSCode         WHERE              s2.FundingType = 'Local'             AND s2.StatusType = 'Active'     ) ORDER BY      ABS(f.Enrollment('K-12') - f.Enrollment('Ages 5-17')) DESC;	california_schools
SELECT      schools.OpenDate FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.'Enrollment (K-12)' = (SELECT MAX('Enrollment (K-12)') FROM frpm) ORDER BY      schools.OpenDate LIMIT 1;	california_schools
SELECT s.City, SUM(f.Enrollment (K-12)) AS TotalEnrollment FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode GROUP BY s.City ORDER BY TotalEnrollment ASC LIMIT 5;	california_schools
SELECT      frpm.CDSCode,      frpm.Percent__Eligible_FRPM__K_12 FROM      frpm JOIN      (         SELECT              SchoolCode,              RANK() OVER (ORDER BY Enrollment__K_12 DESC) AS enrollment_rank         FROM              frpm         WHERE              Low_Grade = '1' AND High_Grade = '12'     ) ranked_schools ON frpm.SchoolCode = ranked_schools.SchoolCode WHERE      ranked_schools.enrollment_rank BETWEEN 10 AND 11;	california_schools
SELECT      frpm.'School Name',      (frpm.'FRPM Count (K-12)' / frpm.'Enrollment (K-12)') AS EligibleFreeMealRate FROM      frpm INNER JOIN      schools ON frpm.'CDSCode' = schools.'CDSCode' WHERE      schools.'FundingType' = '66' ORDER BY      frpm.'FRPM Count (K-12)' DESC LIMIT 5;	california_schools
SELECT      frpm.School Name,      schools.Website FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.Free Meal Count (Ages 5-17) BETWEEN 1900 AND 2000	california_schools
SELECT      frpm.'Percent (%) Eligible Free (Ages 5-17)' FROM      frpm JOIN      schools ON      frpm.'CDSCode' = schools.'CDSCode' WHERE      schools.'AdmFName1' = 'Kacey Gibson'	california_schools
SELECT schools.AdmEmail1 FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.'Charter School (Y/N)' = 1 AND frpm.'Enrollment (K-12)' = (SELECT MIN('Enrollment (K-12)')                                FROM frpm                                WHERE frpm.'Charter School (Y/N)' = 1);	california_schools
SELECT s.AdmFName1, s.AdmLName1, s.AdmFName2, s.AdmLName2, s.AdmFName3, s.AdmLName3 FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.NumGE1500 IS NOT NULL AND st.NumGE1500 >= 1500 ORDER BY st.NumGE1500 DESC LIMIT 1;	california_schools
SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE (sat.NumGE1500 / sat.NumTstTakr) = (     SELECT MIN((NumGE1500 / NumTstTakr))     FROM satscores     WHERE NumTstTakr > 0 )	california_schools
SELECT s.Website FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.County = 'Los Angeles County' AND sat.NumTstTakr BETWEEN 2000 AND 3000;	california_schools
SELECT AVG(satscores.NumTstTakr) AS AvgTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno' AND YEAR(schools.OpenDate) = 1980;	california_schools
SELECT s.Phone FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.District = 'Fresno Unified' AND ss.rtype = 'Reading' GROUP BY s.CDSCode ORDER BY AVG(ss.AvgScrRead) ASC LIMIT 1;	california_schools
SELECT s.CDSCode, s.School, AVG(t.AvgScrRead) AS AvgReadScore FROM schools s JOIN satscores t ON s.CDSCode = t.cds WHERE s.Virtual = 'F' AND s.Magnet = 0 GROUP BY s.CDSCode, s.School ORDER BY AvgReadScore DESC LIMIT 5;	california_schools
SELECT      s.'EdOpsName' AS 'EducationOptionType' FROM      satscores s JOIN      schools sch ON s.'cds' = sch.'CDSCode' JOIN      (SELECT           'cds',           AVG('AvgScrMath') AS 'AvgMathScore'      FROM           satscores      GROUP BY           'cds'      ORDER BY           'AvgMathScore' DESC      LIMIT 1) AS highest_math_score ON s.'cds' = highest_math_score.'cds' JOIN      frpm f ON s.'cds' = f.'CDSCode' WHERE      s.'rtype' = 'Overall' AND     f.'School Type' IS NOT NULL;	california_schools
WITH SchoolAverageScores AS (     SELECT          s.CDSCode,         (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) AS TotalAverageScore     FROM          satscores s     JOIN          schools sch ON s.cds = sch.CDSCode     WHERE          s.AvgScrRead IS NOT NULL AND          s.AvgScrMath IS NOT NULL AND          s.AvgScrWrite IS NOT NULL ), LowestAverageSchool AS (     SELECT          s.CDSCode,         s.TotalAverageScore     FROM          SchoolAverageScores s     ORDER BY          s.TotalAverageScore ASC     LIMIT 1 ), SchoolDetails AS (     SELECT          sch.County,         las.CDSCode     FROM          LowestAverageSchool las     JOIN          schools sch ON las.CDSCode = sch.CDSCode ) SELECT      (SELECT s.AvgScrMath FROM satscores s WHERE s.cds = (SELECT CDSCode FROM SchoolDetails LIMIT 1)) AS LowestAverageMathScore,     (SELECT sch.County FROM SchoolDetails sch)	california_schools
SELECT      s.City,      AVG(satscores.AvgScrWrite) AS AvgWritingScore FROM      satscores JOIN      schools s ON s.CDSCode = satscores.cds JOIN      (         SELECT              cds,              SUM(CASE WHEN AvgScrRead + AvgScrMath + AvgScrWrite >= 1500 THEN 1 ELSE 0 END) AS TestTakersWithHighScores         FROM              satscores         GROUP BY              cds         ORDER BY              TestTakersWithHighScores DESC         LIMIT 1     ) AS highScoreTests ON      s.CDSCode = highScoreTests.cds GROUP BY      s.City;	california_schools
SELECT      s.School,      AVG(sco.Score) AS AverageWritingScore FROM      schools s JOIN      school_scores sco ON s.CDSCode = sco.CDSCode WHERE      s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' AND sco.Subject = 'Writing' GROUP BY      s.School;	california_schools
SELECT      s.State,      SUM(frm.Enrollment(K-12)) AS TotalEnrollment FROM      frpm AS frm JOIN      schools AS s ON frm.CDSCode = s.CDSCode WHERE      s.DOC = '31' AND     frm.'Enrollment (K-12)' IS NOT NULL GROUP BY      s.State ORDER BY      TotalEnrollment DESC LIMIT 1;	california_schools
SELECT COUNT(*) / 12 AS MonthlyAvgSchoolsOpened FROM schools WHERE StatusType = 'Open' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND County = 'Alameda' AND District = 'Elementary School District' AND DOC = '52';	california_schools
SELECT      (COUNT(CASE WHEN s.DOC = '54' THEN 1 END) / NULLIF(COUNT(CASE WHEN s.DOC = '52' THEN 1 END), 0)) AS Ratio FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.County = 'Orange County' AND     s.DOC IN ('52', '54');	california_schools
SELECT      County,      COUNT(*) AS TotalClosedSchools,      GROUP_CONCAT(School ORDER BY TotalClosedSchools DESC SEPARATOR ', ') AS SchoolsClosed,      GROUP_CONCAT(ClosedDate ORDER BY TotalClosedSchools DESC SEPARATOR ', ') AS ClosureDates FROM      schools WHERE      StatusType = 'Closed' GROUP BY      County ORDER BY      TotalClosedSchools DESC LIMIT 1;	california_schools
SELECT s.Street, s.City, s.Zip, s.State, s.SchoolName FROM schools s JOIN (     SELECT s1.CDSCode, s1.SchoolName, AVG(s2.AvgScrMath) AS AvgMath     FROM schools s1     JOIN satscores s2 ON s1.CDSCode = s2.cds     GROUP BY s1.CDSCode, s1.SchoolName     ORDER BY AvgMath DESC ) ordered_schools ON s.CDSCode = ordered_schools.CDSCode WHERE s.CDSCode = (SELECT CDSCode FROM (     SELECT s1.CDSCode     FROM schools s1     JOIN satscores s2 ON s1.CDSCode = s2.cds     GROUP BY s1.CDSCode     ORDER BY AVG(s2.AvgScrMath) DESC ) AS subquery LIMIT 1 OFFSET 5);	california_schools
SELECT s.MailStreet, s.MailCity, s.MailState, s.School FROM schools s JOIN satscores sats ON s.CDSCode = sats.cds WHERE sats.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores) ORDER BY s.MailStreet, s.MailCity, s.MailState LIMIT 1;	california_schools
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.MailCity = 'Lakeport';	california_schools
SELECT SUM(test_takers.SATScore) AS TotalTestTakers FROM test_takers JOIN schools ON test_takers.SchoolPhone = schools.Phone WHERE schools.City = 'Fresno';	california_schools
SELECT s.CDSCode, s.MailZip FROM schools s JOIN schools s2 ON s.CDSCode = s2.CDSCode WHERE s2.AdmFName1 = 'Avetik' AND s2.AdmLName1 = 'Atoian';	california_schools
SELECT      (SELECT COUNT(*)       FROM schools       WHERE County = 'Colusa' AND MailState = 'CA') /      (SELECT COUNT(*)       FROM schools       WHERE County = 'Humboldt' AND MailState = 'CA') AS Ratio;	california_schools
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';	california_schools
SELECT s.Phone, s.Ext FROM schools s JOIN (     SELECT sc.CDSCode     FROM school_scores sc     WHERE sc.Subject = 'Writing'     ORDER BY sc.Score DESC     LIMIT 333 ) AS top333 ON s.CDSCode = top333.CDSCode;	california_schools
SELECT Street, StreetAbr, Phone, Ext FROM schools WHERE Zip = '95203-3704';	california_schools
SELECT s.Website FROM schools s JOIN (     SELECT CDSCode     FROM schools     WHERE (AdmFName1 = 'Mike Larson' OR AdmLName1 = 'Larson' OR AdmFName2 = 'Mike Larson' OR AdmLName2 = 'Larson'      OR AdmFName3 = 'Mike Larson' OR AdmLName3 = 'Larson'      OR AdmFName1 = 'Dante Alvarez' OR AdmLName1 = 'Alvarez' OR AdmFName2 = 'Dante Alvarez' OR AdmLName2 = 'Alvarez'      OR AdmFName3 = 'Dante Alvarez' OR AdmLName3 = 'Alvarez') ) admin_schools ON s.CDSCode = admin_schools.CDSCode;	california_schools
SELECT Website  FROM schools  WHERE County = 'San Joaquin'  AND Charter = 1  AND Virtual = 'P';	california_schools
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = '52' AND City = 'Hickman';	california_schools
SELECT COUNT(*)  FROM frpm  WHERE CountyName = 'Los Angeles'  AND `Percent (%) Eligible Free (K-12)` < 0.18  AND CharterSchool (Y/N) = 0;	california_schools
SELECT      s.School,      s.City,      a.AdmFName1,      a.AdmLName1,     a.AdmFName2,      a.AdmLName2,     a.AdmFName3,      a.AdmLName3 FROM      schools s JOIN      (SELECT          AdmFName1,          AdmLName1,          AdmFName2,          AdmLName2,          AdmFName3,          AdmLName3       FROM          schools       WHERE          Charter = 1 AND CharterNum = '00D2') a ON      s.CDSCode = a.CDSCode;	california_schools
SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman';	california_schools
SELECT      (COUNT(CASE WHEN frpm.'Charter Funding Type' = 'Locally Funded' THEN 1 END) * 100.0) /      COUNT(*) AS 'Percentage of Locally Funded Schools' FROM      frpm WHERE      frpm.County Name = 'Santa Clara'	california_schools
SELECT COUNT(*) FROM schools WHERE StatusType = 'Open'   AND FundingType = 'Directly Funded'   AND County = 'Stanislaus'   AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';	california_schools
SELECT SUM(DistrictClosureCount) AS TotalClosureCount FROM district_closures WHERE ClosureYear = '1989' AND City = 'San Francisco';	california_schools
SELECT      County,     COUNT(*) AS TotalClosures FROM      district_closures WHERE      ClosureYear BETWEEN '1980' AND '1989'     AND SOC = '11' GROUP BY      County ORDER BY      TotalClosures DESC LIMIT 1;	california_schools
SELECT schools.NCESDist FROM schools WHERE schools.SOC = '31';	california_schools
SELECT     COUNT(CASE WHEN s.StatusType = 'Active' THEN 1 END) AS ActiveDistrictCommunityDaySchools,     COUNT(CASE WHEN s.StatusType = 'Closed' THEN 1 END) AS ClosedDistrictCommunityDaySchools FROM     schools s JOIN     frpm f ON s.CDSCode = f.CDSCode WHERE     s.County = 'Alpine' AND     f.School Type = 'District Community Day School';	california_schools
SELECT DISTINCT d DistrictCode FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.City = 'Fresno' AND s.Magnet = 0;	california_schools
SELECT frpm.Enrollment_Ages_5_17 FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Academic_Year = '2014-15' AND schools.EdOpsCode = 'SSS' AND schools.County = 'Fremont';	california_schools
SELECT      frpm.'Free Meal Count (Ages 5-17)' AS FreeMealCount FROM      frpm JOIN      schools  ON      frpm.CDSCode = schools.CDSCode WHERE      schools.'MailStreet' = 'PO Box 1040'      AND schools.'School Type' = 'Youth Authority';	california_schools
SELECT MIN(LowGrade) AS LowestGrade FROM frpm WHERE 'SPECON' = (SELECT EdOpsCode FROM schools WHERE NCESDist = '613360');	california_schools
SELECT frpm.School Name, frpm.Educational Option Type FROM frpm WHERE frpm.County Code = '37' AND frpm.NSLP Provision Status = 'Breakfast Provision 2';	california_schools
SELECT s.City FROM frpm f JOIN schools sch ON f.CDSCode = sch.CDSCode WHERE f.EILCode = 'HS' AND f.NSLP Provision Status = '2' AND f.Low Grade = '09' AND f.High Grade = '12' AND sch.County = 'Merced';	california_schools
SELECT      frpm.'School Name',     frpm.'Percent (%) Eligible FRPM (Ages 5-17)' FROM      frpm JOIN      schools ON frpm.'CDSCode' = schools.'CDSCode' WHERE      frpm.'Low Grade' = 'K' AND frpm.'High Grade' = '9'     AND schools.'County' = 'Los Angeles'     AND frpm.'Enrollment (Ages 5-17)' IS NOT NULL     AND frpm.'Free Meal Count (Ages 5-17)' IS NOT NULL;	california_schools
SELECT      GSoffered,      COUNT(*) AS count FROM      schools WHERE      City = 'Adelanto' GROUP BY      GSoffered ORDER BY      count DESC LIMIT 1;	california_schools
SELECT      County,      COUNT(*) AS SchoolCount FROM      schools WHERE      County IN ('San Diego', 'Santa Barbara') AND     Virtual = 'F' GROUP BY      County ORDER BY      SchoolCount DESC LIMIT 1;	california_schools
SELECT s.School, s.Latitude, s.SchoolType FROM schools s WHERE s.Latitude = (SELECT MAX(Latitude) FROM schools);	california_schools
SELECT s.City, s.School, s.LowGrade FROM schools s WHERE s.State = 'CA' AND s.Latitude = (     SELECT MIN(Latitude)     FROM schools     WHERE State = 'CA' )	california_schools
SELECT MAX(`Longitude`) as MaxLongitude, `Low Grade`, `High Grade` FROM `frpm` GROUP BY `Low Grade`, `High Grade` ORDER BY MaxLongitude DESC LIMIT 1;	california_schools
SELECT      frpm.County Name,      COUNT(DISTINCT frpm.School Code) AS NumberOfSchoolsInCity FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.Low Grade = 'K' AND frpm.High Grade = '8' GROUP BY      frpm.County Name UNION ALL SELECT      schools.City,      COUNT(DISTINCT frpm.School Code) AS NumberOfSchoolsInCity FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.Magnet = 1 GROUP BY      schools.City;	california_schools
SELECT     s.AdmFName1 AS AdminFName,     COUNT(*) AS Count,     d.District AS DistrictName FROM     schools s JOIN     schools d ON s.CDSCode = d.CDSCode WHERE     s.AdmFName1 IS NOT NULL GROUP BY     s.AdmFName1, d.District ORDER BY     Count DESC LIMIT 2;	california_schools
SELECT frpm.CountyCode,         (frpm.FreeMealCount(K-12) / frpm.Enrollment(K-12) * 100) AS Percent_Eligible_Free_K12 FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN (     SELECT AdmFName1     FROM schools     WHERE AdmFName1 = 'Alusine' ) AS admins ON schools.CDSCode = admins.CDSCode;	california_schools
SELECT      s.AdmLName1 AS AdminLastName,      s.District AS DistrictName,      s.County AS CountyName,      s.School AS SchoolName FROM      schools s JOIN      schools sc ON s.CDSCode = sc.CDSCode AND sc.CharterNum = '40';	california_schools
SELECT      s.AdmEmail1 AS Email FROM      schools s WHERE      s.County = 'San Bernardino'     AND s.District = 'San Bernardino City Unified'     AND s.OpenDate BETWEEN '2009-01-01' AND '2010-12-31'     AND (s.SOC = '62' OR s.DOC = '54');	california_schools
SELECT s.AdmEmail1, fr.SchoolName FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds JOIN (     SELECT cds, COUNT(*) as test_taker_count     FROM satscores     WHERE AvgScrRead >= 1500 OR AvgScrMath >= 1500 OR AvgScrWrite >= 1500     GROUP BY cds     ORDER BY test_taker_count DESC     LIMIT 1 ) fr ON s.CDSCode = fr.cds;	california_schools
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'East Bohemia' AND t.operation = 'POPLATEK PO OBRATU';	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Prague' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = a.account_id );	financial
SELECT      CASE          WHEN A12 > A13 THEN '1995'         ELSE '1996'     END AS year_with_higher_unemployment,     MAX(CASE WHEN A12 > A13 THEN A12 ELSE A13 END) AS higher_unemployment_rate FROM      district WHERE      A12 IS NOT NULL AND A13 IS NOT NULL;	financial
SELECT COUNT(DISTINCT d.district_id) AS num_districts FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000;	financial
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;	financial
SELECT a.account_id FROM account AS ac JOIN client AS cl ON ac.district_id = cl.district_id WHERE cl.gender = 'F' ORDER BY cl.birth_date ASC LIMIT 1;  SELECT MAX(cl.A11) - MIN(cl.A11) AS salary_gap FROM client AS cl WHERE cl.gender = 'F';	financial
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client ) ORDER BY d.A11 DESC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'Owner';	financial
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.operation = 'POPLATEK PO OBRATU';	financial
SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' AND l.status = 'approved' AND EXISTS (     SELECT 1     FROM loan l2     WHERE l2.account_id = a.account_id     AND l2.status = 'approved'     AND l2.amount = (         SELECT MIN(l3.amount)         FROM loan l3         WHERE l3.account_id = a.account_id         AND l3.status = 'approved'     ) ) AND EXISTS (     SELECT 1     FROM account a2     JOIN trans t ON a2.account_id = t.account_id     WHERE a2.account_id = a.account_id     AND t.k_symbol = 'POPLATEK TYDNE'     AND t.date BETWEEN DATE_SUB(l.date, INTERVAL 7 DAY) AND l.date );	financial
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 AND a.account_id IN (     SELECT account_id     FROM loan     WHERE duration > 12     ORDER BY amount DESC     LIMIT 1 );	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov';	financial
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE YEAR(date) = 1995) GROUP BY account_id;	financial
SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id WHERE a.date < '1997-01-01' AND EXISTS (     SELECT 1     FROM trans t     WHERE t.account_id = a.account_id     AND t.balance > 3000 );	financial
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.issued = '1994-03-03';	financial
SELECT a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14' AND t.k_symbol = 'Transaction';	financial
SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.date = '1994-08-25';	financial
SELECT MAX(t.amount) AS max_transaction_amount FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN card crd ON d.account_id = crd.account_id WHERE crd.issued = '1996-10-21';	financial
SELECT c.gender FROM client c JOIN district d ON c.district_id = d.district_id JOIN (     SELECT district_id, A11 AS avg_salary     FROM district     ORDER BY A11 DESC     LIMIT 1 ) AS ds ON c.district_id = ds.district_id JOIN (     SELECT client_id     FROM client     ORDER BY birth_date ASC     LIMIT 1 ) AS oldest_client ON c.client_id = oldest_client.client_id ORDER BY c.birth_date ASC LIMIT 1;	financial
SELECT t.amount AS first_transaction_amount FROM `trans` t JOIN `account` a ON t.account_id = a.account_id JOIN `loan` l ON a.account_id = l.account_id JOIN (     SELECT `account_id`     FROM `loan`     GROUP BY `account_id`     ORDER BY SUM(`amount`) DESC     LIMIT 1 ) AS top_loan ON t.account_id = top_loan.account_id WHERE t.date = (     SELECT MIN(`date`)     FROM `trans`     WHERE `account_id` = top_loan.account_id ) AND t.type = 'credit' AND t.amount > 0;	financial
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F';	financial
SELECT d.disp_id FROM disp d JOIN client c ON d.client_id = c.client_id JOIN trans t ON d.account_id = t.account_id WHERE t.date = '1998-09-02' AND t.amount = 5100 GROUP BY d.disp_id;	financial
SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996;	financial
SELECT d.A2 FROM account a JOIN client c ON a.district_id = d.district_id JOIN disp d ON a.account_id = d.account_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.gender = 'F' AND cl.birth_date = '1976-01-29';	financial
SELECT c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03';	financial
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'Prague' ORDER BY c.birth_date ASC LIMIT 1;	financial
SELECT      (SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id =          (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND          district_id IN          (SELECT district_id FROM district WHERE A3 = 'South Bohemia')     ) * 100.0 /      (SELECT COUNT(*) FROM client WHERE district_id =          (SELECT district_id FROM district WHERE A3 = 'South Bohemia')     ) AS male_client_percentage	financial
WITH FirstLoanClient AS (     SELECT c.client_id     FROM client c     JOIN disp d ON c.client_id = d.client_id     JOIN loan l ON d.account_id = l.account_id     WHERE l.date = '1993-07-05'     GROUP BY c.client_id ), BalanceAtDates AS (     SELECT a.account_id,            MAX(CASE WHEN t.date = '1993-03-22' THEN t.balance ELSE 0 END) AS balance_1993_03_22,            MAX(CASE WHEN t.date = '1998-12-27' THEN t.balance ELSE 0 END) AS balance_1998_12_27     FROM account a     JOIN trans t ON a.account_id = t.account_id     WHERE a.account_id IN (SELECT account_id FROM FirstLoanClient)     GROUP BY a.account_id ), IncreaseRates AS (     SELECT a.account_id,            ((b.balance_1998_12_27 - b.balance_1993_03_22) / b.balance_1993_03_22) * 100 AS increase_rate     FROM BalanceAtDates b     JOIN account a ON b.account_id = a.account_id ) SELECT account_id, increase_rate FROM IncreaseRates;	financial
SELECT      ROUND(         (SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) * 100.0) / SUM(l.amount),         2     ) AS percentage_paid FROM      loan l;	financial
SELECT      (COUNT(CASE WHEN L.amount < 100000 AND L.status = 'C' THEN 1 END) * 100.0) /      COUNT(L.loan_id) AS percentage_running_no_issue FROM      loan L WHERE      L.amount < 100000;	financial
SELECT      a.account_id,      d.A2 AS district_name,      d.A3 AS district_region FROM      account a JOIN      district d ON a.district_id = d.district_id JOIN      trans t ON a.account_id = t.account_id WHERE      a.date < t.date      AND YEAR(a.date) = 1993     AND t.type = 'POPLATEK PO OBRATU';	financial
SELECT      d.account_id,     a.frequency FROM      account a JOIN      district d ON a.district_id = d.district_id WHERE      d.A2 = 'east Bohemia' AND     a.date BETWEEN '1995-01-01' AND '2000-12-31' JOIN      disp disp ON a.account_id = disp.account_id JOIN      client c ON disp.client_id = c.client_id;	financial
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice';	financial
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990;	financial
SELECT      a.account_id,      d.A2 AS district,      d.A3 AS region FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id WHERE      l.amount > 300000;	financial
SELECT l.loan_id, d.A3, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60 GROUP BY l.loan_id, d.A3;	financial
SELECT d.A7 AS district,         ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dt ON c.district_id = dt.district_id WHERE l.status = 'D' AND dt.A12 IS NOT NULL AND dt.A13 IS NOT NULL;	financial
SELECT      (COUNT(CASE WHEN d.A2 = 'Decin' AND a.date BETWEEN '1993-01-01' AND '1993-12-31' THEN 1 END) * 100.0) / COUNT(a.account_id) AS percentage FROM      account a JOIN      district d ON a.district_id = d.district_id;	financial
SELECT account_id FROM trans WHERE type = 'POPLATEK MESICNE' GROUP BY account_id HAVING COUNT(*) > 1;	financial
SELECT d.A2 AS District, COUNT(c.client_id) AS FemaleAccountHolders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY FemaleAccountHolders DESC LIMIT 10;	financial
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM district d JOIN trans t ON d.district_id = t.account_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND c.client_id NOT IN (     SELECT DISTINCT d.client_id     FROM disp d     JOIN card cr ON d.disp_id = cr.disp_id     WHERE cr.type = 'credit' );	financial
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loans_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.district_id ORDER BY active_loans_count DESC LIMIT 1;	financial
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN client c ON l.account_id = c.client_id WHERE c.gender = 'M';	financial
SELECT d.A2 AS branch_location, d.A13 AS unemployment_rate FROM district d WHERE d.A13 = (     SELECT MAX(district.A13)     FROM district     WHERE d.A11 = 1996 ) AND d.A11 = 1996;	financial
SELECT COUNT(a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A16 = (SELECT MAX(A16) FROM district)	financial
SELECT COUNT(DISTINCT t.account_id)  FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.type = 'KARTA'  AND t.operation = 'VYBER KARTOU' AND t.balance < 0 AND a.frequency = 'POPLATEK MESICNE';	financial
SELECT COUNT(DISTINCT l.account_id) AS approved_accounts FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.amount >= 250000 AND l.date BETWEEN '1995-01-01' AND '1997-12-31' AND a.frequency = 'POPLATEK MESICNE' AND l.status = 'APPROVED';	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id JOIN disp d ON a.account_id = d.account_id JOIN district dt ON d.district_id = dt.district_id WHERE dt.A16 = 1 AND (l.status = 'C' OR l.status = 'D');	financial
SELECT COUNT(c.client_id) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A15 = (     SELECT A15     FROM district     WHERE A15 = (         SELECT MAX(A15) - 1         FROM district         WHERE A15 < (SELECT MAX(A15) FROM district)     ) )	financial
SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE c.type = 'gold' AND d.type = 'disponent';	financial
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Pisek';	financial
SELECT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY d.A2 HAVING SUM(t.amount) > 10000;	financial
SELECT DISTINCT o.account_id FROM `order` o JOIN account a ON o.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Pisek' AND o.k_symbol = 'SIPO';	financial
SELECT DISTINCT ac.account_id FROM account ac JOIN card crd ON ac.account_id = crd.account_id WHERE crd.type = 'gold' AND EXISTS (     SELECT 1     FROM card crd2     WHERE crd2.account_id = ac.account_id AND crd2.type = 'junior' );	financial
SELECT AVG(amount) AS average_credit_card_withdrawn FROM trans WHERE type = 'KARTA' AND operation = 'VYBER KARTOU' AND date >= '2021-01-01' AND date < '2022-01-01';	financial
SELECT DISTINCT t.account_id FROM trans t JOIN (     SELECT account_id, SUM(amount) as total_spent     FROM trans     WHERE type = 'VYBER KARTOU'     AND date >= '1998-01-01' AND date < '1999-01-01'     GROUP BY account_id ) as monthly_spending ON t.account_id = monthly_spending.account_id WHERE t.type = 'VYBER KARTOU' AND t.date >= '1998-01-01' AND t.date < '1999-01-01' AND t.amount < monthly_spending.total_spent	financial
SELECT DISTINCT c.client_id FROM client c JOIN account a ON c.client_id = a.district_id JOIN disp d ON a.account_id = d.account_id JOIN card crd ON d.disp_id = crd.disp_id JOIN loan ln ON a.account_id = ln.account_id WHERE c.gender = 'F' AND crd.type = 'Credit Card';	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia';	financial
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Tabor' AND a.frequency = 'OWNER';	financial
SELECT DISTINCT d.type FROM account a JOIN disp d ON a.account_id = d.account_id JOIN district dt ON a.district_id = dt.district_id WHERE d.type != 'OWNER' AND dt.A11 BETWEEN 8000 AND 9000;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';	financial
SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';	financial
SELECT AVG(crime_count) AS average_crimes FROM (     SELECT A15 AS crime_count     FROM district     WHERE A3 IN (         SELECT A3         FROM district         WHERE A15 > 4000     )     AND EXISTS (         SELECT 1         FROM account         WHERE account.district_id = district.district_id         AND YEAR(date) >= 1997     ) ) AS crime_counts_with_accounts;	financial
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND account.frequency = 'OWNER';	financial
SELECT COUNT(c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Hl.m. Praha' AND c.gender = 'M';	financial
SELECT      (SUM(CASE WHEN c.type = 'Gold' AND c.issued < '1998-01-01' THEN 1 ELSE 0 END) * 100.0) /      COUNT(c.card_id) AS percentage_gold_cards_issued_before_1998 FROM      card c;	financial
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan);	financial
SELECT d.A15 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id = 532 AND d.A15 IS NOT NULL;	financial
SELECT account.district_id FROM account JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;	financial
SELECT t.account_id, t.date, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.client_id = 3356 AND t.operation = 'VYBER';	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;	financial
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 13539;	financial
SELECT d.A3 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.client_id = 3541;	financial
SELECT d.A2 AS district, COUNT(a.account_id) AS total_accounts FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY total_accounts DESC LIMIT 1;	financial
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423;	financial
SELECT t.trans_id, t.date, t.type, t.amount, t.balance, t.k_symbol FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A2 = '5';	financial
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');	financial
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cr ON d.disp_id = cr.disp_id WHERE cr.type = 'junior' AND cr.issued >= '1997-01-01';	financial
SELECT      ROUND((COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_female FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A11 > 10000;	financial
SELECT     ROUND(((SUM(CASE WHEN L.date BETWEEN '1997-01-01' AND '1997-12-31' THEN L.amount ELSE 0 END) -             SUM(CASE WHEN L.date BETWEEN '1996-01-01' AND '1996-12-31' THEN L.amount ELSE 0 END)) /             SUM(CASE WHEN L.date BETWEEN '1996-01-01' AND '1996-12-31' THEN L.amount ELSE 0 END) * 100), 2) AS growth_rate FROM     loan L JOIN     client C ON L.account_id IN (SELECT account_id FROM account A JOIN client C ON A.district_id = C.district_id WHERE C.gender = 'M') WHERE     L.date BETWEEN '1996-01-01' AND '1997-12-31';	financial
SELECT COUNT(*) FROM trans WHERE type = 'VYBER KARTOU' AND date > '1995-01-01';	financial
SELECT      (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') -      (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference FROM district;	financial
SELECT COUNT(DISTINCT d.disp_id) AS total_dispositions FROM disp d WHERE d.account_id BETWEEN 1 AND 10;	financial
-- Query to find how often account number 3 requests an account statement to be released SELECT COUNT(*) AS statement_requests FROM account WHERE account_id = 3 AND frequency = 'statement';  -- Query to find the total amount debited for 'k_symbol' '3539' SELECT SUM(amount) AS total_debit FROM trans WHERE k_symbol = '3539' AND account_id = 3;	financial
SELECT YEAR(client.birth_date) as birth_year FROM client WHERE client_id = 130;	financial
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND t.operation IS NOT NULL;	financial
SELECT      SUM(l.amount) AS total_debt,     AVG(l.payments) AS avg_payments FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.client_id = 992 GROUP BY      c.client_id;	financial
SELECT      SUM(t.amount) AS total_sum,     c.gender FROM      trans t JOIN      account a ON t.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      t.trans_id = 851 AND     c.client_id = 4 GROUP BY      c.gender;	financial
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 9;	financial
SELECT SUM(t.amount) AS total_payment FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 617 AND t.date BETWEEN '1998-01-01' AND '1998-12-31';	financial
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A5 = 'East Bohemia';	financial
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3;	financial
SELECT COUNT(DISTINCT c.client_id) AS male_home_payments_over_4000 FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.type = 'Payment' AND t.operation = 'SIPO' AND t.amount > 4000;	financial
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';	financial
SELECT COUNT(c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior';	financial
SELECT      (SELECT COUNT(*)       FROM client c       JOIN district d ON c.district_id = d.district_id       WHERE c.gender = 'F' AND d.A3 = 'Prague') * 100.0 /      (SELECT COUNT(*)       FROM client c       JOIN district d ON c.district_id = d.district_id       WHERE d.A3 = 'Prague') AS female_proportion;	financial
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0) / COUNT(CASE WHEN c.gender = 'M' THEN 1 END + COUNT(CASE WHEN c.gender != 'M' THEN 1 END)) AS male_clients_percentage FROM      client c JOIN      account a ON c.district_id = a.district_id WHERE      a.frequency = 'POPLATEK TYDNE';	financial
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE';	financial
SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' AND a.account_id IN (     SELECT account_id     FROM loan     WHERE duration > 24     ORDER BY amount ASC     LIMIT 1 );	financial
SELECT DISTINCT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'F' AND c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE gender = 'F' ) AND a.account_id IN (     SELECT account_id     FROM district     ORDER BY A11 ASC     LIMIT 1 );	financial
SELECT COUNT(c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND d.A3 = 'East Bohemia';	financial
SELECT COUNT(DISTINCT l.account_id) AS loan_accounts FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.duration = 24;	financial
SELECT      t.date AS transaction_date,     AVG(l.amount) AS average_loan_amount FROM      trans t JOIN      loan l ON t.account_id = l.account_id WHERE      l.status IN ('C', 'D') AND      t.k_symbol = 'POPLATEK PO OBRATU' GROUP BY      t.date;	financial
SELECT c.client_id, d.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'permanent';	financial
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE cr.type = 'gold' AND l.status = 'eligible';	financial
SELECT bond_type, COUNT(bond_type) AS bond_count FROM bond GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' AND a.element = 'cl';	toxicology
SELECT AVG(COUNT(CASE WHEN a.element = 'O' THEN 1 ELSE NULL END)) AS avg_oxygen_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '-' GROUP BY a.molecule_id;	toxicology
SELECT AVG(CASE WHEN m.label = '+' THEN      COUNT(b.bond_id)  END)  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-';	toxicology
SELECT COUNT(a.atom_id)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = '-' AND a.element = 'na';	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+' AND EXISTS (     SELECT 1     FROM connected c     WHERE c.bond_id = b.bond_id     GROUP BY c.bond_id     HAVING COUNT(c.bond_id) = 3 );	toxicology
SELECT      (SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) / COUNT(a.atom_id)) * 100 AS percentage_of_carbon FROM      atom a JOIN      bond b ON a.molecule_id = b.molecule_id WHERE      b.bond_type = ' = '	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '#' AND bond_id IN (SELECT bond_id FROM connected);	toxicology
SELECT COUNT(DISTINCT a.atom_id) FROM atom a WHERE a.element <> 'br' AND a.molecule_id IN (     SELECT m.molecule_id     FROM molecule m     WHERE m.label LIKE '%br%' )	toxicology
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND a.element IN ('c', 'o', 's', 'n', 'p', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')	toxicology
SELECT m.label, COUNT(a.atom_id) AS count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY count DESC LIMIT 1;	toxicology
SELECT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'te';	toxicology
SELECT DISTINCT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b ON c1.bond_id = b.bond_id JOIN atom a2 ON a1.atom_id != a2.atom_id AND a2.atom_id = c1.atom_id2 WHERE b.bond_type = '-';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-';	toxicology
SELECT element, COUNT(*) as count FROM atom WHERE molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '-' ) GROUP BY element ORDER BY count ASC LIMIT 1;	toxicology
SELECT b.bond_type FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON a2.atom_id = c.atom_id2 WHERE a1.atom_id = 'TR004_8' AND a2.atom_id = 'TR004_20';	toxicology
SELECT m.label FROM molecule m WHERE m.molecule_id NOT IN (     SELECT c.atom_id     FROM connected c     JOIN atom a ON c.atom_id = a.atom_id     WHERE a.element != 'sn' ) UNION SELECT m.label FROM molecule m WHERE m.label = '+' AND m.molecule_id NOT IN (     SELECT c.atom_id     FROM connected c     JOIN atom a ON c.atom_id = a.atom_id     WHERE a.element != 'sn' );	toxicology
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element IN ('i', 's') AND b.bond_type = '-';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.label = 'TR181';	toxicology
SELECT      (SUM(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) / COUNT(molecule.molecule_id)) * 100 AS percent_carcinogenic_no_fluorine FROM      atom JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      molecule.label = '+'	toxicology
SELECT      (SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) * 100.0) / COUNT(bond.bond_id) AS percent FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.label = '+' AND bond.bond_type = '#';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR000' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') ORDER BY a.element ASC LIMIT 3;	toxicology
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = 'TR001';	toxicology
SELECT      (SELECT COUNT(*) FROM molecule WHERE label = '+') -      (SELECT COUNT(*) FROM molecule WHERE label = '-')	toxicology
SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR_000_2_5';	toxicology
SELECT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.atom_id2 = 'TR000_2';	toxicology
SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id, m.label ORDER BY m.label ASC LIMIT 5;	toxicology
SELECT      (SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0) / COUNT(bond.bond_id) AS percent FROM      bond WHERE      bond.molecule_id = 'TR008';	toxicology
SELECT     CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(m.molecule_id) * 100 AS percent FROM     molecule m	toxicology
SELECT      (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(a.atom_id) AS percent FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id WHERE      c.molecule_id = 'TR206'	toxicology
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR000';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND m.molecule_id = 'TR060';	toxicology
SELECT     bond_type,     COUNT(bond_type) AS bond_count,     CASE          WHEN m.label = '+' THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS carcinogenicity FROM     bond JOIN     molecule ON bond.molecule_id = molecule.molecule_id WHERE     bond.molecule_id = 'TR018' GROUP BY     bond_type ORDER BY     bond_count DESC LIMIT 1;	toxicology
SELECT m.label, COUNT(DISTINCT m.molecule_id) AS single_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '-' AND b.bond_type = '-' AND c.atom_id <> c.atom_id2 GROUP BY m.label ORDER BY single_bond_count DESC, m.label ASC LIMIT 3;	toxicology
SELECT b.bond_type, COUNT(b.bond_id) AS bond_count FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR006' GROUP BY b.bond_type ORDER BY bond_count DESC, b.bond_type ASC LIMIT 2;	toxicology
SELECT COUNT(*) FROM bond WHERE bond.molecule_id LIKE 'TR009_%' AND (bond.bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')       OR bond.bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12'));	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';	toxicology
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_6_9';	toxicology
SELECT m.label AS molecule_label,         CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS carcinogenicity FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#';	toxicology
SELECT COUNT(DISTINCT c.bond_id) AS connection_count FROM connected c WHERE c.atom_id = 'TR%_19' OR c.atom_id2 = 'TR%_19';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR004' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT COUNT(*) FROM molecule WHERE label = '-';	toxicology
SELECT DISTINCT m.molecule_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+';	toxicology
SELECT b.bond_id FROM bond b JOIN atom a1 ON b.atom_id = a1.atom_id JOIN atom a2 ON b.atom_id2 = a2.atom_id WHERE a1.element = 'p' AND a2.element = 'n';	toxicology
SELECT m.molecule_id, m.label, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id HAVING m.label = '+' ORDER BY double_bond_count DESC LIMIT 1;	toxicology
SELECT AVG(COUNT(b.bond_id)) / COUNT(a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'i' GROUP BY a.atom_id;	toxicology
SELECT bond.bond_id, bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.atom_id = '45' AND SUBSTR(atom.atom_id, 7, 2) + 0 = 45;	toxicology
SELECT a.atom_id, a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND c.atom_id IS NULL;	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON b.bond_id = c.bond_id JOIN molecule m ON m.molecule_id = a.molecule_id OR m.molecule_id = c.molecule_id WHERE m.label = 'TR447' AND b.bond_type = '#';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR144_8_19';	toxicology
SELECT      m.molecule_id,      COUNT(b.bond_type) AS double_bond_count FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      m.label = '+' AND      b.bond_type = ' = ' GROUP BY      m.molecule_id ORDER BY      double_bond_count DESC LIMIT 1;	toxicology
SELECT element, COUNT(*) AS frequency FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY frequency ASC LIMIT 1;	toxicology
SELECT DISTINCT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'pb' AND c.bond_id IS NOT NULL;	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a.element IN ('c', 'n', 'o', 's', 'p', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT      (COUNT(bond.bond_id) /      (SELECT COUNT(DISTINCT a1.atom_id)       FROM atom a1       INNER JOIN connected c ON a1.atom_id = c.atom_id       INNER JOIN bond ON c.bond_id = bond.bond_id       WHERE a1.element = (SELECT element                           FROM atom                           WHERE atom_id = (SELECT MAX(COUNT(atom_id))                                           FROM connected                                           GROUP BY atom_id                                           ORDER BY COUNT(atom_id) DESC                                           LIMIT 1))                           AND a1.element = (SELECT element                                            FROM atom                                            WHERE atom_id = (SELECT MAX(COUNT(atom_id))                                                            FROM connected                                                            GROUP BY atom_id                                                            ORDER BY COUNT(atom_id) DESC                                                            LIMIT 1))))) * 100 AS percentage_of_common_bonds FROM bond;	toxicology
SELECT     COUNT(CASE WHEN bond.bond_type = '-' THEN bond.bond_id END) AS single_bonds_count,     COUNT(CASE WHEN bond.bond_id IN (SELECT bond_id FROM connected WHERE bond_id IS NOT NULL) AND bond.bond_type = '-' THEN bond.bond_id END) AS carcinogenic_single_bonds_count FROM     bond JOIN     connected ON bond.bond_id = connected.bond_id JOIN     molecule ON bond.molecule_id = molecule.molecule_id WHERE     molecule.label = '+' GROUP BY     bond.molecule_id HAVING     COUNT(CASE WHEN bond.bond_id IN (SELECT bond_id FROM connected WHERE bond_id IS NOT NULL) THEN bond.bond_id END) > 0	toxicology
SELECT COUNT(DISTINCT a.atom_id) AS total_carbon_hydrogen_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element IN ('C', 'H');	toxicology
SELECT DISTINCT c.atom_id2  FROM connected c  JOIN atom a ON c.atom_id = a.atom_id  WHERE a.element = 's';	toxicology
SELECT b.bond_type FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id AND a.element = 'sn';	toxicology
SELECT COUNT(DISTINCT a.element)  FROM atom a JOIN bond b ON a.atom_id = b.atom_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND a.molecule_id = c.atom_id2 GROUP BY a.element;	toxicology
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE (a.element = 'p' OR a.element = 'br')  AND b.bond_type = '#' AND EXISTS (     SELECT 1     FROM connected c2     JOIN bond b2 ON c2.bond_id = b2.bond_id     WHERE c2.atom_id = c.atom_id OR c2.atom_id2 = c.atom_id     AND b2.bond_type = '#'     AND c2.bond_id <> c.bond_id );	toxicology
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+';	toxicology
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-';	toxicology
SELECT      ROUND(DIVIDE(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END), COUNT(a.atom_id)), 2) AS percent FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '-';	toxicology
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-';	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030'  AND m.label = '+';	toxicology
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11';	toxicology
SELECT COUNT(c.bond_id) FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'i';	toxicology
SELECT      m.molecule_id,     CASE          WHEN MAX(CASE WHEN a.element = 'ca' THEN b.label END) = '+' THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS carcinogenicity FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id JOIN      bond b ON a.atom_id = b.bond_id WHERE      a.element = 'ca' GROUP BY      m.molecule_id;	toxicology
SELECT COUNT(DISTINCT a.atom_id) = 2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_1_8' AND (a.element = 'cl' OR a.element = 'c');	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.atom_id = b.molecule_id WHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-' AND EXISTS (     SELECT 1     FROM connected c     WHERE c.atom_id = a.atom_id     AND c.bond_id = b.bond_id ) AND EXISTS (     SELECT 1     FROM connected c     WHERE c.atom_id2 = a.atom_id     AND c.bond_id = b.bond_id ) LIMIT 2;	toxicology
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100 AS percentage_of_chlorine_in_carcinogens FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+'	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR001';	toxicology
SELECT DISTINCT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ';	toxicology
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND c.atom_id < c.atom_id2;	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '-' AND b.bond_type = '-';	toxicology
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11';	toxicology
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '+';	toxicology
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.atom_id = m.molecule_id WHERE m.label = '+' AND c.atom_id = SUBSTR(a.atom_id, 7, 1) = '4' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT      m.label,     CASE          WHEN SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) = 0 THEN NULL          ELSE SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.atom_id)      END AS hydrogen_ratio FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.molecule_id = 'TR006' AND      a.element = 'h' GROUP BY      m.label;	toxicology
SELECT m.label AS molecule_label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' AND m.label = '+';	toxicology
SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';	toxicology
SELECT DISTINCT a.element AS Element1, a2.element AS Element2 FROM atom a JOIN atom a2 ON a.atom_id = SUBSTR('TR001_10_11', 7, 2) OR a.atom_id = SUBSTR('TR001_10_11', 10, 2) JOIN bond b ON b.bond_id = 'TR001_10_11' JOIN connected c ON c.bond_id = b.bond_id JOIN atom a3 ON a3.atom_id = c.atom_id OR a3.atom_id = c.atom_id2 WHERE a3.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a3.atom_id = a.atom_id OR a3.atom_id = a2.atom_id	toxicology
SELECT      (SELECT COUNT(*)       FROM bond       WHERE bond_type = '#') /      (SELECT COUNT(DISTINCT molecule_id)       FROM molecule) * 100 AS triple_bond_percentage;	toxicology
SELECT      COUNT(CASE WHEN bond.bond_type = ' = ' THEN 1 END) * 100.0 / COUNT(bond.bond_id) AS percent FROM      bond JOIN      connected ON bond.bond_id = connected.bond_id JOIN      molecule ON connected.molecule_id = molecule.molecule_id WHERE      molecule.label = 'TR047';	toxicology
SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR001_1' AND m.label = '+';	toxicology
SELECT CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS carcinogenic_status FROM molecule m WHERE m.label = '+' AND m.molecule_id = 'TR151';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.label = 'TR151' AND a.element IN ('cl', 'na', 'br', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m WHERE m.label = '+';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.molecule_id LIKE 'TR01%' AND m.molecule_id LIKE 'TR050%';	toxicology
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';	toxicology
SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ';	toxicology
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'h'	toxicology
SELECT c.molecule_id FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR00_1_2' AND c.atom_id = (SELECT atom_id FROM atom WHERE label = 'TR00_1');	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label != '-';	toxicology
SELECT      ROUND(         (SUM(CASE WHEN a.element = 'h' AND m.label = '+' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100.0,         2     ) AS percentage_carcinogenic_hydrogen_molecules FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.element = 'h' AND m.label = '+';	toxicology
SELECT COUNT(*) > 0 AS IsCarcinogenic FROM molecule WHERE label = '+' AND molecule_id = 'TR124';	toxicology
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.molecule_id = 'TR186';	toxicology
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR007_4_19';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_4';	toxicology
SELECT      COUNT(c.bond_id) AS double_bond_count,     m.label AS carcinogenicity FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = ' = ' AND m.label = '+'     AND m.label IN ('+', '-')     AND m.molecule_id = 'TR006';	toxicology
SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT b.bond_id, a1.atom_id AS atom1_id, a2.atom_id AS atom2_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';	toxicology
SELECT m.label AS Molecule, GROUP_CONCAT(a.element ORDER BY a.element) AS Elements FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id, m.label;	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR000_2_3';	toxicology
SELECT COUNT(*) FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'cl' UNION SELECT COUNT(*) FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'cl';	toxicology
SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_types_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR346' GROUP BY a.atom_id;	toxicology
SELECT COUNT(DISTINCT m.molecule_id) AS double_bonded_carcinogenic_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' AND m.label = '+';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 's' LEFT JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' WHERE a.atom_id IS NULL AND b.bond_id IS NULL;	toxicology
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4' AND m.label = '+';	toxicology
SELECT COUNT(DISTINCT a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.molecule_id = 'TR005';	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '-';	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';	toxicology
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label <> '-';	toxicology
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0) /      COUNT(DISTINCT m.molecule_id) AS percentage FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+'	toxicology
SELECT molecule_id  FROM bond  WHERE bond_id = 'TR001_1_7';	toxicology
SELECT COUNT(DISTINCT a.element) AS distinct_elements_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_3_4';	toxicology
SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';	toxicology
SELECT m.label AS molecule FROM molecule m JOIN atom a1 ON m.molecule_id = a1.molecule_id WHERE a1.atom_id = 'TR000_2' UNION SELECT m.label AS molecule FROM molecule m JOIN atom a2 ON m.molecule_id = a2.molecule_id WHERE a2.atom_id = 'TR000_4';	toxicology
SELECT atom.element  FROM atom  WHERE atom.atom_id = 'TR000_1';	toxicology
SELECT m.label AS molecule_label FROM molecule m WHERE m.molecule_id = 'TR000';	toxicology
SELECT      ROUND(DIVIDE(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END), COUNT(a.atom_id)), 2) AS percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id;	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE a.element = 'n'  AND m.label = '+';	toxicology
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 's' AND b.bond_type = '=';	toxicology
SELECT m.molecule_id, m.label FROM molecule m JOIN (     SELECT c.atom_id     FROM connected c     GROUP BY c.atom_id     HAVING COUNT(c.bond_id) > 5 ) connected_atoms ON m.molecule_id = connected_atoms.atom_id WHERE m.label = '-';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR024' AND b.bond_type = '=';	toxicology
SELECT      m.molecule_id,      COUNT(a.atom_id) AS atom_count FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+' GROUP BY      a.molecule_id ORDER BY      atom_count DESC LIMIT 1;	toxicology
SELECT      ROUND((SUM(CASE WHEN a.element = 'h' AND b.bond_type = '#' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100.0, 2) AS percentage_carcinogenic_with_triple_bonded_H FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+';	toxicology
SELECT COUNT(*) FROM molecule WHERE label = '+';	toxicology
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND EXISTS (     SELECT 1     FROM bond     WHERE bond.molecule_id = molecule.molecule_id     AND bond.bond_type = '-' )	toxicology
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = 'TR008' AND a.element = 'c';	toxicology
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');	toxicology
SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bonded_oxygen_molecules FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a.element = 'o' AND b.bond_type = ' = ' AND a2.element = 'o';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-';	toxicology
SELECT      a.element,      b.bond_type FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.molecule_id = 'TR016';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR012' AND a.element = 'c' AND b.bond_type = ' = ';	toxicology
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'o' JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2;	toxicology
SELECT c.name FROM cards c WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL;	card_games
SELECT c.id, c.name FROM cards c WHERE c.borderColor IS NULL AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NULL;	card_games
SELECT c.name FROM cards c WHERE c.convertedManaCost < c.faceConvertedManaCost ORDER BY c.convertedManaCost DESC;	card_games
SELECT name FROM cards WHERE edhrecRank < 100 AND frameVersion = '2015';	card_games
SELECT c.name, c.mtgoId FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';	card_games
SELECT l.format, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';	card_games
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal';	card_games
SELECT      c.name,     r.text AS ruling_text,     c.hasContentWarning AS has_content_warning FROM      cards c JOIN      rulings r ON c.uuid = r.uuid JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      c.artist = 'Stephen Daniel' AND      fd.name = c.name AND      c.hasContentWarning = 1;	card_games
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';	card_games
SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;	card_games
SELECT f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Annul' AND c.number = '29';	card_games
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese';	card_games
SELECT     (SUM(CASE WHEN c.language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id) AS percentageChineseSimplified FROM     cards c;	card_games
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';	card_games
SELECT COUNT(DISTINCT type) AS card_types_count FROM cards WHERE artist = 'Aaron Boyd';	card_games
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';	card_games
SELECT COUNT(*) FROM cards WHERE power = '*';	card_games
SELECT promoTypes  FROM cards  WHERE name = 'Duress';	card_games
SELECT borderColor  FROM cards  WHERE name = 'Ancestor''s Chosen';	card_games
SELECT originalType  FROM cards  WHERE name = 'Ancestor''s Chosen' AND isReprint = 0;	card_games
SELECT DISTINCT st.language FROM cards c JOIN sets s ON c.mcmId = s.mcmId JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Angel of Mercy';	card_games
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;	card_games
SELECT rulings.text AS ruling_description FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Condemn';	card_games
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;	card_games
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Cloudchaser Eagle';	card_games
SELECT type FROM cards WHERE name = 'Benalish Knight';	card_games
SELECT r.text AS ruling_text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Benalish Knight' AND r.text LIKE '%Rule%';	card_games
SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';	card_games
SELECT      (SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless') * 100.0 /      (SELECT COUNT(*) FROM cards) AS borderless_percentage;	card_games
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND uuid IN (     SELECT uuid     FROM foreign_data     WHERE language = 'Russian' );	card_games
SELECT      (COUNT(CASE WHEN cards.uuid = legalities.uuid AND legalities.language = 'French' THEN 1 END) * 100.0) /      COUNT(CASE WHEN cards.uuid = legalities.uuid THEN 1 END) AS percentage_french_story_spotlight FROM      cards JOIN      legalities ON cards.uuid = legalities.uuid WHERE      cards.isStorySpotlight = 1	card_games
SELECT COUNT(*) FROM cards WHERE toughness = '99';	card_games
SELECT DISTINCT name  FROM cards  WHERE artist = 'Aaron Boyd';	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';	card_games
SELECT id FROM cards WHERE convertedManaCost = 0;	card_games
SELECT DISTINCT layout FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.keywords LIKE '%flying%';	card_games
SELECT COUNT(*) FROM cards WHERE type LIKE '%Summon - Angel%' AND subtypes NOT LIKE '%Angel%'	card_games
SELECT c.id FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.hasFoil = 1 AND c.hasNonFoil = 1 AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL;	card_games
SELECT id  FROM cards  WHERE duelDeck = 'a';	card_games
SELECT edhrecRank  FROM cards  WHERE frameVersion = '2015';	card_games
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Chinese Simplified';	card_games
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.uuid = s.uuid WHERE c.availability = 'paper' AND l.format = 'paper' AND s.code LIKE '%JPN%' AND NOT EXISTS (     SELECT 1     FROM legalities l2     WHERE l2.uuid = c.uuid     AND l2.format = 'MTGO'     AND l2.status = 'Legal' ) AND NOT EXISTS (     SELECT 1     FROM legalities l3     WHERE l3.uuid = c.uuid     AND l3.format = 'Paper'     AND l3.status = 'Banned' );	card_games
SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white';	card_games
SELECT c.uuid, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy';	card_games
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality';	card_games
SELECT COUNT(*) AS total_cards_with_future_frame_version,         GROUP_CONCAT(DISTINCT legalities.status ORDER BY legalities.status) AS legality_statuses FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' AND legalities.status = 'legal';	card_games
SELECT cards.name, cards.colors FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';	card_games
SELECT c.name, st.language FROM cards c JOIN set_translations st ON c.uuid = st.uuid JOIN sets s ON c.uuid = s.uuid WHERE s.code = '10E' AND c.convertedManaCost = 5;	card_games
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';	card_games
SELECT cards.colors, legalities.format FROM cards LEFT JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;	card_games
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language != 'en';	card_games
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'Uncommon' ORDER BY r.date ASC LIMIT 3;	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND power IS NULL;	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';	card_games
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;	card_games
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';	card_games
SELECT SUM(CASE WHEN artist = 'Rob Alexander' THEN CAST(manaCost AS REAL) ELSE 0 END) AS total_unconverted_mana_cost FROM cards;	card_games
SELECT DISTINCT type FROM cards WHERE availability = 'arena';	card_games
SELECT s.code FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Spanish';	card_games
SELECT      ROUND((COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) * 100.0) / COUNT(cards.id), 2) AS percentage_of_legendary_with_max_hand_size_plus3 FROM      cards WHERE      cards.frameEffects = 'legendary'	card_games
SELECT     c.id,     (SUM(CASE WHEN c.isStorySpotlight = 1 AND c.isTextless = 1 THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN c.isStorySpotlight = 1 THEN 1 ELSE 0 END) AS StorySpotlightTextlessPercentage FROM     cards c GROUP BY     c.id ORDER BY     c.id;	card_games
SELECT cards.name,         (SUM(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0) / COUNT(cards.id) AS percentage_Spanish FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid GROUP BY cards.name ORDER BY percentage_Spanish DESC;	card_games
SELECT DISTINCT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309;	card_games
SELECT COUNT(DISTINCT s.code) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';	card_games
SELECT id FROM cards WHERE type LIKE '%Creature%' AND uuid IN (SELECT uuid FROM legalities WHERE status = 'legal');	card_games
SELECT DISTINCT      cards.name,     COALESCE(cards.subtypes, '') || ' ' || COALESCE(cards.supertypes, '') AS card_type FROM      cards JOIN      set_translations ON cards.setCode = set_translations.setCode JOIN      sets ON sets.code = cards.setCode WHERE      sets.name = 'German' AND     cards.subtypes IS NOT NULL AND     cards.supertypes IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE power IS NULL AND (text LIKE '%[Triggered Ability]%');	card_games
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'Pre-Modern' AND legalities.status = 'Legal' AND cards.side IS NULL AND rulings.text LIKE '%triggered mana ability%' AND NOT EXISTS (     SELECT 1     FROM foreign_data     WHERE foreign_data.uuid = cards.uuid );	card_games
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability = 'paper';	card_games
SELECT cards.artist  FROM cards  JOIN foreign_data ON cards.uuid = foreign_data.uuid  WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation';	card_games
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black' AND fd.language = 'French' AND c.artist = 'Matthew D. Wilson';	card_games
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10';	card_games
SELECT t.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';	card_games
SELECT      ROUND((COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0) / COUNT(c.id), 2) AS percentage FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.type LIKE '%Commander%'     AND l.status = 'legal';	card_games
SELECT      (COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END AND f.language = 'French') * 100.0) /      COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END)  FROM      cards c  JOIN      foreign_data f ON c.uuid = f.uuid	card_games
SELECT      (SELECT COUNT(*)       FROM sets       WHERE type = 'expansion' AND EXISTS         (SELECT 1           FROM set_translations           WHERE sets.code = set_translations.setCode AND language = 'Japanese'))      /     (SELECT COUNT(*)       FROM set_translations       WHERE language = 'Japanese') * 100 AS percentage_japanese_expansion_sets	card_games
SELECT cards.availability  FROM cards  WHERE cards.artist = 'Daren Bader';	card_games
SELECT COUNT(*) FROM cards WHERE colorIdentity IS NOT NULL AND borderColor = 'borderless' AND edhrecRank > 12000;	card_games
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;	card_games
SELECT c.name, c.uuid FROM cards c WHERE c.power IS NULL OR c.power = '*' AND c.promoTypes LIKE '%arenaleague%' ORDER BY c.name ASC LIMIT 3;	card_games
SELECT language FROM foreign_data WHERE multiverseid = 149934;	card_games
SELECT card_kingdom_foil_id, card_kingdom_id FROM cards WHERE card_kingdom_foil_id IS NOT NULL AND card_kingdom_id IS NOT NULL ORDER BY card_kingdom_foil_id ASC LIMIT 3;	card_games
SELECT      ROUND((COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 END) / COUNT(c.id)) * 100, 2) AS proportion_textless_normal_layout FROM      cards c;	card_games
SELECT c.number FROM cards c WHERE c.subtypes LIKE '%Angel%'   AND c.subtypes LIKE '%Wizard%'   AND c.otherFaceIds IS NULL;	card_games
SELECT s.name, s.code FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;	card_games
SELECT DISTINCT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';	card_games
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;	card_games
SELECT s.language, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206;	card_games
SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' GROUP BY s.id, s.name ORDER BY s.name ASC LIMIT 2;	card_games
SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN foreign_data fd ON st.setCode = fd.multiverseid WHERE s.isForeignOnly = 1 AND s.isFoilOnly = 1 AND fd.language = 'Japanese';	card_games
SELECT s.name, MAX(s.baseSetSize) AS most_cards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' GROUP BY s.name ORDER BY most_cards DESC LIMIT 1;	card_games
SELECT      ROUND((COUNT(CASE WHEN c.isOnlineOnly = 1 THEN 1 END) * 100.0) / COUNT(*), 2) AS online_only_percentage FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Chinese Simplified';	card_games
SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese') AND (mtgoCode IS NULL OR mtgoCode = '');	card_games
SELECT id FROM cards WHERE borderColor = 'black';	card_games
SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id;	card_games
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;	card_games
SELECT language FROM set_translations WHERE setCode = '174';	card_games
SELECT name FROM sets WHERE code = 'ALL';	card_games
SELECT DISTINCT f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'A Pedra Fellwar';	card_games
SELECT code FROM sets WHERE releaseDate = '2007-07-13';	card_games
SELECT s.baseSetSize, s.code FROM sets s WHERE s.block IN ('Masques', 'Mirage');	card_games
SELECT code  FROM sets  WHERE type = 'expansion';	card_games
SELECT      f.name AS foreign_name,      c.type AS card_type FROM      cards AS c JOIN      foreign_data AS f ON c.uuid = f.uuid WHERE      c.watermark = 'Boros'	card_games
SELECT f.language, f.flavorText, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'Colorpie';	card_games
SELECT      ROUND((COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 ELSE NULL END) * 100.0) / COUNT(*), 2) AS percentageOfCMC10 FROM      cards c JOIN      sets s ON c.mcmId = s.mcmId WHERE      s.name = 'Abyssal Horror';	card_games
SELECT s.code FROM sets s WHERE s.type = 'Expansion' AND s.name LIKE '%Commander%';	card_games
SELECT      f.name,      c.type FROM      foreign_data f JOIN      cards c ON f.uuid = c.uuid WHERE      c.watermark = 'Abzan';	card_games
SELECT      f.language,      c.type FROM      cards c JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      fd.watermark = 'Azorius'	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+%';	card_games
SELECT name  FROM cards  WHERE isTextless = 0;	card_games
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'W' AND (power = '*' OR power IS NULL);	card_games
SELECT cards.name FROM cards WHERE cards.isPromo = 1 AND cards.side IS NOT NULL;	card_games
SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';	card_games
SELECT c.purchaseUrls FROM cards c WHERE c.promoTypes = 'bundle';	card_games
SELECT COUNT(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%' AND cardkingdomId IS NOT NULL AND mtgoId IS NOT NULL;	card_games
SELECT      CASE          WHEN MAX(c1.convertedManaCost) > MAX(c2.convertedManaCost) THEN 'Serra Angel'         WHEN MAX(c1.convertedManaCost) < MAX(c2.convertedManaCost) THEN 'Shrine Keeper'         ELSE 'Both cost the same'     END AS CardWithHigherManaCost FROM      (SELECT MAX(convertedManaCost) AS convertedManaCost FROM cards WHERE name = 'Serra Angel') AS c1,     (SELECT MAX(convertedManaCost) AS convertedManaCost FROM cards WHERE name = 'Shrine Keeper') AS c2;	card_games
SELECT cards.artist FROM cards WHERE cards.flavorName = 'Battra, Dark Destroyer';	card_games
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;	card_games
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.set WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';	card_games
SELECT COUNT(*) AS translation_count FROM cards JOIN sets ON cards.mtgoFoilId = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Angel of Mercy';	card_games
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON c.setCode = s.code WHERE st.translation = 'Hauptset Zehnte Edition';	card_games
SELECT c.name, f.name AS koreanName FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Ancestor''s Chosen' AND f.language = 'Korean';	card_games
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';	card_games
SELECT SUM(baseSetSize) AS totalCardsInBaseSet FROM sets WHERE name = 'Hauptset Zehnte Edition';	card_games
SELECT translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese' LIMIT 1;	card_games
SELECT c.name FROM cards c JOIN sets s ON c.name = 'Angel of Mercy' WHERE s.mtgoCode IS NOT NULL;	card_games
SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';	card_games
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition';	card_games
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';	card_games
SELECT      c.name AS card_name,      s.name AS set_name,      s.isForeignOnly FROM      cards c JOIN      sets s ON c.mcmId = s.mcmId WHERE      c.name = 'Adarkar Valkyrie' AND      s.isForeignOnly = 1;	card_games
SELECT COUNT(*) FROM sets WHERE id IN (     SELECT s.id     FROM sets s     JOIN set_translations st ON s.code = st.setCode     WHERE st.language = 'Italian' AND s.baseSetSize < 10 );	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND name = 'Coldsnap';	card_games
SELECT c.name FROM cards c JOIN sets s ON c.mtgoFoilId = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;	card_games
SELECT DISTINCT artist FROM cards JOIN sets ON cards.name = 'Coldsnap' WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');	card_games
SELECT c.* FROM cards c JOIN sets s ON c.mcmId = s.mcmId WHERE c.number = '4' AND s.name = 'Coldsnap';	card_games
SELECT COUNT(*) FROM cards AS C JOIN sets AS S ON C.cardKingdomId = S.code WHERE C.convertedManaCost > 5 AND S.name = 'Coldsnap' AND (C.power = '*' OR C.power IS NULL);	card_games
SELECT flavorText FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen';	card_games
SELECT DISTINCT f.language FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND f.flavorText IS NOT NULL;	card_games
SELECT st.translation  FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON c.setCode = s.code WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'German';	card_games
SELECT cards.name, rulings.text AS italianRuling FROM cards JOIN set_translations ON cards.setCode = sets.code JOIN rulings ON cards.uuid = rulings.uuid JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';	card_games
SELECT f.name FROM cards c JOIN set_translations st ON c.code = st.setCode JOIN foreign_data f ON c.uuid = f.uuid WHERE st.language = 'Italian' AND c.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 10;	card_games
SELECT rulings.date FROM rulings JOIN cards ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce';	card_games
SELECT      (SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM      cards c JOIN      sets s ON c.name = 'Coldsnap' WHERE      c.convertedManaCost = 7;	card_games
SELECT     (SUM(CASE WHEN c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) /      (SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap') AS incrediblyPowerfulPercentage FROM     cards c WHERE     c.name = 'Coldsnap';	card_games
SELECT code  FROM sets  WHERE releaseDate = '2017-07-14';	card_games
SELECT `keyruneCode` FROM `sets` WHERE `code` = 'PKHC';	card_games
SELECT mcmId  FROM sets  WHERE code = 'SS2';	card_games
SELECT mcmName  FROM sets  WHERE releaseDate = '2017-06-09';	card_games
SELECT type FROM sets WHERE name LIKE 'From the Vault: Lore%'	card_games
SELECT parentCode  FROM sets  WHERE name = 'Commander 2014 Oversized';	card_games
SELECT      c.name,     r.text AS ruling_text,     CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasContentWarning,     c.artist FROM      cards c JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Jim Pavelec' ORDER BY      c.name;	card_games
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation';	card_games
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara';	card_games
SELECT type  FROM sets  JOIN set_translations ON sets.code = set_translations.setCode  WHERE set_translations.translation = 'Huitième édition';	card_games
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.name = 'Tendo Ice Bridge' AND st.language = 'French';	card_games
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL;	card_games
SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';	card_games
SELECT      c.name,     MAX(c.convertedManaCost) AS max_converted_mana_cost FROM      cards c JOIN      sets s ON c.mtgoId = s.mtgoId WHERE      s.name = 'Journey into Nyx Hero''s Path' GROUP BY      c.name ORDER BY      max_converted_mana_cost DESC LIMIT 1;	card_games
SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío';	card_games
SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim';	card_games
SELECT COUNT(*) FROM cards JOIN sets ON cards.uuid = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;	card_games
SELECT t.translation  FROM sets s  JOIN set_translations t ON s.code = t.setCode  WHERE s.name = 'Mirrodin' AND t.language = 'Chinese Simplified';	card_games
SELECT      (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN c.language = 'Japanese' THEN 1 ELSE 0 END) FROM      cards c JOIN      sets s ON c.mtgoId = s.mtgoCode JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Japanese'	card_games
SELECT      (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN c.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS onlineOnlyPercentage FROM      cards c JOIN      set_translations st ON c.uuid = st.uuid WHERE      st.language = 'Portuguese (Brazil)'	card_games
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Aleksi Briclot' AND c.isTextless = 1	card_games
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);	card_games
SELECT c.artist, c.convertedManaCost FROM cards c WHERE c.side IS NULL AND c.convertedManaCost = (     SELECT MAX(convertedManaCost)     FROM cards     WHERE side IS NULL ) ORDER BY c.convertedManaCost DESC LIMIT 1;	card_games
SELECT MAX(frameEffects) AS MostCommonFrameEffect FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;	card_games
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';	card_games
SELECT s.id FROM sets s WHERE s.type = 'commander'   AND s.totalSetSize IS NOT NULL ORDER BY s.totalSetSize DESC LIMIT 1;	card_games
SELECT c.name, c.manaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' AND c.manaCost IS NOT NULL ORDER BY c.manaCost DESC LIMIT 10;	card_games
SELECT      MIN(originalReleaseDate) AS OldestReleaseDate,     GROUP_CONCAT(DISTINCT legalities.format ORDER BY legalities.format) AS LegalPlayFormats FROM      cards JOIN      legalities ON cards.uuid = legalities.uuid WHERE      cards.rarity = 'mythic' AND      legalities.status = 'legal' GROUP BY      cards.uuid ORDER BY      OldestReleaseDate;	card_games
SELECT COUNT(DISTINCT c.id) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Volkan Baga' AND fd.language = 'French';	card_games
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal';	card_games
SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned' GROUP BY l.format, c.name ORDER BY COUNT(*) DESC LIMIT 1;	card_games
SELECT language FROM sets WHERE name = 'Battlebond';	card_games
SELECT      c.artist,      COUNT(*) AS card_count,     GROUP_CONCAT(DISTINCT l.format) AS formats FROM      cards c JOIN      legalities l ON c.uuid = l.uuid GROUP BY      c.artist HAVING      card_count = (SELECT MIN(card_count) FROM (SELECT          COUNT(*) AS card_count         FROM              cards c         JOIN              legalities l ON c.uuid = l.uuid         GROUP BY              c.artist) AS subquery)	card_games
SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND (cards.hasContentWarning = 1 OR legalities.status = 'Wizards of the Coast');	card_games
SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'banned';	card_games
SELECT      AVG(COUNT(DISTINCT s.code)) AS annual_avg_sets,     MAX(s.language) AS common_language FROM      sets s WHERE      s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY      YEAR(s.releaseDate);	card_games
SELECT DISTINCT c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.borderColor = 'black' AND c.availability = 'arena' AND l.format = 'Arena';	card_games
SELECT DISTINCT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';	card_games
SELECT r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;	card_games
SELECT c.name, l.format FROM cards c JOIN sets s ON c.mtgoFoilId = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal';	card_games
SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Korean' AND s.code NOT IN (     SELECT st.setCode     FROM set_translations st     WHERE st.language LIKE '%Japanese%' );	card_games
SELECT DISTINCT cards.frameVersion AS FrameStyle, cards.name AS CardName FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'banned';	card_games
SELECT      CASE          WHEN u.DisplayName = 'Harlan' THEN u.Reputation         WHEN u.DisplayName = 'Jarrod Dixon' THEN u.Reputation         ELSE NULL     END AS Reputation_Harlan,     CASE          WHEN u.DisplayName = 'Harlan' THEN NULL         WHEN u.DisplayName = 'Jarrod Dixon' THEN u.Reputation         ELSE NULL     END AS Reputation_Jarrod FROM users u WHERE u.DisplayName IN ('Harlan', 'Jarrod Dixon')	codebase_community
SELECT DisplayName  FROM users  WHERE YEAR(CreationDate) = 2014;	codebase_community
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'	codebase_community
SELECT DisplayName  FROM users  WHERE Views = (SELECT MAX(Views) FROM users);	codebase_community
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN votes v ON u.Id = v.UserId  WHERE v.VoteTypeId = 2 AND v.BountyAmount IS NULL  GROUP BY u.Id  HAVING SUM(v.BountyAmount) > 100  AND COUNT(CASE WHEN v.VoteTypeId = -2 THEN 1 END) > 1;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Views > 10 AND YEAR(u.CreationDate) > 2013;	codebase_community
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'csgillespie';	codebase_community
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT p.OwnerDisplayName FROM posts p WHERE p.Title = 'Eliciting priors from experts'	codebase_community
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;	codebase_community
SELECT p.OwnerDisplayName FROM posts p ORDER BY p.FavoriteCount DESC LIMIT 1;	codebase_community
SELECT SUM(c.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'	codebase_community
SELECT p.Id, p.AnswerCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.AnswerCount = (SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = u.Id)	codebase_community
SELECT p.LastEditorDisplayName FROM posts p WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';	codebase_community
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL	codebase_community
SELECT DISTINCT p.OwnerDisplayName FROM posts p WHERE p.ClosedDate IS NOT NULL;	codebase_community
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;	codebase_community
SELECT u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';	codebase_community
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';	codebase_community
SELECT p.Id, p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)	codebase_community
SELECT COUNT(*)  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND YEAR(Date) = 2011;	codebase_community
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1;	codebase_community
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT AVG(b.Id) / COUNT(DISTINCT u.DisplayName) AS avg_badges_per_user FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200;	codebase_community
SELECT      ROUND(         (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0) / COUNT(p.Id),         2     ) AS ElderUserPostPercentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 20;	codebase_community
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND CreationDate = '2010-07-19';	codebase_community
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;	codebase_community
SELECT COUNT('Id')  FROM badges  WHERE 'Name' = 'Revival';	codebase_community
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments)	codebase_community
SELECT COUNT(c.Id) AS CommentCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount = 1910;	codebase_community
SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0';	codebase_community
SELECT c.Text FROM comments c WHERE c.PostId = (SELECT p.Id FROM posts p WHERE p.Id = 107829) AND c.CommentCount = 1;	codebase_community
SELECT      p.Id AS PostId,      p.Title,      p.ClosedDate FROM      posts p JOIN      comments c ON p.Id = c.PostId JOIN      users u ON c.UserId = u.Id WHERE      u.Id = 23853      AND c.CreationDate = '2013-07-12 09:08:18.0'     AND p.ClosedDate IS NULL;	codebase_community
SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041);	codebase_community
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Tiago Pasqualini';	codebase_community
SELECT UserDisplayName FROM votes WHERE Id = 6347;	codebase_community
SELECT COUNT(v.Id) AS VoteCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data visualization%';	codebase_community
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';	codebase_community
SELECT      (COUNT(posts.Id) / COUNT(votes.Id)) AS PostVoteRatio FROM      posts LEFT JOIN      votes ON posts.Id = votes.PostId WHERE      posts.OwnerUserId = 24;	codebase_community
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';	codebase_community
SELECT Text FROM comments WHERE Score = 17;	codebase_community
SELECT DISTINCT u.DisplayName FROM users u WHERE u.WebsiteUrl = 'http://stackoverflow.com';	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost';	codebase_community
SELECT c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';	codebase_community
SELECT c.Text AS Comment FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';	codebase_community
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';	codebase_community
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';	codebase_community
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Necromancer' LIMIT 10;	codebase_community
SELECT      p.LastEditorDisplayName AS EditorDisplayName FROM      posts p WHERE      p.Title = 'Open source tools for visualizing multi-dimensional data' AND      p.LastEditorUserId IS NOT NULL;	codebase_community
SELECT p.Title FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa';	codebase_community
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY u.Id;	codebase_community
SELECT      c.Text AS CommentText,     c.CreationDate AS CommentDate,     u.DisplayName AS CommenterDisplayName,     u.Id AS CommenterId FROM      comments c JOIN      posts p ON c.PostId = p.Id JOIN      users u ON c.UserId = u.Id WHERE      p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';	codebase_community
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%';	codebase_community
SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id JOIN posts p ON v.PostId = p.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'	codebase_community
SELECT      AVG(p.ViewCount) AS AverageViewCount,     p.Title,     c.Text AS CommentText,     c.Score AS CommentScore FROM      posts p JOIN      tags t ON p.Id = t.ExcerptPostId LEFT JOIN      comments c ON p.Id = c.PostId WHERE      t.TagName = 'humor' GROUP BY      p.Id, p.Title, c.Text, c.Score;	codebase_community
SELECT COUNT(*)  FROM comments  WHERE UserId = 13;	codebase_community
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;	codebase_community
SELECT Id AS UserId, MIN(Views) AS MinViews FROM users WHERE Views IS NOT NULL GROUP BY Id ORDER BY MinViews ASC LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Supporter' AND YEAR(b.Date) = 2011;	codebase_community
SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsersWithMoreThanFiveBadges FROM badges b GROUP BY b.UserId HAVING COUNT(b.Name) > 5;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name IN ('Teacher', 'Supporter') AND u.Location = 'New York';	codebase_community
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;	codebase_community
SELECT      p.OwnerUserId FROM      posts p JOIN      (SELECT          PostId,          COUNT(DISTINCT UserId)       FROM          postHistory       GROUP BY          PostId       HAVING          COUNT(DISTINCT UserId) = 1) ph ON p.Id = ph.PostId WHERE      p.ViewCount >= 1000;	codebase_community
SELECT u.DisplayName, b.Name FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId WHERE c.Id = (SELECT MAX(COUNT(Id)) FROM comments) GROUP BY u.Id ORDER BY COUNT(c.Id) DESC;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfTeachersFromIndia FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';	codebase_community
SELECT      ((COUNT(CASE WHEN Year(b.Date) = 2010 THEN 1 END) - (COUNT(CASE WHEN Year(b.Date) = 2011 THEN 1 END)) *      (COUNT(CASE WHEN Year(b.Date) = 2010 THEN 1 END) + COUNT(CASE WHEN Year(b.Date) = 2011 THEN 1 END)) /      (COUNT(CASE WHEN Year(b.Date) = 2010 THEN 1 END) * COUNT(CASE WHEN Year(b.Date) = 2011 THEN 1 END))) * 100 AS PercentageDifference FROM badges b WHERE b.Name = 'Student'	codebase_community
SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720;  SELECT COUNT(DISTINCT UserId) AS UniqueCommentersCount FROM comments WHERE PostId = 3720;	codebase_community
SELECT      p.Id,     p.ViewCount FROM      posts p WHERE      p.Id = 61217 UNION SELECT      p.Id,     p.ViewCount FROM      postLinks pl JOIN      posts p ON pl.PostId = p.Id WHERE      pl.RelatedPostId = 61217;	codebase_community
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;	codebase_community
SELECT p.Id, p.OwnerUserId FROM posts p WHERE p.Score > 60;	codebase_community
SELECT SUM(p.FavoriteCount)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.Id = 686 AND YEAR(p.CreationDate) = 2011;	codebase_community
SELECT AVG(u.UpVotes) + (SUM(u.Age) / COUNT(u.Id)) AS avg_votes_and_age FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE COUNT(p.Id) > 10 GROUP BY u.Id;	codebase_community
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'Announcer';	codebase_community
SELECT b.Name FROM badges b WHERE b.Date = '2010-07-19 19:39:08';	codebase_community
SELECT COUNT(*)  FROM comments  WHERE Score > 60;	codebase_community
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';	codebase_community
SELECT COUNT(*) FROM posts WHERE Score = 10;	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);	codebase_community
SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';	codebase_community
SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';	codebase_community
SELECT      ROUND((COUNT(CASE WHEN b.Name = 'Teacher' THEN b.UserId END) * 100.0) / COUNT(DISTINCT u.Id), 2) AS TeacherBadgePercentage FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Teacher'	codebase_community
SELECT      (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(DISTINCT b.UserId) AS Teenager_Percentage FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer'	codebase_community
SELECT SUM(c.Score) AS TotalCommentScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0';	codebase_community
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0';	codebase_community
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';	codebase_community
SELECT COUNT(DISTINCT u.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;	codebase_community
SELECT SUM(u.Views) AS TotalViews FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';	codebase_community
SELECT COUNT(DISTINCT b.Id)  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Supporter' AND u.Age > 65;	codebase_community
SELECT DisplayName FROM users WHERE Id = 30;	codebase_community
SELECT COUNT(*)  FROM users  WHERE Location = 'New York';	codebase_community
SELECT COUNT(*) AS VoteCount2010 FROM votes WHERE YEAR(CreationDate) = 2010;	codebase_community
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;	codebase_community
SELECT u.DisplayName, MAX(u.Views) as MaxViews FROM users u GROUP BY u.DisplayName ORDER BY MaxViews DESC LIMIT 1;	codebase_community
SELECT     COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id ELSE NULL END) /      COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id ELSE NULL END) FROM     votes;	codebase_community
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer';	codebase_community
SELECT COUNT(p.Id)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Daniel Vassallo';	codebase_community
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');	codebase_community
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1;	codebase_community
SELECT      u.DisplayName,     SUM(p.ViewCount) AS TotalViewCount FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName = 'Harvey Motulsky' OR u.DisplayName = 'Noah Snyder' GROUP BY      u.DisplayName ORDER BY      TotalViewCount DESC LIMIT 1;	codebase_community
SELECT COUNT(p.Id)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Matt Parker'  AND p.Id IN (     SELECT PostId      FROM votes      GROUP BY PostId      HAVING COUNT(*) > 4 );	codebase_community
SELECT COUNT(c.Id) AS NegativeCommentCount FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';	codebase_community
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.Id = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0;	codebase_community
SELECT DISTINCT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';	codebase_community
SELECT      CAST(COUNT(CASE WHEN p.Tags LIKE '%r%' THEN p.Id ELSE NULL END) AS REAL) /      COUNT(p.Id) * 100 AS percentage FROM      posts p JOIN      tags t ON p.Id = t.ExcerptPostId WHERE      t.TagName = 'r'     AND p.OwnerUserId IS NULL	codebase_community
SELECT      (SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) -      SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName IN ('Mornington', 'Amos')	codebase_community
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Commentator' AND YEAR(b.Date) = 2014;	codebase_community
SELECT COUNT(*)  FROM posts  WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';	codebase_community
SELECT u.DisplayName, u.Age FROM users u WHERE u.Id = (SELECT MAX(Views) FROM users);	codebase_community
SELECT      p.LastEditDate,      u.Id AS LastEditorUserId FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Title = 'Detecting a given face in a database of facial images';	codebase_community
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c WHERE c.UserId = 13 AND c.Score < 60;	codebase_community
SELECT      c.Text AS CommentText,      u.DisplayName AS CommenterDisplayName,      p.Title AS PostTitle FROM      comments c JOIN      users u ON c.UserId = u.Id JOIN      posts p ON c.PostId = p.Id WHERE      c.Score > 60;	codebase_community
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND YEAR(b.Date) = 2011;	codebase_community
SELECT p.OwnerDisplayName, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount > 150;	codebase_community
SELECT      COUNT(ph.Id) AS PostHistoryCount,      MAX(ph.CreationDate) AS LastEditDate FROM      postHistory ph JOIN      posts p ON ph.PostId = p.Id WHERE      p.Title = 'What is the best introductory Bayesian statistics textbook?';	codebase_community
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers';	codebase_community
SELECT p.Title AS RelatedPostTitle FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time' AND pl.RelatedPostId = p.Id;	codebase_community
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013;	codebase_community
SELECT p.OwnerDisplayName FROM posts p ORDER BY p.ViewCount DESC LIMIT 1;	codebase_community
SELECT u.DisplayName, u.Location FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN users u ON p.OwnerUserId = u.Id WHERE t.TagName = 'hypothesis-testing';	codebase_community
SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';	codebase_community
SELECT p.OwnerDisplayName FROM posts p WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1;	codebase_community
SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);	codebase_community
SELECT p.Title FROM posts p ORDER BY p.ViewCount DESC LIMIT 5;	codebase_community
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;	codebase_community
SELECT OwnerUserId  FROM posts  WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);	codebase_community
SELECT Id, DisplayName, Reputation, Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY Reputation DESC LIMIT 1;	codebase_community
SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE YEAR(posts.CreationDate) = 2011 AND votes.BountyAmount = 50;	codebase_community
SELECT Id FROM users ORDER BY Age ASC LIMIT 1;	codebase_community
SELECT p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.Score DESC LIMIT 1;	codebase_community
SELECT      COUNT(postLinks.Id) / 12 AS average_monthly_links FROM      postLinks INNER JOIN      posts ON postLinks.PostId = posts.Id WHERE      YEAR(postLinks.CreationDate) = 2010 AND      posts.AnswerCount <= 2 GROUP BY      YEAR(postLinks.CreationDate), MONTH(postLinks.CreationDate);	codebase_community
SELECT PostId  FROM votes  WHERE UserId = 1465  AND VoteTypeId IN (2, 3) -- Assuming 2 for upvote and 3 for downvote GROUP BY PostId  ORDER BY SUM(VoteTypeId = 2) - SUM(VoteTypeId = 3) DESC  LIMIT 1;	codebase_community
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (     SELECT MIN(pl2.CreationDate)     FROM postLinks pl2 )	codebase_community
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Name) DESC LIMIT 1;	codebase_community
SELECT MIN(CreationDate) AS FirstVoteDate FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl') AND VoteTypeId IN (2, 3); -- Assuming 2 is for UpVote and 3 is for DownVote	codebase_community
SELECT MIN(p.CreationDate)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.Age = (SELECT MIN(Age) FROM users);	codebase_community
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;	codebase_community
SELECT AVG(v.PostId) AS AverageVotedPosts FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users) GROUP BY v.UserId;	codebase_community
SELECT DisplayName  FROM users  ORDER BY Reputation DESC  LIMIT 1;	codebase_community
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;	codebase_community
SELECT DISTINCT DisplayName  FROM users  WHERE Age BETWEEN 19 AND 65;	codebase_community
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010;	codebase_community
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;	codebase_community
SELECT p.Id, p.Title FROM posts p ORDER BY p.Score DESC LIMIT 1;	codebase_community
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner';	codebase_community
SELECT DISTINCT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;	codebase_community
SELECT p.Id, u.DisplayName AS OwnerDisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;	codebase_community
SELECT      (COUNT(CASE WHEN p.OwnerUserId IN (SELECT Id FROM users WHERE Reputation > 1000) AND EXTRACT(YEAR FROM p.CreationDate) = 2011 THEN p.Id END) * 100.0) / COUNT(p.Id) AS percentage FROM      posts p;	codebase_community
SELECT      DIVIDE(COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END), COUNT(u.Id)) AS PercentageOfTeenagers FROM      users u;	codebase_community
SELECT      p.ViewCount AS TotalViews,      u.DisplayName AS LastEditorDisplayName FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Title = 'Computer Game Datasets';	codebase_community
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);	codebase_community
SELECT COUNT(c.Id) AS CommentCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts)	codebase_community
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;	codebase_community
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1;	codebase_community
SELECT Name  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett')  ORDER BY Date DESC  LIMIT 1;	codebase_community
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;	codebase_community
SELECT      MAX(b.Date) - u.CreationDate AS TimeToGetBadge FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      u.DisplayName = 'Zolomon'	codebase_community
SELECT      u.Id,     COUNT(DISTINCT p.Id) AS PostCount,     COUNT(DISTINCT c.Id) AS CommentCount FROM      users u LEFT JOIN      posts p ON u.Id = p.OwnerUserId OR u.Id = p.LastEditorUserId LEFT JOIN      comments c ON u.Id = c.UserId WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users) GROUP BY      u.Id;	codebase_community
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' AND c.CreationDate = (     SELECT MAX(c2.CreationDate)     FROM comments c2     WHERE c2.PostId = p.Id ) LIMIT 1;	codebase_community
SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Citizen Patrol';	codebase_community
SELECT COUNT(p.Id)  FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';	codebase_community
SELECT u.Reputation, p.ViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Jarrod Dixon';	codebase_community
SELECT      COALESCE(c.Count, 0) AS CommentCount,      COALESCE(a.Count, 0) AS AnswerCount FROM      (SELECT COUNT(*) AS Count FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) c CROSS JOIN      (SELECT COUNT(*) AS Count FROM posts WHERE Title = 'Clustering 1D data' AND PostTypeId = 1) a	codebase_community
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';	codebase_community
SELECT COUNT(*) FROM votes WHERE VoteTypeId = 2 -- Assuming 2 is the type ID for bounty AND BountyAmount >= 30;	codebase_community
SELECT      (COUNT(CASE WHEN posts.Score >= 50 THEN 1 END) * 100.0) / COUNT(posts.Id) AS PercentageAbove50 FROM      posts JOIN      users ON posts.OwnerUserId = users.Id WHERE      users.Reputation = (SELECT MAX(Reputation) FROM users)	codebase_community
SELECT COUNT(*) FROM posts WHERE Score < 20;	codebase_community
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;	codebase_community
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';	codebase_community
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)'	codebase_community
SELECT ch.Text FROM postHistory ch JOIN posts p ON ch.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?' AND ch.Text IS NOT NULL;	codebase_community
SELECT c.Id, c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;	codebase_community
SELECT      c.CreationDate,      u.Age  FROM      comments c  JOIN      users u  ON      c.UserId = u.Id  WHERE      c.Text LIKE '%http://%'	codebase_community
SELECT COUNT(DISTINCT c.PostId)  FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;	codebase_community
SELECT COUNT(*) FROM posts WHERE CommentCount = 1 AND Id IN (     SELECT PostId     FROM comments     WHERE Score = 0 );	codebase_community
SELECT COUNT(DISTINCT u.Id) AS TotalUsers40 FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;	codebase_community
SELECT p.Id, c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';	codebase_community
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.';	codebase_community
SELECT c.Id, c.Text, c.CreationDate, c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';	codebase_community
SELECT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;	codebase_community
SELECT      (COUNT(CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0) / COUNT(c.UserId) AS PercentageOfUsersWithZeroUpVotes FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Score BETWEEN 5 AND 10;	codebase_community
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man';	superhero
SELECT COUNT(DISTINCT h.id) FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';	superhero
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;	superhero
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15;	superhero
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue';	superhero
SELECT c.colour  FROM superhero AS s  JOIN colour AS c ON s.skin_colour_id = c.id  WHERE s.superhero_name = 'Apocalypse';	superhero
SELECT COUNT(DISTINCT superhero.id) AS heroes_with_agility_and_blue_eyes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';	superhero
SELECT s.superhero_name FROM superhero s JOIN colour eye_colour ON s.eye_colour_id = eye_colour.id JOIN colour hair_colour ON s.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';	superhero
SELECT COUNT(*)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Marvel Comics';	superhero
SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;	superhero
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron';	superhero
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';	superhero
SELECT AVG(height_cm) AS average_height FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');	superhero
SELECT      ROUND((SUM(CASE WHEN p.publisher_name = 'Marvel Comics' AND hp.power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT s.id), 2) AS percentage_with_super_strength FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN publisher p ON s.publisher_id = p.id	superhero
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');	superhero
SELECT p.publisher_name, MIN(a.attribute_value) AS min_speed FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' GROUP BY p.publisher_name ORDER BY min_speed ASC LIMIT 1;	superhero
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';	superhero
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Blue Beetle II';	superhero
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.hair_colour_id = colour.id  WHERE colour.colour = 'Blond';	superhero
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;	superhero
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';	superhero
SELECT COUNT(DISTINCT h.id) FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;	superhero
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';	superhero
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN gender g ON s.gender_id = g.id  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;	superhero
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(power_id) DESC LIMIT 1;	superhero
SELECT COUNT(*)  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE race.race = 'Vampire';	superhero
SELECT      ROUND((COUNT(CASE WHEN s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 END) * 100.0) / COUNT(s.id), 2) AS bad_alignment_percentage,     COUNT(CASE WHEN s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 END) AS marvel_bad_alignment_hero_count FROM      superhero s;	superhero
SELECT      SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) -      SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS diff_superheroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id	superhero
SELECT id  FROM publisher  WHERE publisher_name = 'Star Trek';	superhero
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha;	superhero
SELECT COUNT(*)  FROM superhero  WHERE full_name IS NULL;	superhero
SELECT c.colour  FROM superhero AS s  JOIN colour AS c ON s.eye_colour_id = c.id  WHERE s.id = 75;	superhero
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.superhero_name = 'Deathlok';	superhero
SELECT AVG(weight_kg)  FROM superhero  WHERE gender_id = 2;	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 5;	superhero
SELECT superhero_name  FROM superhero  WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');	superhero
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = 56;	superhero
SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');	superhero
SELECT s.race_id  FROM superhero s  WHERE s.weight_kg = 169;	superhero
SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id WHERE s.race_id = (SELECT id FROM race WHERE race = 'human') AND s.height_cm = 185;	superhero
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);	superhero
SELECT      ROUND((SUM(CASE WHEN s.publisher_id = 13 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id), 2) AS percentage_marvel_heroes FROM      superhero s WHERE      s.height_cm BETWEEN 150 AND 180;	superhero
SELECT superhero.full_name FROM superhero WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);	superhero
SELECT sp.power_name, COUNT(hp.power_id) AS power_count FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1;	superhero
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination';	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = 1;	superhero
SELECT COUNT(DISTINCT h.id)  FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';	superhero
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' AND ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'strength')	superhero
SELECT AVG(s.id) AS average_hero_without_skin FROM superhero s WHERE s.skin_colour_id IS NULL OR s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'No Skin');	superhero
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Dark Horse Comics';	superhero
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute_name = 'durability' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'durability') AND publisher_name = 'Dark Horse Comics' GROUP BY superhero_name ORDER BY COUNT(*) DESC LIMIT 1;	superhero
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';	superhero
SELECT superhero_name  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE power_name = 'Flight';	superhero
SELECT      s.full_name,     c_e.colour AS eye_colour,     c_h.colour AS hair_colour,     c_s.colour AS skin_colour FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id JOIN      colour c_e ON s.eye_colour_id = c_e.id JOIN      colour c_h ON s.hair_colour_id = c_h.id JOIN      colour c_s ON s.skin_colour_id = c_s.id WHERE      g.gender = 'Female'      AND p.publisher_name = 'Dark Horse Comics';	superhero
SELECT      s.superhero_name,      p.publisher_name FROM      superhero s JOIN      colour c1 ON s.eye_colour_id = c1.id JOIN      colour c2 ON s.hair_colour_id = c2.id JOIN      colour c3 ON s.skin_colour_id = c3.id JOIN      publisher p ON s.publisher_id = p.id WHERE      c1.id = c2.id AND c2.id = c3.id;	superhero
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';	superhero
SELECT      ROUND((SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN g.gender = 'Female' THEN 1 ELSE NULL END), 2) AS percentage_blue_female FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.colour_id = c.id WHERE g.gender = 'Female';	superhero
SELECT s.superhero_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler';	superhero
SELECT g.gender FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE s.superhero_name = 'Agent 13';	superhero
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';	superhero
SELECT COUNT(sp.id)  FROM superhero AS sup JOIN hero_power AS hp ON sup.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sup.superhero_name = 'Amazo';	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon';	superhero
SELECT s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber';	superhero
SELECT superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';	superhero
SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE c.colour = 'Gold';	superhero
SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';	superhero
SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';	superhero
SELECT COUNT(DISTINCT h.id)  FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute ha2      JOIN attribute a2 ON ha2.attribute_id = a2.id      WHERE a2.attribute_name = 'Strength' );	superhero
SELECT r.race, a.alignment FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks';	superhero
SELECT      ROUND((SUM(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender = 'Female')                       AND p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)                  * 100.0)                  / COUNT(DISTINCT s.id), 2) AS percentage_female_heroes_marvel FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';	superhero
SELECT AVG(weight_kg)  FROM superhero  WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');	superhero
SELECT   (SUM(CASE WHEN s.full_name = 'Emil Blonsky' THEN s.weight_kg ELSE 0 END) -    SUM(CASE WHEN s.full_name = 'Charles Chandler' THEN s.weight_kg ELSE 0 END)) AS weight_difference FROM superhero s;	superhero
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name;	superhero
SELECT sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Abomination';	superhero
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;	superhero
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Speed' ORDER BY attribute_value DESC LIMIT 1;	superhero
SELECT COUNT(*)  FROM superhero  WHERE alignment_id = 3;	superhero
SELECT ha.attribute_id, a.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = '3-D Man';	superhero
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'brown';	superhero
SELECT p.publisher_name FROM superhero AS s JOIN publisher AS p ON s.publisher_id = p.id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');	superhero
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id != 1;	superhero
SELECT      ROUND(         (SUM(CASE WHEN c.id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id),          2     ) AS blue_eyes_percentage FROM superhero s JOIN colour c ON s.eye_colour_id = c.id;	superhero
SELECT      (SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END)) AS male_female_ratio FROM superhero;	superhero
SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero ORDER BY tallest_height DESC LIMIT 1;	superhero
SELECT id  FROM superpower  WHERE power_name = 'cryokinesis';	superhero
SELECT superhero_name FROM superhero WHERE id = 294;	superhero
SELECT s.full_name FROM superhero s WHERE s.weight_kg = 0 OR s.weight_kg IS NULL;	superhero
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';	superhero
SELECT sp.power_name FROM superhero AS sup JOIN hero_power AS hp ON sup.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sup.full_name = 'Helen Parr';	superhero
SELECT race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;	superhero
SELECT p.publisher_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.id = 38;	superhero
SELECT s.race_id, r.race  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  JOIN race r ON s.race_id = r.id  WHERE ha.attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute )	superhero
SELECT a.alignment, GROUP_CONCAT(sp.power_name SEPARATOR ', ') AS superpowers FROM superhero su JOIN alignment a ON su.alignment_id = a.id JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.superhero_name = 'Atom IV' GROUP BY a.alignment;	superhero
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;	superhero
SELECT AVG(ha.attribute_value) FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = 3;	superhero
SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE ha.attribute_value = 100;	superhero
SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND alignment_id = 1;	superhero
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;	superhero
SELECT superhero.race FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE gender.gender = 'male' AND hair_colour.colour = 'blue';	superhero
SELECT      ROUND(         (SUM(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) / COUNT(alignment.id)) * 100.0,          2     ) AS percentage_female_bad_heroes FROM      superhero  JOIN      gender ON superhero.gender_id = gender.id  JOIN      alignment ON superhero.alignment_id = alignment.id  WHERE      alignment.id = 2;	superhero
SELECT      (SUM(CASE WHEN c.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN c.id = 1 THEN 1 ELSE 0 END)) AS blue_eye_no_eye_color_difference FROM superhero s LEFT JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = 0 OR s.weight_kg IS NULL;	superhero
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Ajax';	superhero
SELECT COUNT(*)  FROM superhero  WHERE skin_colour_id IN (SELECT id FROM colour WHERE colour = 'Green')  AND alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad');	superhero
SELECT COUNT(*)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';	superhero
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero_name ASC;	superhero
SELECT s.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force';	superhero
SELECT superhero_name, MAX(weight_kg) as max_weight FROM superhero WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;	superhero
SELECT AVG(s.height_cm)  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.race_id <> (SELECT id FROM race WHERE race = 'Human')  AND p.publisher_name = 'Dark Horse Comics';	superhero
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100 ORDER BY ha.attribute_value DESC LIMIT 1;	superhero
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'))     -      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference	superhero
SELECT a.attribute_name FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1;	superhero
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';	superhero
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);	superhero
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';	superhero
SELECT      ROUND(MULTIPLY(DIVIDE(COUNT(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 END),                             (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'George Lucas'))), 100.0), 2) AS female_percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'George Lucas';	superhero
SELECT      ROUND(         (SUM(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0) / COUNT(*),         2     ) AS percentage_good_heroes FROM      superhero JOIN      alignment ON superhero.alignment_id = alignment.id WHERE      superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');	superhero
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';	superhero
SELECT h.id FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id WHERE ha.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);	superhero
SELECT s.full_name FROM superhero s WHERE s.superhero_name = 'Alien';	superhero
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'brown';	superhero
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy';	superhero
SELECT weight_kg, race FROM superhero WHERE id = 40;	superhero
SELECT AVG(height_cm)  FROM superhero  WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');	superhero
SELECT hero_id  FROM hero_power  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Intelligence';	superhero
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Blackwulf';	superhero
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);	superhero
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 18 AND q.q1 IS NOT NULL ORDER BY q.q1 DESC LIMIT 5;	formula_1
SELECT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)	formula_1
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Shanghai';	formula_1
SELECT circuits.url FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';	formula_1
SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';	formula_1
SELECT c.name, c.positionText FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors co ON cs.constructorId = co.constructorId WHERE co.name = 'Renault';	formula_1
SELECT COUNT(raceId)  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.year = 2010  AND circuits.country NOT IN ('Asia', 'Europe');	formula_1
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';	formula_1
SELECT lat, lng FROM circuits WHERE circuitRef = 'australian_grand_prix';	formula_1
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';	formula_1
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit' AND r.date = '2023-09-01';	formula_1
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Abu Dhabi Grand Prix';	formula_1
SELECT c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE cr.points = 1 AND r.raceId = 24;	formula_1
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE surnames = 'Senna' AND forename = 'Bruno') AND raceId = 354;	formula_1
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:40' AND q.qualifyId = 355;	formula_1
SELECT d.number  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  WHERE q.q3 = '0:01:54' AND q.raceId = (SELECT raceId FROM races WHERE raceId = 903);	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Completed') AND r.driverId NOT IN (     SELECT driverId     FROM lapTimes     WHERE raceId = r.raceId )	formula_1
SELECT seasons.year, seasons.url FROM seasons JOIN races ON seasons.year = races.year WHERE races.raceId = 901;	formula_1
SELECT COUNT(DISTINCT d.driverId)  FROM results r  JOIN races ra ON r.raceId = ra.raceId  JOIN drivers d ON r.driverId = d.driverId  WHERE ra.date = '2015-11-29'  AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished');	formula_1
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;	formula_1
SELECT d.driverRef, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.raceId = 161 AND lt.time = '0:01:27';	formula_1
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);	formula_1
SELECT c.name, c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix';	formula_1
SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId WHERE races.raceId = 9 AND constructorStandings.points = (     SELECT MAX(points) FROM constructorStandings cs     JOIN races r ON cs.raceId = r.raceId     WHERE r.raceId = 9 );	formula_1
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE surnames = 'di Grassi' AND forename = 'Lucas') AND raceId = (SELECT raceId FROM races WHERE raceId = 345) AND number = 1;	formula_1
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:15' AND q.raceId = 347;	formula_1
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 45 AND q.q3 = '0:01:33';	formula_1
SELECT      r.name AS RaceName,     d.surname || ' ' || d.forename AS DriverName,     r.date AS RaceDate,     res.time AS FinishTime FROM      results res JOIN      drivers d ON res.driverId = d.driverId JOIN      races r ON res.raceId = r.raceId WHERE      d.surname = 'McLaren' AND      d.forename = 'Bruce' AND      res.raceId = (SELECT raceId FROM races WHERE raceId = 743);	formula_1
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'San Marino Grand Prix' AND r.year = 2006 AND r.position = 2;	formula_1
SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.date = '2015-11-29' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished');	formula_1
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE raceId = 872 AND statusId NOT IN (SELECT statusId FROM status WHERE status NOT LIKE 'Ret')) ORDER BY d.dob DESC LIMIT 1;	formula_1
SELECT d.forename || ' ' || d.surname AS full_name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348)	formula_1
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = r.raceId)	formula_1
SELECT      (SUBTRACT(         (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND fastestLap IS NOT NULL),         (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND fastestLap IS NOT NULL)     ) /      (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND fastestLap IS NOT NULL)) * 100 AS percentage_faster FROM      results WHERE      raceId = 853 AND      driverId = (SELECT driverId FROM drivers WHERE surnames = 'di Resta' AND forenames = 'Paul');	formula_1
SELECT      (COUNT(DISTINCT r.driverId)      / COUNT(DISTINCT d.driverId)     ) * 100 AS race_completion_rate FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      races rcs ON r.raceId = rcs.raceId WHERE      rcs.date = '1983-07-16' AND     r.statusId != (SELECT statusId FROM status WHERE status = 'Retired') AND     r.statusId != (SELECT statusId FROM status WHERE status = 'Did Not Start');	formula_1
SELECT year  FROM races  WHERE name = 'Singapore Grand Prix'  ORDER BY year ASC  LIMIT 1;	formula_1
SELECT COUNT(*) AS total_races, r.name AS race_name FROM races r WHERE r.year = 2005 ORDER BY r.name DESC;	formula_1
SELECT      r1.name AS FirstRaceName,     r2.name AS OtherRacesInSameMonthAndYear FROM      (SELECT name, DATE(date) AS race_date FROM races ORDER BY race_date ASC LIMIT 1) r1 JOIN      (SELECT name FROM races WHERE MONTH(DATE(date)) = MONTH(r1.race_date) AND YEAR(DATE(date)) = YEAR(r1.race_date) AND name != r1.name) r2 ON      TRUE;	formula_1
SELECT r.name, r.date FROM races r WHERE r.year = 1999 AND r.round = (SELECT MAX(round) FROM races WHERE year = 1999) ORDER BY r.date DESC LIMIT 1;	formula_1
SELECT s.year, COUNT(r.raceId) AS race_count FROM seasons s JOIN races r ON s.year = r.year GROUP BY s.year ORDER BY race_count DESC LIMIT 1;	formula_1
SELECT r.name FROM races r WHERE r.year = 2017 AND r.circuitId NOT IN (     SELECT r2.circuitId     FROM races r2     WHERE r2.year = 2000 );	formula_1
SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = (SELECT MIN(year) FROM seasons WHERE circuitId IN (     SELECT circuitId FROM circuits WHERE country = 'Europe' )) AND c.country = 'Europe' ORDER BY r.year ASC LIMIT 1;	formula_1
SELECT MAX(r.year) AS lastBritishGPSeason FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND c.circuitRef = 'British_Grand_Prix';	formula_1
SELECT COUNT(DISTINCT s.year)  FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix';	formula_1
SELECT d.forename, d.surname, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position;	formula_1
SELECT d.forename, d.surname, MAX(rs.points) as total_points FROM drivers d JOIN results rs ON d.driverId = rs.driverId GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1;	formula_1
SELECT d.forename, d.surname, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix' GROUP BY d.driverId ORDER BY total_points DESC LIMIT 3;	formula_1
SELECT d.forename, d.surname, r.name AS raceName, lt.time AS bestLapTime FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) ORDER BY lt.milliseconds ASC LIMIT 1;	formula_1
SELECT AVG(lt.milliseconds) as avg_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE d.surname = 'Vettel' AND r.name = 'Chinese Grand Prix' AND r.year = 2009;	formula_1
SELECT      (SELECT COUNT(DISTINCT raceId)       FROM results       JOIN drivers ON results.driverId = drivers.driverId       WHERE drivers.surname = 'Hamilton' AND year >= 2010 AND position > 1) /      (SELECT COUNT(DISTINCT raceId)       FROM results       JOIN drivers ON results.driverId = drivers.driverId       WHERE drivers.surname = 'Hamilton' AND year >= 2010) AS percentage	formula_1
SELECT d.forename, d.surname, d.nationality, AVG(rs.points) as avg_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN results r ON ds.driverId = r.driverId WHERE ds.wins = (     SELECT MAX(wins)     FROM driverStandings ) GROUP BY d.driverId ORDER BY d.driverId;	formula_1
SELECT      d.forename,      d.surname,      (2022 - EXTRACT(YEAR FROM d.dob)) + 1 AS age FROM      drivers d WHERE      d.nationality = 'Japanese' ORDER BY      d.dob DESC LIMIT 1;	formula_1
SELECT c.circuitRef, c.name, COUNT(r.raceId) AS race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date BETWEEN '1990-01-01' AND '2000-12-31' GROUP BY c.circuitId HAVING race_count = 4;	formula_1
SELECT c.name AS circuit_name, c.location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006;	formula_1
SELECT      r.name AS RaceName,      c.name AS CircuitName,      c.location AS CircuitLocation FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      MONTH(r.date) = 9 AND YEAR(r.date) = 2005;	formula_1
SELECT r.name AS race_name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Yoong' AND d.forename = 'Alex' AND res.position < 10;	formula_1
SELECT COUNT(*) FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE d.surname = 'Schumacher' AND c.name = 'Sepang International Circuit' AND r.points = (SELECT MAX(points) FROM results WHERE driverId = d.driverId);	formula_1
SELECT      r.name AS raceName,      r.year AS raceYear FROM      races r JOIN      results res ON r.raceId = res.raceId JOIN      drivers d ON res.driverId = d.driverId WHERE      d.surname = 'Schumacher' AND      res.milliseconds = (         SELECT              MIN(milliseconds)         FROM              results         WHERE              driverId = d.driverId     );	formula_1
SELECT AVG(points) AS avg_points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Irvine' AND drivers.forename = 'Eddie' AND races.year = 2000;	formula_1
SELECT r.name AS race_name, r.date AS race_date, r.time AS race_time, res.points AS race_points FROM results res JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId WHERE d.surname = 'Hamilton' AND res.points > 0 ORDER BY r.year ASC, r.date ASC LIMIT 1;	formula_1
SELECT r.name, c.country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;	formula_1
SELECT      r.name AS raceName,     s.year,     c.location AS circuitLocation,     MAX(res.laps) AS mostLaps FROM      results res JOIN      races r ON res.raceId = r.raceId JOIN      circuits c ON r.circuitId = c.circuitId GROUP BY      r.name, s.year, c.location ORDER BY      mostLaps DESC LIMIT 1;	formula_1
SELECT      (COUNT(CASE WHEN c.name = 'Germany' THEN 1 END) * 100.0) / COUNT(r.name) AS percentage FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      r.name = 'European Grand Prix' AND      c.country = 'Europe';	formula_1
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';	formula_1
SELECT      MAX(lat) as highest_latitude,      circuitRef  FROM      circuits  WHERE      circuitRef IN ('Silverstone_Circuit', 'Hockenheimring', 'Hungaroring')  GROUP BY      circuitRef  ORDER BY      highest_latitude DESC  LIMIT 1;	formula_1
SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit';	formula_1
SELECT c.country FROM circuits c WHERE c.alt = (SELECT MAX(alt) FROM circuits);	formula_1
SELECT COUNT(*) FROM drivers WHERE code IS NULL;	formula_1
SELECT d.nationality FROM drivers d WHERE d.dob = (SELECT MIN(dob) FROM drivers);	formula_1
SELECT s.surname FROM drivers s WHERE s.nationality = 'italian';	formula_1
SELECT url FROM drivers WHERE forename = 'Anthony' AND surnname = 'Davidson';	formula_1
SELECT driverRef  FROM drivers  WHERE surnames = 'Hamilton' AND forename = 'Lewis';	formula_1
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE r.name = 'Spanish Grand Prix' AND s.year = 2009;	formula_1
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';	formula_1
SELECT      r.raceId,      r.year,      r.round,      r.name AS raceName,      r.date,      r.time,      c.circuitRef,      c.name AS circuitName,      c.url AS circuitUrl FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      c.circuitRef = 'Silverstone';	formula_1
SELECT r.name AS race_name, r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Abu Dhabi Circuit' AND r.year = 2010;	formula_1
SELECT COUNT(DISTINCT r.raceId)  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Italy';	formula_1
SELECT DISTINCT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Barcelona-Catalunya';	formula_1
SELECT url  FROM circuits  WHERE name = 'Spanish Grand Prix' AND year = 2009;	formula_1
SELECT MIN(fastestLapTime) AS fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surnames = 'Hamilton' AND forename = 'Lewis') AND fastestLap IS NOT NULL;	formula_1
SELECT d.forename, d.surname, r.fastestLapSpeed FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLap IS NOT NULL ORDER BY r.fastestLapSpeed DESC LIMIT 1;	formula_1
SELECT d.driverRef FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1;	formula_1
SELECT DISTINCT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis';	formula_1
SELECT      r.name AS raceName,      d.surname AS driverSurname,      MIN(r.rank) AS highestRank FROM      results r JOIN      drivers d ON r.driverId = d.driverId WHERE      d.surname = 'Hamilton' AND r.rank IS NOT NULL GROUP BY      r.name, d.surname ORDER BY      highestRank ASC LIMIT 1;	formula_1
SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE year = 2009 AND name = 'Spanish Grand Prix' );	formula_1
SELECT DISTINCT s.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis';	formula_1
SELECT r.rank FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.raceId IN (     SELECT r2.raceId     FROM races r2     JOIN circuits c ON r2.circuitId = c.circuitId     WHERE c.name = 'Australian Grand Prix' AND r2.year = 2008 ) AND r.positionOrder = (     SELECT MAX(positionOrder)     FROM results r3     WHERE r3.raceId = r.raceId );	formula_1
SELECT d.forename, d.surname FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId WHERE r.grid = 4 AND r.raceId = (     SELECT raceId     FROM races     WHERE year = 2008 AND name = 'Australian Grand Prix' );	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL;	formula_1
SELECT      MIN(lt.milliseconds) AS fastestLapMilliseconds FROM      lapTimes lt JOIN      drivers d ON lt.driverId = d.driverId JOIN      races r ON lt.raceId = r.raceId WHERE      d.surname = 'Hamilton' AND      r.name = 'Australian Grand Prix' AND      EXTRACT(YEAR FROM r.date) = 2008 ORDER BY      lt.milliseconds ASC LIMIT 1;	formula_1
SELECT r.name, r.time FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND rs.position = 2 AND rs.positionOrder = 2;	formula_1
SELECT d.driverId, d.forename, d.surname, d.url FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.positionText = '1'	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND d.nationality = 'American' AND ra.year = 2008;	formula_1
SELECT      r.driverId,      COUNT(DISTINCT r.raceId) AS raceCount FROM      results r JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') GROUP BY      r.driverId HAVING      COUNT(DISTINCT r.raceId) > 0;	formula_1
SELECT SUM(r.points) AS total_points FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.points IS NOT NULL;	formula_1
SELECT AVG(TIMESTAMPDIFF(SECOND, '00:00:00', SUBSTR(T1.fastestLapTime, 3, 8))) AS avgFastestLapTimeInSeconds FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton';	formula_1
SELECT      (COUNT(CASE WHEN r.raceId = 1 THEN 1 END) / COUNT(r.raceId)) * 100 AS completion_rate FROM      results r WHERE      r.raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');	formula_1
SELECT      ((EXTRACT(EPOCH FROM (SUM(TIMESTAMPDIFF(SECOND, '00:00:00', last_driver_time) - SUM(TIMESTAMPDIFF(SECOND, '00:00:00', champion_time)))) / SUM(TIMESTAMPDIFF(SECOND, '00:00:00', last_driver_time))) * 100) AS percentage_difference FROM      (         SELECT              r.raceId,              d.driverId,              dr.forename,              dr.surname,              dr.time AS champion_time         FROM              results r             JOIN driverStandings ds ON r.resultId = ds.resultId             JOIN drivers dr ON r.driverId = dr.driverId         WHERE              ds.year = 2008 AND ds.round = 1 AND ds.position = 1     ) AS champion,     (         SELECT              r.raceId,              d.driverId,              dr.forename,              dr.surname,              dr.time AS last_driver_time         FROM              results r             JOIN driverStandings ds ON r.resultId = ds.resultId             JOIN drivers dr ON r.driverId = dr.driverId         WHERE              r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitRef = 'australia') AND ds.position = (SELECT MAX(position) FROM driverStandings WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitRef = 'australia'))     ) AS last_driver WHERE      champion.raceId = last_driver.raceId AND champion.driverId = last_driver.driverId;	formula_1
SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';	formula_1
SELECT c.lat, c.lng FROM circuits c WHERE c.country = 'USA';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';	formula_1
SELECT AVG(constructorResults.points) as average_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';	formula_1
SELECT constructors.name, SUM(constructorStandings.points) AS total_points FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;	formula_1
SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId WHERE races.raceId = 291 AND constructorStandings.points = 0;	formula_1
SELECT      c.constructorId,      c.name,      COUNT(DISTINCT r.raceId) AS races_with_0_points FROM      constructors c JOIN      constructorStandings cs ON c.constructorId = cs.constructorId JOIN      races r ON cs.raceId = r.raceId WHERE      c.nationality = 'Japanese' AND     cs.points = 0 GROUP BY      c.constructorId HAVING      COUNT(DISTINCT r.raceId) = 2;	formula_1
SELECT DISTINCT c.constructorRef, c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;	formula_1
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN driverStandings ds ON c.constructorId = ds.constructorId JOIN drivers d ON ds.driverId = d.driverId WHERE d.nationality = 'French' AND ds.laps > 50;	formula_1
SELECT      (SELECT COUNT(DISTINCT driverId)       FROM results       JOIN races ON results.raceId = races.raceId       WHERE drivers.nationality = 'Japanese'       AND races.year BETWEEN 2007 AND 2009 AND results.time IS NOT NULL) /      (SELECT COUNT(DISTINCT driverId)       FROM results       JOIN drivers ON results.driverId = drivers.driverId       WHERE drivers.nationality = 'Japanese'       AND races.year BETWEEN 2007 AND 2009) * 100 AS completion_percentage FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.nationality = 'Japanese'  AND races.year BETWEEN 2007 AND 2009;	formula_1
SELECT      r.year,      AVG(TIMESTAMPDIFF(SECOND, '00:00:00', SUBSTR(r.time, 3, 8))) AS avg_champion_time_seconds FROM      results r JOIN      driverStandings ds ON r.driverId = ds.driverId AND r.raceId = ds.raceId JOIN      seasons s ON r.year = s.year WHERE      ds.position = 1 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') GROUP BY      r.year;	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob > '1975-01-01' AND ds.position = 2;	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'Italian' AND s.status = 'Not Classified' AND r.time IS NULL;	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.milliseconds = (     SELECT MIN(lt2.milliseconds)     FROM lapTimes lt2 );	formula_1
SELECT lt.lap FROM lapTimes lt JOIN driverStandings ds ON lt.driverId = ds.driverId JOIN results r ON ds.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN seasons s ON ra.year = s.year WHERE s.year = 2009 AND ds.position = 1 AND r.position = 1 ORDER BY SUBSTR(lt.time, 1, 8) ASC LIMIT 1;	formula_1
SELECT AVG(fastestLapSpeed) AS averageFastestLapSpeed FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE name = 'Spanish Grand Prix' AND year = 2009 );	formula_1
SELECT r.name AS RaceName, r.year AS RaceYear FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL AND res.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY res.milliseconds ASC LIMIT 1;	formula_1
SELECT      ROUND(         (COUNT(DISTINCT d.driverId) FILTER (WHERE d.dob < '1985-01-01' AND l.lap > 50) * 100.0) /         COUNT(DISTINCT d.driverId) FILTER (WHERE d.dob < '1985-01-01' OR l.lap <= 50),         2     ) AS percentage FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId JOIN races r ON l.raceId = r.raceId WHERE r.year BETWEEN 2000 AND 2005;	formula_1
SELECT COUNT(DISTINCT d.driverId) AS french_drivers_with_lap_time_less_than_02_00 FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN drivers nationality ON d.driverId = nationality.driverId WHERE nationality.nationality = 'French' AND lt.milliseconds < 60000;	formula_1
SELECT d.code FROM drivers d WHERE d.nationality = 'America';	formula_1
SELECT raceId  FROM races  WHERE year = 2009;	formula_1
SELECT COUNT(DISTINCT d.driverId)  FROM driverStandings ds JOIN results r ON ds.driverId = r.driverId WHERE r.raceId = 18;	formula_1
SELECT d.driverId, d.code, d.forename, d.surname, d.dob, d.nationality FROM drivers d WHERE d.nationality = 'Dutch' ORDER BY d.dob DESC LIMIT 3;	formula_1
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980';	formula_1
SELECT d.driverRef, d.forename, d.surname, MIN(lt.time) AS earliestLapTime FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId, d.driverRef, d.forename, d.surname ORDER BY earliestLapTime ASC LIMIT 3;	formula_1
SELECT d.driverRef FROM drivers d WHERE d.nationality = 'German' ORDER BY d.dob LIMIT 1;	formula_1
SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.dob = '1971-01-01' AND r.fastestLap IS NOT NULL ORDER BY r.fastestLapTime ASC LIMIT 1;	formula_1
SELECT      d.driverRef,      d.forename,      d.surname,      d.nationality,      d.dob,      lt.time AS latestLapTime FROM      drivers d JOIN      lapTimes lt ON d.driverId = lt.driverId WHERE      d.nationality = 'Spanish' AND d.dob < '1982-01-01' GROUP BY      d.driverId ORDER BY      lt.milliseconds DESC LIMIT 10;	formula_1
SELECT DISTINCT r.year  FROM races r JOIN results res ON r.raceId = res.raceId JOIN lapTimes lt ON res.driverId = lt.driverId AND r.raceId = lt.raceId WHERE lt.fastestLapTime IS NOT NULL ORDER BY lt.fastestLapTime ASC LIMIT 1;	formula_1
SELECT races.year FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY races.year ORDER BY MAX(lapTimes.milliseconds) ASC LIMIT 1;	formula_1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5;	formula_1
SELECT COUNT(DISTINCT r.driverId)  FROM results r JOIN status s ON r.statusId = s.statusId WHERE r.raceId BETWEEN 50 AND 100    AND s.status = 'Disqualified'   AND r.time IS NULL;	formula_1
SELECT COUNT(*) AS circuit_count,         c.location,         c.lat,         c.lng  FROM circuits c  WHERE c.country = 'Austria';	formula_1
SELECT r.round AS race_number, COUNT(*) AS finishers_count FROM races r JOIN results rs ON r.raceId = rs.raceId WHERE rs.time IS NOT NULL GROUP BY r.round ORDER BY finishers_count DESC LIMIT 1;	formula_1
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23;	formula_1
SELECT r.year, c.name AS circuit_name, r.date, r.time FROM races r JOIN qualifying q ON r.raceId = q.raceId JOIN drivers d ON q.driverId = d.driverId JOIN circuits c ON r.circuitId = c.circuitId WHERE d.dob = (SELECT MIN(dob) FROM drivers) AND q.number = 1;	formula_1
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.status = 'Disqualified';	formula_1
SELECT      constructors.name,      constructors.url FROM      constructors WHERE      nationality = 'Italian' ORDER BY      points DESC LIMIT 1;	formula_1
SELECT c.url  FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN (     SELECT constructorId, SUM(wins) AS total_wins     FROM constructorStandings     GROUP BY constructorId     ORDER BY total_wins DESC     LIMIT 1 ) AS wins_leader ON c.constructorId = wins_leader.constructorId;	formula_1
SELECT d.forename, d.surname, lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.time DESC LIMIT 1;	formula_1
SELECT r.name, MIN(lt.milliseconds) AS fastestLapTime FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.lap = 1 GROUP BY r.raceId ORDER BY fastestLapTime LIMIT 1;	formula_1
SELECT AVG(lapTimes.milliseconds) AS avgFastestLapTime FROM lapTimes JOIN results ON lapTimes.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'United States Grand Prix' AND YEAR(races.date) = 2006 AND results.rank < 11;	formula_1
SELECT      d.driverId,     d.forename,     d.surname,     AVG(p.duration) AS avgPitStopDuration FROM      drivers d JOIN      pitStops p ON d.driverId = p.driverId WHERE      d.nationality = 'German'      AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY      d.driverId, d.forename, d.surname ORDER BY      avgPitStopDuration ASC LIMIT 5;	formula_1
SELECT d.forename, d.surname, r.time FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId JOIN constructors c ON r.constructorId = c.constructorId WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.position = 1 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY r.milliseconds ASC LIMIT 1;	formula_1
SELECT c.constructorRef, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND cs.position = 1 ORDER BY cs.points DESC LIMIT 1;	formula_1
SELECT d.forename, d.surname, d.dob FROM drivers d WHERE d.nationality = 'Austrian' AND d.dob BETWEEN '1981-01-01' AND '1991-12-31';	formula_1
SELECT      CONCAT(d.forename, ' ', d.surname) AS fullName,      d.url AS wikipediaPage,      d.dob FROM      drivers d WHERE      d.nationality = 'German'      AND d.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY      d.dob DESC;	formula_1
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring';	formula_1
SELECT c.name, c.nationality, SUM(cr.points) as total_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;	formula_1
SELECT AVG(points) AS average_score FROM results JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND circuits.name = 'Turkish Grand Prix';	formula_1
SELECT      COUNT(raceId) / 10 AS average_races_per_year FROM      races WHERE      year BETWEEN 2000 AND 2010;	formula_1
SELECT nationality, COUNT(*) as driver_count FROM drivers GROUP BY nationality ORDER BY driver_count DESC LIMIT 1;	formula_1
SELECT      SUM(CASE WHEN rs.points = 25 THEN 1 ELSE 0 END) AS victories FROM      results rs JOIN      driverStandings ds ON rs.driverId = ds.driverId WHERE      ds.positionText = '91st'	formula_1
SELECT r.name  FROM races r JOIN results res ON r.raceId = res.raceId JOIN (     SELECT raceId, MIN(fastestLapTime) AS minFastestLapTime     FROM results     WHERE fastestLap IS NOT NULL     GROUP BY raceId ) AS fastestlaps ON r.raceId = fastestlaps.raceId WHERE fastestlaps.minFastestLapTime = res.fastestLapTime;	formula_1
SELECT c.location, c.country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races)	formula_1
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.circuitRef = 'Marina_Bay_Street_Circuit' AND q.position = 1 AND q.number = 3 AND q.q3 IS NOT NULL ORDER BY q.q3 LIMIT 1;	formula_1
SELECT      d.forename || ' ' || d.surname AS fullName,     d.nationality,     r.name AS raceName FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY      d.dob ASC LIMIT 1;	formula_1
SELECT      r.driverId,     COUNT(*) AS accident_count FROM      results r JOIN      races ra ON r.raceId = ra.raceId JOIN      status s ON r.statusId = s.statusId WHERE      ra.name = 'Canadian Grand Prix' AND     s.status = 'Accident' GROUP BY      r.driverId ORDER BY      accident_count DESC LIMIT 1;	formula_1
SELECT d.forename || ' ' || d.surname AS full_name, SUM(rs.wins) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN results rs ON ds.driverId = rs.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.driverId ORDER BY total_wins DESC LIMIT 1;	formula_1
SELECT raceId, driverId, MAX(duration) AS max_duration FROM pitStops GROUP BY raceId, driverId ORDER BY max_duration DESC LIMIT 1;	formula_1
SELECT MIN(time) AS fastestLapTime FROM lapTimes WHERE position = 1;	formula_1
SELECT MAX(duration) AS longest_pit_stop_duration FROM pitStops WHERE driverId IN (     SELECT driverId     FROM drivers     WHERE surnames = 'Hamilton' );	formula_1
SELECT lap FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';	formula_1
SELECT p.driverId, d.forename, d.surname, p.lap, p.time, p.duration FROM pitStops p JOIN drivers d ON p.driverId = d.driverId JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix';	formula_1
SELECT      d.forename || ' ' || d.surname AS driver_name,     l.time AS fastest_lap_time,     r.positionText AS fastest_lap_position,     r.year,     c.name AS circuit_name FROM      lapTimes l JOIN      drivers d ON l.driverId = d.driverId JOIN      results r ON l.driverId = r.driverId AND l.raceId = r.raceId JOIN      races ra ON r.raceId = ra.raceId JOIN      circuits c ON ra.circuitId = c.circuitId WHERE      d.surname = 'Hamilton' AND     r.positionText = '1' AND     l.milliseconds = (         SELECT              MIN(l2.milliseconds)         FROM              lapTimes l2         JOIN              drivers d2 ON l2.driverId = d2.driverId         JOIN              results r2 ON l2.driverId = r2.driverId AND l2.raceId = r2.raceId         JOIN              races ra2 ON r2.raceId = ra2.raceId         WHERE              d2.surname = 'Hamilton'     );	formula_1
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) AND lt.milliseconds IS NOT NULL;	formula_1
SELECT      r.position  FROM      lapTimes lt  JOIN      races r ON lt.raceId = r.raceId  JOIN      drivers d ON lt.driverId = d.driverId  WHERE      d.surname = 'Hamilton'      AND r.name LIKE 'Formula_1%' ORDER BY      lt.milliseconds  LIMIT 1;	formula_1
SELECT      d.driverId,     d.forename,     d.surname,     lt.time FROM      lapTimes lt JOIN      drivers d ON lt.driverId = d.driverId JOIN      races r ON lt.raceId = r.raceId WHERE      r.name = 'Austrian Grand Prix' ORDER BY      lt.time ASC LIMIT 1;	formula_1
SELECT      d.driverId,     d.forename,     d.surname,     r.name AS circuitName,     lt.lap,     lt.time,     lt.milliseconds FROM      lapTimes lt JOIN      drivers d ON lt.driverId = d.driverId JOIN      circuits r ON lt.raceId IN (         SELECT              raceId          FROM              races          WHERE              country = 'Italy'     ) ORDER BY      lt.milliseconds ASC LIMIT 1;	formula_1
SELECT r.name AS RaceName FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix' AND       EXISTS (         SELECT 1         FROM lapTimes lt         WHERE lt.raceId = r.raceId AND               lt.time = (SELECT MIN(time) FROM lapTimes lt2 WHERE lt2.raceId = r.raceId)       );	formula_1
SELECT      pitStops.duration FROM      pitStops JOIN      races ON pitStops.raceId = races.raceId JOIN      circuits ON races.circuitId = circuits.circuitId JOIN      lapTimes ON pitStops.driverId = lapTimes.driverId AND pitStops.raceId = lapTimes.raceId WHERE      circuits.name = 'Austrian Grand Prix'      AND lapTimes.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = races.raceId)	formula_1
SELECT c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.circuitId WHERE lt.time = '1:29.488';	formula_1
SELECT AVG(T1.milliseconds) as average_pit_stop_time FROM pitStops T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton';	formula_1
SELECT AVG(l(milliseconds)) AS average_lap_time_milliseconds FROM lapTimes WHERE raceId IN (     SELECT raceId     FROM races     WHERE circuitId IN (         SELECT circuitId         FROM circuits         WHERE country = 'Italy'     ) );	formula_1
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);	european_football_2
SELECT p.player_name, p.height FROM Player p WHERE p.height = (SELECT MAX(height) FROM Player)	european_football_2
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);	european_football_2
SELECT COUNT(DISTINCT pa.player_api_id) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating BETWEEN 60 AND 65 AND pa.defensive_work_rate = 'low';	european_football_2
SELECT      pa.player_api_id,      pa.player_name,      pa.crossing FROM      Player_Attributes pa JOIN      Player p ON pa.player_api_id = p.player_api_id ORDER BY      pa.crossing DESC LIMIT 5;	european_football_2
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_goals DESC LIMIT 1;	european_football_2
SELECT      home_team_api_id,     COUNT(*) AS lost_matches FROM      Match WHERE      season = '2015/2016'      AND (home_team_goal < away_team_goal) GROUP BY      home_team_api_id ORDER BY      lost_matches ASC LIMIT 1;	european_football_2
SELECT P.player_name, SUM(CASE WHEN MA.penalties = 'P' THEN 1 ELSE 0 END) AS penalties FROM Player P JOIN Match MA ON P.player_api_id = MA.home_player_1 OR P.player_api_id = MA.home_player_2 OR P.player_api_id = MA.home_player_3 OR P.player_api_id = MA.home_player_4 OR P.player_api_id = MA.home_player_5 OR P.player_api_id = MA.home_player_6 OR P.player_api_id = MA.home_player_7 OR P.player_api_id = MA.home_player_8 OR P.player_api_id = MA.home_player_9 OR P.player_api_id = MA.home_player_10 OR P.player_api_id = MA.home_player_11 OR P.player_api_id = MA.away_player_1 OR P.player_api_id = MA.away_player_2 OR P.player_api_id = MA.away_player_3 OR P.player_api_id = MA.away_player_4 OR P.player_api_id = MA.away_player_5 OR P.player_api_id = MA.away_player_6 OR P.player_api_id = MA.away_player_7 OR P.player_api_id = MA.away_player_8 OR P.player_api_id = MA.away_player_9 OR P.player_api_id = MA.away_player_10 OR P.player_api_id = MA.away_player_11 GROUP BY P.player_name ORDER BY penalties DESC LIMIT 10;	european_football_2
SELECT away_team_api_id FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League')    AND season = '2009/2010'   AND away_team_goal > home_team_goal GROUP BY away_team_api_id ORDER BY SUM(away_team_goal - home_team_goal) DESC LIMIT 1;	european_football_2
SELECT T1.team_long_name, T2.buildUpPlaySpeed FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) LIMIT 4;	european_football_2
SELECT L.name, COUNT(M.id) AS draw_matches FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY draw_matches DESC LIMIT 1;	european_football_2
SELECT      p.player_name,     TIMESTAMPDIFF(YEAR, p.birthday, CURRENT_TIMESTAMP) AS age FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.sprint_speed >= 97 AND      pa.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';	european_football_2
SELECT League.name, COUNT(Match.id) AS total_matches FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_matches DESC LIMIT 1;	european_football_2
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';	european_football_2
SELECT DISTINCT p.player_api_id FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.date LIKE '2010%' GROUP BY p.player_api_id HAVING pa.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%') ORDER BY pa.overall_rating DESC LIMIT 1;	european_football_2
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;	european_football_2
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing > (     SELECT AVG(T2.buildUpPlayPassing)     FROM Team_Attributes AS T2     JOIN Team AS T1 ON T1.team_api_id = T2.team_api_id     WHERE strftime('%Y', T2.date) = '2012'     AND T2.buildUpPlayPassing IS NOT NULL     GROUP BY T1.team_api_id )	european_football_2
SELECT      ROUND(         (SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0) / COUNT(P.player_api_id),         2     ) AS left_foot_percentage FROM      Player P JOIN      Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE      PA.preferred_foot = 'left'     AND P.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';	european_football_2
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;	european_football_2
SELECT      AVG(CAST(SUM(pa.long_shots) AS REAL) / COUNT(DISTINCT p.player_fifa_api_id)) AS average_long_shots FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      p.player_name = 'Ahmed Samir Farag';	european_football_2
SELECT      P.player_name,      AVG(PA.heading_accuracy) AS avg_heading_accuracy FROM      Player P JOIN      Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE      P.height > 180 GROUP BY      P.player_name ORDER BY      avg_heading_accuracy DESC LIMIT 10;	european_football_2
SELECT T2.team_long_name FROM Team_Attributes AS TA JOIN Team AS T2 ON TA.team_api_id = T2.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND buildUpPlayDribblingClass = 'Normal') ORDER BY TA.chanceCreationPassing DESC;	european_football_2
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' AND AVG(M.home_team_goal) > AVG(M.away_team_goal) GROUP BY L.name	european_football_2
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';	european_football_2
SELECT p.player_name FROM Player p WHERE substr(p.birthday, 1, 4) = '1970' AND substr(p.birthday, 6, 2) = '10';	european_football_2
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_name` = 'Franco Zennaro' );	european_football_2
SELECT     Team_Attributes.buildUpPlayPositioningClass AS FreedomOfMovementInFirstTwoThirds FROM     Team_Attributes INNER JOIN     Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE     Team.team_long_name = 'ADO Den Haag'	european_football_2
SELECT      PA.heading_accuracy AS header_finishing_rate FROM      Player_Attributes PA JOIN      Player P ON PA.player_api_id = P.player_api_id WHERE      P.player_name = 'Francois Affolter' AND      PA.date = '2014-09-18 00:00:00';	european_football_2
SELECT overall_rating FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011';	european_football_2
SELECT COUNT(*)  FROM Match  WHERE league_id IN (SELECT id FROM League WHERE name = 'Scotland Premier League')  AND season = '2015/2016';	european_football_2
SELECT preferred_foot FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday = (SELECT MIN(birthday) FROM Player)	european_football_2
SELECT player_name, potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id OR Player_Attributes.player_api_id = Player.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes) ORDER BY potential DESC LIMIT 1;	european_football_2
SELECT COUNT(*) FROM Player_Attributes WHERE weight < 130 AND preferred_foot = 'left' AND player_api_id IN (SELECT player_api_id FROM Player_Attributes);	european_football_2
SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky';	european_football_2
SELECT `Player_Attributes`.`defensive_work_rate` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player`.`player_name` = 'David Wilson';	european_football_2
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);	european_football_2
SELECT L.name  FROM League L  JOIN Country C ON L.country_id = C.id  WHERE C.name = 'Netherlands';	european_football_2
SELECT AVG(home_team_goal)  FROM Match  JOIN Country ON Match.country_id = Country.id  WHERE Country.name = 'Poland' AND Match.season = '2010/2011';	european_football_2
SELECT pa.player_name, pa.player_api_id, AVG(pa.finishing) AS avg_finishing FROM Player pa JOIN Player_Attributes pa_attr ON pa.player_api_id = pa_attr.player_api_id WHERE pa.height = (SELECT MAX(height) FROM Player)    OR pa.height = (SELECT MIN(height) FROM Player) GROUP BY pa.player_name, pa.player_api_id ORDER BY avg_finishing DESC LIMIT 1;	european_football_2
SELECT p.player_name FROM Player p WHERE p.height > 180;	european_football_2
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';	european_football_2
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam %' AND weight > 170;	european_football_2
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';	european_football_2
SELECT `potential` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_name` = 'Aaron Doran' );	european_football_2
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE preferred_foot = 'left';	european_football_2
SELECT T1.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast';	european_football_2
SELECT buildUpPlayPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_short_name = 'CLB';	european_football_2
SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70;	european_football_2
SELECT AVG(overall_rating) AS avg_overall_rating FROM Player_Attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND player_fifa_api_id IN (     SELECT player_fifa_api_id     FROM Player     WHERE height > 170 );	european_football_2
SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1;	european_football_2
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';	european_football_2
SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;	european_football_2
SELECT AVG(overall_rating)  FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';	european_football_2
SELECT T2.team_short_name FROM Match AS M JOIN Team AS T1 ON M.home_team_api_id = T1.team_api_id WHERE M.home_team_goal = 10;	european_football_2
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.potential = 61 AND Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61);	european_football_2
SELECT     AVG(CASE WHEN pa.player_name = 'Abdou Diallo' THEN pa.ball_control ELSE NULL END) -      AVG(CASE WHEN pa.player_name = 'Aaron Appindangoye' THEN pa.ball_control ELSE NULL END) AS ball_control_difference FROM     Player_Attributes pa JOIN     Player p ON pa.player_api_id = p.player_api_id WHERE     p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye');	european_football_2
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';	european_football_2
SELECT      CASE          WHEN P1.birthday < P2.birthday THEN P1.player_name          ELSE P2.player_name      END AS older_player FROM      Player P1 JOIN      Player P2 ON      P1.player_api_id = 515 AND P2.player_api_id = 815;	european_football_2
SELECT player_name, height  FROM Player  WHERE height = (SELECT MAX(height) FROM Player);	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low';	european_football_2
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League';	european_football_2
SELECT name  FROM League  JOIN Country ON League.country_id = Country.id  WHERE Country.name = 'Germany';	european_football_2
SELECT player_name, MAX(overall_rating) AS strongest_overall_strength FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id GROUP BY Player.player_api_id, Player.player_name ORDER BY strongest_overall_strength DESC LIMIT 1;	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';	european_football_2
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY Player_Attributes.crossing DESC LIMIT 1;	european_football_2
SELECT heading_accuracy FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70;	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;	european_football_2
SELECT COUNT(*) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';	european_football_2
SELECT pa.long_passing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player)	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')  AND strftime('%Y', date) = '2009'  AND strftime('%m', date) = '04';	european_football_2
SELECT      L.name,      COUNT(M.id) AS match_count FROM      Match M JOIN      League L ON M.league_id = L.id WHERE      M.season = '2008/2009' GROUP BY      L.name ORDER BY      match_count DESC LIMIT 1;	european_football_2
SELECT AVG(`Player_Attributes`.`overall_rating`)  FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE strftime('%Y', `Player`.`birthday`) < '1986';	european_football_2
SELECT      (ABS((p1.overall_rating - p2.overall_rating) / p2.overall_rating) * 100) AS rating_difference_percentage FROM      Player_Attributes AS pa1 JOIN      Player AS p1 ON pa1.player_api_id = p1.player_api_id JOIN      Player_Attributes AS pa2 ON pa2.player_api_id = p2.player_api_id JOIN      Player AS p2 ON p2.player_api_id = p2.player_api_id WHERE      p1.player_name = 'Ariel Borysiuk' AND p2.player_name = 'Paulin Puel';	european_football_2
SELECT AVG(TA.buildUpPlaySpeed) as AverageBuildUpPlaySpeed FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Heart of Midlothian';	european_football_2
SELECT AVG(T1.overall_rating) AS average_rating FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';	european_football_2
SELECT SUM(PA.crossing) AS total_crossing_score FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Lennox';	european_football_2
SELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing, chanceCreationPassingClass FROM Team_Attributes WHERE team_long_name = 'Ajax' GROUP BY chanceCreationPassingClass ORDER BY highest_chance_creation_passing DESC LIMIT 1;	european_football_2
SELECT preferred_foot  FROM Player_Attributes  JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.player_name = 'Abdou Diallo';	european_football_2
SELECT MAX(T1.overall_rating)  FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Dorlan Pabon'	european_football_2
SELECT AVG(away_team_goal) AS avg_away_goals FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Parma' AND Match.country_id = (SELECT id FROM Country WHERE name = 'Italy');	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1;	european_football_2
SELECT overall_rating  FROM Player_Attributes  WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';	european_football_2
SELECT potential  FROM Player_Attributes  WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';	european_football_2
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Migliore' AND `date` = '2015-05-01 00:00:00';	european_football_2
SELECT defensive_work_rate FROM Player_Attributes WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00';	european_football_2
SELECT date FROM Player_Attributes WHERE player_name = 'Kevin Constant' ORDER BY crossing DESC LIMIT 1;	european_football_2
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Willem II' AND `date` = '2012-02-22 00:00:00';	european_football_2
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_short_name = 'LEI' AND date = '2015-09-10 00:00:00';	european_football_2
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'FC Lorient' AND `date` = '2010-02-22';	european_football_2
SELECT `chanceCreationPassingClass` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_api_id` = `Team.team_api_id` WHERE `Team.team_long_name` = 'PEC Zwolle' AND `Team_Attributes.date` = '2013-09-20 00:00:00'	european_football_2
SELECT chanceCreationCrossingClass FROM Team_Attributes WHERE team_long_name = 'Hull City' AND date = '2010-02-22 00:00:00'	european_football_2
SELECT      Team_Attributes.defence_aggression_class  FROM      Team_Attributes  JOIN      Team  ON      Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id  WHERE      Team.team_long_name = 'Hannover 96'  AND      Team_Attributes.date = '2015-09-10 00:00:00'	european_football_2
SELECT AVG(overall_rating) AS avg_overall_rating FROM Player_Attributes WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'	european_football_2
SELECT      ((         (SELECT overall_rating           FROM Player_Attributes           WHERE player_fifa_api_id = (SELECT player_fifa_api_id                                     FROM Player                                     WHERE player_name = 'Landon Donovan')           AND date = '2013-07-12') -          (SELECT overall_rating           FROM Player_Attributes           WHERE player_fifa_api_id = (SELECT player_fifa_api_id                                     FROM Player                                     WHERE player_name = 'Jordan Bowery')           AND date = '2013-07-12')     ) /      (SELECT overall_rating       FROM Player_Attributes       WHERE player_fifa_api_id = (SELECT player_fifa_api_id                                  FROM Player                                  WHERE player_name = 'Landon Donovan')       AND date = '2013-07-12')     ) * 100 AS percentage_difference	european_football_2
SELECT p.player_name FROM Player p ORDER BY p.height DESC LIMIT 5;	european_football_2
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;	european_football_2
SELECT player_name  FROM Player  WHERE (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) > 34;	european_football_2
SELECT SUM(home_team_goal) AS total_home_goals FROM Match JOIN Player ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 WHERE Player.player_name = 'Aaron Lennon';	european_football_2
SELECT SUM(M.away_team_goal) AS TotalAwayGoals FROM Match M JOIN Player P ON M.away_player_1 = P.player_api_id OR M.away_player_2 = P.player_api_id WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira');	european_football_2
SELECT SUM(home_team_goal) AS total_home_goals FROM Match JOIN Player ON home_player_1 = player_api_id OR               home_player_2 = player_api_id OR               home_player_3 = player_api_id OR               home_player_4 = player_api_id OR               home_player_5 = player_api_id OR               home_player_6 = player_api_id OR               home_player_7 = player_api_id OR               home_player_8 = player_api_id OR               home_player_9 = player_api_id OR               home_player_10 = player_api_id OR               home_player_11 = player_api_id JOIN Player_Attributes ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday > date('now', '-30 years', 'localtime') AND home_team_goal > 0;	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY pa.overall_rating DESC LIMIT 10;	european_football_2
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)	european_football_2
SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Match M ON P.player_api_id = M.home_player_X1 OR P.player_api_id = M.home_player_X2 OR P.player_api_id = M.home_player_X3 OR                   P.player_api_id = M.home_player_X4 OR P.player_api_id = M.home_player_X5 OR P.player_api_id = M.home_player_X6 OR                   P.player_api_id = M.home_player_X7 OR P.player_api_id = M.home_player_X8 OR P.player_api_id = M.home_player_X9 OR                   P.player_api_id = M.home_player_X10 OR P.player_api_id = M.home_player_X11 OR P.player_api_id = M.away_player_X1 OR                   P.player_api_id = M.away_player_X2 OR P.player_api_id = M.away_player_X3 OR P.player_api_id = M.away_player_X4 OR                   P.player_api_id = M.away_player_X5 OR P.player_api_id = M.away_player_X6 OR P.player_api_id = M.away_player_X7 OR                   P.player_api_id = M.away_player_X8 OR P.player_api_id = M.away_player_X9 OR P.player_api_id = M.away_player_X10 OR                   P.player_api_id = M.away_player_X11 WHERE PA.attacking_work_rate = 'high' AND (P.player_api_id = M.home_player_1 OR P.player_api_id = M.home_player_2 OR P.player_api_id = M.home_player_3 OR       P.player_api_id = M.home_player_4 OR P.player_api_id = M.home_player_5 OR P.player_api_id = M.home_player_6 OR       P.player_api_id = M.home_player_7 OR P.player_api_id = M.home_player_8 OR P.player_api_id = M.home_player_9 OR       P.player_api_id = M.home_player_10 OR P.player_api_id = M.home_player_11 OR P.player_api_id = M.away_player_1 OR       P.player_api_id = M.away_player_2 OR P.player_api_id = M.away_player_3 OR P.player_api_id = M.away_player_4 OR       P.player_api_id = M.away_player_5 OR P.player_api_id = M.away	european_football_2
SELECT      p.player_name,     MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP, 'localtime'), datetime(p.birthday))) AS age FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.finishing = 1 GROUP BY      p.player_name ORDER BY      age DESC LIMIT 1;	european_football_2
SELECT DISTINCT p.player_name FROM Player p JOIN Country c ON p.player_fifa_api_id = c.id WHERE c.name = 'Belgium';	european_football_2
SELECT P.player_name, C.name AS country_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Country C ON P.player_fifa_api_id = C.id WHERE PA.vision >= 90;	european_football_2
SELECT      Country.name AS CountryName,     AVG(Player.weight) AS AverageWeight FROM      Player JOIN      Country ON Player.player_fifa_api_id = Country.id GROUP BY      Country.name ORDER BY      AverageWeight DESC LIMIT 1;	european_football_2
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow';	european_football_2
SELECT T2.team_short_name FROM Team_Attributes AS TA JOIN Team AS T2 ON TA.team_fifa_api_id = T2.team_api_id OR TA.team_api_id = T2.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe';	european_football_2
SELECT AVG(height) AS avg_height FROM Player JOIN Country ON Player.player_fifa_api_id = Country.id WHERE Country.name = 'Italy';	european_football_2
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;	european_football_2
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'	european_football_2
SELECT      (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS JumpingScoreDifference	european_football_2
SELECT p.player_api_id FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MIN(potential) FROM Player_Attributes WHERE preferred_foot = 'right') AND pa.preferred_foot = 'right' ORDER BY pa.potential ASC LIMIT 3;	european_football_2
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND pa.preferred_foot = 'left'	european_football_2
SELECT      CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM Player_Attributes) * 100 AS percentage_of_players_with_strength_and_stamina_above_80 FROM      Player_Attributes WHERE      strength > 80 AND stamina > 80;	european_football_2
SELECT C.name  FROM Match M  JOIN League L ON M.league_id = L.id  JOIN Country C ON L.country_id = C.id  WHERE L.name = 'Ekstraklasa' AND C.name = 'Poland';	european_football_2
SELECT      home_team_goal AS HomeTeamFinalScore,      away_team_goal AS AwayTeamFinalScore FROM      Match WHERE      date = '2008-09-24%'      AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')     AND (home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Home Team Name') OR           away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Home Team Name'))	european_football_2
SELECT      pa.sprint_speed,     pa.agility,     pa.acceleration FROM      Player_Attributes pa JOIN      Player p ON pa.player_api_id = p.player_api_id WHERE      p.player_name = 'Alexis Blin';	european_football_2
SELECT      team_long_name,     buildUpPlaySpeedClass FROM      Team_Attributes JOIN      Team  ON      Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE      Team.team_long_name = 'KSV Cercle Brugge';	european_football_2
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Serie A') AND season = '2015/2016';	european_football_2
SELECT MAX(home_team_goal) AS highest_home_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie' AND country_id = (SELECT id FROM Country WHERE name = 'Netherlands'))	european_football_2
SELECT      p.player_name,      pa.finishing,      pa.curve FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      p.weight = (SELECT MAX(weight) FROM Player);	european_football_2
SELECT L.name, COUNT(M.id) AS total_games FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_games DESC LIMIT 1;	european_football_2
SELECT T3.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id JOIN Team AS T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id WHERE T1.away_team_goal IS NOT NULL GROUP BY T3.team_long_name ORDER BY SUM(T1.away_team_goal) DESC LIMIT 1;	european_football_2
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)	european_football_2
SELECT      ROUND((COUNT(CASE WHEN `Player`.`height` < 180 AND `Player_Attributes`.`overall_rating` > 70 THEN 1 END) * 100.0) / COUNT(`Player`.`id`), 2) AS 'percentage' FROM      `Player` INNER JOIN      `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id`	european_football_2
SELECT     CASE         WHEN SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END)               - SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) > 0 THEN              'In-patients'         ELSE              'Outpatients'     END AS 'Dominant_Patient_Type',     ROUND(         100.0 *          (SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END)           - SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END)) /          SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END), 2     ) AS 'Percentage_Deviation' FROM     Patient;	thrombosis_prediction
SELECT      (COUNT(CASE WHEN P.Birthday > '1930' THEN P.ID END) * 100.0) / COUNT(CASE WHEN P.SEX = 'F' THEN P.ID END) AS PercentageOfFemalesBornAfter1930 FROM      Patient P	thrombosis_prediction
SELECT      ROUND((COUNT(CASE WHEN P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' THEN 1 END) * 100.0) / COUNT(P.ID), 2) AS PercentageOfInpatients FROM      Patient P WHERE      P.Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND P.Admission = '+';	thrombosis_prediction
SELECT      (COUNT(CASE WHEN E.Diagnosis = 'SLE' AND P.Admission = '+' THEN E.ID END) /      COUNT(CASE WHEN E.Diagnosis = 'SLE' AND P.Admission = '-' THEN E.ID END)) AS OutpatientToInpatientRatio FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Diagnosis = 'SLE';	thrombosis_prediction
SELECT p.Diagnosis, l.Date FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = 30609;	thrombosis_prediction
SELECT p.SEX, p.Birthday, e.Examination_Date, e.Symptoms FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ID = 163109;	thrombosis_prediction
SELECT      p.ID,      p.SEX,      p.Birthday FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.LDH > 500;	thrombosis_prediction
SELECT      p.ID,     (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.RVVT = '+'	thrombosis_prediction
SELECT      p.ID,      p.SEX,      e.Diagnosis FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.Thrombosis = 2;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE EXTRACT(YEAR FROM p.Birthday) = 1937 AND l.T-CHO >= 250;	thrombosis_prediction
SELECT      p.ID,      p.SEX,      p.Diagnosis FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.ALB < 3.5;	thrombosis_prediction
SELECT      (COUNT(CASE WHEN P.SEX = 'F' AND L.TP < 6.0 OR L.TP > 8.5 THEN P.ID END) * 100.0) / COUNT(P.ID) AS PercentageOfFemalesWithAbnormalTP FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID	thrombosis_prediction
SELECT AVG("Examination"."aCL IgG") AS avg_aCL_IgG FROM "Examination" INNER JOIN "Patient" ON "Examination"."ID" = "Patient"."ID" WHERE "Patient"."Admission" = '+' AND SUBSTR("Patient"."Birthday", 1, 4) <= SUBSTR(CURRENT_TIMESTAMP, 1, 4) - 50;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND YEAR(p.Description) = 1997 AND e.Admission = '-';	thrombosis_prediction
SELECT MIN(SUBTRACT(YEAR(`Birthday`), YEAR(`First Date`))) AS YoungestAge FROM `Patient` WHERE `First Date` IS NOT NULL;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND YEAR(E.Examination Date) = 1997;	thrombosis_prediction
SELECT      (MAX(YEAR(P.Birthday)) - MIN(YEAR(P.Birthday))) AS AgeGap FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      L.TG >= 200	thrombosis_prediction
SELECT p.SEX, p.Birthday, e.Symptoms, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY p.Birthday;	thrombosis_prediction
SELECT      EXTRACT(YEAR FROM '1998-12-31') - EXTRACT(YEAR FROM 'First Date') AS Year,     EXTRACT(MONTH FROM 'First Date') AS Month,     COUNT(P.ID) / 12 AS AverageMalePatients FROM      Patient P WHERE      P.SEX = 'M'     AND P.First Date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY      EXTRACT(YEAR FROM 'First Date'),     EXTRACT(MONTH FROM 'First Date')	thrombosis_prediction
SELECT      MIN(L.Date) AS LabWorkDate,      (SUBTRACT(YEAR(P.FirstDate), YEAR(P.Birthday))) AS AgeAtAdmission FROM      Examination E INNER JOIN      Patient P ON E.ID = P.ID WHERE      E.Diagnosis = 'SJS' INNER JOIN      Laboratory L ON P.ID = L.ID ORDER BY      P.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT      (SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) / SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END)) AS male_to_female_ratio FROM      Examination e JOIN      Patient p ON e.ID = p.ID WHERE      e.UA <= 8.0 AND p.SEX = 'M' OR      e.UA <= 6.5 AND p.SEX = 'F';	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID AND e.Examination_Date >= DATE_ADD(p.First_Date, INTERVAL 1 YEAR) WHERE e.ID IS NULL;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE Examination.Date BETWEEN '1990-01-01' AND '1993-12-31' AND (YEAR(Patient.Birthday) < 1990 OR (YEAR(Patient.Birthday) = 1990 AND MONTH(Patient.Birthday) < 1)) AND (YEAR(Patient.Birthday) > 1993 OR (YEAR(Patient.Birthday) = 1993 AND MONTH(Patient.Birthday) > 12)) AND Patient.ID IN (SELECT ID FROM Patient WHERE YEAR(Birthday) < 1990 OR (YEAR(Birthday) = 1990 AND MONTH(Birthday) < 1) OR (YEAR(Birthday) > 1993 OR (YEAR(Birthday) = 1993 AND MONTH(Birthday) > 12)));	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.T-BIL > 2.0;	thrombosis_prediction
SELECT `Diagnosis`, COUNT(`Diagnosis`) AS DiagnosisCount FROM `Examination` WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY `Diagnosis` ORDER BY DiagnosisCount DESC LIMIT 1;	thrombosis_prediction
SELECT AVG(SUBTRACT(YEAR(CURRENT_DATE), YEAR(Birthday))) AS AverageAge FROM Patient WHERE ID IN (     SELECT DISTINCT E.ID     FROM Examination E     WHERE E.'Examination Date' BETWEEN '1991-10-01' AND '1991-10-30' )	thrombosis_prediction
SELECT      P.Birthday,      P.Diagnosis,     (YEAR(CURRENT_DATE) - YEAR(P.Birthday)) AS AgeAtExamination FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      E.HGB = (SELECT MAX(HGB) FROM Examination)	thrombosis_prediction
SELECT `ANA`  FROM `Examination`  WHERE `ID` = 3605340 AND `Examination Date` = '1996-12-02';	thrombosis_prediction
SELECT T1.T-CHO  FROM Laboratory AS T1  JOIN Patient AS T2 ON T1.ID = T2.ID  WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04' AND T1.T-CHO < 250;	thrombosis_prediction
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'AORTITIS' ORDER BY p.First Date LIMIT 1;	thrombosis_prediction
SELECT      E.aCL_IgM FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      P.Description = '1994-02-19' AND      P.Diagnosis = 'SLE' AND      E.Examination_Date = '1993-11-12';	thrombosis_prediction
SELECT P.SEX  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX IN ('M', 'F')  AND L.GPT = 9  AND L.Date = '1992-06-12';	thrombosis_prediction
SELECT      p.Birthday,     DATEDIFF('1991-10-21', p.Birthday) / 365 AS AgeAtTestDate FROM      Laboratory l INNER JOIN      Patient p ON l.ID = p.ID WHERE      l.UA = 8.4 AND      l.Date = '1991-10-21';	thrombosis_prediction
SELECT COUNT(Lab.ID) AS TotalLabTests FROM Laboratory Lab JOIN Patient Pat ON Lab.ID = Pat.ID WHERE Pat.First_Date = '1991-06-13' AND Pat.Diagnosis = 'SJS' AND YEAR(Lab.Date) = 1995;	thrombosis_prediction
SELECT p.`Diagnosis` as OriginalDiagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.`First Date` = '1997-01-27' AND e.`Diagnosis` = 'SLE';	thrombosis_prediction
SELECT E.Symptoms FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.'Examination Date' = '1993-09-27';	thrombosis_prediction
SELECT     SUM(CASE WHEN E.Date LIKE '1981-11-%' THEN L.T-CHO ELSE 0 END) -      SUM(CASE WHEN E.Date LIKE '1981-12-%' THEN L.T-CHO ELSE 0 END) AS DecreaseRate FROM     Examination E JOIN     Laboratory L ON E.ID = L.ID JOIN     Patient P ON E.ID = P.ID WHERE     P.Birthday = '1959-02-18'	thrombosis_prediction
SELECT DISTINCT E.ID FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Diagnosis = 'Behcet' AND E.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31';	thrombosis_prediction
SELECT      p.ID FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.'Examination Date' BETWEEN '1987-07-06' AND '1996-01-31'     AND e.GPT > 30     AND e.ALB < 4 ORDER BY      p.ID;	thrombosis_prediction
SELECT ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+' ORDER BY ID;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination);	thrombosis_prediction
SELECT      ROUND(         (SUM(CASE WHEN E.UA <= 6.5 THEN 1 ELSE 0 END) * 100.0) /          SUM(CASE WHEN E.UA <= 6.5 AND E.U-PRO > 0 AND E.U-PRO < 30 THEN 1 ELSE 0 END),         2     ) AS Percentage FROM      Examination E JOIN      Laboratory L ON E.ID = L.ID WHERE      E.UA <= 6.5 AND     E.U-PRO > 0 AND E.U-PRO < 30;	thrombosis_prediction
SELECT      ROUND((SUM(CASE WHEN p.SEX = 'M' AND YEAR(e.'Examination Date') = 1981 THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN p.SEX = 'M' AND YEAR(p.'First Date') = 1981 THEN 1 ELSE NULL END), 2) AS percentage_Behcet FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      p.SEX = 'M' AND      YEAR(p.'First Date') = 1981 AND      e.'Diagnosis' = 'BEHCET'	thrombosis_prediction
SELECT DISTINCT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-'    AND l.Date LIKE '1991-10%'   AND l.T-BIL < 2.0;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE 'ANA Pattern' != 'p' AND 'SEX' = 'F' AND 'Birthday' BETWEEN '1980-01-01' AND '1989-12-31' AND 'ID' IN (     SELECT 'ID'     FROM Patient );	thrombosis_prediction
SELECT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123;	thrombosis_prediction
SELECT AVG(L.ALB) AS AverageAlbuminLevel FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE';	thrombosis_prediction
SELECT Symptoms, COUNT(*) AS symptom_count FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY symptom_count DESC LIMIT 1;	thrombosis_prediction
SELECT      p.First_Date AS First_Medical_Info_Documentation,      e.Diagnosis AS Disease FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      p.ID = 48473 ORDER BY      e.Examination_Date ASC LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Examination  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE YEAR(Examination.Examination Date) = 1997  AND Laboratory.TP > 6 AND Laboratory.TP < 8.5;	thrombosis_prediction
SELECT      (SUM(CASE WHEN Examination.Symptoms LIKE '%ITP%' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN Examination.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END), 0)) * 100 AS Proportion FROM Examination;	thrombosis_prediction
SELECT      ROUND((COUNT(CASE WHEN P.SEX = 'F' THEN 1 END) * 100.0) / COUNT(*), 2) AS Percentage_Women_with_RA FROM      Patient P WHERE      YEAR(P.Birthday) = 1980 AND      P.Diagnosis = 'RA';	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.SEX = 'M'  AND e.'Examination Date' BETWEEN '1995-01-01' AND '1997-12-31'  AND e.Diagnosis = 'BEHCET'  AND p.Admission = '-';	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;	thrombosis_prediction
SELECT      DATEDIFF(E.Examination_Date, P.First_Date) AS DaysSinceAdmission FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      P.ID = 821298	thrombosis_prediction
SELECT      CASE          WHEN p.SEX = 'M' AND l.UA > 8.0 THEN 'Yes'         WHEN p.SEX = 'F' AND l.UA > 6.5 THEN 'Yes'         ELSE 'No'     END AS IsUricAcidNormal FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.ID = 57266;	thrombosis_prediction
SELECT Date FROM Laboratory WHERE ID IN (     SELECT ID     FROM Patient     WHERE ID = 48473 ) AND GOT >= 60;	thrombosis_prediction
SELECT P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND YEAR(L.Date) = 1994;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;	thrombosis_prediction
SELECT p.ID, p.Birthday, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GPT > 60 ORDER BY p.Birthday ASC;	thrombosis_prediction
SELECT AVG(LDH) AS Avg_LDH FROM Laboratory WHERE LDH < 500;	thrombosis_prediction
SELECT p.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH BETWEEN 600 AND 800;	thrombosis_prediction
SELECT      P.Admission,      COUNT(*) AS TotalPatients FROM      Laboratory L JOIN      Patient P ON L.ID = P.ID WHERE      L.ALP < 300 GROUP BY      P.Admission;	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP < 300;	thrombosis_prediction
SELECT      Patient.ID,      Patient.SEX,      Patient.Birthday  FROM      Patient  JOIN      Laboratory ON Patient.ID = Laboratory.ID  WHERE      Laboratory.TP < 6.0;	thrombosis_prediction
SELECT     P.ID,     P.SEX,     L.TP,     L.TP - 8.5 AS TP_Deviation FROM     Patient P JOIN     Laboratory L ON P.ID = L.ID WHERE     P.SEX = 'F'     AND L.TP > 8.5;	thrombosis_prediction
SELECT p.ID, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB < 3.5 OR l.ALB >= 5.5 ORDER BY p.Birthday DESC;	thrombosis_prediction
SELECT P.ID,         CASE             WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'            ELSE 'Outside Normal Range'        END AS AlbuminStatus FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1982;	thrombosis_prediction
SELECT      ROUND(         (COUNT(CASE WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 1 END) * 100.0) /          COUNT(CASE WHEN P.SEX = 'F' THEN 1 END),          2     ) AS PercentageOfFemalesWithHighUA FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.SEX = 'F';	thrombosis_prediction
SELECT AVG(L.UA) AS Average_UA FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.UA <      (CASE P.SEX         WHEN 'M' THEN 8.0         WHEN 'F' THEN 6.5         ELSE 8.0     END)     AND P.SEX IN ('M', 'F') ORDER BY P.ID, L.Date DESC LIMIT 1;	thrombosis_prediction
SELECT      p.ID,      p.SEX,      p.Birthday FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.UN = 29;	thrombosis_prediction
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'RA' AND e.UN < 30;	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5;	thrombosis_prediction
SELECT      SUM(CASE WHEN p.SEX = 'M' AND l.CRE >= 1.5 THEN 1 ELSE 0 END) AS MaleCreatinineOutOfRange,     SUM(CASE WHEN p.SEX = 'F' AND l.CRE >= 1.5 THEN 1 ELSE 0 END) AS FemaleCreatinineOutOfRange FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID GROUP BY      p.SEX HAVING      SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END);	thrombosis_prediction
SELECT      P.ID,      P.SEX,      P.Birthday  FROM      Laboratory L  INNER JOIN      Patient P ON L.ID = P.ID  WHERE      L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory);	thrombosis_prediction
SELECT P.SEX, COUNT(*) AS 'Number_of_Patients' FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T_BIL >= 2.0 GROUP BY P.SEX;	thrombosis_prediction
SELECT p.ID, e.T_CHO FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) AND e.T_CHO = (SELECT MAX(T_CHO) FROM Examination)	thrombosis_prediction
SELECT AVG(DIVIDE(SUBTRACT(YEAR(NOW()), YEAR(Birthday)), COUNT(ID))) AS AverageAge FROM Patient WHERE SEX = 'M' AND T-CHO >= 250;	thrombosis_prediction
SELECT p.ID, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG > 300;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50;	thrombosis_prediction
SELECT DISTINCT e.ID FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Admission = '-' AND l.CPK < 250;	thrombosis_prediction
SELECT COUNT(*)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND Patient.SEX = 'M' AND Laboratory.CPK >= 250;	thrombosis_prediction
SELECT P.ID, P.SEX, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.T_CHO < 250;	thrombosis_prediction
SELECT p.ID, l.GLU FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Description >= '1991-01-01' AND l.GLU < 180;	thrombosis_prediction
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday IS NOT NULL AND ((e.WBC <= 3.5 OR e.WBC >= 9.0) AND p.SEX IS NOT NULL) GROUP BY p.SEX ORDER BY p.SEX, (p.Birthday - CURRENT_DATE) / 365;	thrombosis_prediction
SELECT      p.ID,      (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS Age,      e.Diagnosis FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.RBC < 3.5;	thrombosis_prediction
SELECT      P.ID,      P.SEX,      P.Birthday,      P.Admission FROM      Patient P JOIN      Examination E ON P.ID = E.ID WHERE      P.SEX = 'F'      AND (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM P.Birthday)) >= 50     AND E.RBC <= 3.5 OR E.RBC >= 6.0;	thrombosis_prediction
SELECT DISTINCT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Admission = '-' AND E.HGB < 10;	thrombosis_prediction
SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.HGB > 10 AND E.HGB < 17 ORDER BY P.Birthday LIMIT 1;	thrombosis_prediction
SELECT p.ID,         EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT >= 52 GROUP BY p.ID HAVING COUNT(l.ID) > 2;	thrombosis_prediction
SELECT AVG(HCT)  FROM Laboratory  WHERE Date LIKE '1991%' AND HCT < 29;	thrombosis_prediction
SELECT      SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS 'LowerThanNormal',     SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS 'HigherThanNormal' FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.PLT < 100 OR Examination.PLT > 400;	thrombosis_prediction
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 50 YEAR) AND DATE_SUB(CURRENT_DATE, INTERVAL 1 DAY) AND p.Birthday LIKE '1984%' AND l.PLT BETWEEN 100 AND 400;	thrombosis_prediction
SELECT      SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END) * 100 AS PercentageOfFemalesWithAbnormalPT FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(P.Birthday)) > 55;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.FirstDate > '1992-12-31' AND e.PT < 14;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE ExaminationDate > '1997-01-01' AND APTT < 45;	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID)  FROM Examination E  JOIN Laboratory L ON E.ID = L.ID  WHERE L.APTT > 45 AND E.Thrombosis = 3;	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID)  FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.SEX = 'M'  AND E.WBC BETWEEN 3.5 AND 9.0 AND (E.FG <= 150 OR E.FG >= 450);	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday > '1980-01-01' AND Examination.FG < 150 OR Examination.FG > 450;	thrombosis_prediction
SELECT DISTINCT P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.U_PRO >= 30;	thrombosis_prediction
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.U-PRO BETWEEN 0 AND 30 AND Examination.Diagnosis = 'SLE';	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG < 900 AND E.Symptoms = 'abortion';	thrombosis_prediction
SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.aCL_IgG BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.IGA BETWEEN 80 AND 500 GROUP BY p.ID ORDER BY e.IGA DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.IGA BETWEEN 80 AND 500 AND p.FirstDate >= '1990-01-01';	thrombosis_prediction
SELECT T1.Diagnosis, COUNT(T1.Diagnosis) as DiagnosisCount FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.aCL_IgM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP IS NULL OR l.CRP LIKE '+' OR l.CRP LIKE '-' OR l.CRP < 1.0;	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 18 AND Examination.CRP NOT IN ('+', '-', '-');	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE p.RA IN('-', '+-') AND e.KCT = '+';	thrombosis_prediction
SELECT DISTINCT P.ID, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday > '1995-01-01' AND E.RA IN('-', '+-');	thrombosis_prediction
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND (YEAR(CURDATE()) - YEAR(P.Birthday)) > 60;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND l.TAT = '0';	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.C3 > 35 AND e.ANA_Pattern = 'P';	thrombosis_prediction
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.HCT < 29 OR P.HCT > 52 ORDER BY E.aCL_IgA DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 1 AND Examination.C4 > 10;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.RNP IN ('-', '+-') AND p.Admission = '+';	thrombosis_prediction
SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RNP NOT IN('-', '+-') ORDER BY P.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.SM IN ('-', '+-') AND E.Thrombosis = 1 AND E.ID IN (     SELECT ID     FROM Examination     WHERE Thrombosis = 1     GROUP BY ID     ORDER BY COUNT(*) DESC     LIMIT 1 );	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN('-', '+-') AND p.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE ID = p.ID) ORDER BY p.Birthday DESC LIMIT 3;	thrombosis_prediction
SELECT DISTINCT e.ID FROM Examination e WHERE e.Examination_Date >= '1997-01-01' AND e.SC170 IN('-', '+-');	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.SEX = 'M'  AND e.Symptoms = 'vertigo'  AND e.SC170 IN('-', '+-');	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE p.`First Date` < '1990'  AND e.SSA IN('-', '+-');	thrombosis_prediction
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SSA NOT IN('-', '+-') AND p.First_Date = (SELECT MIN(First_Date) FROM Patient WHERE SSA NOT IN('-', '+-')) LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.SSB IN('-', '+-') AND e.Diagnosis = 'SLE';	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID)  FROM Examination E  JOIN Patient P ON E.ID = P.ID  WHERE E.SSB IN('-', '+-') AND E.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.CENTROMEA IN('-', '+-') AND E.SSB IN('-', '+-') AND P.SEX = 'M';	thrombosis_prediction
SELECT p.ID, e.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.DNA >= 8 AND e.Diagnosis IS NOT NULL;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID AND e.DNA IS NULL WHERE p.Description IS NULL AND e.DNA < 8;	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.aCL_IgG IS NOT NULL AND Examination.aCL_IgG > 8 AND Examination.aCL_IgM IS NOT NULL AND Examination.aCL_IgM > 8 AND Examination.ANA IS NOT NULL AND Examination.ANA > 1 AND Examination.aCL_IgA IS NOT NULL AND Examination.aCL_IgA > 1 AND Examination.Diagnosis IS NOT NULL AND Examination.Diagnosis != '' AND Examination.KCT IS NOT NULL AND Examination.KCT != '' AND Examination.RVVT IS NOT NULL AND Examination.RVVT != '' AND Examination.LAC IS NOT NULL AND Examination.LAC != '' AND Examination.Symptoms IS NOT NULL AND Examination.Symptoms != '' AND Examination.Thrombosis IS NOT NULL AND Examination.Thrombosis > 0 AND Laboratory.DNA_II IS NOT NULL AND Laboratory.DNA_II >= 8 AND Patient.Admission = '+';	thrombosis_prediction
SELECT      ROUND(         (COUNT(E.ID) FILTER (WHERE E.GOT >= 60 AND E.Diagnosis = 'SLE')) * 100.0 /          (COUNT(E.ID) FILTER (WHERE E.GOT >= 60)),         2     ) AS PercentageOfSLEWithAbnormalGOT FROM      Examination E;	thrombosis_prediction
SELECT COUNT(P.ID)  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX = 'M' AND L.GOT < 60;	thrombosis_prediction
SELECT MIN(P.Birthday)  FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.GOT >= 60 GROUP BY P.ID ORDER BY P.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 60 GROUP BY p.Birthday ORDER BY AVG(l.GPT) DESC LIMIT 3;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.GOT < 60 AND P.SEX = 'M';	thrombosis_prediction
SELECT      p.ID,      MIN(e.'Examination Date') AS FirstRecordedDate FROM      Examination e JOIN      Patient p ON e.ID = p.ID WHERE      e.LDH < 500 GROUP BY      p.ID ORDER BY      e.LDH DESC,      MIN(e.'Examination Date') ASC LIMIT 1;	thrombosis_prediction
SELECT MAX("Date")  FROM Laboratory  WHERE LDH >= 500  AND "ID" IN (SELECT "ID" FROM Patient WHERE "First Date" = (SELECT MAX("First Date") FROM Patient));	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+';	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE p.Admission = '-' AND e.ALP < 300;	thrombosis_prediction
SELECT DISTINCT P.ID, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;	thrombosis_prediction
SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'SJS' AND Examination.TP > 6.0 AND Examination.TP < 8.5;	thrombosis_prediction
SELECT Examination.Examination_Date FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ALB > 3.5 AND Examination.ALB < 5.5 ORDER BY Examination.ALB DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB BETWEEN 3.5 AND 5.5 AND l.TP BETWEEN 6.0 AND 8.5;	thrombosis_prediction
SELECT E.aCL_IgG, E.aCL_IgM, E.aCL_IgA FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.SEX = 'F' AND P.UA > 6.50 AND P.UA = (SELECT MAX(UA) FROM Patient WHERE UA > 6.50) ORDER BY P.UA DESC LIMIT 1;	thrombosis_prediction
SELECT MAX(ANA) AS Highest_ANA_Level FROM Examination WHERE CRE < 1.5;	thrombosis_prediction
SELECT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.CRE < 1.5 AND E.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination);	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.aCL_IgG IS NOT NULL AND l.T_BIL >= 2.0 AND e.ANA_Pattern LIKE '%P%';	thrombosis_prediction
SELECT E.ANA FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.ANA IS NOT NULL AND L.T-BIL < 2.0 GROUP BY P.ID HAVING MAX(L.T-BIL) OVER () = L.T-BIL LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.T-CHO >= 250 AND L.KCT = '-';	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.aCL_IgG IS NOT NULL AND E.aCL_IgM IS NOT NULL AND E.ANA IS NOT NULL AND E.aCL_IgA IS NOT NULL AND E.Diagnosis IS NOT NULL AND E.KCT IS NOT NULL AND E.RVVT IS NOT NULL AND E.LAC IS NOT NULL AND E.Symptoms IS NOT NULL AND E.Thrombosis IS NOT NULL AND P.SEX IS NOT NULL AND P.Birthday IS NOT NULL AND P.Description IS NOT NULL AND P.First_Date IS NOT NULL AND P.Admission IS NOT NULL AND P.Diagnosis IS NOT NULL AND E.aCL_IgG < 250 AND E.aCL_IgM < 250 AND E.aCL_IgA < 250 AND E.ANA_Pattern = 'P';	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE 'TG' < 200 AND Symptoms IS NOT NULL;	thrombosis_prediction
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.TG < 200 ORDER BY e.TG DESC LIMIT 1;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 0 AND e.CPK < 250;	thrombosis_prediction
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.CPK < 250 AND (L.KCT = '+' OR L.RVVT = '+' OR L.LAC = '+');	thrombosis_prediction
SELECT p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GLU > 180 ORDER BY p.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.GLU < 180 AND e.Thrombosis = 0;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Admission = '+' AND e.WBC BETWEEN 3.5 AND 9.0;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.Diagnosis = 'SLE'  AND e.WBC BETWEEN 3.5 AND 9.0;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Admission = '-' AND (e.RBC <= 3.5 OR e.RBC >= 6.0);	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.PLT > 100 AND e.PLT < 400 AND e.Diagnosis IS NOT NULL;	thrombosis_prediction
SELECT P.ID, E.PLT FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.PLT BETWEEN 100 AND 400 AND E.Diagnosis = 'MCTD';	thrombosis_prediction
SELECT AVG(PT) AS AveragePT FROM Laboratory WHERE ID IN (     SELECT ID     FROM Patient     WHERE SEX = 'M'     AND ID IN (         SELECT ID         FROM Examination         WHERE 'PT' < 14     ) );	thrombosis_prediction
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis IN (2, 1) AND e.PT < 14;	thrombosis_prediction
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';	student_club
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.college = 'College of Engineering';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.department = 'Art and Design';	student_club
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';	student_club
SELECT m.phone FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';	student_club
SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';	student_club
SELECT      e.event_name,     COUNT(a.link_to_member) AS total_attendance FROM      event e JOIN      attendance a ON e.event_id = a.link_to_event WHERE      a.link_to_member IN (         SELECT              m.member_id         FROM              member m         JOIN              major m2 ON m.link_to_major = m2.major_id         WHERE              m2.college = 'Student_Club'     ) GROUP BY      e.event_id ORDER BY      total_attendance DESC LIMIT 1;	student_club
SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President' AND ma.college = 'Student Club';	student_club
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';	student_club
SELECT COUNT(DISTINCT e.event_id)  FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'  AND e.event_name = 'Student_Club' AND YEAR(e.event_date) = 2019;	student_club
SELECT COUNT(*)  FROM (     SELECT e.event_id     FROM event e     JOIN attendance a ON e.event_id = a.link_to_event     WHERE e.type = 'Meeting'     GROUP BY e.event_id     HAVING COUNT(DISTINCT a.link_to_member) > 10 ) AS meetings_with_more_than_10_members;	student_club
SELECT event_name  FROM event  WHERE event_id IN (     SELECT link_to_event      FROM attendance      GROUP BY link_to_event      HAVING COUNT(link_to_member) > 20 ) AND type = 'Student_Club';	student_club
SELECT AVG(COUNT(e.event_id)) / COUNT(DISTINCT e.event_name) as average_attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020;	student_club
SELECT expense_description, MAX(cost) AS highest_cost FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'club')) GROUP BY expense_description ORDER BY highest_cost DESC LIMIT 1;	student_club
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud' AND e.type = 'Student_Club';	student_club
SELECT m.last_name  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.major_name = 'Law and Constitutional Studies';	student_club
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';	student_club
SELECT m.college  FROM major m  JOIN member me ON m.major_id = me.link_to_major  WHERE me.first_name = 'Tyler' AND me.last_name = 'Hewitt';	student_club
SELECT SUM(i.amount) AS total_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President';	student_club
SELECT SUM(b.spent) as total_food_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id JOIN member m ON m.member_id = e.link_to_member WHERE e.event_name = 'September Meeting' AND b.category = 'Food' AND m.position = 'Student_Club';	student_club
SELECT z.city, z.state FROM member m JOIN major maj ON m.link_to_major = maj.major_id JOIN event ev ON m.member_id = ev.event_id JOIN attendance att ON ev.event_id = att.link_to_event JOIN member president ON ev.event_name = 'President of the Student Club' AND president.member_id = m.member_id JOIN zip_code z ON m.zip = z.zip_code;	student_club
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN zip_code zc ON m.zip = zc.zip_code WHERE zc.state = 'Illinois';	student_club
SELECT SUM(b.spent) AS total_spent_on_advertisement FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement';	student_club
SELECT m.major_name, m.department FROM major m JOIN member mem ON m.major_id = mem.link_to_major WHERE mem.first_name = 'Pierce' OR mem.first_name = 'Guidi';	student_club
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker';	student_club
SELECT expense.expense_id, expense.expense_description, expense.approved FROM expense JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08' AND expense.approved = 'True';	student_club
SELECT      SUM(e.cost) / COUNT(e.expense_id) AS average_cost FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      m.first_name = 'Elijah' AND m.last_name = 'Allen'     AND MONTH(e.expense_date) IN (9, 10);	student_club
SELECT     SUM(CASE WHEN YEAR(event_date) = 2019 THEN spent ELSE 0 END) -      SUM(CASE WHEN YEAR(event_date) = 2020 THEN spent ELSE 0 END) AS difference_in_spending FROM     budget WHERE     link_to_event IN (SELECT event_id FROM event WHERE type = 'Student_Club');	student_club
SELECT location FROM event WHERE event_name = 'Spring Budget Review';	student_club
SELECT SUM(e.cost) AS total_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name LIKE '%Posters%' AND ev.event_date = '2019-09-04';	student_club
SELECT b.remaining  FROM budget b  WHERE b.category = 'Food' AND b.amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');	student_club
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';	student_club
SELECT COUNT(DISTINCT major.major_id) FROM major JOIN college ON major.college = college.college WHERE college.college = 'College of Humanities and Social Sciences';	student_club
SELECT phone  FROM member  WHERE first_name = 'Carlo' AND last_name = 'Jacobs';	student_club
SELECT z.county  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher';	student_club
SELECT COUNT(*) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;	student_club
SELECT SUM(b.amount)  FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker';	student_club
SELECT e.event_status FROM event e JOIN expense ex ON e.event_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20';	student_club
SELECT major_name FROM major WHERE major_id = (     SELECT link_to_major     FROM member     WHERE first_name = 'Brent' AND last_name = 'Thomason' );	student_club
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies') AND t_shirt_size = 'Large';	student_club
SELECT zip_code.type FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';	student_club
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';	student_club
SELECT z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';	student_club
SELECT m.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'President';	student_club
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.source = 'Dues' ORDER BY i.date_received ASC LIMIT 1;	student_club
SELECT      COUNT(*)  FROM      budget  WHERE      (category = 'Advertisement' AND event_name = 'Yearly Kickoff')      AND      (event_name = 'October Meeting' AND category = 'Advertisement')      AND      (SUM(amount) / SUM(amount)) > 1;	student_club
SELECT      (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) /       COUNT(e.event_name)) * 100 AS parking_budget_percentage FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'November Speaker';	student_club
SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE e.expense_description = 'Pizza';	student_club
SELECT COUNT(DISTINCT city)  FROM zip_code  WHERE county = 'Orange' AND state = 'Virginia';	student_club
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';	student_club
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth';	student_club
SELECT e.expense_description, e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);	student_club
SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';	student_club
SELECT college, COUNT(*) AS member_count FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY college ORDER BY member_count DESC LIMIT 1;	student_club
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';	student_club
SELECT event_name, MAX(amount) AS highest_budget_amount FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount IS NOT NULL GROUP BY event_name ORDER BY highest_budget_amount DESC LIMIT 1;	student_club
SELECT e.expense_description, e.expense_date, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';	student_club
SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';	student_club
SELECT date_received  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';	student_club
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'MD';	student_club
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education';	student_club
SELECT      e.event_id,      e.event_name,      MAX(DIVIDE(b.spent, b.amount)) AS spend_to_budget_ratio FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      e.status = 'Closed' GROUP BY      e.event_id, e.event_name ORDER BY      spend_to_budget_ratio DESC LIMIT 1;	student_club
SELECT COUNT(*)  FROM member  WHERE position = 'President';	student_club
SELECT MAX(b.spent) AS highest_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id;	student_club
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;	student_club
SELECT SUM(e.spent) AS total_food_spent FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.category = 'Food';	student_club
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;	student_club
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';	student_club
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';	student_club
SELECT SUM(i.amount) AS total_income FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';	student_club
SELECT      CONCAT(m.first_name, ' ', m.last_name) AS full_name,      SUM(i.amount) AS total_income FROM      income i JOIN      member m ON i.link_to_member = m.member_id WHERE      i.amount > 40 GROUP BY      m.member_id ORDER BY      total_income DESC;	student_club
SELECT SUM(e.cost) AS total_expense FROM event AS e JOIN expense AS ex ON e.event_id = ex.link_to_budget WHERE e.event_name = 'Yearly Kickoff';	student_club
SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_member JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff' AND b.event_status = 'managed';	student_club
SELECT      m.first_name || ' ' || m.last_name AS full_name,     i.source,     MAX(i.amount) AS highest_income FROM      income i JOIN      member m ON i.link_to_member = m.member_id GROUP BY      m.member_id, m.first_name, m.last_name, i.source ORDER BY      highest_income DESC LIMIT 1;	student_club
SELECT event_name FROM event WHERE cost = (SELECT MIN(cost) FROM event);	student_club
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS percentage_cost_for_yearly_kickoff FROM      event e;	student_club
SELECT      (SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance') THEN 1 ELSE 0 END) * 1.0) /      SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics') THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM      member m;	student_club
SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;	student_club
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary' AND link_to_major IN (     SELECT major_id     FROM major     WHERE college = 'Student Club' );	student_club
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching';	student_club
SELECT COUNT(DISTINCT a.link_to_member) FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019;	student_club
SELECT COUNT(e.event_id) AS num_events_attended, m.major_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.major_name;	student_club
SELECT AVG(spent) / COUNT(spent) AS average_spent_per_event FROM budget WHERE category = 'Food' AND event_status = 'Closed';	student_club
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' GROUP BY e.event_name ORDER BY SUM(b.spent) DESC LIMIT 1;	student_club
SELECT      COUNT(*) AS attendance_count FROM      event  JOIN      attendance ON event.event_id = attendance.link_to_event JOIN      member ON attendance.link_to_member = member.member_id WHERE      event.event_name = 'Women''s Soccer'      AND member.first_name = 'Maya'      AND member.last_name = 'Mclean';	student_club
SELECT      ROUND((SUM(CASE WHEN e.type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(e.event_id)) * 100, 2) AS community_service_percentage FROM      event e WHERE      e.event_date BETWEEN '2019-01-01' AND '2019-12-31'     AND e.event_name LIKE '%Student_Club%';	student_club
SELECT SUM(e.cost) AS total_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';	student_club
SELECT t_shirt_size, COUNT(*) as total_count FROM member GROUP BY t_shirt_size ORDER BY total_count DESC LIMIT 1;	student_club
SELECT event_name FROM event WHERE status = 'Closed' AND link_to_event IN (     SELECT link_to_event     FROM budget     WHERE remaining < 0     AND amount IS NOT NULL     ORDER BY ABS(remaining) DESC     LIMIT 1 );	student_club
SELECT e.type, SUM(e.cost) AS total_value FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes' GROUP BY e.type;	student_club
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' ORDER BY b.amount ASC;	student_club
SELECT budget_id, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;	student_club
SELECT budget_id, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3;	student_club
SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking';	student_club
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';	student_club
SELECT      m.first_name || ' ' || m.last_name AS full_name,      SUM(e.cost) AS total_cost FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY      m.member_id;	student_club
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';	student_club
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';	student_club
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50;	student_club
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';	student_club
SELECT m.position  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.major_name = 'Business';	student_club
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';	student_club
SELECT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;	student_club
SELECT e.type  FROM event e  WHERE e.location = 'MU 215';	student_club
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';	student_club
SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major JOIN member AS m2 ON m2.member_id = member.member_id WHERE m2.position = 'Vice President';	student_club
SELECT      (SUM(CASE WHEN M.major_name = 'Mathematics' THEN 1 ELSE 0 END) / COUNT(DISTINCT M.member_id)) * 100 AS percentage_math_members FROM      member M;	student_club
SELECT type FROM event WHERE location = 'MU 215';	student_club
SELECT COUNT(*) FROM income WHERE amount = 50;	student_club
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';	student_club
SELECT COUNT(DISTINCT m.major_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Agriculture and Applied Sciences' AND ma.department = 'School of Applied Sciences, Technology and Education';	student_club
SELECT      m.last_name,      ma.department,      ma.college FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      ma.major_name = 'Environmental Engineering';	student_club
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;	student_club
SELECT m.zip_code.city, m.zip_code.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'Electrical and Computer Engineering' AND m.position = 'Member';	student_club
SELECT e.event_name FROM event e JOIN member m ON m.member_id = e.link_to_member JOIN major ma ON ma.major_id = m.link_to_major WHERE m.position = 'Vice President' AND ma.college = 'Student_Club' AND e.location = '900 E. Washington St.' AND e.type = 'Social';	student_club
SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';	student_club
SELECT DISTINCT m.last_name FROM member m JOIN event e ON m.link_to_major = e.major_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member';	student_club
SELECT      (SUM(CASE WHEN e.amount = 50 THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.member_id) AS percentage_amount_50 FROM      member m JOIN      income i ON m.member_id = i.link_to_member WHERE      m.t_shirt_size = 'Medium' AND      m.position = 'Member' AND      i.amount = 50	student_club
SELECT DISTINCT zc.state FROM zip_code zc WHERE zc.type = 'PO Box';	student_club
SELECT DISTINCT zc.zip_code FROM zip_code zc JOIN member m ON zc.zip_code = m.zip JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.college = 'College of Engineering and Science' AND maj.department = 'Engineering' AND maj.major_name = 'Civil Engineering' AND zc.type = 'PO Box';	student_club
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';	student_club
SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN expense ex ON a.link_to_member = ex.link_to_member WHERE ex.cost > 50;	student_club
SELECT m.member_id, m.first_name, m.last_name, e.event_id, e.event_name FROM member m JOIN expense ex ON m.member_id = ex.link_to_member JOIN event e ON ex.link_to_event = e.event_id WHERE ex.approved = 'true' AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND m.member_id IN (     SELECT a.link_to_member     FROM attendance a     JOIN event e ON a.link_to_event = e.event_id     WHERE e.event_id = ex.link_to_event );	student_club
SELECT m.link_to_major, m.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Katy' AND ma.major_id = 'rec1N0upiVLy5esTO';	student_club
SELECT m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Agriculture and Applied Sciences' AND ma.major_name = 'Business';	student_club
SELECT DISTINCT m.email FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND e.cost > 20;	student_club
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'education' AND maj.college = 'College of Education & Human Services';	student_club
SELECT      (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(e.event_id) AS percentage_over_budget FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      b.remaining < 0;	student_club
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';	student_club
SELECT expense_id, expense_description FROM expense WHERE cost / COUNT(expense_id) > 50;	student_club
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';	student_club
SELECT      (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0) / COUNT(zip_code) AS percentage_po_box_zip_codes FROM      zip_code;	student_club
SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;	student_club
SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_budget WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;	student_club
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major ma ON m.link_to_major = ma.major_id WHERE e.cost > 100;	student_club
SELECT e.location, z.city, z.county FROM event e JOIN income i ON e.event_id = i.link_to_member JOIN member m ON i.link_to_member = m.member_id JOIN zip_code z ON m.zip = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 40;	student_club
SELECT      m.member_id,      m.first_name,      m.last_name,      SUM(e.cost) AS total_expense FROM      expense e JOIN      member m ON e.link_to_member = m.member_id GROUP BY      m.member_id HAVING      COUNT(DISTINCT e.event_id) > 1 ORDER BY      total_expense DESC LIMIT 1;	student_club
SELECT AVG(e.cost) AS average_amount_paid FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position <> 'Member' GROUP BY e.event_id;	student_club
SELECT event_name FROM event WHERE cost < (SELECT SUM(cost) / COUNT(event_id) FROM event WHERE category = 'Parking') AND category = 'Parking';	student_club
SELECT      (SUM(e.cost) / COUNT(e.event_id)) * 100 AS game_event_cost_percentage FROM      event e WHERE      e.type = 'Game';	student_club
SELECT b.budget_id FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY SUM(e.cost) DESC LIMIT 1;	student_club
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5;	student_club
SELECT      m.first_name,      m.last_name,      m.phone FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      e.cost > (SELECT AVG(cost) FROM expense);	student_club
SELECT      SUBTRACT(         DIVIDE(SUM(CASE WHEN m.zip = zc.zip_code AND zc.state = 'ME' THEN 1 ELSE 0 END),                (SELECT COUNT(*) FROM member WHERE position = 'Member')),         DIVIDE(SUM(CASE WHEN m.zip = zc.zip_code AND zc.state = 'VT' THEN 1 ELSE 0 END),                (SELECT COUNT(*) FROM member WHERE position = 'Member'))     ) AS percentage_difference FROM      member m JOIN      zip_code zc ON m.zip = zc.zip_code;	student_club
SELECT m.major_name, m.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';	student_club
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description LIKE '%Water%' AND e.expense_description LIKE '%Veggie tray%' AND e.expense_description LIKE '%supplies%' GROUP BY m.member_id;	student_club
SELECT m.last_name, m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Elementary Education';	student_club
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker';	student_club
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';	student_club
SELECT      m.first_name || ' ' || m.last_name AS full_name,     i.amount FROM      member m JOIN      income i ON m.member_id = i.link_to_member WHERE      i.date_received = '2019-09-09';	student_club
SELECT b.category FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters';	student_club
SELECT      CONCAT(m.first_name, ' ', m.last_name) AS full_name,      ma.college FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      m.position = 'Secretary';	student_club
SELECT e.event_name, SUM(e.budget.spent) AS total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;	student_club
SELECT z.city  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke';	student_club
SELECT m.first_name, m.last_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.short_state = 'NC';	student_club
SELECT COUNT(DISTINCT GS.GasStationID)  FROM gasstations GS  JOIN products P ON GS.ProductID = P.ProductID  WHERE GS.Country = 'CZE' AND P.Description = 'Premium gas';	debit_card_specializing
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) / NULLIF(COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END), 0)) AS EUR_to_CZK_ratio FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID WHERE      c.Currency IN ('EUR', 'CZK');	debit_card_specializing
SELECT c.CustomerID FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' AND c.Segment = 'LAM' ORDER BY ym.Consumption ASC LIMIT 1;	debit_card_specializing
SELECT AVG(Consumption) / 12 AS Avg_Monthly_Consumption FROM yearmonth WHERE Segment = 'SME' AND Date BETWEEN '201301' AND '201312';	debit_card_specializing
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gas_usage gu ON gu.Currency = 'CZK' WHERE gu.YearMonth BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY SUM(gu.GasUsage) DESC LIMIT 1;	debit_card_specializing
SELECT COUNT(DISTINCT c.CustomerID) AS CustomersWithLowConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'KAM' AND ym.Consumption < 30000 AND ym.Date BETWEEN '201201' AND '201212';	debit_card_specializing
SELECT      (SUM(CASE WHEN gas_usage.Currency = 'CZK' THEN gas_usage.GasUsage ELSE 0 END) -       SUM(CASE WHEN gas_usage.Currency = 'EUR' THEN gas_usage.GasUsage ELSE 0 END)) AS DifferenceInConsumption FROM      gas_usage WHERE      (SELECT          CASE              WHEN customers.Currency = 'CZK' THEN 1              WHEN customers.Currency = 'EUR' THEN 0          END     FROM          customers     WHERE          customers.CustomerID = gas_usage.CustomerID) = 1      AND      (EXTRACT(YEAR FROM gas_usage.YearMonth) = 2012);	debit_card_specializing
SELECT gas_usage.YearMonth, SUM(gas_usage.GasUsage) AS TotalGasUsage FROM gas_usage WHERE gas_usage.Currency = 'EUR' GROUP BY YEAR(gas_usage.YearMonth) ORDER BY TotalGasUsage DESC LIMIT 1;	debit_card_specializing
SELECT Segment, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT      SUBSTR(yearmonth.Date, 1, 4) AS Year,     SUM(gas_usage.GasUsage) AS TotalGasConsumed FROM      yearmonth JOIN      gas_usage ON SUBSTR(yearmonth.Date, 1, 4) = gas_usage.YearMonth WHERE      gas_usage.Currency = 'CZK' GROUP BY      Year ORDER BY      TotalGasConsumed DESC LIMIT 1;	debit_card_specializing
SELECT      SUBSTR(yearmonth.Date, 5, 2) AS Month,     SUM(gas_usage.GasUsage) AS TotalGasConsumption FROM      yearmonth JOIN      customers ON yearmonth.CustomerID = customers.CustomerID JOIN      gas_usage ON SUBSTR(yearmonth.Date, 1, 4) = gas_usage.YearMonth WHERE      customers.Segment = 'SME' AND     SUBSTR(yearmonth.Date, 1, 4) = '2013' GROUP BY      Month ORDER BY      TotalGasConsumption DESC LIMIT 1;	debit_card_specializing
WITH CustomerAnnualUsage AS (     SELECT          c.Segment,         ym.Date AS YearMonth,         SUM(ym.Consumption) AS TotalConsumption     FROM          yearmonth ym     JOIN          customers c ON ym.CustomerID = c.CustomerID     WHERE          ym.Date BETWEEN '201301' AND '201312'     GROUP BY          c.Segment,          YEAR(ym.Date),          MONTH(ym.Date) ), LowestConsumptionPerSegment AS (     SELECT          Segment,         MIN(TotalConsumption) AS MinConsumption     FROM          CustomerAnnualUsage     GROUP BY          Segment ), AnnualAverageConsumption AS (     SELECT          c.Segment,         c.MinConsumption,         c.MinConsumption / COUNT(DISTINCT c.CustomerID) AS AnnualAverage     FROM          LowestConsumptionPerSegment c     JOIN          CustomerAnnualUsage ca ON c.Segment = ca.Segment AND c.MinConsumption = ca.TotalConsumption     GROUP BY          c.Segment,          c.MinConsumption ), SMEvsLAM AS (     SELECT          (a.AnnualAverage - b.AnnualAverage) AS Difference     FROM          AnnualAverageConsumption a     JOIN          AnnualAverageConsumption b ON a.Segment = 'SME' AND b.Segment = 'LAM' ), LAMvsKAM AS (     SELECT          (b.AnnualAverage - a.AnnualAverage) AS Difference     FROM          AnnualAverageConsumption a     JOIN          AnnualAverageConsumption b ON a.Segment = 'LAM' AND b.Segment = 'KAM' ), KAMvsSME AS (     SELECT          (a.AnnualAverage - b.AnnualAverage) AS Difference     FROM          AnnualAverageConsumption a     JOIN          AnnualAverageConsumption b ON a.Segment = 'KAM' AND b.Segment = 'SME' ) SELECT      (SELECT Difference FROM SMEvsLAM) AS SME_to_LAM,     (SELECT Difference FROM LAMvsKAM) AS LAM_to_KAM,     (SELECT Difference FROM KAMvsSME) AS KAM_to_SME;	debit_card_specializing
WITH Consumption_2012 AS (     SELECT          c.Segment,          SUM(y.CombinedConsumption) AS Consumption2012     FROM customers c     JOIN yearmonth y ON c.CustomerID = y.CustomerID     WHERE          y.Date BETWEEN '201201' AND '201212'     GROUP BY c.Segment ), Consumption_2013 AS (     SELECT          c.Segment,          SUM(y.CombinedConsumption) AS Consumption2013     FROM customers c     JOIN yearmonth y ON c.CustomerID = y.CustomerID     WHERE          y.Date BETWEEN '201301' AND '201312'     GROUP BY c.Segment ), PercentageIncrease AS (     SELECT          c1.Segment,         ((c2.Consumption2013 - c1.Consumption2012) / c2.Consumption2013) * 100 AS PercentageIncrease     FROM Consumption_2012 c1     JOIN Consumption_2013 c2 ON c1.Segment = c2.Segment     WHERE          c1.Segment IN ('SME', 'LAM', 'KAM') ), MaxMinIncrease AS (     SELECT          Segment,         PercentageIncrease,         ROW_NUMBER() OVER (ORDER BY PercentageIncrease DESC) AS MaxRank,         ROW_NUMBER() OVER (ORDER BY PercentageIncrease ASC) AS MinRank     FROM PercentageIncrease ) SELECT      Segment,     PercentageIncrease FROM MaxMinIncrease WHERE MaxRank = 1 OR MinRank = 1;	debit_card_specializing
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE c.CustomerID = 6 AND gu.YearMonth BETWEEN '201308' AND '201311';	debit_card_specializing
SELECT      (SELECT COUNT(*)       FROM gasstations AS g1       JOIN customers AS c1 ON g1.Segment = c1.Segment       WHERE g1.Country = 'Czech Republic' AND c1.Segment = 'Discount') -     (SELECT COUNT(*)       FROM gasstations AS g2       JOIN customers AS c2 ON g2.Segment = c2.Segment       WHERE g2.Country = 'Slovakia' AND c2.Segment = 'Discount')  AS DifferenceInDiscountStations;	debit_card_specializing
SELECT      SUM(CASE WHEN ym.CustomerID = 7 THEN ym.Consumption ELSE 0 END) -      SUM(CASE WHEN ym.CustomerID = 5 THEN ym.Consumption ELSE 0 END) AS Difference FROM      yearmonth ym WHERE      ym.Date = '201304';	debit_card_specializing
SELECT     (SELECT COUNT(*)      FROM transactions_1k t1      JOIN customers c ON t1.CustomerID = c.CustomerID      JOIN gasstations g ON t1.GasStationID = g.GasStationID      WHERE c.Segment = 'SME' AND g.Currency = 'CZK')     -     (SELECT COUNT(*)      FROM transactions_1k t2      JOIN customers c ON t2.CustomerID = c.CustomerID      JOIN gasstations g ON t2.GasStationID = g.GasStationID      WHERE c.Segment = 'SME' AND g.Currency = 'EUR') AS SMEs_Pay_CZK_More_Than_EUR;	debit_card_specializing
SELECT      c.CustomerID FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID WHERE      c.Segment = 'LAM' AND      ym.Date = '201310' AND      c.Currency = 'Euro' AND      ym.Consumption = (SELECT MAX(Consumption) FROM yearmonth WHERE Date = '201310')	debit_card_specializing
SELECT c.CustomerID, SUM(gu.GasUsage) AS TotalConsumed FROM customers c JOIN gas_usage gu ON c.CustomerID = gu.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;	debit_card_specializing
SELECT SUM(gu.GasUsage) AS TotalGasConsumption FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND gu.YearMonth = '201305';	debit_card_specializing
SELECT     ROUND((COUNT(CASE WHEN gas_usage.GasUsage > 46.73 THEN 1 END) * 100.0) / COUNT(*), 2) AS Percentage FROM     gas_usage JOIN     customers ON gas_usage.CustomerID = customers.CustomerID WHERE     customers.Segment = 'LAM';	debit_card_specializing
SELECT      g.Country,     COUNT(*) AS 'ValueForMoneyGasStations' FROM      gasstations g JOIN      transactions_1k t ON g.GasStationID = t.GasStationID JOIN      customers c ON t.CustomerID = c.CustomerID WHERE      t.Price < 2.00 GROUP BY      g.Country ORDER BY      COUNT(*) DESC;	debit_card_specializing
SELECT      (SUM(CASE WHEN c.Currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS PercentageOfKAMCustomersPayInEuros FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      c.Segment = 'KAM';	debit_card_specializing
SELECT      (COUNT(*) FILTER (WHERE Consumption > 528.3) * 100.0) / COUNT(*) FROM      yearmonth WHERE      Date = '201202';	debit_card_specializing
SELECT      (COUNT(CASE WHEN g.Country = 'Slovakia' AND g.Segment = 'Premium' THEN 1 END) * 100.0) /      COUNT(CASE WHEN g.Country = 'Slovakia' THEN 1 END) AS PercentageOfPremiumGasStations FROM      gasstations g;	debit_card_specializing
SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY Consumption DESC LIMIT 1;	debit_card_specializing
SELECT      c.Segment,      SUM(gu.GasUsage) AS TotalConsumption FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID JOIN      gas_usage gu ON ym.Date = gu.YearMonth AND gu.Currency = c.Currency WHERE      ym.Date = '201309' GROUP BY      c.Segment ORDER BY      TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT      c.CustomerID,      SUM(y.Consumption) AS TotalConsumption FROM      customers c JOIN      yearmonth y ON c.CustomerID = y.CustomerID WHERE      c.Segment = 'SME' AND     y.Date = '201206' GROUP BY      c.CustomerID ORDER BY      TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012';	debit_card_specializing
SELECT      ym.CustomerID,     MAX(ym.Consumption) AS MaxMonthlyConsumption FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID WHERE      c.Currency = 'Euro' GROUP BY      ym.CustomerID ORDER BY      MaxMonthlyConsumption DESC LIMIT 1;	debit_card_specializing
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201309%'	debit_card_specializing
SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Date LIKE '201306%'	debit_card_specializing
SELECT g ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price IS NOT NULL AND t.Price LIKE '€%' GROUP BY g.ChainID;	debit_card_specializing
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Currency = 'EUR';	debit_card_specializing
SELECT AVG(T.Price) AS AverageTotalPrice FROM transactions_1k AS T WHERE T.Date LIKE '2012-01%';	debit_card_specializing
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN gas_usage gu ON ym.Date = gu.YearMonth WHERE c.Currency = 'EUR' AND gu.GasUsage > 1000;	debit_card_specializing
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';	debit_card_specializing
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Price > 1000;	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';	debit_card_specializing
SELECT AVG(T.Amount * T.Price) AS AverageTotalPrice FROM transactions_1k T JOIN gasstations GS ON T.GasStationID = GS.GasStationID WHERE GS.Country = 'CZE';	debit_card_specializing
SELECT AVG(TotalPrice) AS AvgTotalPrice FROM (     SELECT          t1.CustomerID,         SUM(t1.Amount * t1.Price) AS TotalPrice     FROM transactions_1k t1     JOIN customers c ON t1.CustomerID = c.CustomerID     JOIN gasstations gs ON t1.GasStationID = gs.GasStationID     WHERE c.Currency = 'Euro' AND gs.Currency = 'Euro'     GROUP BY t1.CustomerID ) AS EuroTransactions;	debit_card_specializing
SELECT      c.CustomerID,      SUM(t.Amount * t.Price) AS TotalAmount FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      t.Date = '2012-08-25' GROUP BY      c.CustomerID ORDER BY      TotalAmount DESC LIMIT 1;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.TransactionID ASC LIMIT 1;	debit_card_specializing
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24';	debit_card_specializing
SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';	debit_card_specializing
SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN customers AS C ON T1.CustomerID = C.CustomerID JOIN gas_usage AS G ON C.Currency = G.Currency WHERE G.Currency = 'EUR' AND STRFTIME('%H:%M:%S', T1.Time) < '13:00:00' AND T1.Date = '2012-08-26';	debit_card_specializing
SELECT c.Segment FROM customers c JOIN (     SELECT MIN(CustomerID) AS MinCustomerID     FROM customers ) AS subq ON c.CustomerID = subq.MinCustomerID;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';	debit_card_specializing
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';	debit_card_specializing
SELECT      t1.Consumption,     ym.Date AS ExpenseDate,     t1.Amount AS ExpenseAmount FROM      transactions_1k t1 JOIN      yearmonth ym ON t1.CustomerID = ym.CustomerID WHERE      t1.Date = '2012-08-24'     AND t1.Amount = 124.05     AND ym.Date LIKE '2012-01-%';	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time BETWEEN '08:00:00' AND '09:00:00' AND gasstations.Country = 'CZE' AND DATE(transactions_1k.Date) = '2012-08-26';	debit_card_specializing
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201306' AND ym.Consumption = 214582.17;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467;	debit_card_specializing
SELECT c.Country FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';	debit_card_specializing
SELECT     (SELECT COUNT(*)       FROM customers       WHERE Currency = 'EUR') * 100.0 /      (SELECT COUNT(*)       FROM customers) AS percentage_of_customers_using_EUR;	debit_card_specializing
SELECT   (     (SUM(CASE WHEN ym.Date BETWEEN '2012-01-01' AND '2012-12-31' THEN ym.Consumption ELSE 0 END) -       SUM(CASE WHEN ym.Date BETWEEN '2013-01-01' AND '2013-12-31' THEN ym.Consumption ELSE 0 END)     ) /      SUM(CASE WHEN ym.Date BETWEEN '2012-01-01' AND '2012-12-31' THEN ym.Consumption ELSE 0 END)   ) AS ConsumptionDecreaseRate FROM   yearmonth ym WHERE   ym.CustomerID = (     SELECT       t.CustomerID     FROM       transactions_1k t     WHERE       t.Amount = 634.8 AND       t.Date = '2012-08-25'   )	debit_card_specializing
SELECT      gasstations.GasStationID,      SUM(transactions_1k.Amount * transactions_1k.Price) AS TotalRevenue FROM      transactions_1k JOIN      gasstations ON transactions_1k.GasStationID = gasstations.GasStationID GROUP BY      gasstations.GasStationID ORDER BY      TotalRevenue DESC LIMIT 1;	debit_card_specializing
SELECT      (SELECT SUM(CASE WHEN c.Segment = 'premium' THEN 1 ELSE 0 END)       FROM customers c      JOIN transactions_1k t ON c.CustomerID = t.CustomerID      JOIN gasstations gs ON t.GasStationID = gs.GasStationID      WHERE gs.Country = 'SVK') * 100.0 /      (SELECT COUNT(*)       FROM customers c      JOIN transactions_1k t ON c.CustomerID = t.CustomerID      JOIN gasstations gs ON t.GasStationID = gs.GasStationID      WHERE gs.Country = 'SVK') AS premium_percentage FROM gasstations WHERE Country = 'SVK';	debit_card_specializing
SELECT SUM(t.Amount) AS TotalAmountSpent FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508;  SELECT SUM(t.Amount) AS AmountSpentInJanuary2012 FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND SUBSTR(t.Date, 1, 6) = '201201';	debit_card_specializing
SELECT      p.Description AS ProductName,      SUM(t.Amount) AS TotalAmountSold FROM      transactions_1k t JOIN      products p ON t.ProductID = p.ProductID GROUP BY      p.Description ORDER BY      TotalAmountSold DESC LIMIT 5;	debit_card_specializing
SELECT c.CustomerID, AVG(t.Price / t.Amount) AS AvgPricePerItem, t.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;	debit_card_specializing
SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 AND p.Description = 'Product ID 2' ORDER BY t.Price DESC LIMIT 1;	debit_card_specializing
SELECT ym.CustomerID,         ym.Consumption,         CASE             WHEN (p.Price / t.Amount) > 29.00 THEN 'Above 29'            ELSE 'Below 29'        END AS ConsumptionStatus FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE ym.Date LIKE '201208' AND t.ProductID = 5;	debit_card_specializing

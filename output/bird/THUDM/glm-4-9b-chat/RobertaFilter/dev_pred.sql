SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM `frpm` WHERE `County Name` = 'Alameda' AND `Percent (%) Eligible Free (K-12)` IS NOT NULL; 
SELECT      `School Name`,      `Percent (%) Eligible Free (Ages 5-17)` AS `Eligible Free Rate` FROM      `frpm` WHERE      `School Type` = 'Continuation' ORDER BY      `Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3; 
SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.County = 'Fresno County Office of Education'; 
SELECT      s.Street,      s.StreetAbr,      s.City,      s.Zip,      s.State  FROM      frpm f  JOIN      schools s ON f.CDSCode = s.CDSCode  WHERE      f.FRPM Count (K-12) = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm) 
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.FundingType = 'Charter' AND s.OpenDate > '2000-01-01'; 
SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F'; 
SELECT s.CDSCode, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr > 500 AND s.Magnet = 1 UNION SELECT s.CDSCode, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN school_scores sscore ON s.CDSCode = sscore.CDSCode WHERE ss.NumTstTakr > 500 AND sscore.Subject = 'Magnet' AND sscore.Score IS NOT NULL; 
SELECT s.Phone FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE sat.NumGE1500 IS NOT NULL GROUP BY s.CDSCode, s.Phone ORDER BY sat.NumGE1500 DESC LIMIT 1; 
SELECT satscores.NumTstTakr FROM satscores INNER JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.FRPM Count (K-12) = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm); 
SELECT COUNT(DISTINCT s.CDSCode) FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE s.AvgScrMath > 560 AND sch.FundingType = 'Charter' 
SELECT f517.FRPM_Count__Ages_5_17  FROM frpm  INNER JOIN (     SELECT s.CDSCode      FROM satscores s      INNER JOIN schools sch ON s.cds = sch.CDSCode      WHERE s.Subject = 'Reading'      GROUP BY s.CDSCode      ORDER BY AVG(s.AvgScrRead) DESC      LIMIT 1 ) s ON f517.CDSCode = s.CDSCode 
SELECT `CDSCode` FROM `frpm` WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500; 
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE `Percent (%) Eligible FRPM (Ages 5-17)` > 0.3 AND `Enrollment (Ages 5-17)` > 0 AND `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL; 
SELECT s.Phone FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.rtype = 'Overall' AND sc.NumGE1500 IS NOT NULL AND sc.NumTstTakr IS NOT NULL ORDER BY (sc.NumGE1500 / sc.NumTstTakr) DESC LIMIT 3; 
SELECT      s.NCESSchool,      fpm.`Enrollment (Ages 5-17)` FROM      frpm fpm JOIN      schools s ON fpm.CDSCode = s.CDSCode ORDER BY      fpm.`Enrollment (Ages 5-17)` DESC LIMIT 5; 
SELECT d.District, AVG(s.AvgScrRead) as AvgReadingScore FROM schools s JOIN districts d ON s.District = d.District WHERE s.StatusType = 'Active' GROUP BY d.District ORDER BY AvgReadingScore DESC LIMIT 1; 
SELECT COUNT(DISTINCT s.CDSCode) FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.County = 'Alameda' AND sat.NumTstTakr < 100; 
SELECT s.CharterNum FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Writing' AND ss.Score = 499 AND s.Charter = 1; 
SELECT COUNT(DISTINCT s.CDSCode) AS SchoolCount FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' AND s.FundingType = 'Directly Funded' AND ss.NumTstTakr <= 250; 
SELECT s.Phone FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' GROUP BY s.CDSCode, s.Phone ORDER BY AVG(ss.Score) DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE County = 'Amador' AND Low_Grade = '09' AND High_Grade = '12'; 
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700; 
SELECT s.School, s.County, s.District, MAX(t.NumTstTakr) AS MaxTestTakers FROM schools s JOIN satscores t ON s.CDSCode = t.cds WHERE s.County = 'Contra Costa' GROUP BY s.School, s.County, s.District ORDER BY MaxTestTakers DESC LIMIT 1; 
SELECT      s.SchoolName,      s.Street,      s.StreetAbr,      s.City,      s.Zip,      s.State FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30; 
SELECT DISTINCT frpm.School Name FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`Percent (%) Eligible Free (K-12)` > 0.1 AND satscores.NumGE1500 >= 1500; 
SELECT s.School, sch.FundingType FROM schools AS s JOIN (     SELECT s.CDSCode, AVG(sat.AvgScrMath) AS AvgMath     FROM schools AS s     JOIN satscores AS sat ON s.CDSCode = sat.cds     WHERE s.County = 'Riverside'     GROUP BY s.CDSCode ) AS avg_scores ON s.CDSCode = avg_scores.CDSCode WHERE avg_scores.AvgMath > 400; 
SELECT      s.School Name,      s.Street,      s.City,      s.State,      s.Zip FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      s.County = 'Monterey'     AND f.`Percent (%) Eligible Free (Ages 5-17)` > 0     AND f.`Free Meal Count (Ages 5-17)` > 800     AND s.`School Type` = 'High School'; 
SELECT      s.School,     ss.Score AS WritingScore,     s.Phone AS CommunicationNumber FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode WHERE      (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01') AND      ss.Subject = 'Writing' 
WITH AvgDifference AS (     SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) AS AvgDiff     FROM frpm     WHERE `FundingType` = 'Local' ), AboveAvg AS (     SELECT          s.`School`,          s.`DOCType`     FROM frpm f     JOIN schools s ON f.CDSCode = s.CDSCode     WHERE f.`FundingType` = 'Local'     AND f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` > (SELECT AvgDiff FROM AvgDifference) ) SELECT `School`, `DOCType` FROM AboveAvg; 
SELECT      s.OpenDate  FROM      frpm  JOIN      schools s ON frpm.CDSCode = s.CDSCode  WHERE      frpm.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm)      AND s.StatusType = 'Active' ORDER BY      s.OpenDate  LIMIT 1; 
SELECT `schools.City`, SUM(`frpm.Enrollment (K-12)`) AS TotalEnrollment FROM `schools` JOIN `frpm` ON `schools.CDSCode` = `frpm.CDSCode` GROUP BY `schools.City` ORDER BY TotalEnrollment ASC LIMIT 5; 
SELECT      s1.CDSCode,     s1.`Percent (%) Eligible Free (K-12)` AS EligibleFreeRate FROM      frpm s1 JOIN      (         SELECT              `CDSCode`,              `Enrollment (K-12)`         FROM              frpm         ORDER BY              `Enrollment (K-12)` DESC         LIMIT 10     ) s2 ON s1.CDSCode = s2.CDSCode WHERE      s1.`Percent (%) Eligible Free (K-12)` IS NOT NULL ORDER BY      s2.`Enrollment (K-12)` DESC LIMIT 2; 
SELECT      frpm.CDSCode,     frpm.School Name,     (frpm.FRPM Count (K-12) / frpm.Enrollment (K-12)) AS EligibleFreeMealRate FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.OwnershipCode = '66' ORDER BY      frpm.FRPM Count (K-12) DESC LIMIT 5; 
SELECT frpm.School Name, schools.Website FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Free Meal Count (Ages 5-17) BETWEEN 1900 AND 2000; 
SELECT      frpm.`Percent (%) Eligible Free (Ages 5-17)` FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.AdmFName1 = 'Kacey Gibson'; 
SELECT s.AdmEmail1 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`Enrollment (K-12)` = (SELECT MIN(`Enrollment (K-12)`) FROM frpm WHERE `Charter School (Y/N)` = 1) AND s.CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1) AND s.StatusType = 'Active' ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1; 
SELECT      s.AdmFName1,      s.AdmLName1,      s.AdmEmail1,      s.AdmFName2,      s.AdmLName2,      s.AdmEmail2,      s.AdmFName3,      s.AdmLName3,      s.AdmEmail3  FROM      schools s  JOIN      satscores st  ON      s.CDSCode = st.cds  WHERE      st.NumGE1500 IS NOT NULL AND      st.NumGE1500 >= 1500  GROUP BY      s.CDSCode  ORDER BY      SUM(st.NumGE1500) DESC  LIMIT 1; 
SELECT      s.Street,      s.City,      s.Zip,      s.State  FROM      schools s  JOIN      satscores sc  ON      s.CDSCode = sc.cds  JOIN      (SELECT          cds,          MIN(sc.AvgScrRead + sc.AvgScrMath + sc.AvgScrWrite) AS TotalScore       FROM          satscores sc       GROUP BY          sc.cds) AS LowScore  ON      s.CDSCode = LowScore.cds  WHERE      sc.NumGE1500 / sc.NumTstTakr = (SELECT MIN(sc.NumGE1500 / sc.NumTstTakr) FROM satscores sc); 
SELECT s.Website FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.County = 'Los Angeles County' AND sat.NumTstTakr BETWEEN 2000 AND 3000; 
SELECT AVG(test_takers.NumTstTakr) AS average_test_takers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND schools.County = 'Fresno'; 
SELECT s.Phone FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.District = 'Fresno Unified' AND sat.AvgScrRead IS NOT NULL GROUP BY s.CDSCode ORDER BY AVG(sat.AvgScrRead) ASC LIMIT 1; 
SELECT s.CDSCode, s.School, AVG(sat.AvgScrRead) AS AvgReadingScore FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.Virtual = 'F' AND s.SOC = 'S' -- Assuming 'S' stands for 'School' in SOC field for virtual schools GROUP BY s.CDSCode, s.School ORDER BY AvgReadingScore DESC LIMIT 5; 
SELECT      s.`EdOpsCode`,      s.`EdOpsName` FROM      schools s JOIN      satscores sat ON s.CDSCode = sat.cds WHERE      sat.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores) 
SELECT      sc.County,      s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite AS AvgAllSubjectsScore FROM      satscores s JOIN      schools sc ON s.cds = sc.CDSCode JOIN      (SELECT           CDSCode,           (AvgScrMath + AvgScrRead + AvgScrWrite) AS AvgScore      FROM           satscores      GROUP BY           CDSCode) AS subScores ON      s.CDSCode = subScores.CDSCode WHERE      subScores.AvgScore = (SELECT MIN(AvgScore) FROM                            (SELECT                             CDSCode,                             (AvgScrMath + AvgScrRead + AvgScrWrite) AS AvgScore                           FROM                             satscores                           GROUP BY                             CDSCode) AS MinScore) ORDER BY      subScores.AvgScore LIMIT 1; 
SELECT      s.City,      AVG(sat.AvgScrWrite) AS AvgWritingScore FROM      satscores sat JOIN      schools s ON sat.cds = s.CDSCode WHERE      sat.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 >= 1500) GROUP BY      s.City,      sat.AvgScrWrite ORDER BY      sat.AvgScrWrite DESC LIMIT 1; 
SELECT      s.School,      AVG(scs.Score) AS AvgWritingScore FROM      schools s JOIN      school_scores scs ON s.CDSCode = scs.CDSCode WHERE      s.AdmLName1 = 'Ulrich'     AND scs.Subject = 'Writing' GROUP BY      s.School; 
SELECT      s.State,      SUM(frm.`Enrollment (K-12)`) AS TotalEnrollment FROM      frpm AS frm JOIN      schools AS s ON frm.CDSCode = s.CDSCode WHERE      s.DOC = '31' AND     frm.`Enrollment (K-12)` IS NOT NULL GROUP BY      s.State ORDER BY      TotalEnrollment DESC LIMIT 1; 
SELECT      COUNT(*) / 12 AS MonthlyAverageOpenings FROM      schools WHERE      County = 'Alameda'      AND District = 'Elementary School District'      AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31'; 
SELECT      (SELECT COUNT(*)       FROM frpm       WHERE District Code IS NOT NULL       AND `District Type` = 'Unified School District'       AND County Code = 'Orange') AS UnifiedSchoolDistrictCount,     (SELECT COUNT(*)       FROM frpm       WHERE District Code IS NOT NULL       AND `District Type` = 'Elementary School District'       AND County Code = 'Orange') AS ElementarySchoolDistrictCount,     (SELECT CAST(COUNT(*)                FROM frpm                WHERE District Code IS NOT NULL                AND `District Type` = 'Unified School District'                AND County Code = 'Orange') AS REAL) /       (SELECT CAST(COUNT(*)                   FROM frpm                   WHERE District Code IS NOT NULL                   AND `District Type` = 'Elementary School District'                   AND County Code = 'Orange') AS REAL) AS Ratio 
SELECT      d.City,      sc.School,      sc.ClosedDate AS ClosureDate,      COUNT(*) AS NumClosedSchools FROM      schools AS sc JOIN      district_closures AS dc ON      sc.County = dc.City WHERE      sc.StatusType = 'Closed' GROUP BY      d.City,      sc.School,      sc.ClosedDate ORDER BY      NumClosedSchools DESC LIMIT      1; 
SELECT s.Street AS PostalStreet, s.SchoolName FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Math' ORDER BY ss.Score DESC LIMIT 1 OFFSET 5; 
SELECT      s.Street,      s.StreetAbr,      s.City,      s.Zip,      s.State,      s.MailStreet,      s.MailStrAbr,      s.MailCity,      s.MailZip,      s.MailState,      s.NCESSchool FROM      schools s JOIN      school_scores ss ON s.CDSCode = ss.CDSCode JOIN      (SELECT           CDSCode,           MIN(Score) AS MinScore      FROM           school_scores      WHERE           Subject = 'Reading'      GROUP BY           CDSCode) AS MinReadingScores ON      s.CDSCode = MinReadingScores.CDSCode JOIN      (SELECT           CDSCode,           AVG(Score) AS AvgScore      FROM           school_scores      WHERE           Subject = 'Reading'      GROUP BY           CDSCode) AS AvgReadingScores ON      MinReadingScores.CDSCode = AvgReadingScores.CDSCode WHERE      AvgReadingScores.MinScore = AvgReadingScores.AvgScore ORDER BY      AvgReadingScores.AvgScore LIMIT 1; 
SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 >= 1500 AND schools.MailCity = 'Lakeport'; 
SELECT COUNT(DISTINCT t.SchoolPhone) AS TotalTestTakers FROM test_takers t JOIN schools s ON t.SchoolPhone = s.Phone WHERE s.City = 'Fresno'; 
SELECT s.CDSCode, s.Zip AS MailingZipCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.AdmFName1 = 'Avetik Atoian' OR s.AdmLName1 = 'Atoian'; 
SELECT      (SELECT COUNT(*)       FROM schools       WHERE `State` = 'CA' AND `County` = 'Colusa') AS ColusaCount,     (SELECT COUNT(*)       FROM schools       WHERE `State` = 'CA' AND `County` = 'Humboldt') AS HumboldtCount,     (SELECT CAST(COUNT(*)                  FROM schools                  WHERE `State` = 'CA' AND `County` = 'Colusa') AS REAL) /       (SELECT CAST(COUNT(*)                   FROM schools                   WHERE `State` = 'CA' AND `County` = 'Humboldt') AS REAL) AS Ratio FROM DUAL; 
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND District = 'San Joaquin' AND StatusType = 'Active'; 
SELECT s.Phone, s.Ext FROM schools s JOIN school_scores ss ON s.CDSCode = ss.CDSCode WHERE ss.Subject = 'Writing' ORDER BY ss.Score DESC LIMIT 1 OFFSET 332; 
SELECT `schools`.`Phone`, `schools`.`Ext`, `schools`.`School` FROM `schools` WHERE `schools`.`Zip` = '95203-3704'; 
SELECT s.Website FROM schools s JOIN (     SELECT CDSCode     FROM schools     WHERE AdmLName1 = 'Larson' AND AdmFName1 = 'Mike' OR           AdmLName2 = 'Larson' AND AdmFName2 = 'Mike' OR           AdmLName3 = 'Larson' AND AdmFName3 = 'Mike' OR           AdmLName1 = 'Alvarez' AND AdmFName1 = 'Dante' OR           AdmLName2 = 'Alvarez' AND AdmFName2 = 'Dante' OR           AdmLName3 = 'Alvarez' AND AdmFName3 = 'Dante' ) as admins ON s.CDSCode = admins.CDSCode; 
SELECT s.Website FROM schools s WHERE s.County = 'San Joaquin' AND s.Charter = 1 AND s.Virtual = 'P'; 
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = 52 AND City = 'Hickman'; 
SELECT COUNT(DISTINCT frpm.CDSCode) AS TotalNonCharteredSchools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Los Angeles' AND schools.Charter = 0 AND frpm.`Percent (%) Eligible Free (K-12)` < 0.18; 
SELECT      s.School,      s.City,      s.AdmFName1,      s.AdmLName1,      s.AdmFName2,      s.AdmLName2,      s.AdmFName3,      s.AdmLName3 FROM      schools s WHERE      s.Charter = 1 AND      s.CharterNum = '00D2' AND      (s.AdmFName1 IS NOT NULL OR s.AdmLName1 IS NOT NULL OR      s.AdmFName2 IS NOT NULL OR s.AdmLName2 IS NOT NULL OR      s.AdmFName3 IS NOT NULL OR s.AdmLName3 IS NOT NULL); 
SELECT COUNT(*) FROM schools WHERE `CharterNum` = '00D4' AND `MailCity` = 'Hickman'; 
SELECT      (COUNT(CASE WHEN frpm."Charter Funding Type" = 'Locally Funded' THEN 1 END) * 100.0) /     COUNT(*) * 100 AS Percentage_Locally_Funded FROM      frpm WHERE      frpm.County = 'Santa Clara' 
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND `County` = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'; 
SELECT SUM(`DistrictClosureCount`) AS TotalClosureCount FROM `district_closures` WHERE `ClosureYear` = '1989' AND `City` = 'San Francisco'; 
SELECT `County`, COUNT(`ClosureYear`) AS `ClosureCount` FROM `district_closures` WHERE `ClosureYear` BETWEEN '1980' AND '1989' AND `SOC` = '11' GROUP BY `County` ORDER BY `ClosureCount` DESC LIMIT 1; 
SELECT `schools`.`NCESDist` FROM `schools` WHERE `schools`.`SOC` = '31'; 
SELECT COUNT(*) AS TotalActiveAndClosedSchools FROM `frpm` WHERE `County Code` = 'Alpine' AND (`StatusType` = 'Active' OR `StatusType` = 'Closed'); 
SELECT DISTINCT District FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Fresno' AND schools.Magnet = 0; 
SELECT SUM(`Enrollment (Ages 5-17)`) AS TotalEnrollment FROM `frpm` WHERE `Academic Year` = '2014-15'    AND `School Name` = 'State Special School'    AND `County Name` = 'Fremont'; 
SELECT      SUM(`Free Meal Count (Ages 5-17)`) AS TotalFreeMealCount FROM      `frpm` WHERE      `School Type` = 'Youth Authority'     AND `MailStreet` = 'PO Box 1040'; 
SELECT MIN(`Low Grade`) AS LowestGrade FROM `frpm` WHERE `EdOpsCode` = 'SPECON' AND `NCESDist` = '613360'; 
SELECT frpm.School Name, schools.EdOpsName FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.County Code = '37' AND frpm.NSLP Provision Status = 'Breakfast Provision 2'; 
SELECT s.City FROM frpm f JOIN schools sch ON f.CDSCode = sch.CDSCode WHERE f.EILCode = 'HS' AND f.LowGrade = '09' AND f.HighGrade = '12' AND f.County Name = 'Merced' AND f.NSLP Provision Status = 'Lunch Provision 2'; 
SELECT      frpm.School Name,      frpm.`Percent (%) Eligible FRPM (Ages 5-17)` FROM      frpm INNER JOIN      schools  ON      frpm.CDSCode = schools.CDSCode WHERE      schools.County = 'Los Angeles'      AND frpm.Low Grade = 'K'      AND frpm.High Grade = '9'; 
SELECT `GSoffered` AS GradeSpan, COUNT(*) AS Frequency FROM `schools` WHERE `City` = 'Adelanto' GROUP BY `GSoffered` ORDER BY Frequency DESC LIMIT 1; 
SELECT      County,     COUNT(*) AS NumberOfSchools FROM      schools WHERE      County IN ('San Diego', 'Santa Barbara')     AND Virtual = 'F' GROUP BY      County ORDER BY      NumberOfSchools DESC LIMIT 1; 
SELECT      `schools`.`School`,      `schools`.`Latitude` FROM      `schools` WHERE      `schools`.`Latitude` = (SELECT MAX(`schools`.`Latitude`) FROM `schools`) ORDER BY      `schools`.`Latitude` DESC LIMIT 1; 
SELECT      s.City,      s.School,      frpm.Low_Grade FROM      schools s JOIN      frpm ON s.CDSCode = frpm.CDSCode WHERE      s.State = 'CA' ORDER BY      s.Latitude ASC LIMIT 1; 
SELECT      MAX(`Longitude`) AS MaxLongitude,      `Low Grade`,      `High Grade` FROM      `frpm` WHERE      `Longitude` IS NOT NULL GROUP BY      `Low Grade`, `High Grade` ORDER BY      `Longitude` DESC LIMIT 1; 
SELECT      COUNT(DISTINCT s.City) AS CitiesWithK8MagnetSchools,     s.City,     COUNT(DISTINCT s.CDSCode) AS NumberOfK8MagnetSchools FROM      schools s WHERE      s.Magnet = 1 AND     s.GSoffered LIKE '%K-8%' GROUP BY      s.City HAVING      s.GSserved LIKE '%K-8%' UNION SELECT      COUNT(DISTINCT s.CDSCode) AS MagnetSchoolsWithMultipleProvisionTypes FROM      schools s WHERE      s.Magnet = 1 AND     s.SOCType LIKE '%Multiple%' 
SELECT      AdmFName1,      COUNT(AdmFName1) AS NameCount,      District  FROM      schools  GROUP BY      AdmFName1, District  ORDER BY      NameCount DESC, District  LIMIT 2; 
SELECT      f.`District Code`,     f.`Percent (%) Eligible Free (K-12)` FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode JOIN      test_takers tt ON s.CDSCode = tt.SchoolPhone WHERE      s.AdmFName1 = 'Alusine'; 
SELECT s.District, s.County, s.School, a.AdmLName1 AS AdminLastName FROM schools s JOIN schools a ON s.CDSCode = a.CDSCode AND s.CharterNum = '40'; 
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54') AND StatusType = 'Public'; 
SELECT s.AdmEmail1, s.AdmEmail2, s.AdmEmail3, sname FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN (     SELECT cds, COUNT(*) AS num_takers     FROM satscores     WHERE AvgScrRead >= 1500 OR AvgScrMath >= 1500 OR AvgScrWrite >= 1500     GROUP BY cds     ORDER BY num_takers DESC     LIMIT 1 ) high_takers ON s.CDSCode = high_takers.cds ORDER BY s.AdmEmail1 IS NOT NULL DESC, s.AdmEmail2 IS NOT NULL DESC, s.AdmEmail3 IS NOT NULL DESC LIMIT 1; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND t.operation = 'issuance'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'Prague' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = a.account_id     AND l.status = 'eligible'; ); 
SELECT      (SELECT AVG(`A12`) FROM `district` WHERE `A11` = 1995) AS avg_unemployment_1995,     (SELECT AVG(`A13`) FROM `district` WHERE `A11` = 1996) AS avg_unemployment_1996,     CASE          WHEN (SELECT AVG(`A12`) FROM `district` WHERE `A11` = 1995) > (SELECT AVG(`A13`) FROM `district` WHERE `A11` = 1996) THEN '1995'         ELSE '1996'     END AS year_with_higher_unemployment 
SELECT COUNT(*)  FROM district  WHERE A11 > 6000 AND A11 < 10000 AND EXISTS (     SELECT 1      FROM client      WHERE client.district_id = district.district_id      AND gender = 'F'      AND A11 IS NOT NULL ); 
SELECT COUNT(c.client_id)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'M'  AND d.A3 = 'North Bohemia'  AND d.A11 > 8000; 
SELECT a.account_id FROM account ac JOIN client cl ON ac.account_id = cl.account_id JOIN district d ON ac.district_id = d.district_id WHERE cl.gender = 'F' ORDER BY cl.birth_date ASC, d.A11 ASC LIMIT 1;  SELECT a.account_id FROM account ac JOIN client cl ON ac.account_id = cl.account_id JOIN district d ON ac.district_id = d.district_id WHERE cl.gender = 'F' ORDER BY d.A11 DESC LIMIT 1;  SELECT MAX(d.A11) - MIN(d.A11) AS salary_gap FROM account ac JOIN client cl ON ac.account_id = cl.account_id JOIN district d ON ac.district_id = d.district_id WHERE cl.gender = 'F'; 
SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.account_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date = (SELECT MIN(birth_date) FROM client) AND d.A11 = (SELECT MAX(A11) FROM district); 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'; 
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.operation = 'POPLATEK PO OBRATU'; 
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1997 AND l.status = 'approved' ORDER BY l.amount ASC LIMIT 1; 
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 AND a.account_id IN (     SELECT account_id     FROM loan     WHERE duration > 12     AND YEAR(date) = 1993     ORDER BY amount DESC     LIMIT 1 ); 
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov'; 
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE YEAR(date) = 1995) GROUP BY account_id; 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.amount > 3000 AND t.type = 'deposit'; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id WHERE cr.issued = '1994-03-03'; 
SELECT account.date FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.amount = 840 AND trans.date = '1998-10-14'; 
SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.date = '1994-08-25'; 
SELECT MAX(t.amount) AS max_transaction_amount FROM `trans` t JOIN `disp` d ON t.account_id = d.account_id JOIN `client` c ON d.client_id = c.client_id WHERE YEAR(d.issued) = 1996 AND MONTH(d.issued) = 10 AND DAY(d.issued) = 21; 
SELECT c.gender FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON c.district_id = a.district_id JOIN disp disp ON a.account_id = disp.account_id JOIN (     SELECT district_id, AVG(`A11`) as avg_salary     FROM district     GROUP BY district_id     ORDER BY avg_salary DESC     LIMIT 1 ) AS highest_avg_salary ON d.district_id = highest_avg_salary.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE district_id = highest_avg_salary.district_id ); 
SELECT      c.client_id,     t.amount AS first_transaction_amount FROM      client c JOIN      disp d ON c.client_id = d.client_id JOIN      account a ON d.account_id = a.account_id JOIN      loan l ON a.account_id = l.account_id JOIN      trans t ON a.account_id = t.account_id WHERE      l.amount = (SELECT MAX(amount) FROM loan) AND      t.date = (SELECT MIN(date) FROM trans WHERE account_id = a.account_id) ORDER BY      t.date LIMIT 1; 
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN account a ON c.district_id = a.district_id  JOIN district d ON c.district_id = d.district_id  WHERE d.A2 = 'Jesenik' AND c.gender = 'F'; 
SELECT d.disp_id FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE t.date = '1998-09-02' AND t.amount = 5100 AND d.client_id = (SELECT client_id FROM client c WHERE c.district_id = d.district_id) 
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND YEAR(account.date) = 1996; 
SELECT d.A2 AS district_name FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29'; 
SELECT c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; 
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id JOIN client c ON a.district_id = c.district_id JOIN disp d2 ON a.account_id = d2.account_id WHERE d.A3 = 'Prague' ORDER BY c.birth_date ASC LIMIT 1; 
SELECT      (SELECT COUNT(*)       FROM client       WHERE gender = 'M' AND district_id IN       (SELECT district_id        FROM district        WHERE A3 = 'South Bohemia')     ) /      (SELECT COUNT(*)       FROM client       WHERE district_id IN       (SELECT district_id        FROM district        WHERE A3 = 'South Bohemia')     ) * 100 AS male_clients_percentage FROM district WHERE A3 = 'South Bohemia' ORDER BY A8 DESC LIMIT 1; 
SELECT      ((MAX(t.balance) - MIN(t.balance)) / MIN(t.balance)) * 100 AS increase_rate FROM      trans t JOIN      account a ON t.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.birth_date BETWEEN '1973-01-01' AND '1973-12-31'     AND t.date BETWEEN '1993-03-22' AND '1998-12-27' GROUP BY      t.account_id HAVING      MIN(t.date) = '1993-07-05'; 
SELECT      (SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100 AS percentage_fully_paid FROM      loan l; 
SELECT     ROUND((COUNT(*) FILTER (WHERE l.status = 'C') * 100.0) / COUNT(*), 2) AS running_no_issue_percentage FROM     loan l WHERE     l.amount < 100000; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date < '1993-01-01' AND a.frequency = 'POPLATEK PO OBRATU' ORDER BY a.account_id; 
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'east Bohemia' AND YEAR(a.date) BETWEEN 1995 AND 2000 JOIN disp d2 ON a.account_id = d2.account_id JOIN client c ON d2.client_id = c.client_id; 
SELECT `account.account_id`, `account.date` FROM `account` JOIN `client` ON `account.district_id` = `client.district_id` JOIN `district` ON `client.district_id` = `district.district_id` WHERE `district.A2` = 'Prachatice'; 
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE l.loan_id = 4990; 
SELECT      a.account_id,      d.A2 AS district,      d.A3 AS region FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id WHERE      l.amount > 300000; 
SELECT l.loan_id, d.A3, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60 GROUP BY l.loan_id, d.A3; 
SELECT d.A7 AS district,         ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dt ON c.district_id = dt.district_id WHERE l.status = 'D' AND dt.A12 IS NOT NULL AND dt.A13 IS NOT NULL; 
SELECT      (COUNT(CASE WHEN d.A2 = 'Decin' AND a.date BETWEEN '1993-01-01' AND '1993-12-31' THEN 1 END) * 100.0) / COUNT(a.account_id) AS percentage_accounts_opened_1993_in_Decin FROM      account a JOIN      district d ON a.district_id = d.district_id; 
SELECT account_id FROM trans WHERE k_symbol = 'POPLATEK MESICNE' GROUP BY account_id HAVING COUNT(*) > 0; 
SELECT d.A2, COUNT(c.client_id) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 10; 
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND c.client_id NOT IN (     SELECT d.client_id     FROM disp d     JOIN account a ON d.account_id = a.account_id     WHERE d.type = 'credit' ); 
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1; 
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN client c ON l.account_id = c.account_id WHERE c.gender = 'M'; 
SELECT d.A2 AS branch_location, d.A13 AS district_name, d.A13 AS unemployment_rate FROM district d WHERE d.A13 = (SELECT MAX(A13) FROM district WHERE YEAR(d.date) = 1996) AND YEAR(d.date) = 1996; 
SELECT COUNT(a.account_id)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A16 = (SELECT MAX(A16) FROM district WHERE A16 IS NOT NULL); 
SELECT COUNT(DISTINCT t.account_id) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.type = 'VYBER KARTOU' AND t.balance < 0 AND a.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(DISTINCT a.account_id)  FROM loan l  JOIN account a ON l.account_id = a.account_id  WHERE l.amount >= 250000  AND a.frequency = 'POPLATEK MESICNE'  AND l.date BETWEEN '1995-01-01' AND '1997-12-31'  AND l.status = 'APPROVED'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id JOIN disp d ON a.account_id = d.account_id JOIN district dt ON d.district_id = dt.district_id WHERE dt.A2 = 'Branch location 1' AND (l.status = 'C' OR l.status = 'D'); 
SELECT COUNT(c.client_id) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A15 = (     SELECT MAX(d2.A15) - 1     FROM district d2     WHERE d2.A15 < (         SELECT MAX(d3.A15)         FROM district d3         WHERE YEAR(d3.A15) = 1995     )     AND YEAR(d2.A15) = 1995 ) AND c.gender = 'M'; 
SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE c.type = 'gold' AND d.type = 'disponent'; 
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Pisek'; 
SELECT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY d.A2 HAVING SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) > 10000; 
SELECT DISTINCT o.account_id FROM order o JOIN account a ON o.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Pisek' AND o.k_symbol = 'SIPO'; 
SELECT DISTINCT a.account_id FROM account ac JOIN disp d ON ac.account_id = d.account_id JOIN card c ON d.card_id = c.card_id WHERE c.type = 'gold' AND EXISTS (     SELECT 1     FROM card c2     JOIN disp d2 ON c2.card_id = d2.card_id     WHERE d2.account_id = ac.account_id AND c2.type = 'junior' ); 
SELECT AVG(amount) AS average_credit_card_amount FROM `trans` WHERE `type` = 'KARTA' AND `operation` = 'VYBER KARTOU' AND YEAR(`date`) = 2021 
SELECT t.account_id FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.type = 'CREDIT' AND t.operation = 'VYBER KARTOU' AND YEAR(t.date) = 1998 GROUP BY t.account_id HAVING SUM(t.amount) < (     SELECT AVG(monthly_spending)     FROM (         SELECT t.account_id, SUM(t.amount) AS monthly_spending         FROM trans t         WHERE t.type = 'CREDIT' AND t.operation = 'VYBER KARTOU' AND YEAR(t.date) = 1998         GROUP BY t.account_id     ) AS monthly_spending_table ) 
SELECT DISTINCT c.client_id FROM client c JOIN account a ON c.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card cr ON d.disp_id = cr.disp_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' AND cr.type = 'credit'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'South Bohemia'; 
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Tabor' AND a.frequency = 'OWNER'; 
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A11 BETWEEN 8000 AND 9000 AND a.frequency != 'OWNER'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN district dt ON a.district_id = dt.district_id JOIN trans t ON a.account_id = t.account_id WHERE dt.A3 = 'North Bohemia' AND t.bank = 'AB'; 
SELECT d.A2 AS DistrictName FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ'; 
SELECT AVG(A15) AS average_crimes FROM district WHERE A15 > 4000 AND EXISTS (     SELECT 1     FROM account     WHERE district.district_id = account.district_id     AND YEAR(date) >= 1997 ); 
SELECT COUNT(*)  FROM `account`  JOIN `disp` ON `account.account_id` = `disp.account_id` JOIN `card` ON `disp.disp_id` = `card.disp_id` WHERE `card.type` = 'classic' AND `account.frequency` = 'OWNER'; 
SELECT COUNT(client_id)  FROM client  JOIN district ON client.district_id = district.district_id  WHERE client.gender = 'M' AND district.A2 = 'Hl.m. Praha'; 
SELECT      (COUNT(CASE WHEN c.type = 'Gold' AND c.issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(c.card_id) AS gold_card_percentage FROM      card c; 
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan); 
SELECT SUM(A15) AS total_crimes FROM district JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532 AND district.A15 IS NOT NULL; 
SELECT a.district_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 33333; 
SELECT t.trans_id, t.date, t.amount, t.balance FROM trans t JOIN client c ON t.account_id = c.client_id WHERE c.client_id = 3356 AND t.type = 'cash' AND t.operation = 'VYBER'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 13539; 
SELECT d.A3 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.client_id = 3541; 
SELECT d.A2, COUNT(a.account_id) AS account_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1; 
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423; 
SELECT t.trans_id, t.date, t.type, t.amount, t.balance, t.k_symbol, t.bank, t.account FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A5 = '5'; 
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik'); 
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.type = 'junior' AND crd.issued >= '1997-01-01'; 
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(c.client_id) AS percentage_female FROM     client c JOIN     district d ON c.district_id = d.district_id WHERE     d.A11 > 10000 
SELECT      ((SUM(CASE WHEN L.date BETWEEN '1997-01-01' AND '1997-12-31' THEN L.amount ELSE 0 END) -       SUM(CASE WHEN L.date BETWEEN '1996-01-01' AND '1996-12-31' THEN L.amount ELSE 0 END)) /       SUM(CASE WHEN L.date BETWEEN '1996-01-01' AND '1996-12-31' THEN L.amount ELSE 0 END) * 100) AS growth_rate FROM      loan L JOIN      account A ON L.account_id = A.account_id JOIN      client C ON A.district_id = C.district_id WHERE      C.gender = 'M'; 
SELECT COUNT(*) FROM `trans` WHERE `type` = 'KARTA' AND `operation` = 'VYBER KARTOU' AND `date` > '1995-01-01'; 
SELECT      (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia' AND A11 = 1996) -      (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia' AND A11 = 1996) AS crime_difference; 
SELECT COUNT(DISTINCT d.disp_id) AS total_dispositions FROM disp d WHERE d.account_id BETWEEN 1 AND 10; 
SELECT      COUNT(`trans_id`) AS statement_requests_count,     SUM(`amount`) AS total_debit_amount FROM      `trans` WHERE      `account_id` = 3     AND `type` = 'request'     AND `k_symbol` = 'account statement'; 
SELECT YEAR(client.birth_date) AS birth_year FROM client WHERE client_id = 130; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND t.operation = 'ZADANIE WYDANIA ZGODNYCH RAPORTÓW'; 
SELECT      SUM(CASE WHEN l.status = 'Active' THEN l.amount ELSE 0 END) AS total_active_loans,     SUM(CASE WHEN l.status = 'Active' THEN l.payments ELSE 0 END) AS total_paid_loans FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.client_id = 992; 
SELECT     SUM(t.amount) AS total_sum,     c.gender FROM     `trans` t JOIN     `account` a ON t.account_id = a.account_id JOIN     `client` c ON a.district_id = c.district_id WHERE     t.trans_id = 851     AND c.client_id = 4 GROUP BY     c.gender; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 9; 
SELECT SUM(`amount`) AS total_payment FROM `trans` WHERE `account_id` IN (     SELECT `account_id`     FROM `disp`     WHERE `client_id` = 617 ) AND YEAR(`date`) = 1998; 
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A2 = 'East Bohemia'; 
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3; 
SELECT COUNT(DISTINCT c.client_id) AS num_male_customers FROM client c JOIN disp d ON c.client_id = d.client_id JOIN trans t ON d.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.type = 'SIPO' AND t.amount > 4000; 
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31'; 
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card crd ON crd.card_id = a.account_id WHERE c.gender = 'F' AND crd.type = 'junior'; 
SELECT     ROUND((COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0) / COUNT(DISTINCT d.account_id), 2) AS female_percentage FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     district dt ON d.district_id = dt.district_id WHERE     dt.A3 = 'Prague'; 
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0) / COUNT(CASE WHEN c.gender = 'M' THEN 1 END + COUNT(CASE WHEN a.frequency = 'POPLATEK TYDNE' THEN 1 END - COUNT(CASE WHEN c.gender = 'M' THEN 1 END AND a.frequency = 'POPLATEK TYDNE' THEN 1 END)) AS male_clients_percentage FROM      client c JOIN      account a ON c.district_id = a.district_id JOIN      disp d ON a.account_id = d.account_id WHERE      c.gender = 'M' AND      a.frequency = 'POPLATEK TYDNE' 
SELECT COUNT(DISTINCT c.client_id)  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN account a ON d.account_id = a.account_id  WHERE a.frequency = 'POPLATEK TYDNE'; 
SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' AND l.amount = (SELECT MIN(l2.amount)                 FROM loan l2                 WHERE l2.duration > 24                 AND a.account_id = l2.account_id); 
SELECT d.account_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN district dt ON c.district_id = dt.district_id WHERE c.gender = 'F' AND dt.A11 = (SELECT MIN(A11) FROM district dt2 WHERE dt2.A11 IS NOT NULL) ORDER BY c.birth_date ASC LIMIT 1; 
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE YEAR(client.birth_date) = 1920 AND district.A3 = 'East Bohemia'; 
SELECT COUNT(DISTINCT l.account_id) AS loan_accounts FROM loan AS l JOIN account AS a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE'; 
SELECT      T1.date AS transaction_date,      AVG(T2.amount) AS average_loan_amount FROM      trans T1 JOIN      loan T2 ON T1.account_id = T2.account_id WHERE      T2.status IN ('C', 'D')     AND T1.operation = 'POPLATEK PO OBRATU' GROUP BY      T1.date; 
SELECT c.client_id, d.A2 AS district FROM client c JOIN disp d ON c.district_id = d.district_id WHERE c.client_id IN (     SELECT client_id     FROM disp     WHERE account_id IN (         SELECT account_id         FROM account         WHERE account_id NOT IN (             SELECT account_id             FROM order         )     ) ); 
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id JOIN account acc ON d.account_id = acc.account_id JOIN loan ln ON acc.account_id = ln.account_id WHERE crd.type = 'gold' AND ln.status = 'eligible'; 
SELECT bond_type, COUNT(*) as count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1; 
SELECT COUNT(DISTINCT a.molecule_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl'; 
SELECT AVG(CASE WHEN a.element = 'O' THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'; 
SELECT      COUNT(DISTINCT m.molecule_id) /      (SELECT COUNT(DISTINCT m.molecule_id)       FROM molecule m       JOIN bond b ON m.molecule_id = b.molecule_id       WHERE b.bond_type = '-' AND m.label = '+') AS avg_single_bonded_carcinogens FROM      molecule m  WHERE      m.label = '+'; 
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'na' 
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+'; 
SELECT      SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id) AS percentage_carbon FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = ' = ' 
SELECT COUNT(*) FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#'; 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a WHERE a.element != 'br' AND a.molecule_id IN (SELECT m.molecule_id FROM molecule m WHERE m.label != 'Bromine'); 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT DISTINCT a.element AS element1, a2.element AS element2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = ' = ' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')  AND a2.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT m.label, COUNT(a.atom_id) AS count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY count DESC LIMIT 1; 
SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te'; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'; 
SELECT DISTINCT a1.atom_id AS atom1, a2.atom_id AS atom2 FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE m.label = '-'; 
SELECT a.element, COUNT(*) AS element_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY a.element ORDER BY element_count ASC LIMIT 1; 
SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20')    OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8'); 
SELECT m.label FROM molecule m WHERE NOT EXISTS (     SELECT 1     FROM atom a     WHERE a.element != 'sn' AND a.molecule_id = m.molecule_id ) AND m.label IN ('+', '-'); 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR181' UNION SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR181'; 
SELECT      ROUND((SUM(CASE WHEN a.element = 'f' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100, 2) AS percent FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      molecule m ON c.molecule_id = m.molecule_id WHERE      m.label = '+' 
SELECT      (SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) / COUNT(b.bond_id)) * 100 AS percent FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+'; 
SELECT element, COUNT(*) as count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3; 
SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = 'TR001'; 
SELECT      (SELECT COUNT(*) FROM molecule WHERE label = '+') -      (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference_between_carcinogenic_non_carcinogenic 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR_000_2_5'; 
SELECT c.bond_id FROM connected AS c WHERE c.atom_id2 = 'TR000_2'; 
SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id, m.label ORDER BY m.label ASC LIMIT 5; 
SELECT      DIVIDE(SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END), COUNT(bond.bond_id)) AS percent FROM      bond WHERE      bond.molecule_id = 'TR008' 
SELECT      (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.molecule_id)) AS percent FROM      molecule m; 
SELECT      (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(a.atom_id)) * 100 AS hydrogen_percentage FROM      atom a WHERE      a.molecule_id = 'TR206' 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.molecule_id = 'TR000'; 
SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR060' AND m.label = '+' AND (a.element = 'cl' OR a.element = 'c' OR a.element = 'h' OR a.element = 'o' OR a.element = 's' OR a.element = 'n' OR a.element = 'p' OR a.element = 'na' OR a.element = 'br' OR a.element = 'f' OR a.element = 'i' OR a.element = 'sn' OR a.element = 'pb' OR a.element = 'te' OR a.element = 'ca') 
SELECT b.bond_type, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR018' GROUP BY b.bond_type, m.label ORDER BY COUNT(b.bond_type) DESC, m.label DESC LIMIT 1; 
SELECT m.label, COUNT(DISTINCT c.atom_id) AS single_bond_pairs FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-' AND m.label = '-' GROUP BY m.molecule_id ORDER BY single_bond_pairs DESC, m.label ASC LIMIT 3; 
SELECT b.bond_id, b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR006' ORDER BY b.bond_type ASC LIMIT 2; 
SELECT COUNT(*) FROM bond WHERE molecule_id LIKE 'TR009_%' AND (bond.atom_id LIKE 'TR009_12' OR bond.atom_id2 LIKE 'TR009_12'); 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br'; 
SELECT b.bond_type, a1.atom_id AS atom1, a2.atom_id AS atom2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_6_9'; 
SELECT m.label,         CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS carcinogenicity FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_10'; 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#'; 
SELECT COUNT(DISTINCT c.bond_id) AS connection_count FROM connected c WHERE c.atom_id = 'TR%_19' OR c.atom_id2 = 'TR%_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR004' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m WHERE m.label = '-'; 
SELECT DISTINCT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+'; 
SELECT b.bond_id FROM bond b JOIN atom a1 ON b.molecule_id = a1.molecule_id AND a1.element = 'p' JOIN atom a2 ON b.molecule_id = a2.molecule_id AND a2.element = 'n' JOIN connected c ON b.bond_id = c.bond_id; 
SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' AND m.label = '+' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1; 
SELECT      COUNT(bond.bond_id) / COUNT(DISTINCT atom.atom_id) AS average_bonds FROM      atom JOIN      bond ON atom.atom_id = bond.atom_id WHERE      atom.element = 'i'; 
SELECT bond.bond_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = '45' OR atom.atom_id = CONCAT(SUBSTR(atom.atom_id, 1, 6), '45'); 
SELECT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND c.atom_id IS NULL; 
SELECT a1.atom_id AS Atom1, a2.atom_id AS Atom2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR447' AND b.bond_type = '#'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR144_8_19'; 
SELECT m.molecule_id, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY double_bond_count DESC LIMIT 1; 
SELECT element, COUNT(*) AS frequency FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY frequency ASC LIMIT 1; 
SELECT DISTINCT c.atom_id2 FROM connected AS c JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'pb'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      (COUNT(bond_id) / (SELECT COUNT(DISTINCT atom_id)                         FROM connected                         WHERE atom_id IN                         (SELECT atom_id                          FROM connected                          GROUP BY atom_id                          ORDER BY COUNT(*) DESC                          LIMIT 1))) * 100 AS percentage_of_most_common_bond_combination FROM      connected; 
SELECT      (SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) * 1.0) / COUNT(bond.bond_id) AS proportion_of_carcinogenic_single_bonds FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      bond.bond_type = '-'     AND molecule.label = '+'; 
SELECT COUNT(a.atom_id) AS total_atoms FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element IN ('c', 'h'); 
SELECT DISTINCT c.atom_id2  FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 's'; 
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'sn'; 
SELECT COUNT(DISTINCT a.element) AS unique_elements FROM atom a JOIN bond b ON a.atom_id = b.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '-'; 
SELECT COUNT(DISTINCT a.atom_id) AS total_triple_bond_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND (     (a.element = 'p' OR a.element = 'br') OR      (a.atom_id = c.atom_id2 AND (SELECT a2.element FROM atom a2 WHERE a2.atom_id = c.atom_id2) = 'p' OR      (SELECT a2.element FROM atom a2 WHERE a2.atom_id = c.atom_id2) = 'br') ) 
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT DISTINCT c.molecule_id FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON c.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-'; 
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(a.atom_id) AS percent_cl FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      b.bond_type = '-' AND a.element = 'cl'; 
SELECT label  FROM molecule  WHERE molecule_id IN ('TR000', 'TR001', 'TR002'); 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030'    AND m.label = '+'; 
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050'; 
SELECT a1.element AS Element1, a2.element AS Element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11'; 
SELECT COUNT(c.bond_id) FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'i' OR a2.element = 'i'; 
SELECT      m.molecule_id,     CASE          WHEN COUNT(CASE WHEN c.label = '+' THEN 1 END) > COUNT(CASE WHEN c.label = '-' THEN 1 END) THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS carcinogenicity FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      atom a ON c.atom_id = a.atom_id WHERE      a.element = 'ca' GROUP BY      m.molecule_id ORDER BY      carcinogenicity DESC; 
SELECT EXISTS (     SELECT 1     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id     JOIN bond b ON c.bond_id = b.bond_id     WHERE b.bond_id = 'TR001_1_8'       AND (a.element = 'cl' OR a.element = 'c')     GROUP BY a.atom_id     HAVING COUNT(DISTINCT a.element) = 2 ) AS has_chlorine_and_carbon; 
SELECT DISTINCT m1.molecule_id FROM molecule m1 JOIN connected c ON m1.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'c' AND a2.element = 'c' AND b.bond_type = '#' AND m1.label = '-' GROUP BY m1.molecule_id HAVING COUNT(DISTINCT c.bond_id) = 3; 
SELECT      (SUM(CASE WHEN a.element = 'Cl' THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT m.molecule_id)  FROM      atom a  JOIN      connected c ON a.atom_id = c.atom_id  JOIN      molecule m ON c.molecule_id = m.molecule_id  WHERE      m.label = '+'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR001' AND a.element IS NOT NULL; 
SELECT DISTINCT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = '; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND c.atom_id < c.atom_id2; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26'; 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN bond b ON m.molecule_id = b.molecule_id  WHERE m.label = '-' AND b.bond_type = '-'; 
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11'; 
SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '+'; 
SELECT      a.molecule_id,      SUBSTR(a.atom_id, 7, 1) AS atom_position,      a.element FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = '+'      AND SUBSTR(a.atom_id, 7, 1) = '4' 
SELECT      m.label,     SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(a.atom_id) AS hydrogen_ratio FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.molecule_id = 'TR006' AND      m.label IN ('+', '-')  GROUP BY      m.label; 
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' AND m.label = '+'; 
SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'te'; 
SELECT DISTINCT a.element AS Element1, b.element AS Element2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond ON c.bond_id = bond.bond_id JOIN atom b ON b.atom_id = c.atom_id2 WHERE bond.bond_id = 'TR001_10_11' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND b.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT      (COUNT(CASE WHEN b.bond_type = '#' THEN 1 END) * 100.0) / COUNT(*) FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON c.molecule_id = m.molecule_id; 
SELECT      COUNT(CASE WHEN bond.bond_type = ' = ' THEN 1 END) / COUNT(bond.bond_id) * 100 AS percent FROM      bond WHERE      bond.molecule_id = 'TR047'; 
SELECT m.label AS molecule_label FROM `molecule` m JOIN `atom` a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1' AND m.label = '+'; 
SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id IN (     SELECT molecule_id     FROM atom     WHERE atom_id IN (         SELECT atom_id         FROM connected         WHERE bond_id IN (             SELECT bond_id             FROM bond             WHERE bond_type = 'carcinogenic'         )     ) ) AND molecule_id = 'TR151'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR151' AND a.element IN ('cl', 'br', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE m.label = '+'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050'   AND a.element = 'c'; 
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT DISTINCT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = ' = '; 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'h'; 
SELECT DISTINCT c.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR00_1_2' AND a1.element = 'TR00_1'; 
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label <> '-'; 
SELECT      (SUM(CASE WHEN `label` = '+' AND `element` = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(`molecule_id`) AS percentage_carcinogenic_with_hydrogen FROM      `molecule`     JOIN `atom` ON `molecule.molecule_id` = `atom.molecule_id` WHERE      `atom.element` = 'h'; 
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS IsCarcinogenic FROM molecule WHERE label = '+' AND molecule_id = 'TR124'; 
SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR186'; 
SELECT bond_type  FROM bond  WHERE bond_id = (SELECT bond_id FROM connected WHERE atom_id = 'TR007_4_19' OR atom_id2 = 'TR007_4_19'); 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_4'; 
SELECT COUNT(c.bond_id) AS double_bond_count, m.label AS carcinogenic_label FROM `connected` c JOIN `bond` b ON c.bond_id = b.bond_id JOIN `molecule` m ON b.molecule_id = m.molecule_id WHERE c.atom_id = 'TR006' AND b.bond_type = ' = ' AND m.label = '+' 
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT b.bond_id, a1.atom_id AS atom_id_1, a2.atom_id AS atom_id_2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-'; 
SELECT m.molecule_id, GROUP_CONCAT(DISTINCT a.element ORDER BY a.element) AS elements FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '#' JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id GROUP BY m.molecule_id; 
SELECT a1.element AS Element_A, a2.element AS Element_B FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR000_2_3'; 
SELECT COUNT(bond.bond_id)  FROM bond  JOIN atom ON bond.molecule_id = atom.molecule_id  WHERE atom.element = 'cl'; 
SELECT      a.atom_id,     COUNT(DISTINCT b.bond_type) AS bond_types_count FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.label = 'TR346' GROUP BY      a.atom_id; 
SELECT COUNT(DISTINCT m.molecule_id) AS double_bonded_molecules,        SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = '; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 's' LEFT JOIN bond b ON a.atom_id = b.atom_id AND b.bond_type = ' = ' WHERE a.atom_id IS NULL AND b.bond_id IS NULL; 
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4' AND m.label = '+'; 
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR005'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '-'; 
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+'; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label <> '-'; 
SELECT      ROUND((SUM(CASE WHEN t.label = '+' AND t.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(t.molecule_id), 2) AS percentage FROM     (SELECT a.molecule_id, m.label, a.element      FROM atom a      JOIN molecule m ON a.molecule_id = m.molecule_id      WHERE a.element = 'cl') t; 
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'; 
SELECT COUNT(DISTINCT a.element)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_id = 'TR001_3_4'  AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2'; 
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id IN ('TR000_2', 'TR000_4'); 
SELECT a.element  FROM atom a  WHERE a.atom_id = 'TR000_1'; 
SELECT m.label FROM molecule m WHERE m.molecule_id = 'TR000'; 
SELECT      ROUND(DIVIDE(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END), COUNT(a.atom_id)), 2) AS percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id; 
SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_nitrogen_molecule_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'n' AND m.label = '+'; 
SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 's' AND b.bond_type = ' = '; 
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '=' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR024'); 
SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY atom_count DESC LIMIT 1; 
SELECT      (SUM(CASE WHEN a.element = 'h' AND b.bond_type = '#' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100 AS percentage_carcinogenic_with_triple_bonded_h FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+'; 
SELECT COUNT(*)  FROM molecule  WHERE label = '+'; 
SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' AND EXISTS (     SELECT 1     FROM `bond`     WHERE `molecule_id` = `molecule`.`molecule_id`     AND `bond_type` = '-' ); 
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = 'TR008' AND a.element = 'c'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-' AND a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca'); 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN atom a ON c.atom_id = a.atom_id  WHERE a.element = 'o' AND b.bond_type = ' = '; 
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-'; 
SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR016'; 
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR012' AND a.element = 'c' AND b.bond_type = ' = '; 
SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'o' 
SELECT c.* FROM cards c WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL; 
SELECT c.name FROM cards c WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NULL AND c.hasFoil = 0 AND c.hasNonFoil = 1; 
SELECT c.name FROM cards c WHERE c.convertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards); 
SELECT name FROM cards WHERE edhrecRank < 100 AND frameVersion = '2015'; 
SELECT c.name, c.rarity FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator'; 
SELECT DISTINCT c.name, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage'; 
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal' AND l.format = 'commander'; 
SELECT      c.name,      r.text AS ruling_text,      c.hasContentWarning AS hasContentWarning,     c.hasFoil,      c.hasNonFoil,      c.isAlternative,      c.isFullArt,      c.isOnlineOnly,      c.isOversized,      c.isPromo,      c.isReprint,      c.isReserved,      c.isStarter,      c.isStorySpotlight,      c.isTextless,      c.isTimeshifted FROM      cards c JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Stephen Daniel' AND      r.text IS NOT NULL 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s'; 
SELECT cards.name, cards.artist, cards.isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY COUNT(rulings.uuid) DESC LIMIT 1; 
SELECT f.language, f.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Annul' AND c.number = '29'; 
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese'; 
SELECT      (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(id) AS percentage_of_cards_in_chinese_simplified FROM      cards; 
SELECT      s.name,     s.totalSetSize FROM      sets s JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Italian'; 
SELECT COUNT(DISTINCT `type`)  FROM `cards`  WHERE `artist` = 'Aaron Boyd'; 
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards WHERE power = '*'; 
SELECT `promoTypes` FROM `cards` WHERE `name` = 'Duress'; 
SELECT `borderColor` FROM `cards` WHERE `name` = 'Ancestor''s Chosen'; 
SELECT originalType  FROM cards  WHERE name = 'Ancestor''s Chosen'  AND setCode IN (     SELECT code      FROM sets      WHERE name = (SELECT name FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen')) ); 
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE c.name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0; 
SELECT r.text AS rulingDescription FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn'; 
SELECT COUNT(c.id)  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.status = 'restricted' AND c.isStarter = 1; 
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Cloudchaser Eagle'; 
SELECT type FROM cards WHERE name = 'Benalish Knight'; 
SELECT r.text AS ruling_text FROM cards AS c JOIN rulings AS r ON c.uuid = r.uuid WHERE c.name = 'Benalish Knight' AND r.format = 'Commander'; 
SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian' 
SELECT      (SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless') * 100.0 /      (SELECT COUNT(*) FROM cards) AS borderless_percentage 
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1; 
SELECT COUNT(c.id)  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.borderColor = 'borderless'  AND fd.language = 'Russian'; 
SELECT      (SELECT COUNT(*)       FROM cards       WHERE language = 'French' AND isStorySpotlight = 1) * 100.0 /      (SELECT COUNT(*)       FROM cards       WHERE isStorySpotlight = 1) AS percentage_French_StorySpotlight_cards 
SELECT COUNT(*)  FROM cards  WHERE toughness = '99'; 
SELECT name  FROM cards  WHERE artist = 'Aaron Boyd'; 
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'black' AND `availability` = 'mtgo'; 
SELECT id  FROM cards  WHERE convertedManaCost = 0; 
SELECT layout FROM cards WHERE `keywords` LIKE '%flying%'; 
SELECT COUNT(*) FROM cards WHERE type LIKE '%Summon%' AND type LIKE '%Angel%' AND subtypes NOT LIKE '%Angel%'; 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.hasFoil = 1 AND c.hasNonFoil = 1 AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL AND l.format = 'Commander' AND l.status = 'Legal'; 
SELECT id FROM cards WHERE duelDeck = 'a'; 
SELECT `edhrecRank` FROM `cards` WHERE `frameVersion` = '2015'; 
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Chinese Simplified'; 
SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.availability = 'paper' AND l.format = 'Japanese' AND NOT EXISTS (     SELECT 1     FROM legalities l2     WHERE c.uuid = l2.uuid     AND l2.format != 'Japanese' ) AND NOT EXISTS (     SELECT 1     FROM legalities l3     WHERE c.uuid = l3.uuid     AND l3.format != 'paper' ); 
SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white'; 
SELECT c.uuid, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy'; 
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality'; 
SELECT      COUNT(c.id) AS total_cards_with_future_frame,     GROUP_CONCAT(DISTINCT l.status SEPARATOR ', ') AS legality_statuses FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.frameVersion = 'future'     AND l.status = 'legal'; 
SELECT c.name, c.colors FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW'; 
SELECT c.name, st.language FROM cards c JOIN set_translations st ON c.scryfallId = st.translation WHERE c.convertedManaCost = 5 AND c.setCode = '10E'; 
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'; 
SELECT c.colors, s.format FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.id BETWEEN 1 AND 20; 
SELECT c.name, c.colors, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND fd.language <> 'en'; 
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3; 
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND power IS NULL; 
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'white' AND `cardKingdomFoilId` = `cardKingdomId` AND `cardKingdomId` IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1'; 
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1; 
SELECT `manaCost` FROM `cards` WHERE `layout` = 'normal' AND `frameVersion` = '2003' AND `borderColor` = 'black' AND (`availability` = 'paper' OR `availability` LIKE '%mtgo%'); 
SELECT SUM(CAST(cards.manaCost AS REAL)) AS totalUnconvertedManaCost FROM cards WHERE cards.artist = 'Rob Alexander'; 
SELECT DISTINCT type FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT supertypes FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT subtypes FROM cards WHERE availability = 'arena'; 
SELECT s.setCode FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON c.setCode = s.setCode WHERE st.language = 'Spanish'; 
SELECT      ROUND((COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) / COUNT(cards.id)) * 100, 2) AS legendaryHandPlusThreePercentage FROM      cards WHERE      cards.frameEffects = 'legendary'; 
SELECT      c.id,      (SUM(CASE WHEN c.isStorySpotlight = 1 AND c.isTextless = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(c.id)) AS percentage FROM      cards c GROUP BY      c.id ORDER BY      percentage DESC; 
SELECT      c.name,      ROUND((SUM(CASE WHEN fd.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.id), 2) AS percentage_spanish FROM      cards c LEFT JOIN      foreign_data fd ON c.uuid = fd.uuid GROUP BY      c.name ORDER BY      percentage_spanish DESC; 
SELECT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309; 
SELECT COUNT(DISTINCT s.setCode)  FROM sets s  JOIN set_translations st ON s.setCode = st.setCode  WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)'; 
SELECT id FROM cards WHERE type LIKE '%Creature%' AND uuid IN (     SELECT uuid     FROM legalities     WHERE status = 'legal' ); 
SELECT DISTINCT cards.name FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode AND set_translations.language = 'German' WHERE cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND (text LIKE '%[Triggered Ability]%') AND id IN (SELECT id FROM cards WHERE power IS NULL OR power = '*'); 
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'Premodern' AND l.status = 'Legal' AND c.side IS NULL AND c.text LIKE '%triggered mana ability%'; 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability = 'paper'; 
SELECT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.text = 'Das perfekte Gegenmittel zu einer dichten Formation'; 
SELECT f.name AS foreign_name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.artist = 'Matthew D. Wilson' AND c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black' AND f.language = 'French'; 
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10'; 
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica'; 
SELECT      ROUND((COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0) / COUNT(c.id), 2) AS percentageWithoutContentWarning FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.type LIKE '%Commander%'     AND l.status = 'legal'; 
SELECT      (COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END AND f.language = 'French') * 100.0) /      COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END) AS percentage_of_french_cards_without_power FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.power IS NULL OR c.power = '*'; 
SELECT      ROUND((COUNT(CASE WHEN s.type = 'expansion' THEN 1 END) * 100.0) / COUNT(s.code), 2) AS percentage_of_japanese_expansion_sets FROM      sets s JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Japanese'; 
SELECT `cards`.`availability` FROM `cards` WHERE `cards`.`artist` = 'Daren Bader'; 
SELECT COUNT(*) FROM cards WHERE colorIdentity IS NOT NULL AND borderColor = 'borderless' AND edhrecRank > 12000; 
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1; 
SELECT name, power FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3; 
SELECT language FROM foreign_data WHERE multiverseid = 149934; 
SELECT id, cardKingdomFoilId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3; 
SELECT      ROUND((COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 END) / COUNT(c.id)) * 100, 2) AS proportion_of_textless_normal_layout_cards FROM      cards c; 
SELECT DISTINCT c.number FROM cards c WHERE c.subtypes LIKE '%Angel%' AND c.subtypes LIKE '%Wizard%' AND c.otherFaceIds IS NULL; 
SELECT s.name, s.code FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3; 
SELECT DISTINCT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC'; 
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5; 
SELECT st.language, s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206; 
SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2; 
SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 1 AND s.isFoilOnly = 1 AND st.language = 'Japanese'; 
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.totalSetSize DESC LIMIT 1; 
SELECT      ROUND((COUNT(CASE WHEN c.isOnlineOnly = 1 THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage FROM      cards c INNER JOIN      sets s ON c.setCode = s.code INNER JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Chinese Simplified'; 
SELECT COUNT(*) FROM sets WHERE code IN (     SELECT setCode     FROM set_translations     WHERE language = 'Japanese' ) AND (     mtgoCode IS NULL OR mtgoCode = '' ); 
SELECT id FROM cards WHERE borderColor = 'black'; 
SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id; 
SELECT c.name FROM cards c WHERE c.borderColor = 'black' AND c.isFullArt = 1; 
SELECT translation FROM set_translations WHERE setCode = '174'; 
SELECT `name` FROM `sets` WHERE `code` = 'ALL'; 
SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'A Pedra Fellwar'; 
SELECT code  FROM sets  WHERE releaseDate = '2007-07-13'; 
SELECT s.baseSetSize, s.code FROM sets s WHERE s.block IN ('Masques', 'Mirage'); 
SELECT code FROM sets WHERE type = 'expansion'; 
SELECT f.name, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'Boros'; 
SELECT      fd.language,      fd.flavorText,      c.type FROM      cards c JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      c.watermark = 'ColorPie'; 
SELECT      (COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 END) * 100.0) / COUNT(*) AS percentage_of_cards_with_mana_cost_10 FROM      cards c INNER JOIN      sets s ON c.setCode = s.code WHERE      s.name = 'Abyssal Horror' 
SELECT DISTINCT s.setCode FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.type LIKE '%Commander%'; 
SELECT      fd.name AS foreignName,      c.type FROM      cards c JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      c.watermark = 'Abzan' 
SELECT f.language, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'Azorius' 
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%' 
SELECT name FROM cards WHERE isTextless = 0; 
SELECT `convertedManaCost`  FROM `cards`  WHERE `name` = 'Ancestor''s Chosen'; 
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'W' AND (`power` = '*' OR `power` IS NULL); 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.isPromo = 1 AND c.side IS NOT NULL; 
SELECT     GROUP_CONCAT(DISTINCT supertypes, ', ') AS supertypes,     GROUP_CONCAT(DISTINCT subtypes, ', ') AS subtypes FROM     cards WHERE     name = 'Molimo, Maro-Sorcerer'; 
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'; 
SELECT COUNT(DISTINCT artist) FROM cards WHERE `borderColor` = 'black' AND availability LIKE '%arena,mtgo%'; 
SELECT      CASE          WHEN c1.convertedManaCost > c2.convertedManaCost THEN 'Serra Angel'          WHEN c2.convertedManaCost > c1.convertedManaCost THEN 'Shrine Keeper'          ELSE 'Equal'      END AS cardWithHigherManaCost,      MAX(c1.convertedManaCost) AS convertedManaCost FROM      cards c1 JOIN      cards c2 ON c1.convertedManaCost < c2.convertedManaCost WHERE      c1.name = 'Serra Angel' AND c2.name = 'Shrine Keeper' GROUP BY      c1.convertedManaCost ORDER BY      convertedManaCost DESC LIMIT 1; 
SELECT cards.artist FROM cards WHERE cards.flavorName = 'Battra, Dark Destroyer'; 
SELECT name, convertedManaCost FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian'; 
SELECT COUNT(st.id)  FROM sets s  JOIN set_translations st ON s.code = st.setCode  JOIN cards c ON s.code = c.setCode  WHERE c.name = 'Angel of Mercy'; 
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT c.name, sd.translation FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Korean'; 
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'; 
SELECT SUM(baseSetSize) AS total_cards_in_base_set FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'; 
SELECT translation FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition' AND language = 'Chinese') AND language = 'Simplified Chinese'; 
SELECT c.name AS card_name, s.name AS set_name, s.mtgoCode FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL; 
SELECT `releaseDate` FROM `sets` WHERE `name` = 'Ancestor''s Chosen'; 
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'; 
SELECT      c.name AS CardName,     s.name AS SetName,     s.isForeignOnly FROM      cards c JOIN      sets s ON c.setCode = s.code WHERE      c.name = 'Adarkar Valkyrie' AND      s.isForeignOnly = 1; 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10; 
SELECT COUNT(*) FROM cards WHERE `name` = 'Coldsnap' AND `borderColor` = 'black'; 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT DISTINCT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND setCode = 'Coldsnap'; 
SELECT `cards.number` FROM `cards` JOIN `sets` ON `cards.setCode` = `sets.code` WHERE `sets.name` = 'Coldsnap' AND `cards.number` = '4'; 
SELECT COUNT(*) FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL); 
SELECT flavorText FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'; 
SELECT DISTINCT fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.flavorText IS NOT NULL; 
SELECT st.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'German'; 
SELECT cards.name, rulings.text AS italianRuling FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode JOIN rulings ON cards.uuid = rulings.uuid WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' AND rulings.language = 'Italian'; 
SELECT t.translation FROM cards c JOIN set_translations t ON c.setCode = t.setCode WHERE t.language = 'Italian' AND c.setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') ORDER BY c.convertedManaCost DESC LIMIT 10; 
SELECT rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'; 
SELECT      (SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) /      COUNT(*) AS percentage_of_cards_with_mana_cost_7 FROM      cards INNER JOIN      sets ON cards.setCode = sets.code WHERE      sets.name = 'Coldsnap'; 
SELECT      (SUM(CASE WHEN cardK.cardKingdomFoilId = cardK.cardKingdomId AND cardK.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) /      (SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap') AS percentageIncredibly Powerful FROM      cards AS cardK WHERE      cardK.name = 'Coldsnap'; 
SELECT code  FROM sets  WHERE releaseDate = '2017-07-14'; 
SELECT `keyruneCode` FROM `sets` WHERE `code` = 'PKHC'; 
SELECT mcmId  FROM sets  WHERE code = 'SS2'; 
SELECT mcmName  FROM sets  WHERE releaseDate = '2017-06-09'; 
SELECT `type` FROM `sets` WHERE `name` LIKE '%From the Vault: Lore%'; 
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'; 
SELECT      c.name,     r.text AS ruling_text,     CASE          WHEN c.hasContentWarning = 1 THEN 'Yes'         ELSE 'No'     END AS has_content_warning,     CASE          WHEN c.artist IS NULL OR c.artist = '' THEN 'Yes'         ELSE 'No'     END AS missing_artist,     CASE          WHEN c.name IS NULL OR c.name = '' THEN 'Yes'         ELSE 'No'     END AS missing_name,     CASE          WHEN c.type IS NULL OR c.type = '' THEN 'Yes'         ELSE 'No'     END AS missing_type,     CASE          WHEN c.scryfallId IS NULL OR c.scryfallId = '' THEN 'Yes'         ELSE 'No'     END AS missing_scryfall_id FROM      cards c LEFT JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Jim Pavelec' ORDER BY      c.name; 
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation'; 
SELECT sets.baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara'; 
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Huitième édition'; 
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = (     SELECT st.name     FROM set_translations st     JOIN cards c ON c.uuid = st.setCode     WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French' ); 
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL; 
SELECT st.translation  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.code IN (     SELECT s.code      FROM cards c      JOIN sets s ON c.setCode = s.code      WHERE c.name = 'Fellwar Stone'      AND EXISTS (         SELECT 1          FROM foreign_data fd          JOIN cards c ON fd.uuid = c.uuid          WHERE c.name = 'Fellwar Stone'          AND fd.language = 'Japanese'     ) ); 
SELECT c.name, MAX(c.convertedManaCost) as highest_mana_cost FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' GROUP BY c.name ORDER BY highest_mana_cost DESC LIMIT 1; 
SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío'; 
SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim'; 
SELECT COUNT(*) FROM cards WHERE `name` = 'World Championship Decks 2004' AND `convertedManaCost` = 3; 
SELECT translation  FROM set_translations  JOIN sets ON sets.code = set_translations.setCode  WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'; 
SELECT      (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN c.language = 'Japanese' THEN 1 ELSE 0 END) FROM      cards c JOIN      sets s ON c.setCode = s.code JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Japanese' 
SELECT      ROUND((SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS online_only_percentage FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Portuguese (Brazil)' 
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Aleksi Briclot' AND c.isTextless = 1; 
SELECT s.id FROM sets s WHERE s.baseSetSize = (SELECT MAX(baseSetSize) FROM sets); 
SELECT      c.artist AS Illustrator,     c.convertedManaCost AS HighestCost FROM      cards c WHERE      c.side IS NULL AND c.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE side IS NULL) ORDER BY      c.convertedManaCost DESC LIMIT 1; 
SELECT MAX(frameEffects) AS most_common_frame_effect FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a'; 
SELECT s.id FROM sets s WHERE s.type = 'commander' AND s.isFoilOnly = 0 AND s.isForeignOnly = 0 AND s.isNonFoilOnly = 0 AND s.isOnlineOnly = 0 AND s.isPartialPreview = 0 ORDER BY s.totalSetSize DESC LIMIT 1; 
SELECT      c.name,      c.manaCost,      c.convertedManaCost  FROM      cards c  WHERE      c.format = 'duel'  ORDER BY      c.convertedManaCost DESC  LIMIT 10; 
SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' ORDER BY c.originalReleaseDate ASC LIMIT 1; 
SELECT COUNT(c.id)  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.artist = 'Volkan Baga' AND fd.language = 'French'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal'; 
SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'banned' GROUP BY legalities.format, cards.name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT t.language FROM sets s JOIN set_translations t ON s.code = t.setCode WHERE s.name = 'Battlebond'; 
SELECT c.artist, f.format FROM cards c JOIN foreign_data f ON c.uuid = f.uuid GROUP BY c.artist, f.format HAVING COUNT(c.uuid) = (     SELECT MIN(card_count)     FROM (         SELECT artist, COUNT(uuid) AS card_count         FROM cards         GROUP BY artist     ) AS artist_card_counts ) 
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND l.format = 'legacy' AND (c.hasContentWarning = 1 OR l.status = 'Wizards of the Coast'); 
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned'; 
SELECT AVG(COUNT(sets.code)) as average_sets_per_year, MAX(COUNT(DISTINCT foreign_data.language)) as common_language FROM sets JOIN foreign_data ON sets.code = set_translations.setCode WHERE sets.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY YEAR(sets.releaseDate) 
SELECT DISTINCT c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.borderColor = 'black' AND c.availability = 'arena' AND l.format = 'arena'; 
SELECT DISTINCT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted'); 
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'; 
SELECT r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC; 
SELECT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal'; 
SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language != 'Japanese' AND st.language = 'Korean'; 
SELECT DISTINCT `cards.frameVersion`  FROM `cards` JOIN `sets` ON `cards.setCode` = `sets.code` WHERE `cards.artist` = 'Allen Williams';  SELECT `cards.name`  FROM `cards` JOIN `legalities` ON `cards.uuid` = `legalities.uuid` WHERE `legalities.status` = 'banned'; 
SELECT      CASE          WHEN u1.Reputation > u2.Reputation THEN u1.DisplayName          ELSE u2.DisplayName      END AS HigherReputationUser FROM      users u1 JOIN      users u2 ON u1.DisplayName = 'Harlan' AND u2.DisplayName = 'Jarrod Dixon' WHERE      u1.Reputation > u2.Reputation; 
SELECT DISTINCT u.DisplayName FROM users u WHERE YEAR(u.CreationDate) = 2014; 
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00' 
SELECT `users.DisplayName` FROM `users` ORDER BY `users.Views` DESC LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 1 AND v.BountyAmount IS NULL GROUP BY u.Id HAVING SUM(v.BountyAmount) > 100 AND SUM(CASE WHEN v.VoteTypeId = -1 THEN 1 ELSE 0 END) > 1; 
SELECT COUNT(DISTINCT u.Id) AS UsersWithMoreThan10Views FROM users u WHERE u.Views > 10 AND YEAR(u.CreationDate) > 2013; 
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'csgillespie'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) 
SELECT SUM(c.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' 
SELECT      p.Id,     p.AnswerCount FROM      posts p WHERE      p.OwnerDisplayName = 'csgillespie' ORDER BY      p.AnswerCount DESC LIMIT 1; 
SELECT `LastEditorDisplayName` FROM `posts` WHERE `Title` = 'Examples for teaching: Correlation does not mean causation' AND `LastEditorUserId` IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL 
SELECT DISTINCT p.OwnerDisplayName FROM posts p WHERE p.ClosedDate IS NOT NULL; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (     SELECT Id     FROM users     WHERE Age > 65 ) AND Score >= 20; 
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts' 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian'; 
SELECT      p.Body,      t.TagName  FROM      posts p  JOIN      tags t ON p.Id = t.ExcerptPostId  WHERE      t.Count = (SELECT MAX(Count) FROM tags) ORDER BY      t.Count DESC  LIMIT 1; 
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND YEAR(Date) = 2011; 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1; 
SELECT AVG(posts.Score) AS average_score FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'; 
SELECT AVG(b.Count) AS AverageBadges FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200; 
SELECT      (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0) / COUNT(p.Id) AS ElderUserPercentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 20; 
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND CreationDate = '2010-07-19'; 
SELECT MAX(CreationDate) as MaxVotesCreationDate FROM votes WHERE CreationDate IN (     SELECT CreationDate     FROM votes     GROUP BY CreationDate     ORDER BY COUNT(Id) DESC     LIMIT 1 ); 
SELECT COUNT(`Id`) AS NumberOfRevivalBadges FROM `badges` WHERE `Name` = 'Revival'; 
SELECT p.Title FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = (SELECT MAX(Score) FROM comments); 
SELECT COUNT(c.Id) AS CommentCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount = 1910; 
SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0'; 
SELECT Text  FROM comments  WHERE PostId = 107829  AND CommentCount = 1; 
SELECT      p.Id AS PostId,      p.Title,      p.ClosedDate,      CASE          WHEN p.ClosedDate IS NULL THEN 'Not Well-Finished'          ELSE 'Well-Finished'      END AS PostStatus FROM      posts p JOIN      comments c ON p.Id = c.PostId WHERE      c.UserId = 23853 AND      c.CreationDate = '2013-07-12 09:08:18.0'; 
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041; 
SELECT COUNT(p.Id)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Tiago Pasqualini'; 
SELECT UserDisplayName  FROM votes  WHERE Id = 6347; 
SELECT SUM(CASE WHEN v.VoteTypeId IN (2, 3) THEN 1 ELSE -1 END) AS NetVotes FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data visualization%'; 
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'; 
SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) /      (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS PostToVoteRatio FROM      users WHERE      Id = 24; 
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; 
SELECT Text FROM comments WHERE Score = 17; 
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'; 
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'SilentGhost'; 
SELECT c.UserDisplayName  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE c.Text = 'thank you user93!' 
SELECT c.Text AS Comment FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion'; 
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'; 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Necromancer' GROUP BY u.DisplayName LIMIT 10; 
SELECT p.LastEditorDisplayName AS EditorDisplayName FROM posts p WHERE p.Title = 'Open source tools for visualizing multi-dimensional data' AND p.LastEditorUserId IS NOT NULL; 
SELECT p.Title FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa'; 
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY p.Id, u.WebsiteUrl; 
SELECT c.Text, c.CreationDate, u.DisplayName AS CommentatorName, u.ProfileImageUrl FROM comments c JOIN users u ON c.UserId = u.Id JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'; 
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' 
SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id JOIN posts p ON v.PostId = p.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%' 
SELECT      p.Title,      c.Text AS Comment,      c.Score,      AVG(p.ViewCount) AS AverageViewCount FROM      posts p JOIN      tags t ON p.Id = t.ExcerptPostId JOIN      comments c ON p.Id = c.PostId WHERE      t.TagName = 'humor' GROUP BY      p.Id, c.Id 
SELECT COUNT(`Id`) AS TotalComments FROM `comments` WHERE `UserId` = 13; 
SELECT `Id`  FROM `users`  ORDER BY `Reputation` DESC  LIMIT 1; 
SELECT `UserId` FROM `users` ORDER BY `Views` ASC LIMIT 1; 
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Supporter' AND YEAR(`Date`) = 2011; 
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name IN (     SELECT Name      FROM badges      GROUP BY Name      HAVING COUNT(Name) > 5 ); 
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name IN ('Teacher', 'Supporter')  AND u.Location = 'New York'; 
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1; 
SELECT p.OwnerUserId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId GROUP BY p.OwnerUserId, ph.PostId HAVING COUNT(ph.Id) = 1 AND p.ViewCount >= 1000; 
SELECT      u.Id AS UserId,      u.DisplayName,      COUNT(c.Id) AS CommentCount,      b.Name AS BadgeName FROM      comments c JOIN      users u ON c.UserId = u.Id LEFT JOIN      badges b ON u.Id = b.UserId AND b.Name = 'Commentator' GROUP BY      u.Id, b.Name ORDER BY      CommentCount DESC; 
SELECT COUNT(DISTINCT u.Id) AS UsersWithTeacherBadgeFromIndia FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher' AND u.Location = 'India'; 
SELECT     (SUM(CASE WHEN YEAR(b.Date) = 2010 THEN 1 ELSE 0 END) / COUNT(b.Id) -       SUM(CASE WHEN YEAR(b.Date) = 2011 THEN 1 ELSE 0 END) / COUNT(b.Id)) * 100 AS PercentageDifference FROM badges b WHERE b.Name = 'Student' 
SELECT PostHistoryTypeId, COUNT(DISTINCT UserId) AS UniqueCommentators FROM postHistory WHERE PostId = 3720 GROUP BY PostHistoryTypeId; 
SELECT      p.Id,     p.Title,     p.ViewCount AS Popularity FROM      posts p WHERE      p.Id = 61217 OR     p.Id IN (         SELECT              pl.RelatedPostId         FROM              postLinks pl         WHERE              pl.PostId = 61217     ); 
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395; 
SELECT posts.Id, posts.OwnerUserId FROM posts WHERE posts.Score > 60; 
SELECT SUM(p.FavoriteCount)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.OwnerUserId = 686 AND YEAR(p.CreaionDate) = 2011; 
SELECT AVG(u.UpVotes) + AVG(u.Age) AS AverageUpVotesAndAge FROM users u JOIN (     SELECT OwnerUserId     FROM posts     GROUP BY OwnerUserId     HAVING COUNT(*) > 10 ) AS p ON u.Id = p.OwnerUserId; 
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Announcer'; 
SELECT `Name` FROM `badges` WHERE `Date` = '2010-07-19 19:39:08'; 
SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60; 
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'; 
SELECT COUNT(*)  FROM posts  WHERE Score = 10; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'; 
SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'; 
SELECT      ROUND((COUNT(CASE WHEN b.Name = 'Teacher' THEN b.UserId ELSE NULL END) * 100.0) / COUNT(DISTINCT b.UserId), 2) AS TeacherBadgePercentage FROM badges b; 
SELECT      (SELECT COUNT(DISTINCT `UserId`)       FROM `badges`       WHERE `Name` = 'Organizer' AND `UserId` IN (          SELECT `UserId`           FROM `users`           WHERE `Age` BETWEEN 13 AND 18      )     ) * 100.0 /      (SELECT COUNT(DISTINCT `UserId`)       FROM `badges`       WHERE `Name` = 'Organizer'     ) AS PercentageOfOrganizerTeenagers 
SELECT SUM(c.Score) AS TotalCommentScore FROM comments c WHERE c.CreationDate = '2010-07-19 19:19:56.0' 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'; 
SELECT u.Age FROM users u WHERE u.Location = 'Vienna, Austria' AND EXISTS (     SELECT 1     FROM badges b     WHERE b.UserId = u.Id ); 
SELECT COUNT(DISTINCT u.Id) AS AdultSupporterCount FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65; 
SELECT u.Id, u.Views FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'; 
SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie'; 
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65; 
SELECT DisplayName  FROM users  WHERE Id = 30; 
SELECT COUNT(*)  FROM users  WHERE Location = 'New York'; 
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT `users.DisplayName`, MAX(`users.Views`) AS MaxViews FROM `users` GROUP BY `users.Id` ORDER BY MaxViews DESC LIMIT 1; 
SELECT      DIVIDE(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 END), COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 END)) AS VoteRatio FROM votes 
SELECT tags.TagName FROM tags JOIN posts ON tags.ExcerptPostId = posts.Id JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'John Stauffer'; 
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo') 
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan'); 
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1; 
SELECT      (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky')) AS HarveyMotulskyViewCount,     (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Noah Snyder')) AS NoahSnyderViewCount WHERE      (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky')) >      (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Noah Snyder'))  OR      (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky')) =      (SELECT SUM(ViewCount)       FROM posts       WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Noah Snyder')) 
SELECT COUNT(p.Id) AS PostsWithMoreThanFourVotes FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Score > 4; 
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan'; 
SELECT DISTINCT t.TagName FROM posts p JOIN tags t ON p.Tags LIKE CONCAT('% ', t.TagName, ' %') JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.Id NOT IN (SELECT PostId FROM comments) 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer'; 
SELECT      (COUNT(CASE WHEN p.PostTypeId = 2 THEN p.Id END AND t.TagName = 'r')       / COUNT(CASE WHEN p.PostTypeId = 2 THEN p.Id END)) * 100 AS PercentageOfRPostsByCommunity FROM      posts p LEFT JOIN      tags t ON p.Id = t.ExcerptPostId WHERE      p.PostTypeId = 2 AND p.OwnerUserId IS NULL 
SELECT      (SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) -      SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.DisplayName IN ('Mornington', 'Amos') 
SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Commentator' AND YEAR(b.Date) = 2014; 
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59'; 
SELECT u.DisplayName, u.Age FROM users u JOIN (     SELECT OwnerUserId, MAX(Views) AS MaxViews     FROM posts     GROUP BY OwnerUserId ) AS p ON u.Id = p.OwnerUserId ORDER BY p.MaxViews DESC LIMIT 1; 
SELECT p.LastEditDate, p.LastEditorUserId FROM posts p WHERE p.Title = 'Detecting a given face in a database of facial images'; 
SELECT COUNT(*)  FROM comments  WHERE UserId = 13 AND Score < 60; 
SELECT p.Title, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score > 60; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND YEAR(b.Date) = 2011; 
SELECT      p.OwnerDisplayName,      u.WebsiteUrl FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.FavoriteCount > 150; 
SELECT      COUNT(*) AS PostHistoryCount,      MAX(`CreationDate`) AS LastEditDate FROM      postHistory INNER JOIN      posts ON postHistory.PostId = posts.Id WHERE      posts.Title = 'What is the best introductory Bayesian statistics textbook?'; 
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers'; 
SELECT      p.Title AS RelatedPostTitle FROM      posts p INNER JOIN      postLinks pl ON p.Id = pl.PostId WHERE      pl.RelatedPostId = (         SELECT              pl2.PostId         FROM              postLinks pl2         INNER JOIN              posts p2 ON pl2.PostId = p2.Id         WHERE              p2.Title = 'How to tell if something happened in a data set which monitors a value over time'     ); 
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts); 
SELECT u.DisplayName, u.Location FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN users u ON p.OwnerUserId = u.Id WHERE t.TagName = 'hypothesis-testing'; 
SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?'; 
SELECT p.OwnerDisplayName FROM posts p WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1; 
SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8) 
SELECT p.Title, p.ViewCount FROM posts p ORDER BY p.ViewCount DESC LIMIT 5; 
SELECT COUNT(*)  FROM tags  WHERE Count BETWEEN 5000 AND 7000; 
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts); 
SELECT Id, DisplayName, Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50; 
SELECT Id  FROM users  ORDER BY Age ASC  LIMIT 1; 
SELECT p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.Score DESC LIMIT 1; 
SELECT      COUNT(postLinks.Id) / 12 AS avg_monthly_links FROM      postLinks WHERE      YEAR(postLinks.CreationDate) = 2010     AND EXISTS (         SELECT 1         FROM posts         WHERE              postLinks.PostId = posts.Id             AND posts.AnswerCount <= 2     ) GROUP BY      YEAR(postLinks.CreationDate), MONTH(postLinks.CreationDate); 
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT p.Title FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE pl.CreationDate = (     SELECT MIN(pl2.CreationDate)     FROM postLinks pl2 ) 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.DisplayName ORDER BY COUNT(b.Name) DESC LIMIT 1; 
SELECT MIN(CreationDate) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'chl') AND VoteTypeId IN (SELECT Id FROM votes WHERE PostId IS NOT NULL); 
SELECT MIN(u.CreationDate) AS FirstPostDate FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Age = (SELECT MIN(Age) FROM users) ORDER BY p.CreationDate ASC LIMIT 1; 
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'); 
SELECT COUNT(DISTINCT u.Id) AS UsersWith4OrMoreFavorites FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4; 
SELECT AVG(v.PostId) AS avg_posts_voted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users); 
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1; 
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000; 
SELECT `DisplayName` FROM `users` WHERE `Age` BETWEEN 19 AND 65; 
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010; 
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT p.Id, p.Title FROM posts p ORDER BY p.Score DESC LIMIT 1; 
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner'; 
SELECT DISTINCT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011; 
SELECT p.Id, p.OwnerDisplayName FROM posts p WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT      ROUND((COUNT(CASE WHEN p.CreationDate BETWEEN '2011-01-01' AND '2011-12-31' THEN p.Id ELSE NULL END) * 100.0) / COUNT(p.Id), 2) AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation > 1000; 
SELECT      ROUND(DIVIDE(COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id ELSE NULL END), COUNT(u.Id)), 2) AS PercentageOfTeenageUsers FROM      users u; 
SELECT      p.ViewCount,      u.DisplayName AS NameWhoLastPosted FROM      posts p JOIN      users u ON p.LastEditorUserId = u.Id WHERE      p.Title = 'Computer Game Datasets'; 
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts); 
SELECT COUNT(c.Id) AS CommentCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts) 
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0; 
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 AND p.LastEditDate = (     SELECT MAX(ph.LastEditDate)     FROM postHistory ph     WHERE ph.PostId = p.Id ) 
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) AS AdultUsersWithOver5000Upvotes FROM users u WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000; 
SELECT     u.CreationDate,     b.Date,     TIMESTAMPDIFF(SECOND, u.CreationDate, b.Date) AS TimeToGetBadge FROM     badges b JOIN     users u ON b.UserId = u.Id WHERE     u.DisplayName = 'Zolomon' 
SELECT      u.Id AS UserId,     (SELECT COUNT(*) FROM posts WHERE posts.OwnerUserId = u.Id) AS PostCount,     (SELECT COUNT(*) FROM comments WHERE comments.UserId = u.Id) AS CommentCount FROM      users u WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users); 
SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = (     SELECT p.Id     FROM posts p     WHERE p.Title = 'Analysing wind data with R' ) ORDER BY c.CreationDate DESC LIMIT 1; 
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Citizen Patrol'; 
SELECT COUNT(p.Id) AS CareerPostsCount FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers'; 
SELECT u.Reputation, p.ViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Jarrod Dixon'; 
SELECT     SUM(CASE WHEN p.`Title` = 'Clustering 1D data' AND c.PostId IS NOT NULL THEN 1 ELSE 0 END) AS CommentCount,     SUM(CASE WHEN p.`Title` = 'Clustering 1D data' AND c.PostId IS NULL THEN 1 ELSE 0 END) AS AnswerCount FROM     posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE     p.`Title` = 'Clustering 1D data' 
SELECT `CreationDate` FROM `users` WHERE `DisplayName` = 'IrishStat'; 
SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE PostTypeId = 1) AND BountyAmount >= 30; 
SELECT      (SELECT COUNT(*)      FROM posts AS p      WHERE p.OwnerUserId = u.Id AND p.Score >= 50) * 100.0 /       (SELECT COUNT(*)       FROM posts AS p       WHERE p.OwnerUserId = u.Id) AS percentage FROM      users AS u ORDER BY      u.Reputation DESC LIMIT 1; 
SELECT COUNT(*)  FROM posts  WHERE Score < 20; 
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20; 
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'; 
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)'; 
SELECT ph.Text AS CommentText FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?' AND ph.Text IS NOT NULL; 
SELECT c.Id, c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1; 
SELECT      c.CreationDate,      u.Age FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Text LIKE '%http://%' 
SELECT COUNT(DISTINCT c.PostId) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5; 
SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0; 
SELECT COUNT(DISTINCT u.Id)  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE c.Score = 0 AND u.Age = 40; 
SELECT p.Id AS PostId, c.Text AS CommentText FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item'; 
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.'; 
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky'; 
SELECT DISTINCT c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0; 
SELECT      (COUNT(CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0) /      COUNT(c.UserId) AS percentage FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Score BETWEEN 5 AND 10; 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man'; 
SELECT COUNT(DISTINCT superhero.id) AS superheroes_with_super_strength FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'; 
SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200; 
SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING COUNT(hero_power.power_id) > 15; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE c.colour = 'Blue'; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse'; 
SELECT COUNT(DISTINCT s.id)  FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility'; 
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id AND eye_colour.colour = 'Blue' JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id AND hair_colour.colour = 'Blond'; 
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'; 
SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron'; 
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'; 
SELECT AVG(`height_cm`) AS average_height FROM `superhero` WHERE `publisher_id` = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'Marvel Comics'); 
SELECT      ROUND((SUM(CASE WHEN sp.power_name = 'Super Strength' THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id), 2) AS percentage_of_super_strength FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'; 
SELECT p.publisher_name, s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = (     SELECT MIN(attribute_value)     FROM hero_attribute ha2     JOIN attribute a2 ON ha2.attribute_id = a2.id     WHERE a2.attribute_name = 'Speed' AND ha2.hero_id = s.id ) ORDER BY s.id; 
SELECT COUNT(DISTINCT superhero.id)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics'; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Blue Beetle II'; 
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.hair_colour_id = colour.id  WHERE colour.colour = 'Blond'; 
SELECT      s.superhero_name,      s.full_name  FROM      superhero s  JOIN      hero_attribute ha ON s.id = ha.hero_id  JOIN      attribute a ON ha.attribute_id = a.id  WHERE      a.attribute_name = 'Intelligence'      AND ha.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Intelligence') 
SELECT `race` FROM `superhero` WHERE `superhero_name` = 'Copycat'; 
SELECT COUNT(DISTINCT h.id)  FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50; 
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'; 
SELECT COUNT(*)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100; 
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(power_id) DESC LIMIT 1; 
SELECT COUNT(*) FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Vampire'); 
SELECT      ROUND(         (SUM(CASE WHEN s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id),         2     ) AS bad_alignment_percentage,     COUNT(CASE WHEN s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' AND s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')) THEN s.id ELSE NULL END) AS marvel_bad_alignment_hero_count FROM superhero s; 
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))      -      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS diff_superheroes; 
SELECT id  FROM publisher  WHERE publisher_name = 'Star Trek'; 
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha; 
SELECT COUNT(*)  FROM superhero  WHERE full_name IS NULL; 
SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = 75; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Deathlok'; 
SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE gender_id = 2; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 5; 
SELECT superhero_name  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE race = 'Alien'); 
SELECT superhero_name  FROM superhero  WHERE height_cm BETWEEN 170 AND 190  AND eye_colour_id IS NULL; 
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.id = 56; 
SELECT `superhero`.`full_name` FROM `superhero` WHERE `race_id` = (SELECT `id` FROM `race` WHERE `race` = 'Demi-God') LIMIT 5; 
SELECT COUNT(*)  FROM superhero  WHERE alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad'); 
SELECT s.race FROM superhero s WHERE s.weight_kg = 169; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.hair_colour_id = c.id  WHERE s.race_id = (SELECT id FROM race WHERE race = 'human')  AND s.height_cm = 185; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero); 
SELECT      ROUND((SUM(CASE WHEN s.publisher_id = 13 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id), 2) AS percentage_marvel_heroes FROM      superhero s WHERE      s.height_cm BETWEEN 150 AND 180; 
SELECT s.full_name FROM superhero s WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) 
SELECT sp.power_name, COUNT(hp.power_id) as power_count FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1; 
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination'; 
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.id = 1; 
SELECT COUNT(h.id)  FROM superhero h  JOIN hero_power hp ON h.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'stealth'; 
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' AND ha.attribute_value = (     SELECT MAX(ha2.attribute_value)     FROM hero_attribute ha2     JOIN attribute a2 ON ha2.attribute_id = a2.id     WHERE a2.attribute_name = 'strength' ) 
SELECT AVG(supersuperhero.id)  FROM superhero  JOIN colour ON superhero.skin_colour_id = colour.id  WHERE colour.id = 1; 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics'); 
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY SUM(hero_attribute.attribute_value) DESC LIMIT 1; 
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight'; 
SELECT s.full_name, c_e.colour AS eye_colour, c_h.colour AS hair_colour, c_s.colour AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c_e ON s.eye_colour_id = c_e.id JOIN colour c_h ON s.hair_colour_id = c_h.id JOIN colour c_s ON s.skin_colour_id = c_s.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'; 
SELECT      s.superhero_name,      p.publisher_name FROM      superhero s JOIN      colour c_eyes ON s.eye_colour_id = c_eyes.id JOIN      colour c_hair ON s.hair_colour_id = c_hair.id JOIN      colour c_skin ON s.skin_colour_id = c_skin.id JOIN      publisher p ON s.publisher_id = p.id WHERE      c_eyes.colour = c_hair.colour AND c_hair.colour = c_skin.colour; 
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.superhero_name = 'A-Bomb'; 
SELECT      ROUND(         (SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0) /          SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END),          2     ) AS blue_female_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      colour c ON s.colour_id = c.id WHERE      g.gender = 'Female'; 
SELECT superhero_name, race FROM superhero JOIN race ON superhero.race_id = race.id WHERE full_name = 'Charles Chandler'; 
SELECT g.gender  FROM superhero s JOIN gender g ON s.gender_id = g.id  WHERE s.superhero_name = 'Agent 13'; 
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'; 
SELECT COUNT(power_id) AS power_count FROM hero_power WHERE hero_id IN (     SELECT id     FROM superhero     WHERE superhero_name = 'Amazo' ); 
SELECT sp.power_name FROM superhero AS sz JOIN hero_power AS hp ON sz.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sz.full_name = 'Hunter Zolomon'; 
SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'; 
SELECT superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black'; 
SELECT superhero_name, `colour.colour` AS eye_colour FROM superhero JOIN `colour` ON superhero.skin_colour_id = `colour`.id WHERE `colour.colour` = 'Gold'; 
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire'; 
SELECT superhero_name  FROM superhero  WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral'); 
SELECT COUNT(*)  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name = 'Strength' AND ha.attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute      JOIN attribute ON hero_attribute.attribute_id = attribute.id      WHERE attribute.attribute_name = 'Strength' ); 
SELECT      r.race,      a.alignment FROM      superhero s JOIN      race r ON s.race_id = r.id JOIN      alignment a ON s.alignment_id = a.id WHERE      s.superhero_name = 'Cameron Hicks'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender = 'Female')                    AND p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) * 100.0) /          (SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)),         2     ) AS percentage_female_heroes_published_by_marvel FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' 
SELECT AVG(`weight_kg`)  FROM `superhero`  WHERE `race_id` IN (SELECT `id` FROM `race` WHERE `race` = 'Alien'); 
SELECT   (SUM(CASE WHEN s.full_name = 'Emil Blonsky' THEN s.weight_kg ELSE 0 END) -    SUM(CASE WHEN s.full_name = 'Charles Chandler' THEN s.weight_kg ELSE 0 END)) AS weight_difference FROM superhero s; 
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination'; 
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1; 
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Speed' ORDER BY attribute_value DESC LIMIT 1; 
SELECT COUNT(*)  FROM superhero  WHERE alignment_id = 3; 
SELECT a.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = '3-D Man'; 
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'brown'; 
SELECT publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'); 
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IS NULL OR publisher_id != 1; 
SELECT      ROUND((SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id), 2) AS blue_eyes_percentage FROM superhero s; 
SELECT     (SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0)) AS male_female_ratio FROM superhero; 
SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero WHERE height_cm IS NOT NULL GROUP BY superhero_name ORDER BY tallest_height DESC LIMIT 1; 
SELECT id FROM superpower WHERE power_name = 'cryokinesis'; 
SELECT superhero_name  FROM superhero  WHERE id = 294; 
SELECT `superhero_name`, `full_name` FROM `superhero` WHERE `weight_kg` IS NULL OR `weight_kg` = 0; 
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan'; 
SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.full_name = 'Helen Parr'; 
SELECT r.race  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE s.weight_kg = 108 AND s.height_cm = 188; 
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.id = 38; 
SELECT s.race_id, r.race FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = (     SELECT MAX(ha2.attribute_value)     FROM hero_attribute ha2     WHERE ha2.hero_id = s.id ) 
SELECT      a.alignment,     GROUP_CONCAT(sp.power_name SEPARATOR ', ') AS superpowers FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id JOIN      superpower sp ON s.id = sp.hero_id WHERE      s.superhero_name = 'Atom IV' GROUP BY      a.alignment; 
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5; 
SELECT AVG(ha.attribute_value) AS avg_attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = 3; 
SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE ha.attribute_value = 100; 
SELECT COUNT(*)  FROM superhero  WHERE gender_id = 2 AND alignment_id = 1; 
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_value BETWEEN 75 AND 80; 
SELECT s.full_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE c.colour = 'blue' AND g.gender = 'male'; 
SELECT      ROUND((SUM(CASE WHEN alignment.id = 2 AND gender.id = 2 THEN 1 ELSE 0 END) * 100.0) /            SUM(CASE WHEN alignment.id = 2 THEN 1 ELSE 0 END), 2) AS percentage_female_bad_heroes FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id; 
SELECT      (SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) -       SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS blue_eyes_no_eye_color_difference FROM      superhero T1 WHERE      T1.weight_kg = 0 OR T1.weight_kg IS NULL; 
SELECT a.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength'; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Ajax'; 
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad'; 
SELECT COUNT(*) FROM superhero WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'); 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC; 
SELECT s.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force'; 
SELECT superhero_name, MAX(weight_kg) AS max_weight FROM superhero WHERE publisher_name = 'DC Comics' GROUP BY superhero_name ORDER BY max_weight DESC LIMIT 1; 
SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.race_id = (SELECT id FROM race WHERE race = 'Non-Human') AND publisher.publisher_name = 'Dark Horse Comics' 
SELECT superhero.id, superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100; 
SELECT      (SELECT COUNT(*)       FROM superhero       WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'))     -     (SELECT COUNT(*)       FROM superhero       WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference; 
SELECT a.attribute_name, MIN(ha.attribute_value) AS min_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' GROUP BY a.attribute_name ORDER BY min_value LIMIT 1; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Abomination'; 
SELECT superhero_name, full_name, MAX(height_cm) AS tallest_height FROM superhero WHERE height_cm IS NOT NULL GROUP BY superhero_name, full_name ORDER BY tallest_height DESC LIMIT 1; 
SELECT superhero_name  FROM superhero  WHERE full_name = 'Charles Chandler'; 
SELECT      ROUND(         (SUM(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender = 'Female')                    AND p.publisher_name = 'George Lucas' THEN 1 ELSE 0 END) * 100.0) /          COUNT(CASE WHEN p.publisher_name = 'George Lucas' THEN 1 END), 2     ) AS female_percentage FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id; 
SELECT      ROUND(         (SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0) / COUNT(*),         2     ) AS percentage_good_heroes FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'; 
SELECT COUNT(*)  FROM superhero  WHERE full_name LIKE 'John%'; 
SELECT hero_id FROM hero_attribute ORDER BY attribute_value LIMIT 1; 
SELECT `full_name` FROM `superhero` WHERE `superhero_name` = 'Alien'; 
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'Brown'; 
SELECT ha.attribute_value FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy'; 
SELECT `superhero`.`weight_kg`, `race`.`race` FROM `superhero` JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`id` = 40; 
SELECT AVG(`height_cm`) AS average_height FROM `superhero` WHERE `alignment_id` = (SELECT `id` FROM `alignment` WHERE `alignment` = 'Neutral'); 
SELECT hero_id  FROM hero_power  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Intelligence'; 
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.superhero_name = 'Blackwulf'; 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero); 
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 18 AND q.q1 = (     SELECT MAX(q1)     FROM qualifying q2     WHERE q2.raceId = 18 AND q2.q1 IS NOT NULL     GROUP BY q2.driverId     ORDER BY MAX(q2.q1) DESC     LIMIT 5 ); 
SELECT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19) 
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Shanghai'; 
SELECT c.url FROM circuits AS c JOIN races AS r ON c.circuitId = r.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya'; 
SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany'; 
SELECT c.name, d.position FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors co ON cs.constructorId = co.constructorId JOIN (     SELECT constructorRef     FROM constructors     WHERE name = 'Renault' ) renault ON co.constructorRef = renault.constructorRef; 
SELECT COUNT(r.raceId) AS NumberOfRaces FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2010 AND NOT (c.country LIKE '%Asia%' OR c.country LIKE '%Europe%'); 
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Australian Grand Prix'; 
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit'; 
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Abu Dhabi Grand Prix'; 
SELECT c.nationality FROM constructors AS con JOIN constructorResults AS cr ON con.constructorId = cr.constructorId JOIN races AS r ON cr.raceId = r.raceId WHERE r.raceId = 24 AND cr.points = 1; 
SELECT q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.surname = 'Senna' AND drivers.forename = 'Bruno' AND qualifying.raceId = 354; 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:40' AND q.qualifyId = 355; 
SELECT d.number  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  JOIN races r ON q.raceId = r.raceId  WHERE r.raceId = 903  AND q.q3 = '0:01:54'; 
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.position IS NULL; 
SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT d.driverId) AS finished_drivers_count FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished'); 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1; 
SELECT d.driverId, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = 8727 AND r.raceId = 161; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN (     SELECT driverId, MAX(fastestLapSpeed) AS max_speed     FROM results     WHERE raceId = 933     GROUP BY driverId ) AS fastest ON r.driverId = fastest.driverId AND r.fastestLapSpeed = fastest.max_speed WHERE r.raceId = 933; 
SELECT c.name, c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix'; 
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE cs.raceId = 9 ORDER BY cs.points DESC LIMIT 1; 
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE surnname = 'di Grassi' AND forename = 'Lucas') AND raceId = (SELECT raceId FROM races WHERE raceId = 345); 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE q.q2 = '0:01:15' AND r.raceId = 347; 
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.raceId = 45 AND q.q3 = '0:01:33'; 
SELECT      r.name AS raceName,     res.time AS finishTime FROM      results AS res JOIN      drivers AS dr ON      res.driverId = dr.driverId JOIN      races AS r ON      res.raceId = r.raceId WHERE      dr.surname = 'McLaren' AND      dr.forename = 'Bruce' AND      res.resultId IN (         SELECT              resultId         FROM              results         JOIN              races         ON              results.raceId = races.raceId         WHERE              races.raceId = 743     ); 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2; 
SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901; 
SELECT COUNT(DISTINCT d.driverId) AS finished_drivers_count FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE r.date = '2015-11-29' AND res.statusId = (SELECT statusId FROM status WHERE status = 'Finished'); 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 872 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY d.dob DESC LIMIT 1; 
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = (SELECT raceId FROM races WHERE raceId = 348 AND MIN(time)) ORDER BY lt.time ASC LIMIT 1; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results     WHERE raceId = r.raceId ); 
SELECT      (SUBTRACT((SELECT fastestLapSpeed                 FROM results                 WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE status = 'Fastest Lap')),                (SELECT fastestLapSpeed                 FROM results                 WHERE raceId = 854 AND statusId = (SELECT statusId FROM status WHERE status = 'Fastest Lap')),                (SELECT fastestLapSpeed                 FROM results                 WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE status = 'Fastest Lap'))) /       (SELECT fastestLapSpeed        FROM results        WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE status = 'Fastest Lap'))) * 100 AS percentage_faster FROM      results  WHERE      raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE surnames = 'di Resta' AND forenames = 'Paul')  AND      statusId = (SELECT statusId FROM status WHERE status = 'Fastest Lap'); 
SELECT      (COUNT(DISTINCT driverId)       FILTER (WHERE time IS NOT NULL AND DATE(races.date) = '1983-07-16')) /      (COUNT(DISTINCT driverId)       FILTER (WHERE DATE(races.date) = '1983-07-16')) AS completionRate FROM      races JOIN      results ON races.raceId = results.raceId WHERE      DATE(races.date) = '1983-07-16'; 
SELECT year  FROM races  WHERE name = 'Singapore Grand Prix'  ORDER BY year ASC  LIMIT 1; 
SELECT COUNT(*) AS total_races, r.name FROM races r JOIN seasons s ON r.year = s.year WHERE s.year = 2005 GROUP BY r.name ORDER BY total_races DESC, r.name DESC; 
SELECT      r.name AS FirstRaceName,     r.name AS RaceName,     r.date AS RaceDate FROM      races r WHERE      r.year = (SELECT MIN(year) FROM races)     AND EXTRACT(MONTH FROM r.date) = (SELECT EXTRACT(MONTH FROM MIN(date)) FROM races) UNION ALL SELECT      r.name AS RaceName,     r.date AS RaceDate FROM      races r WHERE      r.year = (SELECT MIN(year) FROM races)     AND EXTRACT(MONTH FROM r.date) = (SELECT EXTRACT(MONTH FROM MIN(date)) FROM races) ORDER BY      RaceDate; 
SELECT      c.name AS circuit_name,      r.date AS race_date FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      r.year = 1999 ORDER BY      r.round DESC LIMIT 1; 
SELECT seasons.year, COUNT(races.raceId) AS total_races FROM seasons JOIN races ON seasons.year = races.year GROUP BY seasons.year ORDER BY total_races DESC LIMIT 1; 
SELECT r.name FROM races r WHERE r.year = 2017 AND r.circuitId NOT IN (     SELECT r2.circuitId     FROM races r2     WHERE r2.year = 2000 ); 
SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = (SELECT MIN(year) FROM seasons WHERE `name` LIKE 'European Grand Prix%') AND c.country = 'Europe'; 
SELECT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND c.circuitRef = 'British Grand Prix' ORDER BY r.year DESC LIMIT 1; 
SELECT COUNT(DISTINCT s.year)  FROM seasons s JOIN races r ON s.year = r.year JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix'; 
SELECT d.forename, d.surname, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position; 
SELECT d.forename, d.surname, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1; 
SELECT d.surname AS driver_name, SUM(r.points) AS total_points FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix' GROUP BY d.driverId ORDER BY total_points DESC LIMIT 3; 
SELECT d.forename, d.surname, r.name AS race_name, lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (     SELECT MIN(milliseconds) FROM lapTimes ) 
SELECT AVG(`milliseconds`)  FROM `lapTimes`  JOIN `drivers` ON `lapTimes.driverId` = `drivers.driverId`  JOIN `races` ON `lapTimes.raceId` = `races.raceId`  WHERE `drivers.surname` = 'Vettel' AND `races.year` = 2009 AND `races.name` = 'Chinese Grand Prix'; 
SELECT      (SELECT COUNT(DISTINCT r.raceId)       FROM races r       JOIN results rs ON r.raceId = rs.raceId       JOIN drivers d ON rs.driverId = d.driverId       WHERE d.surname = 'Hamilton'         AND r.year >= 2010         AND rs.position > 1) /      (SELECT COUNT(DISTINCT r.raceId)       FROM races r       JOIN results rs ON r.raceId = rs.raceId       JOIN drivers d ON rs.driverId = d.driverId       WHERE d.surname = 'Hamilton'         AND r.year >= 2010) * 100 AS percentage 
SELECT d.surname, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN results r ON ds.driverStandingsId = r.driverStandingsId WHERE r.position = 1 GROUP BY d.driverId ORDER BY SUM(ds.wins) DESC LIMIT 1; 
SELECT      d.driverId,      d.forename,      d.surname,      (2022 - STRFTIME('%Y', d.dob)) + 1 AS age FROM      drivers d WHERE      d.nationality = 'Japanese' ORDER BY      d.dob DESC LIMIT 1; 
SELECT c.circuitRef, c.name, COUNT(r.raceId) AS race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef, c.name HAVING COUNT(r.raceId) = 4; 
SELECT c.name AS CircuitName, c.location AS Location, r.name AS RaceName FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006; 
SELECT r.name AS raceName, c.name AS circuitName, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE MONTH(r.date) = 9 AND YEAR(r.date) = 2005; 
SELECT r.name AS RaceName FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 10; 
SELECT COUNT(DISTINCT r.raceId) FROM races r JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors c ON cs.constructorId = c.constructorId JOIN drivers d ON c.constructorId = d.constructorId WHERE d.surname = 'Schumacher' AND r.circuitRef = 'Sepang International Circuit' AND cs.wins > 0; 
SELECT r.name AS raceName, r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Schumacher' AND res.milliseconds = (     SELECT MIN(milliseconds)     FROM results     WHERE driverId = d.driverId ) 
SELECT AVG(points) AS average_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Irvine' AND YEAR(races.year) = 2000; 
SELECT      r.name AS RaceName,      r.year AS RaceYear,      r.round AS RaceRound,      dr.forename AS DriverForename,      dr.surname AS DriverSurname,      rs.points AS PointsScored FROM      results rs JOIN      races r ON rs.raceId = r.raceId JOIN      drivers dr ON rs.driverId = dr.driverId WHERE      dr.surname = 'Hamilton' AND      dr.forename = 'Lewis' AND      rs.points = (SELECT MIN(points) FROM results WHERE driverId = dr.driverId); 
SELECT r.name, c.country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date; 
SELECT      r.name AS RaceName,     s.year AS RaceYear,     c.location AS CircuitLocation,     MAX(r.laps) AS MostLaps FROM      races AS r JOIN      circuits AS c ON r.circuitId = c.circuitId JOIN      (SELECT           raceId,           SUM(laps) AS laps      FROM           results      GROUP BY           raceId      ORDER BY           laps DESC      LIMIT 1) AS subquery ON      r.raceId = subquery.raceId; 
SELECT      (COUNT(CASE WHEN c.name = 'Germany' THEN 1 END) * 100.0) / COUNT(c.name) AS percentage FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      r.name = 'European Grand Prix' AND      c.country = 'Europe'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Silverstone Circuit'; 
SELECT name, MAX(lat) AS max_latitude FROM circuits WHERE circuitRef IN ('Silverstone', 'Hockenheimring', 'Hungaroring') GROUP BY name ORDER BY max_latitude DESC LIMIT 1; 
SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit'; 
SELECT `country`, MAX(`alt`) AS `highest_altitude` FROM `circuits` WHERE `alt` IS NOT NULL GROUP BY `country` ORDER BY `highest_altitude` DESC LIMIT 1; 
SELECT COUNT(*) FROM drivers WHERE code IS NULL; 
SELECT d.nationality FROM drivers d JOIN (     SELECT MIN(dob) AS min_dob     FROM drivers ) AS oldest_driver ON d.dob = oldest_driver.min_dob; 
SELECT s.surname FROM drivers s WHERE s.nationality = 'italian'; 
SELECT url FROM drivers WHERE `surname` = 'Davidson' AND `forename` = 'Anthony'; 
SELECT driverRef FROM drivers WHERE surnames = 'Hamilton' AND forename = 'Lewis'; 
SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'; 
SELECT DISTINCT r.year FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit'; 
SELECT      r.raceId,      r.name,      r.date,      r.time,      c.circuitRef,      c.url  FROM      races r  JOIN      circuits c ON r.circuitId = c.circuitId  WHERE      c.name = 'Silverstone Circuit'; 
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Abu Dhabi Circuit' AND r.year = 2010; 
SELECT COUNT(DISTINCT r.raceId)  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Italy'; 
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Barcelona-Catalunya'; 
SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = 2009 AND c.name = 'Spanish Grand Prix'; 
SELECT MIN(`fastestLapTime`) AS fastestLapTime FROM `results` WHERE `driverId` = (SELECT `driverId` FROM `drivers` WHERE `surname` = 'Hamilton' AND `forename` = 'Lewis') AND `fastestLap` IS NOT NULL; 
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN results r ON d.driverId = r.driverId AND lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes lt2 WHERE lt2.raceId = lt.raceId) AND r.positionText = '1' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Completed') AND r.raceId IN (SELECT raceId FROM races WHERE name LIKE 'Formula_1%'); 
SELECT d.driverRef FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1; 
SELECT r.name, r.date, r.circuitId FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis'; 
SELECT r.name AS race_name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis' ORDER BY res.rank ASC LIMIT 1; 
SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix' 
SELECT DISTINCT s.year FROM seasons s JOIN races r ON s.year = r.year JOIN results re ON r.raceId = re.raceId JOIN drivers d ON re.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis' ORDER BY s.year; 
SELECT `positionOrder`  FROM `results`  JOIN `drivers` ON `results.driverId` = `drivers.driverId`  WHERE `drivers.surname` = 'Hamilton' AND `results.raceId` IN (     SELECT `raceId`      FROM `races`      WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ); 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.grid = 4; 
SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')  AND statusId IN (SELECT statusId FROM status WHERE status = 'Completed') AND time IS NOT NULL; 
SELECT MIN(`milliseconds`) AS fastestLapTime FROM `lapTimes` JOIN `drivers` ON `lapTimes.driverId` = `drivers.driverId` JOIN `races` ON `lapTimes.raceId` = `races.raceId` WHERE `drivers.surname` = 'Hamilton' AND `races.name` = 'Australian Grand Prix' AND `races.year` = 2008; 
SELECT r.name, res.time FROM races r JOIN results res ON r.raceId = res.raceId JOIN driverStandings ds ON res.driverId = ds.driverId JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND ds.position = 2 ORDER BY res.positionOrder ASC LIMIT 1; 
SELECT      d.forename,      d.surname,      c.url FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      constructors c ON r.constructorId = c.constructorId JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year = 2008 AND      ra.name = 'Australian Grand Prix' AND      r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') AND      r.time LIKE 'HH:%'; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND d.nationality = 'American'; 
SELECT      r.driverId,     COUNT(DISTINCT r.raceId) AS racesParticipated FROM      results r JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year = 2008 AND      ra.name = 'Australian Grand Prix' AND      r.position IS NOT NULL GROUP BY      r.driverId HAVING      COUNT(DISTINCT r.raceId) > 0; 
SELECT SUM(r.points) AS total_points FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.points IS NOT NULL; 
SELECT AVG(TIMESTAMPDIFF(SECOND, '00:00:00', REPLACE(REPLACE(REPLACE(fastestLapTime, 'MM:', ''), 'SS:', ''), '.000', ''))) AS average_fastest_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'; 
SELECT      (SELECT COUNT(*)       FROM results       WHERE raceId IN (          SELECT raceId           FROM races           WHERE year = 2008 AND name = 'Australian Grand Prix'      ) AND time IS NOT NULL) /      (SELECT COUNT(DISTINCT raceId)       FROM results       WHERE raceId IN (          SELECT raceId           FROM races           WHERE year = 2008 AND name = 'Australian Grand Prix'      )     ) AS completionRate; 
SELECT      (TIMESTAMPDIFF(SECOND, '00:00:00', (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND position = 1 AND statusId = (SELECT statusId FROM status WHERE status = 'Finished'))) - TIMESTAMPDIFF(SECOND, '00:00:00', (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')) AND statusId = (SELECT statusId FROM status WHERE status = 'Finished'))))) /      TIMESTAMPDIFF(SECOND, '00:00:00', (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')) AND statusId = (SELECT statusId FROM status WHERE status = 'Finished'))))) * 100 AS percentage_faster FROM      results WHERE      raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 AND position = 1 AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')); 
SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'; 
SELECT `lat`, `lng` FROM `circuits` WHERE `country` = 'USA'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'; 
SELECT AVG(constructorStandings.points) AS avg_points FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructors.nationality = 'British'; 
SELECT constructors.name, SUM(constructorStandings.points) AS total_points FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1; 
SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId WHERE constructorStandings.points = 0 AND races.raceId = 291; 
SELECT      c.constructorId,      c.name,      COUNT(DISTINCT r.raceId) AS races_with_0_points FROM      constructors c JOIN      constructorStandings cs ON c.constructorId = cs.constructorId JOIN      races r ON cs.raceId = r.raceId WHERE      c.nationality = 'Japanese'      AND cs.points = 0 GROUP BY      c.constructorId, c.name HAVING      COUNT(DISTINCT r.raceId) = 2; 
SELECT      c.name AS ConstructorName,     cs.points AS Points,     cs.positionText AS Position FROM      constructorStandings cs JOIN      constructors c ON cs.constructorId = c.constructorId WHERE      cs.position = 1; 
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE c.nationality = 'French' AND lt.lap > 50; 
SELECT      (SUM(CASE WHEN r.driverId IN (         SELECT d.driverId          FROM drivers d          WHERE d.nationality = 'Japanese'     ) AND rs.time IS NOT NULL THEN 1 ELSE 0 END) * 100.0) /      COUNT(DISTINCT CASE WHEN r.driverId IN (         SELECT d.driverId          FROM drivers d          WHERE d.nationality = 'Japanese'     ) THEN r.driverId ELSE NULL END) AS completion_percentage FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId JOIN seasons s ON ra.year = s.year WHERE s.year BETWEEN 2007 AND 2009; 
SELECT      r.year,      AVG(TIME_TO_SEC(time)) AS average_time_seconds FROM      results r JOIN      driverStandings ds ON r.driverId = ds.driverId AND r.raceId = ds.raceId JOIN      drivers d ON r.driverId = d.driverId WHERE      ds.position = 1     AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') GROUP BY      r.year; 
SELECT d.forename, d.surname FROM drivers d WHERE d.dob > '1975-01-01' AND EXISTS (     SELECT 1     FROM driverStandings ds     JOIN results r ON ds.driverId = d.driverId AND ds.raceId = r.raceId     WHERE d.driverId = ds.driverId     AND ds.position = 2 ); 
SELECT      d.driverId,      d.forename,      d.surname,      COUNT(*) AS races_not_finished FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      d.nationality = 'Italian'      AND r.time IS NULL GROUP BY      d.driverId; 
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) 
SELECT lt.lap FROM lapTimes lt JOIN results r ON lt.driverId = r.driverId AND lt.raceId = r.raceId JOIN driverStandings ds ON r.driverId = ds.driverId AND r.raceId = ds.raceId JOIN races ra ON r.raceId = ra.raceId JOIN seasons se ON ra.year = se.year WHERE se.year = 2009 AND ds.position = 1 AND lt.milliseconds = (     SELECT MIN(lt2.milliseconds)     FROM lapTimes lt2     JOIN results r2 ON lt2.driverId = r2.driverId AND lt2.raceId = r2.raceId     JOIN driverStandings ds2 ON r2.driverId = ds2.driverId AND r2.raceId = ds2.raceId     JOIN races ra2 ON r2.raceId = ra2.raceId     JOIN seasons se2 ON ra2.year = se2.year     WHERE se2.year = 2009     AND ds2.position = 1 ) 
SELECT AVG(`fastestLapSpeed`) AS avgFastestLapSpeed FROM `races` JOIN `results` ON `races.raceId` = `results.raceId` WHERE `races.name` = 'Spanish Grand Prix' AND `results.year` = 2009; 
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL AND res.milliseconds = (     SELECT MIN(milliseconds)     FROM results     WHERE milliseconds IS NOT NULL ) ORDER BY r.year, r.name; 
SELECT      (COUNT(DISTINCT d.driverId)       FILTER (WHERE d.dob < '1985' AND l.lap > 50 AND r.year BETWEEN 2000 AND 2005))      * 100.0      / COUNT(DISTINCT d.driverId)      FILTER (WHERE r.year BETWEEN 2000 AND 2005)  FROM      drivers d  JOIN      results r ON d.driverId = r.driverId  JOIN      lapTimes l ON d.driverId = l.driverId  WHERE      r.year BETWEEN 2000 AND 2005; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'French' AND SUBSTR(lt.milliseconds, 1, 2) < 2; 
SELECT `code` FROM `drivers` WHERE `nationality` = 'America'; 
SELECT raceId FROM races WHERE year = 2009; 
SELECT COUNT(DISTINCT d.driverId) FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId = 18; 
SELECT d.driverId, d.code, d.forename, d.surname, d.dob, (SELECT MIN(year) FROM drivers WHERE nationality = 'Dutch') AS youngest_age FROM drivers d WHERE d.nationality = 'Dutch' AND d.dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'Dutch') ORDER BY d.dob DESC LIMIT 3; 
SELECT `driverRef` FROM `drivers` WHERE `surname` = 'Kubica'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND YEAR(dob) = 1980; 
SELECT      d.driverId,      d.forename,      d.surname,      lt.milliseconds AS earliestLapTime FROM      drivers d JOIN      lapTimes lt ON d.driverId = lt.driverId WHERE      d.nationality = 'German'      AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY      d.driverId, d.forename, d.surname ORDER BY      lt.milliseconds ASC LIMIT 3; 
SELECT d.driverRef FROM drivers d WHERE d.nationality = 'German' ORDER BY d.dob LIMIT 1; 
SELECT d.driverId, d.code FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN results r ON d.driverId = r.driverId WHERE d.dob BETWEEN '1971-01-01' AND '1971-12-31' AND lt.fastestLapTime IS NOT NULL AND r.fastestLap = lt.lap AND r.position = 1 GROUP BY d.driverId, d.code; 
SELECT d.driverId, d.forename, d.surname, d.dob, lt.milliseconds FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spain' AND d.dob < '1982-01-01' AND lt.milliseconds = (     SELECT MAX(milliseconds)     FROM lapTimes lt2     WHERE lt2.driverId = d.driverId ) ORDER BY lt.milliseconds ASC LIMIT 10; 
SELECT races.year FROM races JOIN results ON races.raceId = results.raceId JOIN lapTimes ON results.raceId = lapTimes.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.fastestLap IS NOT NULL ORDER BY lapTimes.fastestLapTime ASC LIMIT 1; 
SELECT races.year, MAX(lapTimes.milliseconds) AS max_milliseconds FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId GROUP BY races.year ORDER BY max_milliseconds ASC LIMIT 1; 
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5; 
SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN status s ON r.statusId = s.statusId WHERE r.raceId BETWEEN 50 AND 100 AND s.status = 'Disqualified' AND r.laps IS NOT NULL; 
SELECT COUNT(*) AS circuit_count,         c.name,         c.lat,         c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE c.country = 'Austria' GROUP BY c.circuitId; 
SELECT      r.round,      COUNT(DISTINCT r.raceId) AS finishers_count FROM      races r JOIN      results rs ON r.raceId = rs.raceId WHERE      rs.time IS NOT NULL GROUP BY      r.round ORDER BY      finishers_count DESC LIMIT 1; 
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23; 
SELECT      s.year,      r.name AS raceName,      r.date AS raceDate,      r.time AS raceTime FROM      races r JOIN      qualifying q ON r.raceId = q.raceId JOIN      drivers d ON q.driverId = d.driverId JOIN      (SELECT          MIN(year(dob)) AS minYear,          d.driverId      FROM          drivers d      GROUP BY          d.driverId     ) AS minAge ON d.driverId = minAge.driverId JOIN      (SELECT          MIN(year) AS firstYear,          MIN(raceId) AS firstRaceId      FROM          qualifying q      JOIN          races r ON q.raceId = r.raceId      WHERE          d.driverId = minAge.driverId      GROUP BY          d.driverId     ) AS firstRace ON q.raceId = firstRace.firstRaceId JOIN      (SELECT          year      FROM          seasons      WHERE          year = firstRace.firstYear     ) AS s ON s.year = firstRace.firstYear ORDER BY      s.year LIMIT 1; 
SELECT COUNT(DISTINCT d.driverId)  FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.status = 'Disqualified'; 
SELECT      c.name,      c.url  FROM      constructors c  JOIN      constructorStandings cs ON c.constructorId = cs.constructorId  JOIN      (SELECT          nationality,          MAX(points) AS max_points       FROM          constructors       WHERE          nationality = 'Italian'       GROUP BY          nationality) AS max_it Constructors  WHERE      c.nationality = 'Italian'      AND cs.points = max_it.max_points; 
SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.wins = (     SELECT MAX(wins)     FROM constructorStandings ); 
SELECT d.forename, d.surname, lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.milliseconds DESC LIMIT 1; 
SELECT      r.name AS RaceName,      lt.time AS LapTimeInMilliseconds FROM      lapTimes lt JOIN      races r ON lt.raceId = r.raceId WHERE      lt.lap = 1 AND      lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE lap = 1) 
SELECT AVG(lt.milliseconds) as avg_fastest_lap_time FROM lapTimes lt JOIN results r ON lt.driverId = r.driverId JOIN races ra ON lt.raceId = ra.raceId JOIN seasons s ON ra.year = s.year WHERE ra.name = 'United States Grand Prix' AND s.year = 2006 AND r.rank < 11 AND lt.lap = r.fastestLap; 
SELECT d.driverId, d.forename, d.surname, AVG(p.duration) AS avg_pit_stop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY avg_pit_stop_duration ASC LIMIT 5; 
SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN seasons se ON ra.year = se.year WHERE ra.name = 'Canadian Grand Prix' AND se.year = 2008 AND r.position = 1 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Completed') AND r.time LIKE '%:%:%.%'; 
SELECT c.constructorRef, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND cs.position = 1; 
SELECT d.forename, d.surname, d.dob FROM drivers d WHERE d.nationality = 'Austrian' AND d.dob BETWEEN '1981-01-01' AND '1991-12-31'; 
SELECT      CONCAT(d.forename, ' ', d.surname) AS fullName,      d.url AS wikiPage,      d.dob AS dateOfBirth FROM      drivers d WHERE      d.nationality = 'German' AND     d.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY      d.dob DESC; 
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring'; 
SELECT      c.name AS constructor_name,      c.nationality,      SUM(cr.points) AS total_points FROM      constructors c JOIN      constructorStandings cs ON c.constructorId = cs.constructorId JOIN      races r ON cs.raceId = r.raceId WHERE      r.name = 'Monaco Grand Prix'      AND r.year BETWEEN 1980 AND 2010 GROUP BY      c.constructorId ORDER BY      total_points DESC LIMIT 1; 
SELECT AVG(points) AS average_score FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix' 
SELECT AVG(COUNT(raceId)) AS annual_avg_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY YEAR(date); 
SELECT nationality, COUNT(*) as count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1; 
SELECT COUNT(DISTINCT rs.driverId)  FROM results rs  JOIN driverStandings ds ON rs.driverId = ds.driverId  JOIN races r ON rs.raceId = r.raceId  WHERE ds.points = 91 AND rs.points > 0; 
SELECT r.name AS raceName FROM races r JOIN results res ON r.raceId = res.raceId JOIN (     SELECT raceId, MIN(fastestLapTime) AS minFastestLapTime     FROM results     WHERE fastestLap IS NOT NULL     GROUP BY raceId ) AS minLap ON r.raceId = minLap.raceId WHERE minLap.minFastestLapTime = res.fastestLapTime ORDER BY res.fastestLapTime ASC LIMIT 1; 
SELECT      c.name AS circuitName,      c.location,      c.country FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId WHERE      r.date = (SELECT MAX(date) FROM races); 
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.position = 1 AND q.number = 3 AND q.q3 IS NOT NULL ORDER BY q.q3 ASC LIMIT 1; 
SELECT      d.forename || ' ' || d.surname AS fullName,     d.nationality,     r.name AS raceName FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId JOIN      (SELECT           MIN(dob) AS minDob      FROM           drivers) AS minDobQuery WHERE      d.dob = minDobQuery.minDob ORDER BY      d.dob DESC LIMIT 1; 
SELECT      r.driverId,      COUNT(*) AS accident_count FROM      results r JOIN      races ra ON r.raceId = ra.raceId JOIN      status s ON r.statusId = s.statusId WHERE      ra.name = 'Canadian Grand Prix' AND     s.status = 'Accident' GROUP BY      r.driverId ORDER BY      accident_count DESC LIMIT 1; 
SELECT      d.forename,      d.surname,      COUNT(r.driverId) AS wins FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY      d.driverId 
SELECT `raceId`, `driverId`, MAX(`duration`) AS longestDuration FROM `pitStops` ORDER BY longestDuration DESC LIMIT 1; 
SELECT MIN(`milliseconds`) AS fastestLapTime FROM `lapTimes` WHERE `milliseconds` = (SELECT MIN(`milliseconds`) FROM `lapTimes`); 
SELECT MAX(`milliseconds`) AS longest_pit_stop_time FROM `pitStops` WHERE `driverId` = (     SELECT `driverId`     FROM `drivers`     WHERE `surname` = 'Hamilton' AND `forename` = 'Lewis' ) 
SELECT ps.lap FROM pitStops ps JOIN drivers d ON ps.driverId = d.driverId JOIN races r ON ps.raceId = r.raceId WHERE d.surname = 'Hamilton' AND r.name = '2011 Australian Grand Prix' ORDER BY ps.lap LIMIT 1; 
SELECT     d.driverId,     d.forename,     d.surname,     p.driverId,     p.lap,     p.time,     p.duration FROM     pitStops p JOIN     drivers d ON p.driverId = d.driverId JOIN     races r ON p.raceId = r.raceId WHERE     r.year = 2011 AND     r.name = 'Australian Grand Prix'; 
SELECT      d.forename,      d.surname,      lt.lap,      lt.time,      lt.milliseconds  FROM      lapTimes lt  JOIN      drivers d ON lt.driverId = d.driverId  JOIN      results r ON lt.driverId = r.driverId  WHERE      d.surname = 'Hamilton'      AND d.forename = 'Lewis'      AND r.positionText = '1' ORDER BY      lt.milliseconds ASC  LIMIT 1; 
SELECT      d.forename,      d.surname FROM      drivers d JOIN      lapTimes lt ON d.driverId = lt.driverId WHERE      lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) 
SELECT      lt.position  FROM      lapTimes lt  JOIN      results r ON lt.driverId = r.driverId  JOIN      drivers d ON r.driverId = d.driverId  JOIN      races rs ON lt.raceId = rs.raceId  WHERE      d.surname = 'Hamilton'      AND rs.name LIKE '%Formula_1%'     AND lt.milliseconds = (         SELECT              MIN(lt2.milliseconds)          FROM              lapTimes lt2          JOIN              results r2 ON lt2.driverId = r2.driverId          JOIN              drivers d2 ON r2.driverId = d2.driverId          WHERE              d2.surname = 'Hamilton'              AND lt2.raceId = lt.raceId     ) 
SELECT d.forename, d.surname, lt.milliseconds FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT lt.raceId, lt.driverId, lt.lap, lt.position, lt.time FROM lapTimes lt JOIN circuits c ON lt.raceId = c.raceId WHERE c.country = 'Italy' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT      r.name AS RaceName,      r.date AS RaceDate,      lt.milliseconds AS LapRecordTime FROM      lapTimes lt JOIN      races r ON lt.raceId = r.raceId JOIN      circuits c ON r.circuitId = c.circuitId WHERE      c.name = 'Austrian Grand Prix' AND     lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes lt2 JOIN circuits c2 ON lt2.raceId = c2.circuitId WHERE c2.name = 'Austrian Grand Prix'); 
SELECT      pitStops.driverId,      pitStops.raceId,      pitStops.stop,      pitStops.duration FROM      lapTimes AS lt JOIN      races AS r ON lt.raceId = r.raceId JOIN      pitStops AS ps ON lt.raceId = ps.raceId AND lt.driverId = ps.driverId WHERE      r.name = 'Austrian Grand Prix' AND     lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = lt.raceId) 
SELECT c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.raceId WHERE lt.milliseconds = (     SELECT MIN(milliseconds)     FROM lapTimes     WHERE raceId = c.circuitId ) AND lt.time = '1:29.488'; 
SELECT AVG(p.milliseconds) AS average_pit_stop_time FROM pitStops p JOIN drivers d ON p.driverId = d.driverId WHERE d.surname = 'Hamilton' AND p.raceId IN (     SELECT raceId     FROM races     WHERE name LIKE '%Formula_1%' ); 
SELECT AVG(l(milliseconds)) AS average_lap_time_milliseconds FROM lapTimes WHERE EXISTS (     SELECT 1     FROM circuits     WHERE circuits.circuitId = lapTimes.raceId       AND circuits.country = 'Italy' ); 
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes); 
SELECT `Player`.`player_name`, `Player`.`height` FROM `Player` WHERE `Player`.`height` = (SELECT MAX(`height`) FROM `Player`); 
SELECT `Player_Attributes`.`preferred_foot` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`) 
SELECT COUNT(DISTINCT pa.player_api_id) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating BETWEEN 60 AND 65 AND pa.defensive_work_rate = 'low' 
SELECT `player_fifa_api_id` FROM `Player_Attributes` WHERE `crossing` = (SELECT MAX(`crossing`) FROM `Player_Attributes`) ORDER BY `player_fifa_api_id` LIMIT 5; 
SELECT `League`.`name`, SUM(`Match`.`home_team_goal` + `Match`.`away_team_goal`) AS total_goals FROM `Match` JOIN `League` ON `League`.`id` = `Match`.`league_id` WHERE `Match`.`season` = '2015/2016' GROUP BY `League`.`name` ORDER BY total_goals DESC LIMIT 1; 
SELECT home_team_api_id, COUNT(*) AS losses FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY losses ASC LIMIT 1; 
SELECT p.player_name, SUM(pa.penalties) AS total_penalties FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_name ORDER BY total_penalties DESC LIMIT 10; 
SELECT      T1.team_long_name,     COUNT(*) as wins FROM      `Match` T1 JOIN      `League` T2 ON T1.league_id = T2.id WHERE      T2.name = 'Scotland Premier League' AND     T1.season = '2009/2010' AND     T1.away_team_goal > T1.home_team_goal GROUP BY      T1.away_team_api_id ORDER BY      wins DESC LIMIT 1; 
SELECT      T1.team_long_name,      T1.buildUpPlaySpeed FROM      Team AS T1 JOIN      Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE      T2.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY      T1.buildUpPlaySpeed DESC LIMIT 4; 
SELECT League.name, COUNT(*) AS draw_matches FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' AND Match.home_team_goal = Match.away_team_goal GROUP BY League.name ORDER BY draw_matches DESC LIMIT 1; 
SELECT      p.player_name,     TIMESTAMPDIFF(YEAR, p.birthday, CURRENT_DATE) AS age FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.sprint_speed >= 97 AND      pa.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'; 
SELECT      League.name AS league_name,      COUNT(Match.id) AS total_matches FROM      League  JOIN      Match ON League.id = Match.league_id GROUP BY      League.name ORDER BY      total_matches DESC LIMIT 1; 
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'; 
SELECT player_fifa_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' GROUP BY player_fifa_api_id HAVING overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') ORDER BY overall_rating DESC LIMIT 1; 
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59; 
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE strftime('%Y', Team_Attributes.date) = '2012' AND Team_Attributes.buildUpPlayPassing > (     SELECT AVG(Team_Attributes.buildUpPlayPassing)     FROM Team_Attributes     JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id     WHERE Team_Attributes.buildUpPlayPassing IS NOT NULL     AND strftime('%Y', Team_Attributes.date) = '2012' ) 
SELECT      (SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0) / COUNT(DISTINCT PA.player_fifa_api_id) AS left_foot_percentage FROM      Player_Attributes PA JOIN      Player P ON PA.player_api_id = P.player_api_id WHERE      P.birthday BETWEEN '1987-01-01' AND '1992-12-31' 
SELECT `League`.`name`, SUM(`Match`.`home_team_goal`) + SUM(`Match`.`away_team_goal`) AS total_goals FROM `League` JOIN `Match` ON `League`.`id` = `Match`.`league_id` GROUP BY `League`.`name` ORDER BY total_goals ASC LIMIT 5; 
SELECT AVG(CASE WHEN p.player_name = 'Ahmed Samir Farag' THEN SUM(pa.long_shots) ELSE 0 END) /         COUNT(DISTINCT CASE WHEN p.player_name = 'Ahmed Samir Farag' THEN pa.player_fifa_api_id ELSE NULL END) AS average_long_shots FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id; 
SELECT p.player_name, AVG(pa.heading_accuracy) AS avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10; 
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id OR T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND T2.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes AS T3 WHERE T3.buildUpPlayDribblingClass = 'Normal' AND T3.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00') ORDER BY T2.chanceCreationPassing ASC; 
SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2009/2010' AND AVG(Match.home_team_goal) > AVG(Match.away_team_goal) GROUP BY League.name HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal); 
SELECT `team_short_name`  FROM `Team`  WHERE `team_long_name` = 'Queens Park Rangers'; 
SELECT p.player_name FROM Player p WHERE SUBSTR(p.birthday, 1, 4) = '1970' AND SUBSTR(p.birthday, 6, 2) = '10'; 
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_name` = 'Franco Zennaro' ); 
SELECT     T1.buildUpPlayPositioningClass FROM     Team T JOIN     Team_Attributes T1 ON     T.team_api_id = T1.team_api_id WHERE     T.team_long_name = 'ADO Den Haag' AND     T1.buildUpPlayPositioningClass IS NOT NULL 
SELECT      PA.heading_accuracy AS header_finishing_rate FROM      Player_Attributes PA JOIN      Player P ON PA.player_api_id = P.player_api_id WHERE      P.player_name = 'Francois Affolter' AND      PA.date = '2014-09-18 00:00:00'; 
SELECT pa.overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011'; 
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016'; 
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) 
SELECT `player_name`, `potential` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_fifa_api_id` = `Player.player_fifa_api_id` WHERE `potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`) ORDER BY `potential` DESC; 
SELECT COUNT(*) FROM Player_Attributes WHERE `player_api_id` IN (SELECT `player_api_id` FROM Player WHERE `weight` < 130) AND `preferred_foot` = 'left'; 
SELECT `team_short_name` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_api_id` = `Team.team_api_id` WHERE `chanceCreationPassingClass` = 'Risky'; 
SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'David Wilson' ); 
SELECT p.birthday  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1; 
SELECT `League.name` FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `Country.name` = 'Netherlands'; 
SELECT AVG(home_team_goal)  FROM Match  WHERE country_id = (SELECT id FROM Country WHERE name = 'Poland')  AND season = '2010/2011'; 
SELECT      p.player_name,      pa.finishing AS finishing_rate,      p.height FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      p.height BETWEEN (SELECT MAX(height) FROM Player) AND (SELECT MIN(height) FROM Player) GROUP BY      p.player_name, pa.finishing, p.height ORDER BY      pa.finishing DESC LIMIT 1; 
SELECT p.player_name FROM Player p WHERE p.height > 180; 
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170; 
SELECT P.player_name FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating > 80 AND strftime('%Y', PA.date) BETWEEN '2008' AND '2010'; 
SELECT `potential` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_name` = 'Aaron Doran' ); 
SELECT `player_name` FROM `Player` WHERE `preferred_foot` = 'left'; 
SELECT T.team_long_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast'; 
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_api_id` IN (     SELECT `team_api_id`     FROM `Team`     WHERE `team_short_name` = 'CLB' ); 
SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlayPassing > 70; 
SELECT AVG(`overall_rating`) as avg_overall_rating FROM `Player_Attributes` WHERE strftime('%Y', `date`) BETWEEN '2010' AND '2015' AND `overall_rating` > 170; 
SELECT player_name, height  FROM Player  WHERE height = (SELECT MIN(height) FROM Player); 
SELECT `Country`.`name`  FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Italy Serie A'; 
SELECT `team_short_name` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` = 31 AND `buildUpPlayDribbling` = 53 AND `buildUpPlayPassing` = 32; 
SELECT AVG(overall_rating)  FROM Player_Attributes  JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.player_name = 'Aaron Doran'; 
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'; 
SELECT T.team_short_name FROM Team AS T JOIN Match AS M ON T.team_api_id = M.home_team_api_id WHERE M.home_team_goal = 10; 
SELECT p.player_name, pa.balance, pa.potential FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = 61 AND pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61); 
SELECT   (AVG(PA1.ball_control) - AVG(PA2.ball_control)) AS ball_control_difference FROM   Player_Attributes PA1 JOIN   Player P1 ON PA1.player_api_id = P1.player_api_id JOIN   Player_Attributes PA2 ON PA2.player_api_id = P2.player_api_id AND PA2.player_api_id <> PA1.player_api_id JOIN   Player P2 ON PA2.player_api_id = P2.player_api_id WHERE   P1.player_name = 'Abdou Diallo' AND   P2.player_name = 'Aaron Appindangoye'; 
SELECT `team_long_name` FROM `Team` WHERE `team_short_name` = 'GEN'; 
SELECT      p1.player_name AS PlayerName,      p1.birthday AS Birthday,      p2.player_name AS OpponentPlayerName,      p2.birthday AS OpponentBirthday FROM      Player p1 JOIN      Player p2 ON p1.player_api_id = p2.player_api_id WHERE      p1.player_name = 'Aaron Lennon' AND p2.player_name = 'Abdelaziz Barrada' 
SELECT `player_name`, `height` FROM `Player` WHERE `height` = (SELECT MAX(`height`) FROM `Player`); 
SELECT COUNT(DISTINCT pa.player_api_id) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low'; 
SELECT `Country.name` FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `League.name` = 'Belgium Jupiler League'; 
SELECT name  FROM League  WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany'); 
SELECT `Player.player_name`, MAX(`Player_Attributes.overall_rating`) as MaxStrength FROM `Player` JOIN `Player_Attributes` ON `Player.player_api_id` = `Player_Attributes.player_api_id` GROUP BY `Player.player_api_id` ORDER BY MaxStrength DESC LIMIT 1; 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high'; 
SELECT p.player_name, pa.crossing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 3; 
SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (     SELECT `player_fifa_api_id`     FROM `Player`     WHERE `player_name` = 'Ariel Borysiuk' ); 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70; 
SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009'; 
SELECT pa.long_passing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) 
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04'; 
SELECT `league_id` FROM `Match` WHERE `season` = '2008/2009' GROUP BY `league_id` ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT AVG(`Player_Attributes`.`overall_rating`) AS avg_overall_rating FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE strftime('%Y', `Player`.`birthday`) < '1986'; 
SELECT      (p1.overall_rating - p2.overall_rating) * 100.0 / p2.overall_rating AS percentage_difference FROM      Player_Attributes p1 JOIN      Player p1p ON p1.player_api_id = p1p.player_api_id JOIN      Player_Attributes p2 ON p2.player_api_id = p1p.player_api_id WHERE      p1p.player_name = 'Ariel Borysiuk' AND p2.player_name = 'Paulin Puel'; 
SELECT AVG(`buildUpPlaySpeed`) AS average_build_up_play_speed FROM `Team_Attributes` WHERE `team_long_name` = 'Heart of Midlothian'; 
SELECT AVG(T1.overall_rating)  FROM Player_Attributes AS T1  JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T2.player_name = 'Pietro Marino'; 
SELECT SUM(pa.crossing) AS total_crossing_score FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Lennox' 
SELECT MAX(`Team_Attributes`.`chanceCreationPassing`) AS `HighestChanceCreationPassingScore`,         `Team_Attributes`.`chanceCreationPassingClass` AS `Classification` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_fifa_api_id` = `Team`.`team_fifa_api_id` WHERE `Team`.`team_long_name` = 'Ajax'; 
SELECT `preferred_foot` FROM `Player_Attributes` WHERE `player_api_id` IN (     SELECT `player_api_id`     FROM `Player`     WHERE `player_name` = 'Abdou Diallo' ); 
SELECT MAX(`overall_rating`)  FROM `Player_Attributes`  JOIN `Player` ON `Player_Attributes`.`player_fifa_api_id` = `Player`.`player_fifa_api_id`  WHERE `Player`.`player_name` = 'Dorlan Pabon'; 
SELECT AVG(`Match.away_team_goal`) AS average_goals FROM `Match` JOIN `Team` ON `Match.away_team_api_id` = `Team.team_api_id` WHERE `Team.team_long_name` = 'Parma' AND `Country.name` = 'Italy'; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1; 
SELECT overall_rating  FROM Player_Attributes  WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00'; 
SELECT `potential` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Parravicini' AND `date` = '2010-08-30 00:00:00'; 
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Migliore' AND `date` = '2015-05-01 00:00:00'; 
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id IN (     SELECT player_api_id     FROM Player     WHERE player_name = 'Kevin Berigaud' ) AND date = '2013-02-22 00:00:00'; 
SELECT `date` FROM `Player_Attributes` WHERE `player_name` = 'Kevin Constant' ORDER BY `crossing` DESC LIMIT 1; 
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Willem II' AND `date` = '2012-02-22 00:00:00' 
SELECT `buildUpPlayDribblingClass` FROM `Team_Attributes` WHERE `team_api_id` = (     SELECT `team_api_id`     FROM `Team`     WHERE `team_short_name` = 'LEI' ) AND `date` = '2015-09-10 00:00:00'; 
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'FC Lorient' AND `date` = '2010-02-22'; 
SELECT `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'PEC Zwolle' AND `date` = '2013-09-20 00:00:00'; 
SELECT `chanceCreationCrossingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hull City' AND `date` = '2010-02-22 00:00:00' 
SELECT `defence_aggression_class` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes.team_fifa_api_id` = `Team.team_fifa_api_id` WHERE `Team.team_long_name` = 'Hannover 96' AND `Team_Attributes.date` = '2015-09-10 00:00:00'; 
SELECT AVG(`overall_rating`) AS avg_overall_rating FROM `Player_Attributes` WHERE `player_name` = 'Marko Arnautovic' AND `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00' 
SELECT   ((     (SELECT `overall_rating` FROM `Player_Attributes`       WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Landon Donovan')       AND `date` = '2013-07-12'     ) - (      SELECT `overall_rating` FROM `Player_Attributes`       WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Jordan Bowery')       AND `date` = '2013-07-12'     )   ) /    (SELECT `overall_rating` FROM `Player_Attributes`     WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Landon Donovan')     AND `date` = '2013-07-12'   )) * 100 AS percentage_difference 
SELECT `player_name` FROM `Player` ORDER BY `height` DESC LIMIT 5; 
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10; 
SELECT p.player_name FROM Player p WHERE DATEDIFF(year, p.birthday, CURRENT_TIMESTAMP) > 34; 
SELECT SUM(`home_team_goal`) AS total_home_goals FROM `Match` JOIN `Player` ON `home_player_1` = `Player.player_api_id` OR `home_player_2` = `Player.player_api_id` OR                 `home_player_3` = `Player.player_api_id` OR `home_player_4` = `Player.player_api_id` OR                 `home_player_5` = `Player.player_api_id` OR `home_player_6` = `Player.player_api_id` OR                 `home_player_7` = `Player.player_api_id` OR `home_player_8` = `Player.player_api_id` OR                 `home_player_9` = `Player.player_api_id` OR `home_player_10` = `Player.player_api_id` OR                 `home_player_11` = `Player.player_api_id` WHERE `Player.player_name` = 'Aaron Lennon'; 
SELECT SUM(`Match.away_team_goal`) AS total_away_goals FROM `Match` JOIN `Player` ON `Player.player_api_id` = `Match.away_player_1` OR `Player.player_api_id` = `Match.away_player_2` WHERE `Player.player_name` IN ('Daan Smith', 'Filipe Ferreira') GROUP BY `Match.id` 
SELECT SUM(`home_team_goal`) AS total_home_goals FROM `Match` WHERE      (TIMESTAMPDIFF(YEAR, `Player`.`birthday`, CURRENT_TIMESTAMP) < 31)      AND `home_player_1` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_2` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_3` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_4` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_5` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_6` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_7` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_8` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_9` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_10` IN (         SELECT `player_api_id`         FROM `Player`     )     AND `home_player_11` IN (         SELECT `player_api_id`         FROM `Player`     ); 
SELECT `player_name` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_fifa_api_id` = `Player.player_fifa_api_id` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes`) GROUP BY `player_name` ORDER BY `overall_rating` DESC LIMIT 10; 
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes) 
SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR                  p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR                  p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR                  p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR                  p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR                  p.player_api_id = m.home_player_11 OR p.player_api_id = m.away_player_1 OR                  p.player_api_id = m.away_player_2 OR p.player_api_id = m.away_player_3 OR                  p.player_api_id = m.away_player_4 OR p.player_api_id = m.away_player_5 OR                  p.player_api_id = m.away_player_6 OR p.player_api_id = m.away_player_7 OR                  p.player_api_id = m.away_player_8 OR p.player_api_id = m.away_player_9 OR                  p.player_api_id = m.away_player_10 WHERE pa.attacking_work_rate = 'high' 
SELECT player_name,         (strftime('%Y-%m-%d', player_attributes.date) - strftime('%Y-%m-%d', player.birthday)) AS age_diff FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.finishing = 1 ORDER BY age_diff ASC LIMIT 1; 
SELECT p.player_name FROM Player p JOIN Country c ON p.player_fifa_api_id = c.id WHERE c.name = 'Belgium'; 
SELECT p.player_name, c.name AS country_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Country c ON p.country_id = c.id WHERE pa.vision > 89; 
SELECT `Country`.`name`, AVG(`Player`.`weight`) as avg_weight FROM `Player` JOIN `Country` ON `Player`.`player_api_id` = `Country`.`id` GROUP BY `Country`.`name` ORDER BY avg_weight DESC LIMIT 1; 
SELECT t.team_long_name FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id OR t.team_fifa_api_id = ta.team_fifa_api_id WHERE ta.buildUpPlaySpeedClass = 'Slow'; 
SELECT T2.team_short_name FROM Team_Attributes T1 JOIN Team T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Safe'; 
SELECT AVG(height) AS average_height FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Player     JOIN Country ON Player.country_id = Country.id     WHERE Country.name = 'Italy' ); 
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990' 
SELECT      (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 6) - (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 23) AS JumpingScoreDifference 
SELECT p.player_api_id FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MIN(potential) FROM Player_Attributes pa2 WHERE pa2.preferred_foot = 'right')   AND pa.preferred_foot = 'right' ORDER BY pa.potential ASC LIMIT 3; 
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') 
SELECT      ROUND((COUNT(*) FILTER (WHERE stamina > 80 AND strength > 80) * 100.0) / COUNT(*), 2) AS percentage_strength_stamina_above_80 FROM      Player_Attributes; 
SELECT `Country.name` AS Country FROM `League` JOIN `Country` ON `League.country_id` = `Country.id` WHERE `League.name` = 'Poland Ekstraklasa'; 
SELECT     home_team_goal AS home_final_score,     away_team_goal AS away_final_score FROM     Match WHERE     date = '2008-09-24'     AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')     AND (home_team_api_id = (SELECT team_api_id FROM Team WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE date = '2008-09-24' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League') AND home_team_api_id IS NOT NULL LIMIT 1))     OR     away_team_api_id = (SELECT team_api_id FROM Team WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE date = '2008-09-24' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League') AND away_team_api_id IS NOT NULL LIMIT 1)); 
SELECT `sprint_speed`, `agility`, `acceleration` FROM `Player_Attributes` WHERE `player_name` = 'Alexis Blin'; 
SELECT      CASE          WHEN buildUpPlaySpeedClass = 'Slow' THEN 'Slow'         WHEN buildUpPlaySpeedClass = 'Balanced' THEN 'Balanced'         WHEN buildUpPlaySpeedClass = 'Fast' THEN 'Fast'         ELSE 'Unknown'     END AS SpeedClass FROM      Team_Attributes  WHERE      team_long_name = 'KSV Cercle Brugge' 
SELECT COUNT(*) AS games_played FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Serie A') AND season = '2015/2016'; 
SELECT MAX(home_team_goal) AS highest_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie'); 
SELECT `finishing`, `curve` FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes.player_api_id` = `Player.player_api_id` WHERE `Player.weight` = (SELECT MAX(`weight`) FROM `Player`) 
SELECT League.name, COUNT(Match.id) AS game_count FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY game_count DESC LIMIT 1; 
SELECT T2.team_long_name FROM `Match` AS M JOIN `Team` AS T2 ON M.away_team_api_id = T2.team_api_id WHERE M.away_team_goal > 0 GROUP BY T2.team_long_name ORDER BY SUM(M.away_team_goal) DESC LIMIT 1; 
SELECT `player_name` FROM `Player_Attributes` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes`) LIMIT 1; 
SELECT      ROUND(         (COUNT(CASE WHEN `Player`.`height` < 180 AND `Player_Attributes`.`overall_rating` > 70 THEN 1 END) * 100.0)          / COUNT(`Player`.`id`),         2     ) AS percentage_of_players_under_180cm_with_strength_over_70 FROM      `Player` JOIN      `Player_Attributes` ON      `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE      `Player`.`height` < 180 AND `Player_Attributes`.`overall_rating` > 70; 
SELECT     CASE          WHEN SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) >               SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) THEN              (SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) -               SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END)) /              SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) * 100         ELSE              (SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) -               SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END)) /              SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) * 100     END AS PercentageDeviation FROM     Patient; 
SELECT      (COUNT(CASE WHEN p.Birthday > '1930' THEN 1 END) / COUNT(CASE WHEN p.SEX = 'F' THEN 1 END)) * 100 AS PercentageOfFemalesBornAfter1930 FROM      Patient p WHERE      p.SEX = 'F'; 
SELECT      ROUND(         (COUNT(CASE WHEN p.`Admission` = '+' THEN 1 END) * 100.0) / COUNT(*),         2     ) AS Inpatient_Percentage FROM      Patient p WHERE      p.`Birthday` BETWEEN '1930-01-01' AND '1940-12-31'; 
SELECT      (COUNT(CASE WHEN P.Diagnosis = 'SLE' AND E.Admission = '+' THEN E.ID END) / NULLIF(COUNT(CASE WHEN P.Diagnosis = 'SLE' AND E.Admission = '-' THEN E.ID END), 0)) AS Outpatient_to_Inpatient_Ratio FROM      Patient P JOIN      Examination E ON P.ID = E.ID WHERE      P.Diagnosis = 'SLE'; 
SELECT p.Diagnosis FROM Patient p WHERE p.ID = 30609;  SELECT l.Date FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE p.ID = 30609; 
SELECT      p.SEX,      p.Birthday,      e.`Examination Date`,      e.Symptoms  FROM      Patient p  JOIN      Examination e ON p.ID = e.ID  WHERE      p.ID = 163109; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH > 500; 
SELECT      p.ID,      TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.RVVT = '+' 
SELECT      p.ID,      p.SEX,      e.Diagnosis FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.Thrombosis = 2; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1937 AND l.T-CHO >= 250; 
SELECT      p.ID,      p.SEX,      p.Diagnosis FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.ALB < 3.5; 
SELECT      (COUNT(CASE WHEN P.SEX = 'F' AND L.TP < 6.0 OR L.TP > 8.5 THEN 1 END) * 100.0) / COUNT(P.ID) AS percentage_female_out_of_range FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.SEX = 'F'; 
SELECT AVG(`aCL IgG`) AS AverageACL IgG FROM `Examination` WHERE `Diagnosis` = '+' AND SUBSTR(`Birthday`, 1, 4) <= SUBSTR(CURRENT_DATE, 1, 4) - 50; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND YEAR(p.Description) = 1997 AND e.Admission = '-'; 
SELECT MIN(YEAR(`First Date`) - YEAR(`Birthday`)) AS YoungestAgeAtAdmission FROM Patient WHERE `First Date` IS NOT NULL; 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND YEAR(E.`Examination Date`) = 1997 AND P.SEX = 'F'; 
SELECT MAX(YEAR(P.Birthday)) - MIN(YEAR(P.Birthday)) AS AgeGap FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG >= 200; 
SELECT      p.SEX,      e.Symptoms,      p.Diagnosis  FROM      Patient p  JOIN      Examination e ON p.ID = e.ID  WHERE      p.Birthday = (SELECT MIN(Birthday) FROM Patient); 
SELECT      MONTH(Laboratory.Date) AS Month,     COUNT(DISTINCT Patient.ID) / 12 AS AverageMonthlyMales FROM      Laboratory JOIN      Patient ON Laboratory.ID = Patient.ID WHERE      Patient.SEX = 'M'     AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY      MONTH(Laboratory.Date) 
SELECT      p.First_Date,      p.Birthday,      (YEAR(p.First_Date) - YEAR(p.Birthday)) AS Age_At_Arrival FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.Diagnosis = 'SJS' ORDER BY      p.Birthday ASC LIMIT 1; 
SELECT      (SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END), 0)) AS Male_to_Female_Ratio FROM      Patient  WHERE      (SEX = 'M' AND UA <= 8.0) OR      (SEX = 'F' AND UA <= 6.5) 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID AND e.Examination_Date >= DATE_ADD(p.First_Date, INTERVAL 1 YEAR) WHERE e.Examination_Date IS NULL; 
SELECT COUNT(*) FROM Examination WHERE `Examination Date` BETWEEN '1990-01-01' AND '1993-12-31' AND YEAR(`Patient.Birthday`) < 1990; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.T_BIL > 2.0; 
SELECT Diagnosis, COUNT(Diagnosis) as DiagnosisCount FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1; 
SELECT AVG(DATEDIFF('1991-10-31', `Patient.Birthday`)) AS AverageAge FROM `Examination` JOIN `Patient` ON `Examination.ID` = `Patient.ID` WHERE `Examination.Examination Date` BETWEEN '1991-10-01' AND '1991-10-30'; 
SELECT      p.ID,      (YEAR(CURRENT_DATE) - YEAR(p.Birthday)) AS Age,      e.Diagnosis FROM      Examination e JOIN      Patient p ON e.ID = p.ID WHERE      e.HGB = (SELECT MAX(HGB) FROM Examination) ORDER BY      p.Birthday  LIMIT 1; 
SELECT `ANA` FROM `Examination` WHERE `ID` = 3605340 AND `Examination Date` = '1996-12-02'; 
SELECT T1.T-CHO  FROM Laboratory AS T1 WHERE T1.ID = (SELECT T2.ID FROM Patient AS T2 WHERE T2.ID = 2927464) AND T1.Date = '1995-09-04' AND T1.T-CHO < 250; 
SELECT p.SEX  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Diagnosis = 'AORTITIS'  ORDER BY p.First Date  LIMIT 1; 
SELECT Examination.aCL_IgM FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Description = '1994-02-19' AND Examination.Description = '1993-11-12' AND Patient.Diagnosis = 'SLE'; 
SELECT P.SEX  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX IN ('M', 'F')  AND L.GPT = 9  AND L.Date = '1992-06-12'; 
SELECT      (YEAR('1991-10-21') - YEAR(P.Birthday)) - (CASE          WHEN MONTH('1991-10-21') < MONTH(P.Birthday) OR               (MONTH('1991-10-21') = MONTH(P.Birthday) AND DAY('1991-10-21') < DAY(P.Birthday))         THEN 1          ELSE 0      END) AS AgeAtTest FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      L.UA = '8.4' AND L.Date = '1991-10-21'; 
SELECT COUNT(Lab.ID)  FROM Laboratory Lab JOIN Patient Pat ON Lab.ID = Pat.ID WHERE Pat.First_Date = '1991-06-13'  AND Pat.Diagnosis = 'SJS'  AND YEAR(Lab.Date) = 1995; 
SELECT p.`Diagnosis` AS OriginalDiagnosis FROM `Patient` p JOIN `Examination` e ON p.`ID` = e.`ID` WHERE p.`Diagnosis` = 'SLE' AND e.`Examination Date` = '1997-01-27' AND p.`First Date` = '1997-01-27' LIMIT 1; 
SELECT `Symptoms` FROM `Examination` WHERE `Examination Date` = '1993-09-27' AND `ID` IN (     SELECT `ID`     FROM `Patient`     WHERE `Birthday` = '1959-03-01' ); 
SELECT     (SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) -      SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END)) /       SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 1 END) AS CholesterolDecreaseRate FROM     Laboratory L JOIN     Patient P ON L.ID = P.ID WHERE     P.Birthday = '1959-02-18' AND     (L.Date LIKE '1981-11-%' OR L.Date LIKE '1981-12-%'); 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'Behcet' AND e.Description BETWEEN '1997-01-01' AND '1997-12-31'; 
SELECT `Patient.ID` FROM `Patient` JOIN `Examination` ON `Patient.ID` = `Examination.ID` WHERE `Examination.Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND `Examination.GPT` > 30 AND `Examination.ALB` < 4 ORDER BY `Patient.ID`; 
SELECT `Patient`.`ID` FROM `Patient` WHERE `SEX` = 'F' AND YEAR(`Birthday`) = 1964 AND `Admission` = '+' ORDER BY `Patient`.`ID`; 
SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination); 
SELECT      ROUND((SUM(CASE WHEN `Laboratory`.`U-PRO` > 0 AND `Laboratory`.`U-PRO` < 30 AND `Laboratory`.`UA` <= 6.5 THEN 1 ELSE 0 END) /             SUM(CASE WHEN `Laboratory`.`U-PRO` > 0 AND `Laboratory`.`U-PRO` < 30 THEN 1 ELSE 0 END)) * 100, 2) AS Percentage FROM `Laboratory` JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` 
SELECT      (SUM(CASE WHEN p.`Diagnosis` = 'BEHCET' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM      `Patient` p WHERE      p.`SEX` = 'M'      AND YEAR(p.`First Date`) = 1981 
SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-'  AND l.Date LIKE '1991-10%' AND l.T_BIL < 2.0; 
SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ANA = NULL AND Examination.ANA_Pattern != 'P' AND Patient.SEX = 'F' AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31'; 
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123; 
SELECT AVG(L.ALB) AS AvgAlbuminLevel FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE'; 
SELECT Symptoms, COUNT(*) as Count FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY Count DESC LIMIT 1; 
SELECT MIN(`Description`) AS FirstDocumentationDate, `Diagnosis` FROM `Patient` WHERE `ID` = 48473 GROUP BY `Diagnosis` ORDER BY FirstDocumentationDate ASC LIMIT 1; 
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE YEAR(l.Date) = 1997 AND l.TP > 6 AND l.TP < 8.5; 
SELECT      (SUM(CASE WHEN `Symptoms` LIKE '%ITP%' THEN 1 ELSE 0 END) * 100.0) /      SUM(CASE WHEN `Diagnosis` LIKE '%SLE%' THEN 1 ELSE 0 END) AS proportion FROM      Examination 
SELECT      (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) * 100.0) / COUNT(SEX) AS PercentageOfWomenWithRA FROM      Examination  JOIN      Patient ON Examination.ID = Patient.ID WHERE      YEAR(Birthday) = 1980      AND Diagnosis = 'RA' 
SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND e.Diagnosis = 'BEHCET' AND p.Admission = '-'; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.WBC < 3.5; 
SELECT      DATEDIFF(`Examination.Date`, `Patient.First Date`) AS DaysSinceAdmission FROM      `Examination` INNER JOIN      `Patient` ON `Examination.ID` = `Patient.ID` WHERE      `Patient.ID` = 821298 ORDER BY      `Examination.Date` LIMIT 1; 
SELECT      CASE          WHEN p.SEX = 'M' AND e.UA > 8.0 THEN 'Yes'         WHEN p.SEX = 'F' AND e.UA > 6.5 THEN 'Yes'         ELSE 'No'     END AS UricAcidNormal FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID JOIN      Examination e ON p.ID = e.ID WHERE      p.ID = 57266 AND      l.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = p.ID); 
SELECT `Laboratory.Date` FROM `Laboratory` JOIN `Patient` ON `Laboratory.ID` = `Patient.ID` WHERE `Laboratory.GOT` >= 60 AND `Patient.ID` = 48473; 
SELECT p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND YEAR(l.Date) = 1994; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60; 
SELECT p.ID, p.SEX, p.Birthday, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT > 60 ORDER BY p.Birthday ASC; 
SELECT AVG(`LDH`) as Avg_LDH FROM Laboratory WHERE `LDH` < 500; 
SELECT      p.ID,     TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.LDH BETWEEN 600 AND 800; 
SELECT      P.SEX,      P.Birthday,      E.`Examination Date`,      CASE          WHEN P.Admission = '+' THEN 'Inpatient'          ELSE 'Outpatient'      END AS AdmissionStatus FROM      Examination E JOIN      Patient P ON E.ID = P.ID WHERE      E.ALP < 300; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP < 300; 
SELECT      Patient.ID,      Patient.SEX,      Patient.Birthday  FROM      Patient  JOIN      Laboratory  ON      Patient.ID = Laboratory.ID  WHERE      Laboratory.TP < 6.0; 
SELECT      Patient.ID,     (Laboratory.TP - 8.5) AS TP_Deviation FROM      Laboratory JOIN      Patient ON Laboratory.ID = Patient.ID WHERE      Patient.SEX = 'F' AND      Laboratory.TP > 8.5; 
SELECT p.ID, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB <= 3.5 OR l.ALB >= 5.5 ORDER BY p.Birthday DESC; 
SELECT      P.ID,      CASE          WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'         ELSE 'Out of Normal Range'     END AS Albumin_Range FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      YEAR(P.Birthday) = 1982; 
SELECT      (COUNT(*) * 100.0) / (         SELECT COUNT(*)          FROM Patient          WHERE SEX = 'F'     ) AS PercentageOfFemalesWithHighUA FROM      Examination  JOIN      Patient  ON      Examination.ID = Patient.ID  WHERE      (SEX = 'F' AND `UA` > 6.5)      OR (SEX = 'M' AND `UA` > 8.0); 
SELECT AVG(Lab.UA) AS Average_UA_Index FROM Laboratory AS Lab JOIN Patient AS Pat ON Lab.ID = Pat.ID WHERE Lab.UA < 8.0 AND Pat.SEX = 'M'    OR Lab.UA < 6.5 AND Pat.SEX = 'F'    AND Lab.Date = (SELECT MAX(L.Date) FROM Laboratory L WHERE L.ID = Lab.ID) 
SELECT      Patient.ID,      Patient.SEX,      Patient.Birthday FROM      Patient JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Laboratory.UN = 29; 
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'RA' AND e.UN < 30; 
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.CRE >= 1.5; 
SELECT      SUM(CASE WHEN `Patient`.SEX = 'M' THEN 1 ELSE 0 END) AS MalesOutNormalRange,     SUM(CASE WHEN `Patient`.SEX = 'F' THEN 1 ELSE 0 END) AS FemalesOutNormalRange FROM `Examination` JOIN `Patient` ON `Examination`.ID = `Patient`.ID WHERE `Examination`.CRE >= 1.5; 
SELECT      p.ID,      p.SEX,      p.Birthday,      lab.T_BIL FROM      Patient p JOIN      Laboratory lab ON p.ID = lab.ID WHERE      lab.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory) 
SELECT p.SEX, COUNT(*) AS TotalPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T_BIL >= 2.0 GROUP BY p.SEX; 
SELECT p.ID, e.T-CHO FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) AND e.T-CHO = (SELECT MAX(T-CHO) FROM Examination); 
SELECT AVG(DATEDIFF(CURDATE(), p.Birthday) / 365) as AverageAge FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.T-CHO >= 250; 
SELECT      p.ID,      p.Diagnosis  FROM      Patient p  JOIN      Laboratory l ON p.ID = l.ID  WHERE      l.TG > 300; 
SELECT COUNT(*) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) > 50; 
SELECT DISTINCT l.ID FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE p.Admission = '-' AND l.CPK < 250; 
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) BETWEEN 1936 AND 1956   AND Patient.SEX = 'M'   AND Laboratory.CPK >= 250; 
SELECT p.ID, p.SEX, (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU >= 180 AND l.T-CHO < 250; 
SELECT p.ID, l.GLU FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU < 180 AND YEAR(p.Description) >= 1991 ORDER BY p.ID; 
SELECT      p.ID,      p.SEX,      p.Birthday FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      (l.WBC <= 3.5 OR l.WBC >= 9.0) GROUP BY      p.SEX,      p.Birthday ORDER BY      p.SEX,      TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) ASC; 
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (     SELECT ID     FROM Examination     WHERE RBC < 3.5 ) 
SELECT      p.ID,      p.SEX,      p.Birthday,      p.Admission FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      p.SEX = 'F'      AND (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.Birthday)) >= 50     AND (e.RBC <= 3.5 OR e.RBC >= 6.0)     AND p.Admission = '+'; 
SELECT DISTINCT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Admission = '-' AND E.HGB < 10; 
SELECT p.ID, p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'SLE' AND e.HGB BETWEEN 10 AND 17 ORDER BY p.Birthday ASC LIMIT 1; 
SELECT p.ID,         TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID IN (     SELECT l2.ID     FROM Laboratory l2     WHERE l2.HCT >= 52     GROUP BY l2.ID     HAVING COUNT(l2.ID) > 2 ); 
SELECT AVG(`HCT`) AS AverageHematocritLevel FROM `Laboratory` WHERE `Date` LIKE '1991%' AND `HCT` < 29; 
SELECT      SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS LowerThanNormal,     SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS HigherThanNormal FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE PLT < 100 OR PLT > 400; 
SELECT DISTINCT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%'   AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) < 50   AND l.PLT BETWEEN 100 AND 400; 
SELECT      CAST(SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END) * 100 AS PercentageOfAbnormalPTForFemales FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday)) > 55 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.FirstDate > '1992-01-01' AND e.PT < 14; 
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.APTT > 45 AND e.Thrombosis = 3; 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SEX = 'M'  AND e.WBC BETWEEN 3.5 AND 9.0 AND e.FG <= 150 OR e.FG >= 450; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.Birthday > '1980-01-01' AND l.FG < 150 OR l.FG > 450; 
SELECT DISTINCT p.`Diagnosis` FROM `Patient` p JOIN `Laboratory` l ON p.`ID` = l.`ID` WHERE l.`U-PRO` >= 30; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'SLE' AND e.U-PRO > 0 AND e.U-PRO < 30; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgG < 900 AND e.Symptoms = 'abortion'; 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.`aCL IgG` BETWEEN 900 AND 2000  AND e.Symptoms IS NOT NULL; 
SELECT p.ID, e.Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.IGA BETWEEN 80 AND 500 ORDER BY e.IGA DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.IGA BETWEEN 80 AND 500 AND YEAR(p.FirstDate) >= 1990; 
SELECT T1.Diagnosis, COUNT(T1.Diagnosis) as DiagnosisCount FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.aCL_IgM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1; 
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP IN ('+', '-', '<1.0') AND Patient.Description IS NULL; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP >= 1.0 AND (p.SEX = 'M' AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 18) OR (p.SEX = 'F' AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 18) 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.RA IN('-', '+-') AND e.KCT = '+'; 
SELECT DISTINCT E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday > '1995-01-01' AND E.RA IN('-', '+-'); 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND (YEAR(CURDATE()) - YEAR(p.Birthday)) > 60; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.RF < 20 AND e.Thrombosis = '0'; 
SELECT COUNT(DISTINCT E.ID) FROM Examination E WHERE E.ANA = 1 AND E.ANA_Pattern = 'P' AND E.C3 > 35; 
SELECT E.ID FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.HCT < 29 OR P.HCT > 52 AND E.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination E2 WHERE E2.ID = E.ID AND E2.aCL_IgA IS NOT NULL) 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 1 AND e.C4 > 10; 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.RNP IN ('-', '+-')  AND Patient.Admission = '+'; 
SELECT p.Birthday FROM Patient p WHERE p.ID IN (     SELECT e.ID     FROM Examination e     WHERE e.RNP NOT IN('-', '+-') ) ORDER BY p.Birthday ASC LIMIT 1; 
SELECT COUNT(*)  FROM Examination  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Laboratory.SM IN('-', '+-') AND Examination.Thrombosis = 1; 
SELECT      p.ID  FROM      Patient p  JOIN      Laboratory l ON p.ID = l.ID  WHERE      l.SM NOT IN('-', '+-')  ORDER BY      p.Birthday DESC  LIMIT 3; 
SELECT DISTINCT e.ID FROM Examination e WHERE e.`Examination Date` >= '1997-01-01' AND e.`SC170` IN('-', '+-'); 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.SEX = 'M'  AND e.Symptoms LIKE '%vertigo%'  AND e.SC170 IN('-', '+-'); 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.SSA IN ('-', '+') AND YEAR(p.First Date) < 1990; 
SELECT `Patient.ID` FROM `Patient` JOIN `Laboratory` ON `Patient.ID` = `Laboratory.ID` WHERE `Laboratory.SSA` NOT IN('-', '+-') AND `Patient.First Date` = (SELECT MIN(`First Date`) FROM `Patient` WHERE `Laboratory.SSA` NOT IN('-', '+-')) ORDER BY `Patient.First Date` LIMIT 1; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`ANA` IS NOT NULL AND e.`ANA Pattern` IS NOT NULL AND e.`ANA Pattern` = 'Negative' AND e.`aCL IgG` = '0' AND e.`aCL IgM` = '0' AND e.`Diagnosis` = 'SLE'; 
SELECT COUNT(DISTINCT E.ID)  FROM Examination E WHERE E.SSB IN('-', '+-') AND E.Symptoms IS NOT NULL; 
SELECT COUNT(P.SEX) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.CENTROMEA IN('-', '+-') AND E.SSB IN('-', '+-'); 
SELECT DISTINCT E.`Diagnosis` FROM `Examination` E JOIN `Laboratory` L ON E.`ID` = L.`ID` WHERE L.`DNA` >= 8; 
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.DNA < 8 AND Examination.Description IS NULL; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA-II >= 8 AND p.Admission = '+'; 
SELECT      ROUND((COUNT(DISTINCT E.ID) * 1.0) / COUNT(DISTINCT CASE WHEN L.GOT >= 60 THEN E.ID ELSE NULL END), 2) AS percentage_abnormal_GOT_SLE FROM      Examination E JOIN      Laboratory L ON E.ID = L.ID WHERE      E.Diagnosis = 'SLE' AND L.GOT >= 60; 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60; 
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT >= 60 ORDER BY p.Birthday LIMIT 1; 
SELECT      p.Birthday,      p.ID FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.GPT < 60 GROUP BY      p.ID ORDER BY      l.GPT DESC LIMIT 3; 
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.GOT < 60 AND p.SEX = 'M'; 
SELECT MIN(P.FirstDate) AS FirstRecordedDate FROM Examination E JOIN Laboratory L ON E.ID = L.ID JOIN Patient P ON L.ID = P.ID WHERE L.LDH < 500 GROUP BY E.ID ORDER BY E.aCL_IgG DESC LIMIT 1; 
SELECT MAX(`Examination Date`) AS Latest_Medical_Data FROM Examination WHERE `LDH` >= 500 AND `Examination Date` <= (SELECT MAX(`First Date`) FROM Patient); 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ALP >= 300 AND e.Admission = '+'; 
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300; 
SELECT DISTINCT E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.TP < 6.0; 
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SJS' AND e.TP > 6.0 AND e.TP < 8.5; 
SELECT `Examination.Date` FROM `Examination` JOIN `Patient` ON `Examination.ID` = `Patient.ID` WHERE `Laboratory.TP` IS NOT NULL AND `Laboratory.ALB` > 3.5 AND `Laboratory.ALB` < 5.5 ORDER BY `Laboratory.ALB` DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.ALB > 3.5 AND l.ALB < 5.5 AND l.TP BETWEEN 6.0 AND 8.5; 
SELECT MAX(UA) AS MaxUricAcid, aCL_IgG, aCL_IgM, aCL_IgA FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'F' AND Examination.UA > 6.50 GROUP BY Patient.ID ORDER BY MaxUricAcid DESC LIMIT 1; 
SELECT MAX(`ANA`) AS highest_ana FROM Examination WHERE `CRE` < 1.5; 
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.CRE < 1.5 AND e.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination WHERE aCL_IgA IS NOT NULL); 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.T_BIL >= 2.0 AND e.ANA_Pattern LIKE '%P%'; 
SELECT E.ANA FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.T_BIL < 2.0 AND L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory WHERE T_BIL < 2.0) 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.`T-CHO` >= 250 AND E.KCT = '-'; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`T-CHO` < 250 AND e.`ANA Pattern` = 'P'; 
SELECT COUNT(DISTINCT E.ID)  FROM Examination E  JOIN Patient P ON E.ID = P.ID  WHERE E.TG < 200 AND E.Symptoms IS NOT NULL; 
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.TG < 200 GROUP BY p.Diagnosis ORDER BY e.TG DESC LIMIT 1; 
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 0 AND e.CPK < 250; 
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Laboratory l ON e.ID = l.ID  WHERE e.CPK < 250 AND (l.KCT = '+' OR l.RVVT = '+' OR l.LAC = '+'); 
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) AND l.GLU > 180; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.GLU < 180 AND e.Thrombosis = 0; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Admission = '+' AND e.WBC BETWEEN 3.5 AND 9.0; 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SLE' AND e.WBC BETWEEN 3.5 AND 9.0; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND (     l.RBC <= 3.5 OR l.RBC >= 6.0 ); 
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.PLT > 100 AND e.PLT < 400 AND e.Diagnosis IS NOT NULL; 
SELECT      p.ID,      e.PLT FROM      Examination e JOIN      Patient p ON e.ID = p.ID WHERE      e.PLT BETWEEN 100 AND 400 AND      e.Diagnosis = 'MCTD'; 
SELECT AVG(`PT`) as AveragePT FROM `Laboratory` WHERE `Patient_ID` IN (SELECT `ID` FROM `Patient` WHERE `SEX` = 'M' AND `PT` < 14); 
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis IN (2, 1) AND E.PT < 14; 
SELECT major_name  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Engineering'; 
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'Art and Design'; 
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Student_Club'; 
SELECT DISTINCT m.phone FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer'; 
SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'; 
SELECT e.event_id, e.event_name, COUNT(a.link_to_event) AS attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_id, e.event_name ORDER BY attendance DESC LIMIT 1; 
SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President' AND ma.college = 'Student Club'; 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'; 
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND e.event_name = 'Student_Club' AND YEAR(e.event_date) = 2019; 
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Meeting' AND m.position = 'Student_Club' AND COUNT(a.link_to_member) > 10; 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.major_name = 'Student_Club' GROUP BY e.event_name HAVING COUNT(a.link_to_member) > 20; 
SELECT AVG(COUNT(e.event_id)) / COUNT(DISTINCT e.event_name) AS average_attendance FROM event e WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020; 
SELECT expense_description, MAX(cost) as max_cost FROM expense WHERE expense_description LIKE '%event%' GROUP BY expense_description ORDER BY max_cost DESC LIMIT 1; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud'; 
SELECT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies'; 
SELECT `county` FROM `member` JOIN `zip_code` ON `member.zip` = `zip_code.zip_code` WHERE `first_name` = 'Sherri' AND `last_name` = 'Ramsey'; 
SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Tyler' AND m.last_name = 'Hewitt'; 
SELECT SUM(i.amount) AS total_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President'; 
SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Food'; 
SELECT z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN `event` e ON m.member_id = e.event_id JOIN attendance a ON e.event_id = a.link_to_event JOIN `event` e2 ON a.link_to_event = e2.event_id JOIN member m2 ON e2.event_id = m2.member_id JOIN `event` e3 ON m2.member_id = e3.event_id JOIN member m3 ON e3.event_id = m3.member_id JOIN `event` e4 ON m3.member_id = e4.event_id JOIN member m4 ON e4.event_id = m4.member_id JOIN `event` e5 ON m4.member_id = e5.event_id JOIN member m5 ON e5.event_id = m5.member_id JOIN `event` e6 ON m5.member_id = e6.event_id JOIN member m6 ON e6.event_id = m6.member_id JOIN `event` e7 ON m6.member_id = e7.event_id JOIN member m7 ON e7.event_id = m7.member_id JOIN `event` e8 ON m7.member_id = e8.event_id JOIN member m8 ON e8.event_id = m8.member_id JOIN `event` e9 ON m8.member_id = e9.event_id JOIN member m9 ON e9.event_id = m9.member_id JOIN `event` e10 ON m9.member_id = e10.event_id JOIN member m10 ON e10.event_id = m10.member_id JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President' 
SELECT m.first_name, m.last_name FROM member m JOIN zip_code zc ON m.zip = zc.zip_code WHERE zc.state = 'Illinois'; 
SELECT SUM(b.spent) AS total_advertisement_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement'; 
SELECT m.major_name, m.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Pierce' OR m.first_name = 'Guidi'; 
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'; 
SELECT      e.expense_id,      e.expense_description,      e.expense_date,      e.cost,      e.approved FROM      expense e JOIN      event ev ON e.link_to_budget IN (         SELECT b.budget_id         FROM budget b         JOIN event ev ON b.link_to_event = ev.event_id         WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08'     ) WHERE      e.approved = 'True'; 
SELECT SUM(expense.cost) / COUNT(DISTINCT attendance.link_to_event) AS average_cost FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND MONTH(expense.expense_date) IN (9, 10); 
SELECT      (SUM(CASE WHEN YEAR(event_date) = 2019 THEN spent ELSE 0 END) -      SUM(CASE WHEN YEAR(event_date) = 2020 THEN spent ELSE 0 END)) AS total_spent_difference FROM      event  JOIN      budget ON event.event_id = budget.link_to_event JOIN      member ON member.member_id = budget.link_to_member WHERE      member.position = 'Student_Club'; 
SELECT e.location FROM event e WHERE e.event_name = 'Spring Budget Review'; 
SELECT SUM(e.cost) AS total_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name LIKE '%Posters%' AND ev.event_date = '2019-09-04'; 
SELECT b.remaining  FROM budget b  JOIN (     SELECT MAX(amount) AS max_budget      FROM budget      WHERE category = 'Food' ) AS max_budget_query  ON b.amount = max_budget_query.max_budget; 
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'; 
SELECT COUNT(DISTINCT major_id)  FROM major  WHERE college = 'College of Humanities and Social Sciences'; 
SELECT phone  FROM member  WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; 
SELECT      z.county  FROM      member m  JOIN      zip_code z ON m.zip = z.zip_code  WHERE      m.first_name = 'Adela' AND      m.last_name = 'O''Gallagher'; 
SELECT COUNT(*) FROM budget WHERE `link_to_event` IN (     SELECT `event_id`     FROM `event`     WHERE `event_name` = 'November Meeting' ) AND `remaining` < 0; 
SELECT SUM(b.amount)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.event_name = 'September Speaker'; 
SELECT e.status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20'; 
SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason'); 
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large'; 
SELECT zip_code.type FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'; 
SELECT m.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President'; 
SELECT z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'; 
SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'; 
SELECT i.date_received  FROM income i  JOIN member m ON i.link_to_member = m.member_id  WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues'; 
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.source = 'Dues' AND i.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') 
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' AND b.category = 'Advertisement' THEN b.amount ELSE 0 END) / NULLIF(         SUM(CASE WHEN e.event_name = 'October Meeting' AND b.category = 'Advertisement' THEN b.amount ELSE 0 END),         0     )) AS ratio FROM      event e JOIN      budget b ON e.event_id = b.link_to_event 
SELECT      (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) /      (SELECT SUM(amount) FROM budget WHERE event_name = 'November Speaker')) * 100 AS parking_percentage FROM      budget b WHERE      b.event_name = 'November Speaker'; 
SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE e.expense_description = 'Pizza'; 
SELECT COUNT(DISTINCT city) AS unique_cities_count FROM zip_code WHERE county = 'Orange' AND state = 'Virginia'; 
SELECT `department`  FROM `major`  WHERE `college` = 'College of Humanities and Social Sciences'; 
SELECT      z.city,      z.county,      z.state  FROM      member m  JOIN      zip_code z ON m.zip = z.zip_code  WHERE      m.first_name = 'Amy' AND      m.last_name = 'Firth'; 
SELECT e.expense_description, e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget); 
SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting'; 
SELECT `major`.`college`, COUNT(`member`.`link_to_major`) AS `member_count` FROM `member` JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` GROUP BY `major`.`college` ORDER BY `member_count` DESC LIMIT 1; 
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'; 
SELECT event_name, MAX(amount) as highest_budget FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event.event_id, event_name ORDER BY highest_budget DESC LIMIT 1; 
SELECT      e.expense_id,      e.expense_description,      e.expense_date,      e.cost,      e.approved FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      m.position = 'Vice President'; 
SELECT COUNT(DISTINCT a.link_to_member)  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer'; 
SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'; 
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'; 
SELECT COUNT(DISTINCT e.event_id)  FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240'; 
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education'; 
SELECT      e.event_id,      e.event_name,      MAX(DIVIDE(b.spent, b.amount)) AS spend_to_budget_ratio FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      e.status = 'Closed' GROUP BY      e.event_id, e.event_name ORDER BY      spend_to_budget_ratio DESC LIMIT 1; 
SELECT COUNT(*) FROM member WHERE position = 'President'; 
SELECT MAX(spent) AS highest_spent FROM budget WHERE spent IS NOT NULL; 
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020; 
SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description LIKE '%food%' 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7; 
SELECT DISTINCT m.member_id, m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater'; 
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'; 
SELECT SUM(i.amount) AS total_income FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount > 40; 
SELECT SUM(e.cost) AS total_expense FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE e.event_name = 'Yearly Kickoff'; 
SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_member JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff' AND b.category = 'Budget Management'; 
SELECT      m.first_name || ' ' || m.last_name AS full_name,     i.source,     MAX(i.amount) AS highest_income FROM      member m JOIN      income i ON m.member_id = i.link_to_member GROUP BY      m.member_id, i.source ORDER BY      highest_income DESC; 
SELECT `event_name`, MIN(`cost`) AS `lowest_cost` FROM `event` WHERE `cost` IS NOT NULL GROUP BY `event_name` ORDER BY `lowest_cost` ASC LIMIT 1; 
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS Yearly_Kickoff_Percentage FROM      event e; 
SELECT      (SUM(CASE WHEN m.major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN m.major_name = 'Physics' THEN 1 ELSE 0 END)) AS finance_to_physics_ratio FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      ma.major_name IN ('Finance', 'Physics') 
SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1; 
SELECT m.first_name, m.last_name, m.email FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Student Club' AND m.position = 'Secretary'; 
SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching'; 
SELECT COUNT(DISTINCT a.link_to_member)  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Community Theater'  AND YEAR(e.event_date) = 2019; 
SELECT COUNT(a.link_to_event) AS num_events_attended, m.major_name FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.major_name; 
SELECT AVG(spent)  FROM budget  WHERE category = 'Food' AND event_status = 'Closed' GROUP BY event_id; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' GROUP BY e.event_name ORDER BY SUM(b.spent) DESC LIMIT 1; 
SELECT      m.first_name,      m.last_name,      e.event_name FROM      member m JOIN      attendance a ON m.member_id = a.link_to_member JOIN      event e ON a.link_to_event = e.event_id WHERE      m.first_name = 'Maya' AND      m.last_name = 'Mclean' AND      e.event_name = 'Women''s Soccer'; 
SELECT      (SUM(CASE WHEN e.type = 'Community Service' THEN 1 ELSE 0 END) * 100.0) / COUNT(e.event_id) AS percentage_community_service_events FROM      event e WHERE      e.event_date BETWEEN '2019-01-01' AND '2019-12-31'     AND e.event_name LIKE '%Student_Club%' 
SELECT SUM(e.cost) AS total_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters'; 
SELECT `t_shirt_size`, COUNT(`t_shirt_size`) AS size_count FROM `member` GROUP BY `t_shirt_size` ORDER BY size_count DESC LIMIT 1; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1; 
SELECT      e.type,      SUM(e.cost) AS total_value FROM      expense e JOIN      event ev ON e.link_to_budget IN (         SELECT              b.budget_id         FROM              budget b         JOIN              event ev ON b.link_to_event = ev.event_id         WHERE              ev.event_name = 'October Meeting'     ) WHERE      e.approved = 'Approved' GROUP BY      e.type; 
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' ORDER BY b.amount ASC; 
SELECT `budget_id`, `amount` FROM `budget` WHERE `category` = 'Food' ORDER BY `amount` DESC LIMIT 1; 
SELECT `budget_id`, `amount` FROM `budget` WHERE `category` = 'Advertising' ORDER BY `amount` DESC LIMIT 3; 
SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking'; 
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'; 
SELECT      m.first_name,      m.last_name,      SUM(e.cost) AS total_cost FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY      m.first_name, m.last_name; 
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'; 
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large'; 
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50; 
SELECT major_name FROM major WHERE major_id = (     SELECT link_to_major     FROM member     WHERE first_name = 'Phillip' AND last_name = 'Cullen' ); 
SELECT m.position FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business'; 
SELECT COUNT(*) FROM member WHERE link_to_major IN (     SELECT major_id     FROM major     WHERE major_name = 'Business' ) AND t_shirt_size = 'Medium'; 
SELECT event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30; 
SELECT event.type FROM event WHERE location = 'MU 215'; 
SELECT event_name, type FROM event WHERE event_date = '2020-03-24T12:00:00'; 
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'; 
SELECT      (SUM(CASE WHEN m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Mathematics') AND m.position = 'Member' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.member_id) AS percentage_math_members FROM      member m; 
SELECT `event`.`type` FROM `event` WHERE `event`.`location` = 'MU 215'; 
SELECT COUNT(*)  FROM income  WHERE amount = 50; 
SELECT COUNT(*)  FROM member  WHERE position = 'Member' AND t_shirt_size = 'X-Large'; 
SELECT COUNT(DISTINCT major.major_id)  FROM major  WHERE major.department = 'School of Applied Sciences, Technology and Education'  AND major.college = 'College of Agriculture and Applied Sciences'; 
SELECT      m.last_name,      ma.major_name,      ma.department,      ma.college FROM      member m JOIN      major ma ON m.link_to_major = ma.major_id WHERE      ma.major_name = 'Environmental Engineering'; 
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0; 
SELECT z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE ma.department = 'Electrical and Computer Engineering' AND m.position = 'Member'; 
SELECT e.event_name FROM event e JOIN member m ON e.event_id = (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Vice' AND last_name = 'President' AND position = 'Vice President' AND zip = (SELECT zip_code FROM zip_code WHERE city = 'Student_Club' AND street_address = '900 E. Washington St.')) WHERE e.type = 'Social'; 
SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10'; 
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member'; 
SELECT      (SELECT COUNT(*)       FROM member       WHERE position = 'Member' AND t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')) AS members_with_medium_shirts_in_student_club,     (SELECT COUNT(*)       FROM income       WHERE amount = 50 AND link_to_member IN (SELECT member_id                                               FROM member                                               WHERE position = 'Member' AND t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club'))) AS income_amount_50_from_members_with_medium_shirts_in_student_club,     (SELECT COUNT(*)       FROM member       WHERE position = 'Member' AND t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')) AS total_members_with_medium_shirts_in_student_club,     (SELECT (COUNT(*)                FROM income                WHERE amount = 50 AND link_to_member IN (SELECT member_id                                                     FROM member                                                     WHERE position = 'Member' AND t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')))       * 100.0) /       (SELECT COUNT(*)        FROM member        WHERE position = 'Member' AND t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')) AS percentage_income_amount_50 
SELECT DISTINCT z.state  FROM zip_code z  WHERE z.type = 'PO Box'; 
SELECT DISTINCT zc.zip_code FROM zip_code zc JOIN (     SELECT zip_code     FROM zip_code     WHERE city = 'San Juan'     AND state = 'Puerto Rico' ) AS san_juan_zip ON zc.zip_code = san_juan_zip.zip_code WHERE zc.type = 'PO Box'; 
SELECT event_name  FROM event  WHERE type = 'Game'  AND status = 'Closed'  AND event_date BETWEEN '2019-03-15' AND '2020-03-20'; 
SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN expense ex ON ex.link_to_budget = e.event_id WHERE ex.cost > 50 GROUP BY a.link_to_member, e.event_id HAVING COUNT(ex.expense_id) > 0; 
SELECT      m.member_id,      m.first_name,      m.last_name,      e.event_name,      e.event_id FROM      member m JOIN      expense ex ON m.member_id = ex.link_to_member JOIN      event e ON ex.link_to_budget = (SELECT budget_id FROM budget WHERE link_to_event = e.event_id) WHERE      ex.approved = 'true'      AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'     AND m.member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = e.event_id); 
SELECT m.link_to_major, m.major_name  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  WHERE m.first_name = 'Katy' AND ma.major_name = 'rec1N0upiVLy5esTO'; 
SELECT m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business' AND ma.college = 'College of Agriculture and Applied Sciences'; 
SELECT e.email FROM member m JOIN expense ex ON m.member_id = ex.link_to_member WHERE ex.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND ex.cost > 20; 
SELECT COUNT(DISTINCT m.member_id)  FROM member m  JOIN major ma ON m.link_to_major = ma.major_id  JOIN `event` e ON m.member_id = e.event_id  WHERE ma.major_name = 'education'  AND ma.college = 'College of Education & Human Services'; 
SELECT      (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) / COUNT(e.event_id)) * 100 AS over_budget_percentage FROM      event e JOIN      budget b ON e.event_id = b.link_to_event 
SELECT `event_id`, `location`, `status` FROM `event` WHERE `event_date` BETWEEN '2019-11-01' AND '2020-03-31'; 
SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE (SUM(cost) / COUNT(expense_id)) > 50; 
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'; 
SELECT      ROUND((SUM(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) / COUNT(zip_code.zip_code)) * 100, 2) AS percentage_po_box_zip_codes FROM      zip_code; 
SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0; 
SELECT e.event_name, e.event_date FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100; 
SELECT      CONCAT(m.first_name, ' ', m.last_name) AS full_name,      ma.major_name FROM      member m JOIN      expense e ON m.member_id = e.link_to_member JOIN      major ma ON m.link_to_major = ma.major_id WHERE      e.cost > 100; 
SELECT      e.location AS event_location,     z.city,     z.county FROM      event e JOIN      income i ON e.event_id = i.link_to_member JOIN      zip_code z ON e.location = z.short_state GROUP BY      e.event_id HAVING      COUNT(i.income_id) > 40; 
SELECT e.link_to_member, SUM(e.cost) AS total_cost FROM expense e JOIN (     SELECT link_to_member, COUNT(DISTINCT link_to_event) AS event_count     FROM expense     GROUP BY link_to_member     HAVING event_count > 1 ) AS ec ON e.link_to_member = ec.link_to_member GROUP BY e.link_to_member ORDER BY total_cost DESC LIMIT 1; 
SELECT AVG(e.cost) AS average_amount_paid FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position != 'Member'; 
SELECT event_name FROM event WHERE type = 'Parking' AND cost < (SELECT SUM(cost) / COUNT(event_id) FROM expense WHERE category = 'Parking') GROUP BY event_name; 
SELECT      DIVIDE(SUM(e.cost), COUNT(e.event_id)) * 100 AS percentage_cost FROM      event e WHERE      e.type = 'Game'; 
SELECT      b.budget_id,      SUM(e.cost) AS total_cost FROM      budget b JOIN      expense e ON b.budget_id = e.link_to_budget WHERE      e.expense_description = 'Water, chips, cookies' GROUP BY      b.budget_id ORDER BY      total_cost DESC LIMIT 1; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id, m.first_name, m.last_name ORDER BY total_spent DESC LIMIT 5; 
SELECT      m.first_name,      m.last_name,      m.phone FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      e.cost > (SELECT AVG(cost) FROM expense) 
SELECT      (SUM(CASE WHEN `state` = 'Maine' THEN 1 ELSE 0 END) / COUNT(`position` = 'Member')) -      (SUM(CASE WHEN `state` = 'Vermont' THEN 1 ELSE 0 END) / COUNT(`position` = 'Member')) AS difference_percentage FROM      `member` WHERE      `position` = 'Member'; 
SELECT `major_name`, `department` FROM `major` JOIN `member` ON `major.major_id` = `member.link_to_major` WHERE `member.first_name` = 'Garrett' AND `member.last_name` = 'Gerke'; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description IN ('Water', 'Veggie tray', 'Supplies') GROUP BY m.member_id 
SELECT m.last_name, m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Elementary Education'; 
SELECT `budget`.`category`, `budget`.`amount` FROM `event` JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` WHERE `event`.`event_name` = 'January Speaker'; 
SELECT DISTINCT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food'; 
SELECT m.first_name, m.last_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '2019-09-09'; 
SELECT `category` FROM `budget` JOIN `expense` ON `budget.budget_id` = `expense.link_to_budget` WHERE `expense.expense_description` = 'Posters'; 
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Secretary'; 
SELECT e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name; 
SELECT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke'; 
SELECT m.first_name, m.last_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.short_state = 'NC' AND z.zip_code = 28092; 
SELECT COUNT(DISTINCT gs.GasStationID)  FROM gasstations gs  JOIN products p ON gs.ProductID = p.ProductID  WHERE gs.Country = 'CZE' AND p.Description = 'Premium gas'; 
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 1.0) /      COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END) AS EUR_to_CZK_Ratio FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      c.Currency IN ('EUR', 'CZK') 
SELECT c.CustomerID, SUM(gu.GasUsage) AS TotalGasUsage FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE gu.YearMonth BETWEEN '201201' AND '201212' AND c.Segment = 'LAM' GROUP BY c.CustomerID ORDER BY TotalGasUsage ASC LIMIT 1; 
SELECT AVG(gu.Consumption) / 12 AS AverageMonthlyConsumption FROM gas_usage gu JOIN customers c ON gu.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND gu.YearMonth BETWEEN '201301' AND '201312'; 
SELECT c.CustomerID, SUM(gu.GasUsage) AS TotalGasConsumed FROM gas_usage gu JOIN transactions_1k t ON gu.Currency = 'CZK' AND gu.YearMonth BETWEEN '201101' AND '201112' JOIN customers c ON t.CustomerID = c.CustomerID WHERE gu.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalGasConsumed DESC LIMIT 1; 
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' AND ym.Consumption < 30000 AND c.Segment = 'KAM'; 
SELECT     (SUM(CASE WHEN g.GasUsage > 0 THEN g.GasUsage ELSE 0 END) -       SUM(CASE WHEN g.GasUsage < 0 THEN g.GasUsage ELSE 0 END)) AS DifferenceInConsumption FROM gas_usage g WHERE g.Currency IN ('CZK', 'EUR') AND g.YearMonth BETWEEN '201201' AND '201212' AND (g.Currency = 'CZK' OR g.Currency = 'EUR'); 
SELECT      gas_usage.YearMonth,      SUM(gas_usage.GasUsage) AS TotalGasUsage FROM      gas_usage WHERE      gas_usage.Currency = 'EUR' GROUP BY      YEAR(gas_usage.YearMonth), MONTH(gas_usage.YearMonth) ORDER BY      TotalGasUsage DESC LIMIT 1; 
SELECT Segment, SUM(Consumption) as TotalConsumption FROM gas_usage GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT      SUBSTR(`Date`, 1, 4) AS Year,     SUM(`Consumption`) AS TotalConsumption FROM      `yearmonth` WHERE      `Currency` = 'CZK' GROUP BY      Year ORDER BY      TotalConsumption DESC LIMIT 1; 
SELECT      SUBSTR(y.Date, 6, 2) AS PeakMonth,     SUM(y.Consumption) AS TotalGasConsumption FROM      yearmonth y JOIN      customers c ON y.CustomerID = c.CustomerID WHERE      c.Segment = 'SME' AND     y.Date LIKE '2013%' GROUP BY      PeakMonth ORDER BY      TotalGasConsumption DESC LIMIT 1; 
WITH YearlyGasUsage AS (     SELECT          c.Segment,          YEAR(y.Date) AS Year,          SUM(y.Consumption) AS TotalConsumption,          COUNT(DISTINCT y.CustomerID) AS CustomersCount     FROM          yearmonth y     JOIN          customers c ON y.CustomerID = c.CustomerID     WHERE          y.Date BETWEEN '201301' AND '201312'     GROUP BY          c.Segment ), LowestConsumptionCustomers AS (     SELECT          Segment,          MIN(TotalConsumption) AS MinTotalConsumption     FROM          YearlyGasUsage     GROUP BY          Segment ), SegmentTotals AS (     SELECT          y.Segment,          y.TotalConsumption,          y.CustomersCount     FROM          YearlyGasUsage y     JOIN          LowestConsumptionCustomers l ON y.Segment = l.Segment AND y.TotalConsumption = l.MinTotalConsumption ), AnnualAverages AS (     SELECT          Segment,          (TotalConsumption / CustomersCount) AS AnnualAverage     FROM          SegmentTotals ), Differences AS (     SELECT          (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'SME') -          (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'LAM') AS SME_LAM_Diff,         (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'LAM') -          (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'KAM') AS LAM_KAM_Diff,         (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'KAM') -          (SELECT AnnualAverage FROM AnnualAverages WHERE Segment = 'SME') AS KAM_SME_Diff ) SELECT      SME_LAM_Diff,      LAM_KAM_Diff,      KAM_SME_Diff FROM      Differences; 
WITH YearlyConsumption AS (     SELECT          c.Segment,         SUBSTR(t1.Date, 1, 6) AS Year,         SUM(t1.Amount * p.Price) AS TotalAmount     FROM          transactions_1k t1     JOIN          customers c ON t1.CustomerID = c.CustomerID     JOIN          products p ON t1.ProductID = p.ProductID     WHERE          p.Description LIKE '%Gas%'         AND c.Currency = 'EUR'         AND SUBSTR(t1.Date, 1, 6) BETWEEN '201201' AND '201312'     GROUP BY          c.Segment, Year ), SegmentConsumption AS (     SELECT          Year,         Segment,         SUM(TotalAmount) AS TotalConsumption     FROM          YearlyConsumption     GROUP BY          Year, Segment ), SegmentChange AS (     SELECT          s1.Segment,         (s1.TotalConsumption - s2.TotalConsumption) / s1.TotalConsumption * 100 AS PercentageChange     FROM          SegmentConsumption s1     JOIN          SegmentConsumption s2 ON s1.Segment = s2.Segment AND s1.Year = s2.Year + 1     WHERE          s1.Year = '2013' AND s2.Year = '2012' ) SELECT      Segment,     PercentageChange FROM      SegmentChange WHERE      Segment IN ('SME', 'LAM', 'KAM') ORDER BY      PercentageChange DESC LIMIT 1, 1;  SELECT      Segment,     PercentageChange FROM      SegmentChange WHERE      Segment IN ('SME', 'LAM', 'KAM') ORDER BY      PercentageChange ASC LIMIT 1, 1; 
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN yearmonth ym ON gu.YearMonth = ym.Date WHERE gu.Currency = 'USD' AND gu.YearMonth BETWEEN '201308' AND '201311' AND ym.CustomerID = 6; 
SELECT      (SELECT COUNT(*) FROM gasstations WHERE `Country` = 'Czech Republic' AND `Segment` = 'Discount')      -      (SELECT COUNT(*) FROM gasstations WHERE `Country` = 'Slovakia' AND `Segment` = 'Discount') AS DiscountGasStationsDifference; 
SELECT      (SUM(gu.GasUsage) - COALESCE(su.GasUsage, 0)) AS Difference FROM      gas_usage gu JOIN      yearmonth ym ON gu.YearMonth = ym.Date LEFT JOIN      gas_usage su ON ym.CustomerID = su.CustomerID AND gu.YearMonth = '201304' WHERE      ym.CustomerID = 7 AND gu.YearMonth = '201304' 
SELECT      (SELECT COUNT(*)       FROM transactions_1k AS t1      JOIN customers AS c ON t1.CustomerID = c.CustomerID      JOIN gas_usage AS gu ON c.Currency = gu.Currency      WHERE gu.Currency = 'CZK' AND c.Segment = 'SME') -      (SELECT COUNT(*)       FROM transactions_1k AS t1      JOIN customers AS c ON t1.CustomerID = c.CustomerID      JOIN gas_usage AS gu ON c.Currency = gu.Currency      WHERE gu.Currency = 'EUR' AND c.Segment = 'SME') AS DifferenceInSMEs 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201310' AND c.Currency = 'Euro' AND c.Segment = 'LAM' ORDER BY ym.Consumption DESC LIMIT 1; 
SELECT      c.CustomerID,      SUM(gu.GasUsage) AS TotalConsumption FROM      gas_usage gu JOIN      customers c ON gu.CustomerID = c.CustomerID WHERE      c.Segment = 'KAM' GROUP BY      c.CustomerID ORDER BY      TotalConsumption DESC LIMIT 1; 
SELECT SUM(gu.GasUsage) AS TotalConsumption FROM gas_usage gu JOIN yearmonth ym ON gu.YearMonth = ym.Date JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND ym.Date = '201305'; 
SELECT      (SELECT COUNT(*)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'LAM' AND t.Amount > 46.73) * 100.0 /      (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'LAM') AS percentage; 
SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.Description LIKE '%Gas%' AND t.Price / t.Amount > (SELECT AVG(t2.Price / t2.Amount) FROM transactions_1k t2 JOIN gasstations g2 ON t2.GasStationID = g2.GasStationID) GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC; 
SELECT     ROUND((SUM(CASE WHEN c.Segment = 'KAM' AND t.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN c.Segment = 'KAM' THEN 1 ELSE 0 END), 2) AS PercentageOfKAMPayingInEUR FROM     customers c JOIN     transactions_1k t ON c.CustomerID = t.CustomerID WHERE     c.Segment = 'KAM'; 
SELECT     ROUND(         (COUNT(*) FILTER (WHERE Consumption > 528.3) * 100.0) / COUNT(*),         2     ) AS PercentageOfCustomersConsumingMoreThan5283 FROM     yearmonth WHERE     Date = '201202'; 
SELECT      (COUNT(CASE WHEN GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'Premium') THEN 1 END) * 100.0) /      COUNT(GasStationID) FROM      gasstations WHERE      Country = 'Slovakia'; 
SELECT ym.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym WHERE ym.Date = '201309' GROUP BY ym.CustomerID ORDER BY TotalConsumption DESC LIMIT 1; 
SELECT c.Segment, SUM(gu.GasUsage) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN gas_usage gu ON ym.Date = gu.YearMonth AND c.Currency = gu.Currency WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' AND c.Segment = 'SME' ORDER BY ym.Consumption ASC LIMIT 1; 
SELECT MAX(Consumption) as HighestMonthlyConsumption FROM yearmonth WHERE strftime('%Y', Date) = '2012'; 
SELECT      ym.CustomerID,     MAX(ym.Consumption) AS MaxMonthlyConsumption FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID WHERE      c.Currency = 'EUR' GROUP BY      ym.CustomerID ORDER BY      MaxMonthlyConsumption DESC LIMIT 1; 
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE LEFT(t.Date, 6) = '201309'; 
SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE SUBSTR(t.Date, 1, 6) = '201306'; 
SELECT g ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' OR t.Price IS NOT NULL GROUP BY g.ChainID; 
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE gs.Currency = 'EUR'; 
SELECT AVG(`Price`) AS `AverageTotalPrice` FROM `transactions_1k` WHERE STRFTIME('%Y-%m', `Date`) = '2012-01'; 
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN gas_usage gu ON ym.Currency = gu.Currency WHERE gu.Currency = 'EUR' AND ym.Consumption > 1000; 
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'; 
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11; 
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000; 
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01'; 
SELECT AVG(TotalPrice) AS AverageTotalPrice FROM (     SELECT SUM(t.Amount * t.Price) AS TotalPrice     FROM transactions_1k t     JOIN gasstations g ON t.GasStationID = g.GasStationID     WHERE g.Country = 'CZE' ) AS TotalPricePerTransaction; 
SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'; 
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1; 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' AND t.Amount IS NOT NULL ORDER BY t.TransactionID ASC LIMIT 1; 
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24'; 
SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00'; 
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Price IS NOT NULL INNER JOIN products ON transactions_1k.ProductID = products.ProductID INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE gasstations.Currency = 'EUR'; 
SELECT c.Segment FROM customers c WHERE c.CustomerID = (SELECT MIN(CustomerID) FROM customers); 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00'; 
SELECT p.ProductID FROM transactions_1k t1 JOIN products p ON t1.ProductID = p.ProductID WHERE t1.Date = '2012-08-23' AND t1.Time = '21:20:00'; 
SELECT      ym.Consumption AS Jan2012Expense,     ym.Date AS Jan2012Date FROM      transactions_1k t1 JOIN      yearmonth ym ON t1.CustomerID = ym.CustomerID WHERE      t1.Date = '2012-08-24' AND     t1.Amount = 124.05 AND     ym.Date LIKE '2012-01-%' 
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time BETWEEN '08:00:00' AND '09:00:00' AND DATE(transactions_1k.Date) = '2012-08-26' AND gasstations.Country = 'CZE'; 
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306' AND EXISTS (     SELECT 1     FROM transactions_1k t     WHERE t.CustomerID = c.CustomerID     AND t.Amount = 214582.17 ); 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467; 
SELECT c.Country FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24'; 
SELECT      ROUND((COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END) * 100.0) / COUNT(*), 2) AS Percentage_EUR_Users FROM      customers JOIN      transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE      transactions_1k.Date = '2012-08-25'; 
SELECT      ((consumption_2012 - consumption_2013) / consumption_2012) * 100 AS ConsumptionDecreaseRate FROM (     SELECT          ym1.Consumption AS consumption_2012,         ym2.Consumption AS consumption_2013     FROM          yearmonth ym1     INNER JOIN          yearmonth ym2 ON ym1.CustomerID = ym2.CustomerID     WHERE          ym1.Date = '2012-08-24' AND         ym2.Date = '2013-08-24' AND         ym1.CustomerID = (             SELECT                  t.CustomerID             FROM                  transactions_1k t             WHERE                  t.Amount = 634.8 AND                 DATE(t.Date) = '2012-08-25'         ) ) AS RateCalculation; 
SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1; 
SELECT     (SELECT SUM(CASE WHEN t1.Segment = 'Premium' THEN 1 ELSE 0 END)      FROM transactions_1k t1      JOIN gasstations g ON t1.GasStationID = g.GasStationID      WHERE g.Country = 'SVK') * 100.0 /      (SELECT COUNT(*)      FROM transactions_1k t2      JOIN gasstations g ON t2.GasStationID = g.GasStationID      WHERE g.Country = 'SVK') AS PercentagePremiumInSVK 
SELECT SUM(t.Amount * t.Price) AS TotalAmount FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.CustomerID = 38508;  SELECT SUM(t.Amount * t.Price) AS TotalAmountJanuary FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.CustomerID = 38508 AND t.Date = '201201'; 
SELECT p.Description AS ProductFullName, SUM(t.Amount) AS TotalAmountSold FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY TotalAmountSold DESC LIMIT 5; 
SELECT      c.CustomerID,      AVG(t.Price / t.Amount) AS AvgPricePerItem,      c.Currency FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID GROUP BY      c.CustomerID ORDER BY      SUM(t.Amount) DESC LIMIT 1; 
SELECT g.Country, MAX(t.Price) as MaxPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 GROUP BY g.Country ORDER BY MaxPrice DESC LIMIT 1; 
SELECT ym.CustomerID, ym.Consumption,         CASE             WHEN ym.Consumption > (t.Price / t.Amount) THEN 'Over Paid'            WHEN ym.Consumption = (t.Price / t.Amount) THEN 'Exact Price'            ELSE 'Under Paid'        END AS ConsumptionStatus FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.ProductID = 5   AND t.Price / t.Amount > 29.00   AND ym.Date LIKE '201208%'; 

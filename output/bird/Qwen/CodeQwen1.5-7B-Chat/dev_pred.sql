SELECT MAX(T1.`Percent (%) Eligible Free (K-12)`) AS percent_eligible_free FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Alameda'
SELECT T1.CDSCode FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Low Grade` = '5' AND T1.`High Grade` = '17' AND T2.`School Type` = 'CONTINUATION' ORDER BY T1.`Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3
SELECT DISTINCT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Fresno County, CA' AND T2.`Charter School (Y/N)` = 1
SELECT T2.street, T2.streetabr, T2.city, T2.mailcity, T2.zip, T2.state FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm)
SELECT phone FROM schools WHERE CHARTER = 1 AND CHARTErNUM LIKE '%Direct%' AND OpenDate > '2000-01-01';
SELECT COUNT(T1.CDSCode) FROM frpm AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Virtual (Y/N)` = 1 AND T1.`Enrollment (Ages 5-17)` > 0 AND T1.`2013-14 CALPADS Fall 1 Certification Status` IS NOT NULL AND T2.`AvgScrMath` < 400
SELECT DISTINCT S.school FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.Magnet = 1 AND SS.NumTstTakr > 500
SELECT Phone FROM schools WHERE NCESSchool IN (SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'District Name' AND T2.NumTstTakr > 0 AND T2.AvgScrRead > 1500 AND T2.AvgScrMath > 1500 AND T2.AvgScrWrite > 1500 AND T2.NumGE1500 > 0)
SELECT COUNT(satscores.NumTstTakr) FROM satscores  JOIN frpm ON satscores.cds = frpm.CDSCode  WHERE frpm.`FRPM Count (K-12)` = (     SELECT MAX(frpm.`FRPM Count (K-12)`) FROM frpm )
SELECT COUNT(DISTINCT T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T3.AvgScrMath > 560 AND T2.Charter = 1
SELECT t1.`FRPM Count (Ages 5-17)`  FROM frpm AS t1  INNER JOIN satscores AS t2 ON t1.CDSCode = t2.cds  WHERE t2.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)  ORDER BY t1.`FRPM Count (Ages 5-17)` DESC  LIMIT 1;
SELECT DISTINCT CDSCode FROM frpm WHERE "Enrollment (K-12)" > 500
SELECT MAX(T2.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Enrollment (Ages 5-17)` > 0 AND T1.`Percent (%) Eligible FRPM (Ages 5-17)` > 0 AND T2.NumTstTakr > 0 AND T2.AvgScrMath IS NOT NULL AND T2.AvgScrRead IS NOT NULL AND T2.AvgScrWrite IS NOT NULL AND T2.AvgScrRead > 0 AND T2.AvgScrWrite > 0 AND T2.AvgScrMath > 0 AND T2.NumGE1500 IS NOT NULL AND T2.PctGE1500 IS NOT NULL AND T2.PctGE1500 > 0 AND T2.sname IS NOT NULL AND T2.dname IS NOT NULL AND T2.cname IS NOT NULL
SELECT T1.phone, T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cds = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 3
SELECT T2.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.Enrollment DESC LIMIT 5
SELECT AVG(t1.AvgScrRead) FROM satscores AS t1 INNER JOIN schools AS t2 ON t1.cds = t2.CDSCode INNER JOIN frpm AS t3 ON t2.CDSCode = t3.CDSCode WHERE t2.DistrictType = 'active'
SELECT COUNT(*) FROM (( SELECT s.cds FROM ( SELECT T1.cds FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.CountyName = 'ALAMEDA' AND T2.School IS NOT NULL ) AS T3 INNER JOIN satscores AS T4 ON T3.cds = T4.cds WHERE T4.NumTstTakr < 100 ) AS T1 JOIN frpm AS T2 ON T1.cds = T2.CDSCode)
SELECT DISTINCT CHARTERNUM FROM schools WHERE CHARTERNUM IS NOT NULL ORDER BY CHARTERNUM DESC LIMIT 1
SELECT COUNT(T2.cds) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Funding Type` = 'Contra Costa (directly funded)' AND T2.NumTstTakr <= 250
SELECT t2.phone FROM satscores AS t1 INNER JOIN schools AS t2 ON t1.cds = t2.cds ORDER BY t1.avgscrmath DESC LIMIT 1
SELECT COUNT(DISTINCT T3.SchoolCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.SchoolCode = T2.CDSCode INNER JOIN schools AS T3 ON T3.DistrictCode = T1.DistrictCode WHERE T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.County = 'Amador'
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.county = 'Los Angeles' AND ( T2.`Free Meal Count (K-12)` > 500 AND T2.`Free Meal Count (K-12)` < 700 )
SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'All Students' ORDER BY T2.NumTstTakr DESC LIMIT 1
SELECT T1.School, T1.Street, T1.City, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE ABS(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > 30
SELECT T1.school FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode WHERE T2.`percent (%) eligible free (k-12)` > 0.1 INNER JOIN satscores AS T3 ON T3.cds = T1.cdscode WHERE T3.numtsttakr >= 1500
SELECT t2.fundingtype FROM schools AS t1 INNER JOIN frpm AS t2 ON t1.CDSCode = t2.CDSCode INNER JOIN satscores AS t3 ON t1.CDSCode = t3.cds WHERE t1.county = 'Riverside' AND t3.AvgScrMath > 400
SELECT T1.School, T1.Street, T1.City, T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`High Grade` = '12' AND T2.`Low Grade` = '6' AND T2.`Enrollment (Ages 5-17)` > 800 AND T2.`Percent (%) Eligible Free (Ages 5-17)` > 0
SELECT T1.school, AVG(T2.avgscrmath)  FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.avgscrmath IS NOT NULL  GROUP BY T2.avgscrmath
WITH LocalFunded AS (   SELECT      CDSCode,      DOCType    FROM      schools    WHERE      FundingType = 'Local' ),  K12Averages AS (   SELECT      AVG(Enrollment(`12`)) as K12AvgEnrollment    FROM      frpm  ),  FifteenSeventeenAverages AS (   SELECT      AVG(Enrollment(`15-17`)) as FSEAvgEnrollment    FROM      frpm  ),  AvgDifferences AS (   SELECT      LocalFunded.DOCType,      LocalFunded.CDSCode,      ABS(f.Enrollment('12') - s.Enrollment('15-17')) as AvgDifference    FROM      LocalFunded      JOIN frpm f ON LocalFunded.CDSCode = f.CDSCode      JOIN frpm s ON LocalFunded.CDSCode = s.CDSCode    WHERE      f.`12` IS NOT NULL      AND s.`15-17` IS NOT NULL ),  LocalFundedAverages AS (   SELECT      SUM(AvgDifference) as TotalDifference    FROM      AvgDifferences      JOIN LocalFunded ON AvgDifferences.CDSCode = LocalFunded.CDSCode ) SELECT    DISTINCT T1.SchoolName  FROM    frpm as T1    JOIN LocalFunded as T2 ON T2.CDSCode = T1.CDSCode    JOIN AvgDifferences as T3 ON T3.CDSCode = T1.CDSCode WHERE    T3.AvgDifference > (SELECT LocalFundedAverages.TotalDifference FROM LocalFundedAverages)
SELECT OpenDate FROM schools ORDER BY Enrollment DESC LIMIT 1
SELECT t1.city FROM schools AS t1 INNER JOIN frpm AS t2 ON t1.cdscode = t2.cdscode WHERE t2.Lowgrade = '1' AND t2.higrade = '12' ORDER BY t2.enrollment ASC LIMIT 5
SELECT CAST(SUM(CASE WHEN SUBSTR("High Grade", 1, 2) = '11' THEN Percent_('Free (K-12)') ELSE 0 END) AS REAL) / COUNT(*) AS Pct_Free_11 FROM frpm JOIN (     SELECT CDSCode, COUNT(*) AS total_enrollment     FROM frpm     WHERE SUBSTR("High Grade", 1, 2) IN ('10', '11', '12')     GROUP BY CDSCode     ORDER BY total_enrollment DESC     LIMIT 10 ) subquery ON frpm.CDSCode = subquery.CDSCode;  -- Calculate the total number of students in grades 1 through 12 and the percentage of them eligible for free meal for the 10th and 11th schools with the highest enrollment SELECT T2.County, T2.District, T2.School,         CAST(SUM(CASE WHEN SUBSTR(T1.`High Grade`, 1, 2) IN ('10', '11', '12') THEN T1.Enrollment END) AS REAL) AS total_students,        CAST(SUM(CASE WHEN SUBSTR(T1.`High Grade`, 1, 2) = '11' THEN T1.`Percent (%) Eligible Free (K-12)` ELSE 0 END) AS REAL) / SUM(CASE WHEN SUBSTR(T1.`High Grade`, 1, 2) IN ('10', '11', '12') THEN T1.Enrollment ELSE 0 END) * 100 AS Pct_Free_11 FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE SUBSTR(T1.`High Grade`, 1, 2) IN ('10', '11', '12') GROUP BY T2.County, T2.District, T2.School ORDER BY total_students DESC LIMIT 10;
SELECT T2.school, T2.`Free Meal Count (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cds WHERE T2.countycode = '66' ORDER BY T2.`Free Meal Count (K-12)` DESC LIMIT 5
SELECT T1.School, T1.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT T1.`% Eligible Free (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson'
SELECT T2.AdmEmail1  FROM frpm AS T1  JOIN schools AS T2  WHERE T2.Charter = 1 AND T2.CDSCode = T1.CDSCode AND T1.`Enrollment (K-12)` = (SELECT MIN(`Enrollment (K-12)`) FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL)
SELECT T3.AdmFName1, T3.AdmLName1 FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T1.AvgScrRead >= 1500 ORDER BY T2.NumTstTakr DESC LIMIT 1
SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Percent___Eligible_Free___K___12 IS NOT NULL ORDER BY T2.Percent___Eligible_Free___K___12 ASC LIMIT 1
SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumTstTakr BETWEEN 2000 AND 3000
SELECT COUNT(NumTstTakr) FROM satscores WHERE rtype = 'Fresno' AND dname IN ( SELECT District FROM schools WHERE OpenDate >= '1980-01-01' AND OpenDate <= '1980-12-31' )
SELECT Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE rtype = 'fall' AND sname = 'fresno unified' AND AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores WHERE rtype = 'fall' AND sname = 'fresno unified' )
SELECT school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T2.AvgScrRead IS NOT NULL AND T3.Virtual = 1 ORDER BY T2.AvgScrRead DESC LIMIT 5
SELECT T1.EDUCTYPE FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AVGScrMath = ( SELECT MAX(AVGScrMath) FROM satscores )
SELECT sname, cname FROM schools t1 JOIN satscores t2 ON t1.CDSCode = t2.cds ORDER BY AvgScrMath ASC LIMIT 1
SELECT T3.city FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools AS T3 ON T3.cds = T2.CDSCode WHERE T2.district = ( SELECT T2.district FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode GROUP BY T2.district ORDER BY COUNT(T1.NumTstTakr) DESC LIMIT 1 ) AND T1.NumTstTakr >= 1500 ORDER BY T3.city
SELECT T1.`School Name`, AVG(T2.AvgScrWrite) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'Schoolwide' AND T1.EdOpsName = 'Ricci Ulrich' GROUP BY T1.`School Name`
SELECT T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Grade = 'K-12' GROUP BY T1.State ORDER BY COUNT(*) DESC LIMIT 1
SELECT SUM(CASE WHEN YEAR(OpenDate) = 1980 AND County = 'ALAMEDA' THEN 1 ELSE 0 END) / 12 AS monthly_average  FROM schools
SELECT COUNT(CASE WHEN s.DistrictType = 'Unified School District' THEN 1 END) * 100.0 / COUNT(CASE WHEN s.DistrictType = 'Elementary School District' THEN 1 END) AS ratio FROM schools s WHERE s.County = 'Orange County' AND s.DistrictType IN ('Unified School District', 'Elementary School District')
SELECT T1.County, T2.school, T2.ClosedDate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.closeddate IS NOT NULL GROUP BY T1.County ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Street, T2.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1, 1
SELECT T2.street, T3.school FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode INNER JOIN satscores AS T3 ON T1.cdscode = T3.cds WHERE T3.rtype = 'A' ORDER BY T3.avgscrread ASC LIMIT 1
SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumTstTakr > 1500 AND T1.MailCity = 'Lakeport'
SELECT COUNT(t1.`NumTstTakr`) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'
SELECT City, Zip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
SELECT      CASE         WHEN COUNT(CASE WHEN T1.`County Name` = 'Colusa' THEN 1 ELSE NULL END) = 0 THEN 'No school located in Colusa county'         ELSE CAST(COUNT(CASE WHEN T1.`County Name` = 'Humboldt' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.`County Name` = 'Colusa' THEN 1 ELSE NULL END)     END AS `Ratio of schools located in Humboldt county against the school located in Colusa county` FROM     schools AS T1 WHERE     T1.`State` = 'California' AND T1.`Mailing County` IS NOT NULL
SELECT COUNT(DISTINCT T1.school_name) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cds_code = T2.cds_code WHERE T1.mailing_state = 'CA' AND T1.city = 'San Joaquin'
SELECT T1.phone, T1.ext FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'W' ORDER BY T2.AvgScrWrite DESC LIMIT 1 OFFSET 332
SELECT T.School, T.Phone, T.Ext FROM schools AS T WHERE T.Zip = '95203-3704'
SELECT Website FROM schools WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson' OR AdmFName2 = 'Mike' AND AdmLName2 = 'Larson' OR AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez' OR AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez'
SELECT T1.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter (Y/N)` = 1 AND T2.`Charter School Number` LIKE 'P%' AND T1.County = 'SAN JOAQUIN'
SELECT COUNT(*) FROM schools AS t1 INNER JOIN frpm AS t2 ON t1.CDSCode = t2.CDSCode WHERE t1.District = 'Elementary School District' AND t1.city = 'Hickman' AND t1.Charter = 1
SELECT SUM(CASE WHEN DISTRICT = 'Los Angeles Unified District' AND CHARTER = 0 THEN 1 ELSE 0 END) FROM schools WHERE `Percent (%) Eligible Free (K-12)` < 0.018
SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3, T3.School, T3.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN schools AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.Charter = 1 AND T1.CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE County = 'Hickman' AND CHARTERNUM = '00D4'
SELECT CAST(SUM(CASE WHEN FUNDINGTYPE = 'Local' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS Ratio FROM schools WHERE COUNTY = 'Santa Clara'
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.District = 'Stanislaus County Public Schools' AND T2.`Charter School (Y/N)` = 1 AND T2.`Charter Funding Type` = 'Directly Funded' AND T2.`Open Date` BETWEEN '2000-01-01' AND '2005-12-31'
SELECT SUM(CASE WHEN YEAR = 1989 AND city = 'San Francisco' THEN 1 ELSE 0 END) FROM frpm
SELECT T1.County FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Academic Year` LIKE '198%' AND T2.`School Type` LIKE 'Youth Authority Facilities (CEA)' ORDER BY T1.County DESC LIMIT 1
SELECT DISTINCT T2.NCESDist FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`School Type` = 'State Special School'
SELECT COUNT(DISTINCT DistrictName) FROM schools WHERE County = 'Alpine' AND SchoolType = 'District Community Day School'
SELECT DistrictCode FROM schools WHERE City = 'Fresno' AND Magnet = 1
SELECT SUM(T2.Enrollment\((Ages 5-17)\)) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.School = 'State Special School' AND T1.City = 'Fremont' AND T1.Zip = '94507' AND T2.`Academic Year` = '2014-2015'
SELECT SUM(t1.Enrollment__Ages_5_17_, t1.Free_Meal_Count__Ages_5_17_, t1.Percent__Eligible_Free__Ages_5_17_, t1.FRPM_Count__Ages_5_17_, t1.Percent__Eligible_FRPM__Ages_5_17_) FROM frpm AS t1 INNER JOIN schools AS t2 ON t1.CDSCode = t2.CDSCode WHERE t2.School = 'Youth Authority School' AND t2.MailingStreet = 'PO Box 1040'
SELECT T1.`Low Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'District Special Education Consortia School' AND T2.`NCESDist` = '613360'
SELECT DISTINCT T1.`School Type`, T3.`School Name` FROM frpm AS T1 INNER JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.`Educational Option Type` = 'Breakfast Provision 2' AND T3.`County Code` = 37
SELECT DISTINCT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Merced' AND f.`Low Grade` = '9' AND f.`High Grade` = '12' AND f.`NSLP Provision Status` = '2'
SELECT COUNT(*) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.`High Grade` = '9' AND T1.`Low Grade` = 'Kindergarten'
SELECT T1.`Grade Span` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Adelanto' GROUP BY T1.`Grade Span` ORDER BY COUNT(*) DESC LIMIT 1
SELECT MIN(CASE WHEN StatusType = 'Public' THEN 1 ELSE 0 END) AS non_physical_school_count FROM schools WHERE (District IN (SELECT District FROM schools WHERE County = 'San Diego') OR District IN (SELECT District FROM schools WHERE County = 'Santa Barbara')) AND NOT EXISTS(SELECT 1 FROM frpm WHERE schools.CDSCode = frpm.CDSCode)
SELECT T1.School_Name, T1.Latitude FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.Latitude DESC LIMIT 1
SELECT T3.school FROM frpm AS T1 INNER JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.latitude = ( SELECT MIN(latitude) FROM frpm WHERE T1.state = 'CA' ) AND T3.state = 'CA' GROUP BY T3.school ORDER BY MIN(T1.low_grade)
SELECT high_grade FROM schools ORDER BY longitude DESC LIMIT 1
SELECT COUNT(T2.CDSCode) AS NumberOfSchools, T3.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN schools AS T3 ON T3.District = T2.District WHERE T1.`School Type` = 'Magnet' AND T1.`Grade Span` = 'Kindergarten to 8th grade' GROUP BY T3.City
SELECT t1.AdmFName1 AS first_name, t1.District AS district, COUNT(*) AS occurrences  FROM schools AS t1  WHERE t1.AdmFName1 IS NOT NULL AND t1.AdmFName2 IS NOT NULL AND t1.AdmFName3 IS NOT NULL  GROUP BY t1.AdmFName1, t1.District  ORDER BY occurrences DESC  LIMIT 2
SELECT T1.DistrictCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine' AND T2.`Percent (%) Eligible Free (K-12)` IS NOT NULL
SELECT DISTINCT T1.District, T1.County, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.CharterNumber = 40
SELECT a.AdmEmail1 FROM schools AS a JOIN frpm AS b ON a.CDSCode = b.CDSCode WHERE b.`County Name` = 'San Bernardino County' AND b.`District Name` LIKE '%District of San Bernardino City Unified%' AND b.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND b.`School Type` IN ('Public Intermediate/Middle Schools', 'Unified Schools')
SELECT admemail1 FROM schools WHERE CDSCode IN  (SELECT cds FROM satscores WHERE NumTstTakr IN  (SELECT MAX(NumTstTakr) FROM satscores WHERE AvgScrRead >= 1500))
SELECT COUNT(t1.account_id) FROM account AS t1 INNER JOIN disp AS t2 ON t1.account_id = t2.account_id INNER JOIN district AS t3 ON t1.district_id = t3.district_id WHERE t1.frequency = 'Monthly' AND t3.A2 = 'East Bohemia'
SELECT COUNT(DISTINCT T2.account_id) AS accounts_with_prague_region FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Prague' AND T2.status = 'E'
SELECT CASE WHEN T3.unemp_rate > T4.unemp_rate THEN '1995' ELSE '1996' END AS 'Higher Percentage' FROM district AS T1 INNER JOIN ( SELECT T1.district_id, AVG(T2.unemp_rate) AS 'unemp_rate' FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.district_id WHERE T2.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.district_id ) AS T3 ON T3.district_id = T1.district_id INNER JOIN ( SELECT T1.district_id, AVG(T2.unemp_rate) AS 'unemp_rate' FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.district_id WHERE T2.date BETWEEN '1996-01-01' AND '1996-12-31' GROUP BY T1.district_id ) AS T4 ON T4.district_id = T1.district_id
Sure, I can help you with that. Here's the SQL query:  ```sql SELECT COUNT(district_id) FROM (   SELECT district_id   FROM client   WHERE gender = 'F'   GROUP BY district_id   HAVING AVG(EXTRACT(YEAR FROM ABS(CURRENT_DATE - birth_date))) >= 40   AND AVG(EXTRACT(YEAR FROM ABS(CURRENT_DATE - birth_date))) <= 60 ) as female_clients JOIN account ON client.client_id = account.district_id WHERE account.amount BETWEEN 6000 AND 10000 GROUP BY district_id HAVING COUNT(*) > 0; ```  This SQL query first selects the `district_id` of all female clients whose age is between 40 and 60. It then joins the `account` table on the `client_id` to obtain the average balance of accounts in those districts. It filters for districts where the average balance is between 6000 and 10000 and counts the number of such districts. Finally, it only includes districts where the count is greater than 0.
SELECT COUNT(client_id) FROM (SELECT DISTINCT client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'male' AND T1.district_id = 4 AND T2.A2 = 'north bohemia') AS T3 WHERE T3.client_id IN (SELECT DISTINCT client_id FROM account AS T4 INNER JOIN disp AS T5 ON T4.account_id = T5.account_id INNER JOIN client AS T6 ON T5.client_id = T6.client_id WHERE T6.gender = 'male' AND T6.district_id = 4 AND T6.birth_date < CURDATE() AND T4.frequency = 'domestic')
SELECT T2.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC LIMIT 1
SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN ( SELECT account_id FROM account GROUP BY client_id HAVING AVG(amount) = ( SELECT MAX(AVG(amount)) FROM account GROUP BY client_id ) ) AS T3 ON T1.account_id = T3.account_id ORDER BY T2.birth_date LIMIT 1
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'W' AND T1.gender = 'Male'
SELECT DISTINCT client_id FROM disp WHERE type = 'Disponent'
SELECT account_id FROM account WHERE DATE(date) = '1997-01-01' AND status = 'A' ORDER BY amount ASC LIMIT 1
SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A' AND T2.date BETWEEN '1993-01-01' AND '1993-12-31' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1
SELECT COUNT(DISTINCT T2.client_id) FROM account AS T1 INNER JOIN disp AS T3 ON T3.account_id = T1.account_id INNER JOIN client AS T2 ON T3.client_id = T2.client_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.date BETWEEN DATE '1950-01-01' AND DATE '1959-12-31' AND T2.gender = 'F' AND T4.A2 = 'Slokolov'
SELECT account_id FROM account WHERE EXTRACT(YEAR FROM date) = 1995 ORDER BY date ASC LIMIT 1
SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date < '1997-01-01' AND T1.amount > 3000
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'
SELECT T2.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'C' AND T1.amount = 840 AND STRFTIME('%Y/%m/%d', T2.date) = '1998/10/14';
SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.date = '1994-08-25'
SELECT MAX(T3.amount) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.card_id = T3.card_id WHERE STRFTIME('%Y/%m/%d', T3.issued) = '1996/10/21'
SELECT T3.gender FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T2.date = ( SELECT MAX(T2.date) FROM account AS T2 INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A2 = 'North-West' ) ORDER BY T3.birth_date LIMIT 1
SELECT MIN(t2.amount) FROM account AS t1 JOIN trans AS t2 ON t1.account_id = t2.account_id WHERE t1.date = (SELECT MIN(date) FROM account AS t3 WHERE t3.district_id = t1.district_id AND t3.account_id = t1.account_id);
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'woman'
SELECT DISTINCT T5.disp_id  FROM client AS T1  JOIN account AS T2 ON T1.client_id = T2.district_id  JOIN `order` AS T3 ON T1.client_id = T3.account_id  JOIN trans AS T4 ON T2.account_id = T4.account_id  JOIN disp AS T5 ON T1.client_id = T5.client_id  WHERE T4.date = '1998-09-02' AND T4.amount = 5100
SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T2.district_id = T1.district_id WHERE T2.date BETWEEN '1996-01-01' AND '1996-12-31' AND T1.A2 = 'Litomerice'
SELECT T1.district_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'FEMALE' AND T1.birth_date = '1976-01-29'
SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T4.amount = 98832 AND T4.date = '1996-01-03'
SELECT T2.account_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Prague' LIMIT 1
SELECT CAST(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) AS percentage_of_male_clients FROM client WHERE district_id IN (     SELECT district_id     FROM district     WHERE A2 LIKE '%South Bohemia%' )
SELECT ((SELECT balance FROM (SELECT T1.balance FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'PRIJEM' ORDER BY T3.date, T1.date ASC LIMIT 1) AS T1) - (SELECT balance FROM (SELECT T1.balance FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'PRIJEM' ORDER BY T3.date DESC LIMIT 1) AS T1)) / (SELECT balance FROM (SELECT T1.balance FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'PRIJEM' ORDER BY T3.date DESC LIMIT 1) AS T1)) AS T1
SELECT COUNT(*) / COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C'
SELECT CAST(SUM(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100 AS percentage FROM loan WHERE amount < 100000
SELECT T1.account_id, T2.A2, T2.A5 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T3.date = T1.date WHERE T3.type LIKE 'V%' AND T3.operation = 'transfer' AND T1.date BETWEEN '1993-01-01' AND '1993-12-31'
SELECT a.account_id, t.frequency  FROM account a  JOIN disp d ON a.account_id = d.account_id  JOIN client c ON d.client_id = c.client_id  JOIN district di ON c.district_id = di.district_id  WHERE di.A4 = 'east Bohemia' AND a.date BETWEEN '1995-01-01' AND '2000-12-31'  GROUP BY a.account_id, t.frequency
SELECT T2.account_id, T2.date FROM district AS T1  JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Prachatice'
SELECT T3.district_id, T3.A2 FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = 4990
SELECT T2.district_id, T4.A7 FROM loan AS T1  INNER JOIN account AS T2 ON T2.account_id = T1.account_id  INNER JOIN district AS T4 ON T4.district_id = T2.district_id  WHERE T1.amount > 300000
SELECT L.loan_id, D.district_id, AVG(C.A11) FROM loan AS L JOIN account AS A ON L.account_id = A.account_id JOIN client AS C ON A.district_id = C.district_id JOIN district AS D ON A.district_id = D.district_id WHERE L.duration = 60 GROUP BY L.loan_id, D.district_id
SELECT T3.district_id, T2.A12  FROM loan AS T1  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.status = 'A' AND T1.account_id IN (     SELECT T4.account_id      FROM loan AS T1      INNER JOIN trans AS T2 ON T1.account_id = T2.account_id      INNER JOIN trans AS T3 ON T1.account_id = T3.account_id      INNER JOIN account AS T4 ON T1.account_id = T4.account_id      WHERE T2.balance > T3.balance )
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date LIKE '1993%' AND T2.A2 = 'Decin'
SELECT account_id FROM account WHERE frequency = 'MONTHLY'
SELECT T4.A2 FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' GROUP BY T4.A2 ORDER BY COUNT(*) DESC LIMIT 10
SELECT T2.district_id, T1.account_id, SUM(T1.amount) AS total_amount FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.`type` = 'W' AND T2.frequency = 'M' AND T1.date BETWEEN '1996-01-01' AND '1996-01-31' AND T1.bank = 'none' GROUP BY T2.district_id, T1.account_id ORDER BY total_amount DESC LIMIT 10;
SELECT COUNT(c.client_id) FROM client c JOIN account a ON c.client_id = a.district_id JOIN disp d ON a.account_id = d.account_id WHERE c.district_id = ( SELECT district_id FROM district WHERE A2 = 'South Bohemia' ) AND d.type = 'disp' AND d.account_id NOT IN ( SELECT t.account_id FROM trans t WHERE t.type = 'CRDOPEN' )
SELECT A2 FROM district ORDER BY A13 DESC LIMIT 1
SELECT AVG(amount) FROM loan INNER JOIN client ON loan.account_id = account.account_id WHERE client.gender = 'M'
SELECT T1.A3, T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.date LIKE '1996%' ORDER BY T2.amount DESC LIMIT 1
SELECT COUNT(DISTINCT t1.account_id) FROM account AS t1 INNER JOIN trans AS t2 ON t1.account_id = t2.account_id WHERE t2.`type` = 'CRI' AND t1.date BETWEEN '1996-01-01' AND '1996-12-31' GROUP BY t2.k_symbol ORDER BY COUNT(t2.k_symbol) DESC LIMIT 1
SELECT COUNT(t3.account_id) FROM account AS t1 INNER JOIN card AS t2 ON t1.account_id = t2.account_id INNER JOIN disp AS t3 ON t3.account_id = t2.disp_id WHERE t1.frequency = 'P' AND t2.type = 'credit' AND t3.type = 'disposal' AND t3.issued BETWEEN '2010-01-01' AND '2010-12-31' AND t1.balance < 0
SELECT COUNT(T1.loan_id) AS Total_loans FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'monthly' AND T1.amount >= 250000 AND T1.status = 'approved' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31'
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'Branch location 1'
Without constraints, this would involve multiple sub-queries, joined tables and calculations, which are not allowed in SQL. However, based on the provided information and the task given, we can form a few queries that can provide the relevant information:  To determine the district with the second highest number of crimes in 1995, we first need to count the crimes in each district in 1995. Then we need to get the second highest number of crimes. Finally, we need to join this with the clients and count the number of male clients in that district.  Assuming the 'Crime' table exists:  ```sql SELECT COUNT(*)  FROM district  WHERE district_id = (     SELECT district_id      FROM (         SELECT district_id, COUNT(*) AS crime_count          FROM crime          WHERE year = 1995          GROUP BY district_id          ORDER BY crime_count DESC          LIMIT 1,1     )      AS second_highest ) ```  To find the number of male clients in the aforementioned district:  ```sql SELECT COUNT(*)  FROM client  WHERE gender = 'male'  AND district_id = (     SELECT district_id      FROM (         SELECT district_id, COUNT(*) AS crime_count          FROM crime          WHERE year = 1995          GROUP BY district_id          ORDER BY crime_count DESC          LIMIT 1,1     )      AS second_highest ) ```  Remember that the structure and exact column names in the database are not specified. Adjust the queries accordingly based on the database's structure.
SELECT count(*) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'disponent'
SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'
SELECT DISTINCT T2.district_id FROM trans AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id WHERE T1.amount > 10000 AND YEAR(T1.date) = 1997
SELECT T1.loan_id FROM loan AS T1 INNER JOIN `order` AS T2 ON T1.loan_id = T2.loan_id WHERE T2.k_symbol = 'PISEK'
SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' INTERSECT SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior'
SELECT AVG(amount) FROM card AS t1 INNER JOIN disp AS t2 ON t1.disp_id = t2.disp_id INNER JOIN account AS t3 ON t3.account_id = t2.account_id WHERE t1.issued BETWEEN '2021-01-01' AND '2021-12-31' AND t3.date BETWEEN '2021-01-01' AND '2021-12-31'
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T3.client_id = T2.client_id INNER JOIN loan AS T4 ON T4.account_id = T1.account_id WHERE T4.date BETWEEN '1998-01-01' AND '1998-12-31' AND T4.status = 'A' AND T4.amount BETWEEN ( SELECT AVG(T4.amount) FROM loan AS T4 WHERE T4.date BETWEEN '1998-01-01' AND '1998-12-31' AND T4.status = 'A' ) AND ( SELECT AVG(T4.amount) FROM loan AS T4 WHERE T4.date BETWEEN '1998-01-01' AND '1998-12-31' AND T4.status = 'A' )
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T3.disp_id = T2.disp_id INNER JOIN loan AS T4 ON T4.account_id = T2.account_id WHERE T1.gender = 'F' AND T3.type = 'credit card' AND T4.status = 'A'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'female' AND T2.A2 = 'South Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Tabor'
SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T2.client_id = T4.client_id INNER JOIN district AS T5 ON T4.district_id = T5.district_id WHERE T5.A13 > 8000 AND T5.A13 <= 9000
SELECT COUNT(T1.trans_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.bank = 'AB' AND T2.district_id IN ( SELECT T3.district_id FROM district AS T3 WHERE T3.A2 = 'North Bohemia' )
SELECT T1.name FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'V'
The problem can be solved using SQL by joining the necessary tables and filtering out the relevant information. Here's the SQL query:  ``` SELECT avg(amount)  FROM trans  JOIN account ON trans.account_id = account.account_id  WHERE type = 'Crime' AND year(date) = 1995  AND district_id IN (     SELECT district_id      FROM account      WHERE year(date) >= 1997 AND district_id IN (         SELECT district_id          FROM district          WHERE A8 > 4000     ) ) ```  This SQL statement does the following: - Selects the average amount from the `trans` table. - It joins the `trans` table with the `account` table using `account_id`. - It filters the transactions to only include 'Crime' type transactions that were committed in 1995. - It further filters the transactions to only include those that occurred in regions where the number of crimes exceeds 4000 and the region has accounts that are opened starting from the year 1997. - It calculates the average amount of crimes committed in the relevant regions and years.
SELECT COUNT(DISTINCT card.card_id) FROM card AS card INNER JOIN disp AS disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic'
SELECT COUNT(client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl. m. Praha' AND T1.gender = 'Male'
SELECT CAST(COUNT(CASE WHEN T2.issued < '1998-01-01' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.card_id) AS "Percantage" FROM card AS T1 INNER JOIN disp AS T2 ON T2.card_id = T1.card_id WHERE T1.type = 'Gold'
SELECT T1.name FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id ORDER BY T4.amount DESC LIMIT 1
SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T3.district_id = T2.district_id WHERE T3.A2 = 'Kysucke Nadcik' AND T1.date LIKE '1995%' AND T1.status = 'C'
SELECT district_id FROM account AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT type FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 3356) AND type = 'withdrawal' AND operation = 'cash'
SELECT COUNT(T2.account_id) AS c FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'WEEKLY' AND T2.amount < 200000
SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 13539
SELECT a.A2 FROM district AS a WHERE a.district_id = ( SELECT t1.district_id FROM client AS t1 INNER JOIN account AS t2 ON t1.client_id = t2.district_id WHERE t2.account_id = 3541 )
SELECT T1.A2  FROM district AS T1  JOIN account AS T2 ON T2.district_id = T1.district_id  JOIN loan AS T3 ON T3.account_id = T2.account_id  WHERE T3.status = 'finished with no problems'  GROUP BY T1.A2  ORDER BY COUNT(T3.loan_id) DESC  LIMIT 1
SELECT T1.name FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.trans_id = 32423
SELECT t.trans_id, t.account_id, t.type, t.operation, t.amount, t.balance, t.k_symbol, t.bank  FROM account a  JOIN disp d ON a.account_id = d.account_id  JOIN client c ON c.client_id = d.client_id  JOIN district r ON r.district_id = c.district_id  JOIN trans t ON t.account_id = a.account_id  WHERE r.district_id = 5
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik' )
SELECT client_id FROM disp WHERE type = 'junior' AND issued > '1996-01-01'
Without considering constraints, your SQL statement might look like this:  ```sql SELECT COUNT(c1.client_id) AS female_percentage  FROM client c1 JOIN (SELECT client_id        FROM client c2       JOIN account a ON c2.client_id = a.client_id       JOIN district d ON a.district_id = d.district_id       WHERE d.A10 > 10000) t ON c1.client_id = t.client_id WHERE c1.gender = 'female'; ```  To properly adjust the SQL and consider all constraints, it would look like this:  ```sql SELECT ROUND(COUNT(CASE WHEN c1.gender = 'female' THEN 1 END) * 100.0 / COUNT(*), 2) AS female_percentage  FROM client c1 JOIN account a ON c1.client_id = a.client_id JOIN district d ON a.district_id = d.district_id WHERE d.A10 > 10000; ```  This SQL calculates the percentage of clients who opened their accounts in a district with an average salary over 10000 and are women. It joins the client table with the account and district tables, filters for clients with a salary over 10000, and then counts the number of female clients. It calculates the percentage of these clients relative to all clients with a salary over 10000.   Please note that the 'female' field should be in your client table in order for this query to work properly. Otherwise, please adjust the gender filter part of the query accordingly.
SELECT AVG(T2.amount) / AVG(T1.amount) AS growth_rate FROM loan AS T1 JOIN client AS T2 ON T1.account_id = T2.district_id WHERE T2.gender = 'M' AND T1.date BETWEEN '1996-01-01' AND '1997-12-31'
SELECT COUNT(T2.trans_id) FROM `order` AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.bank_to = 'BAK' AND T2.type = 'W' AND T2.date > '1995-12-31'
SELECT COUNT(CASE WHEN T2.A2 = 'Bohemia' THEN T3.loan_id ELSE NULL END) - COUNT(CASE WHEN T2.A2 = 'East' THEN T3.loan_id ELSE NULL END) AS difference FROM district AS T1 INNER JOIN account AS T3 ON T1.district_id = T3.district_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id INNER JOIN disp AS T5 ON T3.account_id = T5.account_id INNER JOIN client AS T6 ON T5.client_id = T6.client_id INNER JOIN district AS T2 ON T6.district_id = T2.district_id WHERE YEAR(T4.date) = 1996
SELECT COUNT(disposition_type) AS Count, disposition_type FROM (SELECT T1.disp_id, T2.type AS disposition_type FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id BETWEEN 1 AND 10) AS T3 GROUP BY disposition_type
SELECT SUM(amount) FROM trans WHERE account_id = 3 AND TYPE = 'debit'
SELECT T1.birth_date FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130
SELECT count(DISTINCT account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNERDISP' AND T3.operation = 'WITHDRAWAL'
SELECT T.amount FROM trans AS T WHERE T.account_id = ( SELECT D.account_id FROM disp AS D WHERE D.client_id = 992 )
SELECT SUM(trans_amount) FROM trans WHERE account_id = (SELECT account_id FROM account WHERE client_id = 4 AND transaction_id = 851)
SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9
SELECT SUM(T2.amount) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 617 AND T2.date >= '1998-01-01' AND T2.date <= '1998-12-31'
SELECT DISTINCT T1.client_id  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN account AS T3 ON T2.district_id = T3.district_id  WHERE T1.gender = 'Male' AND T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A4 LIKE 'East Bohemia'
SELECT T1.client_id FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'FEMALE' ORDER BY T2.amount DESC LIMIT 3
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND birth_date BETWEEN '1974-01-01' AND '1976-12-31'  AND district_id IN (   SELECT district_id    FROM account    WHERE account_id IN (     SELECT account_id      FROM loan      WHERE status = 'paid' AND amount > 4000   ) )
SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Beroun' AND T2.date > '1996-12-31'
SELECT COUNT(T1.gender) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'JUNIOR'
To answer the question, we first need to find the total number of female clients, and then we need to count the number of female clients who have accounts at the Prague branch. Finally, we can divide the number of female clients with the total number of female clients to get the proportion.  ```sql SELECT      COUNT(*) / COUNT(DISTINCT client_id) AS proportion FROM      client c  JOIN      disp d ON c.client_id = d.client_id  JOIN      account a ON d.account_id = a.account_id  JOIN      district dist ON a.district_id = dist.district_id  WHERE      c.gender = 'female'      AND dist.A2 = 'Prague' ```
SELECT CAST(COUNT(T1.client_id) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'M' AND T2.type = 'OWNER'
SELECT COUNT(T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'Male' AND T2.frequency = 'Weekly'
SELECT account_id FROM loan WHERE DATE(date) < '1997-01-01' AND duration > 24 ORDER BY amount ASC LIMIT 1
SELECT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T1.birth_date = ( SELECT MAX(birth_date) FROM client AS T1 WHERE T1.gender = 'F' ) ORDER BY T1.birth_date ASC LIMIT 1
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date = '1920-01-01' AND T2.A2 = 'East Bohemia'
SELECT COUNT(DISTINCT T2.account_id)  FROM loan AS T1  JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T1.payments = 12
SELECT AVG(l.amount) FROM loan AS l JOIN trans AS t ON l.account_id = t.account_id WHERE l.status = 'running' AND t.type = 'C'
SELECT A.account_id , A.district_id FROM account AS A JOIN disp AS D ON A.account_id = D.account_id JOIN card AS C ON C.disp_id = D.disp_id WHERE C.type = 'permanent' OR C.type = 'domestic'
SELECT T1.client_id, T2.birth_date FROM client AS T1 INNER JOIN account AS T3 ON T1.client_id = T3.district_id WHERE T1.gender = 'F' AND T3.frequency = 'M'
SELECT T1.bond_type  FROM bond AS T1  WHERE T1.bond_id IN (    SELECT T2.bond_id    FROM connected AS T2    GROUP BY T2.bond_id    ORDER BY COUNT(*) DESC    LIMIT 1  )
SELECT count(*) FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'Cl' AND molecule.label IS NOT NULL
SELECT AVG(   (SELECT COUNT(*) FROM atom WHERE molecule_id = molecule.molecule_id AND element = 'O') ) FROM molecule
SELECT AVG(num_single_bonded) FROM (SELECT COUNT(b.bond_id) AS num_single_bonded, m.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = 'single' GROUP BY m.molecule_id) AS result
SELECT COUNT(T1.molecule_id)  FROM molecule AS T1  JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.element = 'Na' AND T1.molecule_id IN (      SELECT T3.molecule_id      FROM connected AS T3      JOIN atom AS T4 ON T3.atom_id = T4.atom_id      WHERE T4.element <> 'C' )
SELECT DISTINCT a.molecule_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element IN ('C', 'O') AND b.bond_type = 'triple'  GROUP BY a.molecule_id  HAVING COUNT(DISTINCT a.element) = 3
SELECT CAST(COUNT(T1.atom_id) AS REAL) * 100 / COUNT(T2.molecule_id) FROM ATOM AS T1 INNER JOIN CONNECTED AS T3 ON T1.atom_id = T3.atom_id INNER JOIN BOND AS T4 ON T3.bond_id = T4.bond_id INNER JOIN Molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'C' AND T4.bond_type = 'double'
SELECT COUNT(DISTINCT bond_id) FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'Triple')
SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element != 'B'
SELECT COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.molecule_id IN (SELECT DISTINCT T1.molecule_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = 'carcinogenic' ORDER BY T1.molecule_id LIMIT 100)
SELECT DISTINCT t1.molecule_id FROM molecule AS t1 JOIN atom AS t2 ON t1.molecule_id = t2.molecule_id WHERE t2.element = 'Si'
SELECT T.element FROM atom AS T JOIN connected AS C ON T.atom_id = C.atom_id JOIN bond AS B ON B.bond_id = C.bond_id WHERE B.label = 'TR004_8_9'
SELECT T2.element FROM connected AS T1  JOIN atom AS T2 ON T1.atom_id = T2.atom_id  JOIN bond AS T3 ON T1.bond_id = T3.bond_id  WHERE T3.bond_type = 'double'
SELECT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'H' GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1))
SELECT bond_type FROM bond WHERE bond_id IN ( SELECT bond_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'Te' ) )
SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'single'
SELECT DISTINCT a.atom_id, a.element FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.label NOT IN ('carcinogenic')  Note: This SQL query first joins the atom, connected, and molecule tables based on their relationships. It then filters the result to exclude any rows where the molecule is labeled as 'carcinogenic' using the `WHERE` clause. Finally, it selects the distinct atom IDs and elements from the resulting set.
SELECT T1.element FROM ATOM AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label IS NOT NULL AND T1.element NOT IN ('C') GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT DISTINCT T1.bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20'
SELECT T1.bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'Tin'
SELECT COUNT(T3.atom_id) FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.bond_id = T3.bond_id JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'I' INTERSECT SELECT COUNT(T3.atom_id) FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.bond_id = T3.bond_id JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'S'
SELECT atom.atom_id, atom.molecule_id  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN bond ON bond.bond_id = connected.bond_id  WHERE bond.bond_type = 'triple'
Sure, here's the SQL query to identify all atoms that are connected to the atoms of the TR181 molecule: ```sql SELECT DISTINCT a.*  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN atom a2 ON c.atom_id2 = a2.atom_id  JOIN molecule m ON m.molecule_id = a.molecule_id  WHERE m.label = 'TR181' ``` This query first joins the `atom` and `connected` tables on `atom_id`, then joins the result with the `atom` table on `atom_id2` to get the connected atoms. It then joins this result with the `molecule` table on `molecule_id` to filter for the TR181 molecule. Finally, it selects distinct atoms by using the `DISTINCT` keyword and selecting all columns from the `atom` table.
SELECT DISTINCT    CASE      WHEN count(CASE WHEN a.element = 'F' THEN a.element ELSE NULL END) = 0 THEN 'Yes'     ELSE 'No'   END AS NoFluorineMolecules FROM    (     SELECT        a.molecule_id      FROM        atom a      WHERE        a.element = 'C'      GROUP BY        a.molecule_id   ) AS C_atoms;
SELECT CAST(COUNT(CASE WHEN T1.label LIKE '%cancer%' THEN T2.molecule_id END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = 'triple'
SELECT DISTINCT atom.element FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_type = 'Metal-Ligand' AND atom.molecule_id = 'TR000'  ORDER BY atom.element ASC LIMIT 3
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id AND a.molecule_id = 'TR001' JOIN bond b ON b.bond_id = c.bond_id AND b.molecule_id = 'TR001' WHERE b.bond_id = 'TR001_2_6'
SELECT COUNT(T1.molecule_id) - COUNT(T2.molecule_id) FROM ( SELECT molecule_id FROM molecule WHERE is_carcinogenic = 1 ) AS T1 LEFT JOIN ( SELECT molecule_id FROM molecule WHERE is_carcinogenic = 0 ) AS T2 ON T1.molecule_id = T2.molecule_id
SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = (SELECT atom_id FROM atom WHERE element = '2' AND molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR000_2'))
SELECT t2.label FROM connected AS t1  JOIN bond AS t2 ON t1.bond_id = t2.bond_id  JOIN molecule AS t3 ON t2.molecule_id = t3.molecule_id  WHERE t2.bond_type = 'double'  GROUP BY t3.label  ORDER BY COUNT(t2.bond_id) DESC  LIMIT 5
SELECT CAST(COUNT(CASE WHEN B.bond_type = 'double' THEN 1 END) AS REAL) * 100 / COUNT(DISTINCT B.bond_id) AS percentage FROM bond B WHERE B.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR008')
SELECT (SUM(CASE WHEN t.label LIKE '%cancer%' THEN 1 ELSE 0 END) * 100.0) / COUNT(t.molecule_id) AS percentage FROM molecule t
SELECT CAST(SUM(CASE WHEN atom.element = 'H' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'HBond')
SELECT bond_type FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = 'TR000' )
SELECT e.element  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN atom a ON c.atom_id = a.atom_id  WHERE m.label = 'TR060'
SELECT T1.bond_type, COUNT(*) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(*) DESC LIMIT 1
Sure, here is a SQL query that will list the top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order:  ``` SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = 'Single' AND m.label NOT IN (SELECT label FROM molecule WHERE label LIKE '%carcinogenic%') GROUP BY m.label ORDER BY COUNT(DISTINCT a1.atom_id) + COUNT(DISTINCT a2.atom_id) DESC LIMIT 3; ```  Here's how it works:  1. The query starts by joining the `molecule`, `connected`, `bond`, `atom`, and `atom` tables together using the appropriate join conditions. 2. It then filters for rows where the bond type is 'Single'. 3. It excludes molecules that are labeled as 'carcinogenic' by using a subquery in the `WHERE` clause. 4. It groups the results by molecule label to count the number of distinct atoms connected to each molecule. 5. It orders the results in descending order based on the count of distinct atoms (added together for each pair of atoms connected by a single bond), so the molecules with the most atoms connected are listed first. 6. Finally, the `LIMIT 3` clause ensures that only the top three molecules are returned.
SELECT b1.bond_type FROM bond b1 JOIN connected c1 ON b1.bond_id = c1.bond_id JOIN molecule m ON c1.molecule_id = m.molecule_id WHERE m.label = 'TR006' ORDER BY b1.bond_type ASC LIMIT 2
SELECT COUNT(T2.bond_id) FROM molecule AS T1  JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id  JOIN atom AS T3 ON T3.atom_id = T2.atom_id  WHERE T3.atom_id = '12' AND T1.label = 'TR009'
SELECT COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id INNER JOIN bond AS T4 ON T4.bond_id = T2.bond_id WHERE T3.element = 'Br' AND T4.bond_type = 'carcinogenic'
SELECT bond_type FROM bond WHERE bond_id = 'TR001_6_9'
SELECT t3.label, t4.is_carcinogenic FROM atom AS t1 JOIN connected AS t2 ON t1.atom_id = t2.atom_id JOIN molecule AS t3 ON t2.molecule_id = t3.molecule_id JOIN molecule_info AS t4 ON t3.molecule_id = t4.molecule_id WHERE t1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'Triple')
SELECT COUNT(*) FROM connected WHERE atom_id = 19 AND atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 19))
SELECT T3.element  FROM molecule AS T1  JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id  JOIN atom AS T3 ON T3.atom_id = T2.atom_id  WHERE T1.label = 'TR004'
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  WHERE m.molecule_id NOT IN (     SELECT b.molecule_id      FROM bond b      WHERE b.bond_type = 'carcinogenic' )
SELECT a.atom_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE a.atom_id BETWEEN '21' AND '25' AND m.label = 'carcinogenic'
SELECT T1.molecule_id FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'P' GROUP BY T1.molecule_id HAVING COUNT(*) = (SELECT COUNT(*) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.molecule_id = T2.molecule_id AND T3.element = 'N')
SELECT T.label FROM molecule AS T ORDER BY ( SELECT COUNT(DISTINCT bond_id) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = 'double' ) AND T1.molecule_id = T.molecule_id ) DESC LIMIT 1
SELECT AVG(T1.number_bonds) FROM ( SELECT connected.atom_id ,  COUNT(*) AS number_bonds FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'I' GROUP BY connected.atom_id ) AS T1
SELECT bond_type FROM bond AS bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id = '45' OR atom_id2 = '45')
SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IS NULL
SELECT DISTINCT T1.atom_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T3.bond_id = T2.bond_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.label = 'TR447' AND T3.bond_type = 'triple'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR144_8_19' )
SELECT m.label, COUNT(b.bond_id) as num_double_bonds FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE m.molecule_id IN (     SELECT b.molecule_id     FROM bond b     WHERE b.bond_type = 'double' ) GROUP BY m.molecule_id, m.label ORDER BY num_double_bonds DESC LIMIT 1
SELECT `element` FROM `atom` WHERE `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` LIKE '%carcinogenic%') GROUP BY `element` ORDER BY COUNT(`element`) ASC LIMIT 1
SELECT DISTINCT a.element  FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'Pb'
SELECT DISTINCT a1.element AS Atom1, a2.element AS Atom2  FROM atom a1  JOIN connected c ON a1.atom_id = c.atom_id  JOIN atom a2 ON a2.atom_id = c.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = 'Triple'
SELECT COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT bond_id) FROM bond) AS percentage FROM ( SELECT bond_id, SUM(CASE WHEN atom.element IS NULL THEN 1 ELSE 0 END) + SUM(CASE WHEN bond_type IS NULL THEN 1 ELSE 0 END) AS missing_elements FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element IS NOT NULL AND bond.bond_type IS NOT NULL GROUP BY bond_id ORDER BY missing_elements DESC LIMIT 1 ) AS t
SELECT CAST(SUM(CASE WHEN T1.bond_type = 'single' AND T2.element = 'carcinogenic' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS proportion FROM bond AS T1 JOIN connected AS T3 ON T1.bond_id = T3.bond_id JOIN atom AS T2 ON T3.atom_id = T2.atom_id
SELECT COUNT(DISTINCT a.atom_id) FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element IN ('C', 'H')
SELECT b.atom_id2  FROM connected b  JOIN atom a ON b.atom_id2 = a.atom_id  WHERE a.element = 'sulfur'
SELECT t1.bond_type FROM bond AS t1 JOIN connected AS t2 ON t1.bond_id = t2.bond_id JOIN atom AS t3 ON t2.atom_id = t3.atom_id WHERE t3.element = "Tin"
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'Single'
SELECT COUNT(DISTINCT T2.atom_id) FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T1.bond_id = T3.bond_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T2.element IN ('P', 'Br') AND T3.bond_type = 'triple'
SELECT T1.bond_id FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'C'
SELECT T.molecule_id  FROM (      SELECT molecule_id      FROM connected      WHERE bond_id = 'single'  ) AS T  LEFT JOIN (      SELECT T1.molecule_id      FROM (          SELECT bond_id, molecule_id          FROM bond          WHERE bond_type = 'carcinogenic'      ) AS T1      JOIN connected AS T2 ON T1.bond_id = T2.bond_id  ) AS T1 ON T.molecule_id = T1.molecule_id  WHERE T1.molecule_id IS NULL
SELECT CAST(SUM(CASE WHEN T1.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T2.bond_type = 'single'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT T1.molecule_id FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id  =  T2.molecule_id WHERE T2.atom_id IN (SELECT atom_id FROM atom WHERE element  =  'C') GROUP BY T1.molecule_id HAVING COUNT(DISTINCT T2.atom_id) >= 2
SELECT DISTINCT m.label FROM molecule AS m JOIN connected AS c ON m.molecule_id = c.molecule_id JOIN atom AS a ON c.atom_id = a.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030' AND a.element IN ('C', 'H', 'O') AND b.bond_type = 'C'
SELECT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR050')
SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT bond_id)  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON connected.atom_id = atom.atom_id  WHERE atom.element = 'iodine'
SELECT T2.element, CASE WHEN COUNT(DISTINCT T2.molecule_id) > COUNT(DISTINCT T3.molecule_id) THEN 'Carcinogenic' ELSE 'Non-carcinogenic' END AS result  FROM connected AS T1  JOIN atom AS T2 ON T1.atom_id = T2.atom_id  JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id  WHERE T2.element = 'Ca'  GROUP BY T2.element
SELECT COUNT(DISTINCT T2.element)  FROM bond AS T1  JOIN connected AS T3 ON T1.bond_id = T3.bond_id  JOIN atom AS T2 ON T3.atom_id = T2.atom_id  WHERE T1.bond_id = 'TR001_1_8' AND T2.element IN ('Cl', 'C')  GROUP BY T2.element
SELECT DISTINCT t1.molecule_id  FROM connected AS t1  JOIN bond AS t2 ON t2.bond_id = t1.bond_id  JOIN atom AS t3 ON t3.atom_id = t1.atom_id  JOIN molecule AS t4 ON t4.molecule_id = t1.molecule_id  WHERE t4.label LIKE '%non-carcinogenic%' AND t3.element = 'C' AND t2.bond_type = 'triple'
SELECT SUM(CASE WHEN a.element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.molecule_id) as percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'carcinogenic'
SELECT DISTINCT      atom.element  FROM      atom  INNER JOIN      connected  ON      atom.atom_id = connected.atom_id  WHERE      molecule_id = 'TR001' AND      atom.element IS NOT NULL
SELECT DISTINCT T3.molecule_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.bond_type = 'double'
SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM bond WHERE bond_type = 'triple') AND bond_id IN (SELECT bond_id FROM connected WHERE atom_id2 IN (SELECT atom_id FROM bond WHERE bond_type = 'triple'));
SELECT e.element  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_id = 'TR005_16_26'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = 'single'
SELECT bond.bond_type FROM bond WHERE bond.bond_id = 'TR001_10_11'
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'Triple bond type molecules' AND T1.bond_type = 'carcinogenic'
SELECT a.element FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.atom_id = 4 AND m.label IN (   SELECT DISTINCT m.label    FROM connected c    JOIN molecule m ON c.molecule_id = m.molecule_id    JOIN bond b ON c.bond_id = b.bond_id    WHERE b.bond_type = 'carcinogenic' )
SELECT      T3.label,     SUM(         CASE              WHEN T1.element = 'H' THEN 1              ELSE 0          END     ) / COUNT(*) AS ratio FROM      atom AS T1 JOIN      connected AS T2 ON T1.atom_id = T2.atom_id JOIN      molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE      T3.molecule_id = 'TR006'
Based on the given database schema, it seems to be a molecular database. To identify whether the chemical compound that contains Calcium is carcinogenic, we can use the following SQL query:  SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'Ca'  This query will return the labels of all the molecules that contain the element Calcium.  However, this query does not provide any information about whether the molecules are carcinogenic or not. To add that information, we would need to know what information is stored in other tables or databases that could be connected to the molecular information.   Without additional information, the only thing we can determine is that there is at least one Calcium atom in each molecule that could potentially be carcinogenic.
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'Tellurium'
SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001_10_11'
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM molecule) AS percent  FROM molecule  WHERE molecule_id IN (     SELECT m.molecule_id      FROM molecule m      JOIN bond b ON m.molecule_id = b.molecule_id      JOIN connected c ON b.bond_id = c.bond_id      GROUP BY m.molecule_id      HAVING COUNT(DISTINCT c.bond_id) = 3 );
SELECT      COUNT(*) AS total_count,     COUNT(DISTINCT CASE WHEN bond.bond_type = 'double' THEN connected.atom_id ELSE NULL END) AS double_bond_count FROM      molecule  JOIN      atom ON molecule.molecule_id = atom.molecule_id JOIN      connected ON atom.atom_id = connected.atom_id JOIN      bond ON connected.bond_id = bond.bond_id WHERE      molecule.label = 'TR047'
1. We need to determine if the molecule that contains atom TR001_1 is carcinogenic. 2. The CARCINOGENIC table contains a column called IS_CARCINOGENIC that we need to use to identify if a molecule is carcinogenic. 3. We can use the molecule_id from the atom table to connect to the molecule table and find the molecule that contains atom TR001_1. 4. We can then use the molecule_id to connect to the connected table and find the connected atoms. 5. We can then use the bond_id to connect to the bond table and find the bond type for each connected atom pair. 6. We can then check the bond_type to see if it matches any of the carcinogenic bond types. 7. If a bond_type matches a carcinogenic bond type, we know that the molecule is carcinogenic.  Here's the SQL code to find if the molecule that contains atom TR001_1 is carcinogenic:  ```sql SELECT M.label AS molecule_label FROM molecule M JOIN atom A ON M.molecule_id = A.molecule_id JOIN connected C ON A.atom_id = C.atom_id JOIN bond B ON C.bond_id = B.bond_id WHERE A.atom_id = 'TR001_1' AND B.bond_type IN ('carcinogenic') ```  This SQL code will select the molecule label where the atom id is 'TR001_1' and the bond type is 'carcinogenic'. If the number of rows returned by the query is greater than 0, then the molecule is carcinogenic.
SELECT MAX(atom.molecule_id) AS molecule_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE connected.atom_id IN      (SELECT atom_id      FROM atom      WHERE element IN           (SELECT element           FROM atom           WHERE molecule_id = 'TR151'           AND element IS NOT NULL)      AND molecule_id = 'TR151'      AND element IS NOT NULL) AND connected.molecule_id IN      (SELECT molecule_id      FROM molecule      WHERE label = 'carcinogenic')
SELECT DISTINCT a.element  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN molecule m ON c.molecule_id = m.molecule_id  WHERE m.label = 'TR151'
SELECT COUNT(DISTINCT a.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element NOT IN ('H', 'O', 'N', 'C', 'F', 'Si', 'P', 'S', 'Cl', 'Br', 'I')
SELECT DISTINCT a.atom_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050' AND a.element = 'Carbon'
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label LIKE '%carcinogenic%'
SELECT B.bond_id  FROM bond AS B  JOIN connected AS C1 ON B.bond_id = C1.bond_id  JOIN connected AS C2 ON B.bond_id = C2.bond_id AND C1.atom_id <> C2.atom_id JOIN atom AS A1 ON C1.atom_id = A1.atom_id  JOIN atom AS A2 ON C2.atom_id = A2.atom_id  WHERE A1.element = 'C' AND A2.element = 'C' AND B.bond_type = 'double'
SELECT COUNT(*) FROM `atom` WHERE `element` = 'H' AND `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = 'carcinogenic compound')
SELECT molecule_id FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T3.atom_id = T2.atom_id JOIN bond AS T4 ON T4.bond_id = T2.bond_id WHERE T3.element = 'TR00_1' AND T4.bond_type = 'TR00_1_2'
SELECT a.element  FROM atom a  WHERE a.element = 'C' AND a.molecule_id NOT IN (   SELECT m.molecule_id    FROM molecule m    JOIN connected c ON m.molecule_id = c.molecule_id    JOIN atom a1 ON c.atom_id = a1.atom_id AND c.atom_id2 = a1.atom_id    JOIN atom a2 ON c.atom_id = a2.atom_id AND c.atom_id2 = a2.atom_id    JOIN bond b ON c.bond_id = b.bond_id    WHERE b.bond_type LIKE 'carcinogenic%' )
SELECT    (COUNT(DISTINCT T1.molecule_id) / COUNT(DISTINCT T2.molecule_id)) * 100 AS percentage FROM    connected AS T1    JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id    JOIN atom AS T3 ON T1.atom_id = T3.atom_id    JOIN bond AS T4 ON T1.bond_id = T4.bond_id  WHERE    T3.element = 'H'
SELECT (CASE WHEN COUNT(*) > 0 THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END)  FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR124' AND atom.element = 'C'
SELECT atom_id FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR186')
SELECT T3.bond_type FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.label = 'TR007_4_19'
SELECT element FROM `atom` WHERE molecule_id = ( SELECT molecule_id FROM `bond` WHERE bond_id = 'TR001_2_4' )
SELECT COUNT(*) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T3.atom_id = T2.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T4.label = 'TR006' AND T1.bond_type = 'double'
SELECT DISTINCT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'C' AND T1.label LIKE '%cancer%'
SELECT T2.molecule_id, T3.element AS atom1, T4.element AS atom2, T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T3.atom_id = T1.atom_id INNER JOIN atom AS T4 ON T4.atom_id = T1.atom_id2 WHERE T2.bond_type = 'single'
SELECT DISTINCT m.label  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  JOIN bond b ON m.molecule_id = b.molecule_id  JOIN connected c ON m.molecule_id = c.molecule_id  WHERE b.bond_type = 'triple'
SELECT DISTINCT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'
SELECT COUNT(*)  FROM connected  WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'Cl')
SELECT atom_id  FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR346'))
SELECT COUNT(b1.molecule_id) AS count  FROM bond b1  JOIN bond b2 ON b1.molecule_id = b2.molecule_id  WHERE b1.bond_type = 'double'  AND b2.bond_type = 'double'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T3.atom_id = T2.atom_id WHERE T3.element = 'S' EXCEPT SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T3.atom_id = T2.atom_id WHERE T3.element = 'S' JOIN bond AS T4 ON T4.bond_id = T2.bond_id AND T4.bond_type = 'double'
SELECT T1.label, T2.bond_type FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_2_4'
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR005'
SELECT count(T1.bond_id) AS number_of_single_bonds FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = 'single'
SELECT molecule.molecule_id FROM molecule JOIN connected ON molecule.molecule_id = connected.molecule_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl' AND molecule.label = 'carcinogenic';
SELECT DISTINCT m.molecule_id, m.label FROM molecule AS m JOIN connected AS c ON m.molecule_id = c.molecule_id JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'c' EXCEPT SELECT DISTINCT m.molecule_id, m.label FROM molecule AS m JOIN connected AS c ON m.molecule_id = c.molecule_id JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 'c' AND m.label LIKE '%carcinogen%'
Sure, I can help you with that. Here's the SQL query to calculate the percentage of carcinogenic molecules that contain the Chlorine element: ``` SELECT COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(molecule_id) FROM molecule) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'Cl' AND m.label LIKE 'carcinogenic%' ``` In this query, we first join the `molecule`, `atom`, `connected`, and `bond` tables on their appropriate foreign keys. We then use a `WHERE` clause to filter out molecules that do not contain the Chlorine element. The `LIKE` operator is used to filter for molecules with the label 'carcinogenic'. Finally, we use the `COUNT(DISTINCT m.molecule_id)` and `COUNT(molecule_id)` functions to calculate the total number of carcinogenic molecules and the total number of molecules respectively. We then divide the number of carcinogenic molecules containing Chlorine by the total number of molecules and multiply by 100 to get the percentage.
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_3_4'
SELECT T2.bond_type FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2';
SELECT molecule_id FROM connected WHERE atom_id IN ('TR000_2', '2_4')
SELECT T1.element  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id  WHERE T1.atom_id = 'TR000_1'
SELECT CASE             WHEN M.label LIKE '%carcinogenic%' THEN 'Yes'             ELSE 'No'         END AS is_carcinogenic  FROM molecule M WHERE M.molecule_id = 'TR000'
SELECT      COUNT(*) * 1.0 / (SELECT COUNT(*) FROM `atom`) AS percentage FROM      atom WHERE      atom_id NOT IN (         SELECT              atom_id         FROM              connected          JOIN              bond ON connected.bond_id = bond.bond_id         WHERE              bond_type <> 'single'     )
SELECT COUNT(DISTINCT T1.molecule_id) AS num FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'Nitrogen'
SELECT M.label FROM connected C JOIN atom A ON A.atom_id = C.atom_id JOIN bond B ON B.bond_id = C.bond_id JOIN molecule M ON M.molecule_id = A.molecule_id WHERE A.element = 'S' AND B.bond_type = 'double'
SELECT T1.molecule_id FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5
SELECT DISTINCT a.element  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE m.label = 'TR024' AND b.bond_type = 'double'
SELECT t.molecule_id, COUNT(t1.atom_id)  FROM connected t  JOIN atom t1 ON t.atom_id = t1.atom_id  WHERE t1.element IN ('C', 'H', 'O', 'N', 'S')  GROUP BY t.molecule_id  ORDER BY COUNT(t1.atom_id) DESC  LIMIT 1
SELECT      COUNT(CASE WHEN connected.atom_id IS NOT NULL AND connected.atom_id2 IS NOT NULL THEN 1 END) / COUNT(molecule_id) * 100 AS 'Percentage of carcinogenic molecules with triple bonded Hidrogen atoms' FROM      connected  JOIN      atom ON connected.atom_id = atom.atom_id  WHERE      atom.element = 'H'  AND      bond.bond_type = 'triple' JOIN      molecule ON connected.molecule_id = molecule.molecule_id  WHERE      molecule.label = 'Carcinogenic';
SELECT COUNT(DISTINCT M.molecule_id) FROM molecule M  JOIN connected C ON M.molecule_id = C.molecule_id JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE (A1.element = 'C' AND A2.element = 'C') AND (A1.element = 'H' OR A2.element = 'H')
SELECT COUNT(DISTINCT c.molecule_id)  FROM connected AS c  JOIN molecule AS m ON c.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND c.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'Single')
SELECT COUNT(T1.atom_id)  FROM connected AS T1  JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  JOIN atom AS T3 ON T1.atom_id = T3.atom_id  WHERE T2.label = 'TR008' AND T3.element = 'C'
SELECT DISTINCT T2.element FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id JOIN bond AS T3 ON T3.bond_id = T1.bond_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.label <> 'Carcinogenic' AND T1.atom_id = 'TR004_7'
SELECT COUNT(DISTINCT T3.molecule_id) AS 'total_molecules' FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'O' AND T3.bond_type = 'double'
SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1  JOIN connected AS T2 ON T1.bond_id = T2.bond_id  WHERE T1.bond_type = 'triple'  AND T2.atom_id IN (     SELECT T1.atom_id FROM connected AS T1      JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id      JOIN atom AS T3 ON T1.atom_id = T3.atom_id      WHERE T3.element IN ('H') )
SELECT element, bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule_id = 'TR016';
SELECT a1.atom_id FROM atom a1 JOIN connected c1 ON a1.atom_id = c1.atom_id JOIN bond b1 ON c1.bond_id = b1.bond_id WHERE b1.bond_type = 'double' AND a1.element = 'C' AND a1.molecule_id = 'TR012'
SELECT atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'O' AND bond_type = 'carcinogenic'
SELECT T1.id, T1.name, T1.artist, T1.flavor_text, T1.text  FROM cards AS T1  WHERE T1.has_foil = 1 AND T1.converted_mana_cost > 6 AND T1.toughness > 6
SELECT name FROM cards WHERE hasNonFoil = 1 AND hasFoil = 0
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.text LIKE "%costs more converted mana than" AND T2.type LIKE 'face'
SELECT DISTINCT T1.id, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN edhrec_rankings AS T3 ON T1.uuid = T3.uuid WHERE T3.ranking < 100 AND T2.format = 'commander' AND YEAR(T2.date) = 2015
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic rarity' AND T2.format = 'gladiator' AND T2.status = 'banned'
SELECT status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.type = 'artifact' AND cards.side = ''
SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL AND T2.format = 'Commander'
SELECT text, t2.name  FROM cards AS t1  INNER JOIN rulings AS t2 ON t1.uuid = t2.uuid  WHERE t1.artist = 'Stephen Daniel'
SELECT name, number FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s';
SELECT MAX(T1.name), MAX(T1.artist) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid
SELECT language FROM foreign_data WHERE name = 'Annul' AND number = '29'
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(SUM(IIF(LANGUAGE = 'Chinese Simplified', 1, 0)) AS REAL) * 100 / COUNT(LANGUAGE) AS Percentage FROM foreign_data
SELECT T1.name, COUNT(T2.uuid) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.code IN (SELECT setCode FROM set_translations WHERE language = 'Italian') GROUP BY T1.name
SELECT COUNT(DISTINCT TYPE) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
SELECT COUNT(id) FROM cards WHERE power = 'infinity'
SELECT type FROM cards WHERE name = 'Duress'
SELECT T3.borderColor FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T2.name = "Ancestor's Chosen"
SELECT T3.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T2.name = 'Ancestor''s Chosen' AND T2.language = 'en'
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code INNER JOIN cards AS T3 ON T2.code = T3.setcode WHERE T3.name = 'Angel of Mercy'
SELECT COUNT(id)  FROM cards  WHERE (status = 'restricted'  AND text IS NOT NULL)
SELECT T1.description FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Condemn' AND T1.language = 'English'
SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isStarter = 1
SELECT status FROM legalities AS l INNER JOIN cards AS c ON l.uuid = c.uuid WHERE c.name = 'Cloudchaser Eagle'
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT name FROM cards WHERE name = 'Benalish Knight'
SELECT T1.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Phyrexian' AND T2.artist IS NOT NULL
SELECT CAST(SUM(IIF(T2.bordercolor IS NULL OR T2.bordercolor = '' OR T2.bordercolor = 'none', 1, 0)) AS REAL) * 100 / COUNT(T2.bordercolor) AS percentage_of_borderless_cards FROM sqlite_sequence AS T1 INNER JOIN cards AS T2 ON T1.name = T2.name
SELECT COUNT(*) FROM cards WHERE language = 'German'
SELECT COUNT(*) FROM cards AS t1 JOIN sets AS t2 ON t1.setCode = t2.code WHERE t2.name = 'Khans of Tarkir' AND t1.borderColor = 'black'
SELECT CAST(COUNT(CASE WHEN T1.language = 'French' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.uuid = T3.uuid WHERE T2.format = 'Story Spotlight'
SELECT COUNT(id) FROM cards WHERE toughness = 99
SELECT name FROM cards WHERE illustrator = 'Aaron Boyd'
SELECT COUNT(T1.cardKingdomFoilId) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'black' AND T2.format = 'mtgo' AND T2.status = 'not_legal'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(T1.subtypes) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.originalType = 'Summon - Angel' AND T2.subtype != 'Angel'
SELECT T1.id FROM cards AS T1 INNER JOIN cards AS T2 ON T1.artist = T2.artist WHERE T1.hasFoil = 1 AND T2.hasNonFoil = 1
SELECT T2.id FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Theros Heroes'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'zh-CN'
SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.language = 'Japanese' AND T2.availability = 'Paper'
SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.code WHERE T2.borderColor = 'W'
SELECT uuid FROM cards WHERE format = 'legacy'
SELECT ruling FROM rulings WHERE TEXT LIKE "%Beacon of Immortality%"
SELECT T2.status, COUNT(T1.uuid)  FROM cards AS T1  JOIN legalities AS T2 ON T2.uuid = T1.uuid  WHERE T1.frameVersion = 'Future'  GROUP BY T2.status
SELECT name FROM cards WHERE setCode = 'OGW' AND colors IS NOT NULL
SELECT DISTINCT sets.code, sets.name, FOREIGN_DATA.flavorText, FOREIGN_DATA.language FROM FOREIGN_DATA JOIN cards ON FOREIGN_DATA.uuid = cards.uuid JOIN sets ON sets.code = cards.setCode WHERE cards.convertedManaCost = 5 AND cards.setCode = '10E' AND FOREIGN_DATA.language IS NOT NULL
SELECT T2.name, T3.date, T3.text FROM cards AS T1 INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT colors FROM cards WHERE id BETWEEN 1 AND 20
SELECT T1.name, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.status = 'Legal' AND T1.colors = '["B"]' AND T1.type LIKE '%Artifact%' ORDER BY T3.language
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3
SELECT COUNT(*) FROM cards AS t1 INNER JOIN cards AS t2 ON t1.uuid = t2.uuid WHERE t1.artist = 'John Avon' AND t1.name = t2.name AND t2.hasFoil = 0
SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND power IS NOT NULL
SELECT COUNT(T2.uuid) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Udon' AND T2.name = 'Udon';
SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T2.status = 'Legal' AND T2.format = 'Legacy' AND T1.frameVersion = '1993' AND T1.isTextless = 1
SELECT T1.manaCost FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.releaseDate LIKE '2003-%' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.availability = 'paper' OR T1.availability = 'mtgo'
SELECT COUNT(id) FROM cards WHERE artist = 'Rob Alexander'
